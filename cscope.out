cscope 15 $HOME/umang/filer-share/umang.patel/libibverbs_MLNXOFED_source               0001622485
	@libibverbs-41mlnx1/examples/asyncwatch.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<ídün.h
>

39 
	~<byãsw≠.h
>

40 
	~<gë›t.h
>

41 
	~<°rög.h
>

43 
	~<öföib™d/vîbs.h
>

45 c⁄° *
	$evít_«me_°r
(
ibv_evít_ty≥
 
evít_ty≥
)

47 
evít_ty≥
) {

48 
IBV_EVENT_DEVICE_FATAL
:

50 
IBV_EVENT_PORT_ACTIVE
:

52 
IBV_EVENT_PORT_ERR
:

54 
IBV_EVENT_LID_CHANGE
:

56 
IBV_EVENT_PKEY_CHANGE
:

58 
IBV_EVENT_SM_CHANGE
:

60 
IBV_EVENT_CLIENT_REREGISTER
:

62 
IBV_EVENT_GID_CHANGE
:

65 
IBV_EVENT_CQ_ERR
:

66 
IBV_EVENT_QP_FATAL
:

67 
IBV_EVENT_QP_REQ_ERR
:

68 
IBV_EVENT_QP_ACCESS_ERR
:

69 
IBV_EVENT_COMM_EST
:

70 
IBV_EVENT_SQ_DRAINED
:

71 
IBV_EVENT_PATH_MIG
:

72 
IBV_EVENT_PATH_MIG_ERR
:

73 
IBV_EVENT_SRQ_ERR
:

74 
IBV_EVENT_SRQ_LIMIT_REACHED
:

75 
IBV_EVENT_QP_LAST_WQE_REACHED
:

79 
	}
}

81 
	$ußge
(c⁄° *
¨gv0
)

83 
	`¥ötf
("Usage:\n");

84 
	`¥ötf
(" %† sèπá¿asyncw©chÖro˚ss\n", 
¨gv0
);

85 
	`¥ötf
("\n");

86 
	`¥ötf
("Options:\n");

87 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

88 
	}
}

90 
	$maö
(
¨gc
, *
¨gv
[])

92 
ibv_devi˚
 **
dev_li°
;

93 
ibv_c⁄ãxt
 *
c⁄ãxt
;

94 
ibv_async_evít
 
evít
;

95 *
ib_dev«me
 = 
NULL
;

96 
i
 = 0;

99 
	`£tvbuf
(
°dout
, 
NULL
, 
_IOLBF
, 0);

102 
c
;

103 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

104 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

105 { .
«me
 = "hñp", .
has_¨g
 = 0, .
vÆ
 = 'h' },

108 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "d:h", 
l⁄g_›ti⁄s
, 
NULL
);

109 i‡(
c
 == -1)

111 
c
) {

113 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

118 
	`ußge
(
¨gv
[0]);

122 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

123 i‡(!
dev_li°
) {

124 
	`≥º‹
("FailedÅo get IB devicesÜist");

127 i‡(
ib_dev«me
) {

128 ; 
dev_li°
[
i
]; ++i) {

129 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

134 i‡(!
dev_li°
[
i
]) {

135 
	`Ârötf
(
°dîr
, "IB device %sÇot found\n",

136 
ib_dev«me
 ? ib_devname : "");

140 
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
dev_li°
[
i
]);

141 i‡(!
c⁄ãxt
) {

142 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

143 
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]));

147 
	`¥ötf
("%s:ásyncÉvent FD %d\n",

148 
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
c⁄ãxt
->
async_fd
);

151 i‡(
	`ibv_gë_async_evít
(
c⁄ãxt
, &
evít
))

154 
	`¥ötf
("Évent_type %s (%d),Öort %d\n",

155 
	`evít_«me_°r
(
evít
.
evít_ty≥
),

156 
evít
.
evít_ty≥
,Évít.
ñemít
.
p‹t_num
);

158 
	`ibv_ack_async_evít
(&
evít
);

162 
	}
}

	@libibverbs-41mlnx1/examples/cc_pingpong.c

6 #i‡
HAVE_CONFIG_H


7 
	~<c⁄fig.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<öây≥s.h
>

14 
	~<°rög.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/sockë.h
>

17 
	~<sys/time.h
>

18 
	~<√tdb.h
>

19 
	~<mÆloc.h
>

20 
	~<gë›t.h
>

21 
	~<¨∑/öë.h
>

22 
	~<time.h
>

23 
	~<m©h.h
>

24 
	~<öföib™d/¨ch.h
>

26 
	~"cc_pögp⁄g.h
"

29 
	#MAX
(
x
, 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

30 
	#MIN
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

31 
	#LAMBDA
 (0.00001)

	)

33 
	#EXEC_INT
(
ˇlc_›
, 
›1
, 
›2
) \

34 ((
ˇlc_›
Ë=
PP_CALC_LXOR
 ? ((!(
›1
Ë&& (
›2
)) || ((op1) && !(op2))) \

35 : (
ˇlc_›
Ë=
PP_CALC_BXOR
 ? (((
›1
Ë^ (
›2
))) \

36 : (
ˇlc_›
Ë=
PP_CALC_LOR
 ? (((
›1
Ë|| (
›2
))) \

37 : (
ˇlc_›
Ë=
PP_CALC_BOR
 ? (((
›1
Ë| (
›2
))) \

38 : (
ˇlc_›
Ë=
PP_CALC_LAND
 ? (((
›1
Ë&& (
›2
))) \

39 : (
ˇlc_›
Ë=
PP_CALC_BAND
 ? (((
›1
Ë& (
›2
))) \

40 : 
	`EXEC_FLOAT
(
ˇlc_›
, 
›1
, 
›2
))

	)

42 
	#EXEC_FLOAT
(
ˇlc_›
, 
›1
, 
›2
) \

43 ((
ˇlc_›
Ë=
PP_CALC_ADD
 ? (((
›1
Ë+ (
›2
))) \

44 : (
ˇlc_›
Ë=
PP_CALC_MAX
 ? (
	`MAX
((
›1
), (
›2
))) \

45 : (
ˇlc_›
Ë=
PP_CALC_MIN
 ? (
	`MIN
((
›1
), (
›2
))) \

46 : (
ˇlc_›
Ë=
PP_CALC_MAXLOC
 ? (
	`MAX
((
›1
), (
›2
))) \

47 : (
ˇlc_›
Ë=
PP_CALC_MINLOC
 ? (
	`MIN
((
›1
), (
›2
))) \

48 : 0)

	)

50 
	#VERIFY_FLOAT
(
ˇlc_›
, 
d©a_ty≥
, 
›1
, 
›2
, 
ªs
) \

51 ((
ˇlc_›
Ë=
PP_CALC_ADD
 ? \

52 ((
	`Ábs
((
d©a_ty≥
)
	`EXEC_FLOAT
(
ˇlc_›
, 
›1
, 
›2
Ë- (
ªs
))Ë< 
LAMBDA
)\

53 : (((
d©a_ty≥
)
	`EXEC_FLOAT
(
ˇlc_›
, 
›1
, 
›2
)Ë=(
ªs
))) \

54 

	)

56 
	#VERIFY_INT
(
ˇlc_›
, 
d©a_ty≥
, 
›1
, 
›2
, 
ªs
) \

57 (((
d©a_ty≥
)
	`EXEC_INT
(
ˇlc_›
, 
›1
, 
›2
)Ë=(
ªs
))

	)

60 
	#EXEC_VER_FLOAT
(
vîify
, 
ˇlc_›
, 
d©a_ty≥
, 
›1
, 
›2
, 
ªs
) \

61 ((
vîify
) ? \

62 (
	`VERIFY_FLOAT
(
ˇlc_›
, 
d©a_ty≥
, (*(d©a_ty≥ *)
›1
), \

63 (*(
d©a_ty≥
 *)
›2
), (*(d©a_ty≥ *)
ªs
))) \

64 : (
d©a_ty≥
)
	`EXEC_FLOAT
(
ˇlc_›
, (*(d©a_ty≥ *)
›1
), (*(d©a_ty≥ *)
›2
)))

	)

66 
	#EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
d©a_ty≥
, 
›1
, 
›2
, 
ªs
) \

67 ((
vîify
) ? \

68 (
	`VERIFY_INT
(
ˇlc_›
, 
d©a_ty≥
, (*(d©a_ty≥ *)
›1
), \

69 (*(
d©a_ty≥
 *)
›2
), (*(d©a_ty≥ *)
ªs
))) \

70 : (
d©a_ty≥
)
	`EXEC_INT
(
ˇlc_›
, (*(d©a_ty≥ *)
›1
), (*(d©a_ty≥ *)
›2
)))

	)

73 
	#EXEC_VERIFY
(
ˇlc_d©a_ty≥
, 
ˇlc_›
, 
vîify
, 
›1
, 
›2
, 
ªs
) \

74 ((
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_INT8
 ? \

75 
	`EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
öt8_t
, 
›1
, 
›2
, 
ªs
) \

76 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_INT16
 ? \

77 
	`EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
öt16_t
, 
›1
, 
›2
, 
ªs
) \

78 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_INT32
 ? \

79 
	`EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
öt32_t
, 
›1
, 
›2
, 
ªs
) \

80 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_INT64
 ? \

81 
	`EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
öt64_t
, 
›1
, 
›2
, 
ªs
) \

82 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_UINT8
 ? \

83 
	`EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
uöt8_t
, 
›1
, 
›2
, 
ªs
) \

84 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_UINT16
 ? \

85 
	`EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
uöt16_t
, 
›1
, 
›2
, 
ªs
) \

86 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_UINT32
 ? \

87 
	`EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
uöt32_t
, 
›1
, 
›2
, 
ªs
) \

88 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_UINT64
 ? \

89 
	`EXEC_VER_INT
(
vîify
, 
ˇlc_›
, 
uöt64_t
, 
›1
, 
›2
, 
ªs
) \

90 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_FLOAT32
 ? \

91 
	`EXEC_VER_FLOAT
(
vîify
, 
ˇlc_›
, , 
›1
, 
›2
, 
ªs
) \

92 : (
ˇlc_d©a_ty≥
Ë=
PP_DATA_TYPE_FLOAT64
 ? \

93 
	`EXEC_VER_FLOAT
(
vîify
, 
ˇlc_›
, 
FLOAT64
, 
›1
, 
›2
, 
ªs
) \

94 : 0)

	)

97 
	mPP_RECV_WRID
 = 1,

98 
	mPP_SEND_WRID
 = 2,

99 
	mPP_CQE_WAIT
 = 3,

102 *
	gwr_id_°r
[] = {

103 [
PP_RECV_WRID
] = "RECV",

104 [
PP_SEND_WRID
] = "SEND",

105 [
PP_CQE_WAIT
] = "CQE_WAIT",

108 
	g∑ge_size
;

110 
	spögp⁄g_ˇlc_˘x
 {

111 
µ_wr_ˇlc_›
 
	möô_›code
;

112 
µ_wr_d©a_ty≥
 
	möô_d©a_ty≥
;

113 
ibv_exp_ˇlc_›
 
	m›code
;

114 
ibv_exp_ˇlc_d©a_ty≥
 
	md©a_ty≥
;

115 
ibv_exp_ˇlc_d©a_size
 
	md©a_size
;

116 *
	mg©hî_buff
;

117 
	mg©hî_li°_size
;

118 
ibv_sge
 *
	mg©hî_li°
;

121 
	spögp⁄g_c⁄ãxt
 {

122 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

123 
ibv_comp_ch™√l
 *
	mch™√l
;

124 
ibv_pd
 *
	mpd
;

125 
ibv_mr
 *
	mmr
;

126 
ibv_cq
 *
	mcq
;

127 
ibv_qp
 *
	mqp
;

129 
ibv_qp
 *
	mmqp
;

130 
ibv_cq
 *
	mmcq
;

132 *
	mbuf
;

133 *
	m√t_buf
;

134 
	msize
;

135 
	mrx_dïth
;

136 
	m≥ndög
;

137 
uöt64_t
 
	mœ°_ªsu…
;

139 
pögp⁄g_ˇlc_˘x
 
	mˇlc_›
;

141 
	mu£_grh
;

142 
	mgid_ödex
;

143 
ibv_gid
 
	mdgid
;

146 
	spögp⁄g_de°
 {

147 
	mlid
;

148 
	mq≤
;

149 
	mp¢
;

152 
	$µ_¥ï¨e_√t_buff
(
do_√g
,

153 
µ_wr_d©a_ty≥
 
ty≥
,

154 c⁄° *
ö_buff
, *
√t_buff
,

155 
ibv_exp_ˇlc_d©a_ty≥
 *
out_ty≥
,

156 
ibv_exp_ˇlc_d©a_size
 *
out_size
)

158 
to_mu…
 = (
do_√g
 ? -1 : 1);

159 
rc
 = 0;

161 *
out_size
 = 
IBV_EXP_CALC_DATA_SIZE_64_BIT
;

163 
ty≥
) {

164 
PP_DATA_TYPE_INT8
:

165 *(
uöt64_t
 *)
√t_buff
 = *(
uöt8_t
 *)
ö_buff
 * 
to_mu…
;

166 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_INT
;

169 
PP_DATA_TYPE_UINT8
:

170 *(
uöt64_t
 *)
√t_buff
 = *(
uöt8_t
 *)
ö_buff
 * 
to_mu…
;

171 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_UINT
;

174 
PP_DATA_TYPE_INT16
:

175 *(
uöt64_t
 *)
√t_buff
 = *(
uöt16_t
 *)
ö_buff
 * 
to_mu…
;

176 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_INT
;

179 
PP_DATA_TYPE_UINT16
:

180 *(
uöt64_t
 *)
√t_buff
 = *(
uöt16_t
 *)
ö_buff
 * 
to_mu…
;

181 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_UINT
;

184 
PP_DATA_TYPE_INT32
:

185 *(
uöt64_t
 *)
√t_buff
 = *(
uöt32_t
 *)
ö_buff
 * 
to_mu…
;

186 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_INT
;

189 
PP_DATA_TYPE_UINT32
:

190 *(
uöt64_t
 *)
√t_buff
 = *(
uöt32_t
 *)
ö_buff
 * 
to_mu…
;

191 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_UINT
;

194 
PP_DATA_TYPE_INT64
:

195 *(
uöt64_t
 *)
√t_buff
 = *(uöt64_à*)
ö_buff
 * 
to_mu…
;

196 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_INT
;

199 
PP_DATA_TYPE_UINT64
:

200 *(
uöt64_t
 *)
√t_buff
 = *(uöt64_à*)
ö_buff
 * 
to_mu…
;

201 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_UINT
;

204 
PP_DATA_TYPE_FLOAT32
:

205 *(*)
√t_buff
 = ()(*(*)
ö_buff
 * ()
to_mu…
);

206 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_FLOAT
;

209 
PP_DATA_TYPE_FLOAT64
:

210 *(*)
√t_buff
 = *(*)
ö_buff
 * ()
to_mu…
;

211 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_FLOAT
;

215 
	`Ârötf
(
°dîr
, "övÆid d©®ty≥ %d\n", 
ty≥
);

216 
rc
 = 
EINVAL
;

219  
rc
;

220 
	}
}

222 
ölöe
 
	$µ_¥ï¨e_ho°_buff
(
do_√g
,

223 
µ_wr_d©a_ty≥
 
ty≥
,

224 c⁄° *
ö_buff
, *
ho°_buff
)

227 
uöt64_t
 
Œ
;

228 
lf
;

229 } 
tmp_buff
;

230 
to_mu…
 = (
do_√g
 ? -1 : 1);

231 
rc
 = 0;

234 
tmp_buff
.
Œ
 = 
	`¡ohŒ
(*(
uöt64_t
 *)
ö_buff
Ë* 
to_mu…
;

236 
ty≥
) {

237 
PP_DATA_TYPE_INT8
:

238 
PP_DATA_TYPE_UINT8
:

239 *(
uöt8_t
 *)
ho°_buff
 = (uöt8_t)
tmp_buff
.
Œ
;

242 
PP_DATA_TYPE_INT16
:

243 
PP_DATA_TYPE_UINT16
:

244 *(
uöt16_t
 *)
ho°_buff
 = (uöt16_t)
tmp_buff
.
Œ
;

247 
PP_DATA_TYPE_INT32
:

248 
PP_DATA_TYPE_UINT32
:

249 *(
uöt32_t
 *)
ho°_buff
 = (uöt32_t)
tmp_buff
.
Œ
;

252 
PP_DATA_TYPE_INT64
:

253 
PP_DATA_TYPE_UINT64
:

254 *(
uöt64_t
 *)
ho°_buff
 = (uöt64_t)
tmp_buff
.
Œ
;

257 
PP_DATA_TYPE_FLOAT32
:

258 *(*)
ho°_buff
 = ()
tmp_buff
.
lf
;

261 
PP_DATA_TYPE_FLOAT64
:

262 *(*)
ho°_buff
 = ()
tmp_buff
.
lf
;

266 
	`Ârötf
(
°dîr
, "övÆid d©®ty≥ %d\n", 
ty≥
);

267 
rc
 = 
EINVAL
;

270  
rc
;

271 
	}
}

273 
	sˇlc_∑ck_öput
 {

274 
µ_wr_ˇlc_›
 
	m›
;

275 
µ_wr_d©a_ty≥
 
	mty≥
;

276 c⁄° *
	mho°_buf
;

277 
uöt64_t
 
	mid
;

278 
ibv_exp_ˇlc_›
 *
	mout_›
;

279 
ibv_exp_ˇlc_d©a_ty≥
 *
	mout_ty≥
;

280 
ibv_exp_ˇlc_d©a_size
 *
	mout_size
;

281 *
	m√t_buf
;

284 
	sˇlc_u≈ack_öput
 {

285 
µ_wr_ˇlc_›
 
	m›
;

286 
µ_wr_d©a_ty≥
 
	mty≥
;

287 c⁄° *
	m√t_buf
;

288 
uöt64_t
 *
	mid
;

289 *
	mho°_buf
;

298 
	$µ_∑ck_d©a_f‹_ˇlc
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

299 
ˇlc_∑ck_öput
 *
∑øms
)

301 
µ_wr_ˇlc_›
 
›
;

302 
µ_wr_d©a_ty≥
 
ty≥
;

303 c⁄° *
ho°_buf„r
;

304 
uöt64_t
 
id
;

305 
ibv_exp_ˇlc_›
 *
out_›
;

306 
ibv_exp_ˇlc_d©a_ty≥
 *
out_ty≥
;

307 
ibv_exp_ˇlc_d©a_size
 *
out_size
;

308 *
√tw‹k_buf„r
;

309 
do_√g
 = 0;

310 
c⁄v_›_to_bö
 = 0;

313 i‡(!
c⁄ãxt
 ||

314 !
∑øms
 ||

315 !
∑øms
->
ho°_buf
 ||

316 !
∑øms
->
√t_buf
 ||

317 !
∑øms
->
out_›
 ||

318 !
∑øms
->
out_ty≥
 ||

319 !
∑øms
->
out_size
 ||

320 
∑øms
->
ty≥
 =
PP_DATA_TYPE_INVALID
 ||

321 
∑øms
->
›
 =
PP_CALC_INVALID
)

322  
EINVAL
;

325 i‡((
uöçå_t
)(
∑øms
->
√t_buf
) % 16) {

326 
	`Ârötf
(
°dîr
, "network buffer must be 16Báligned\n");

327  
EINVAL
;

330 
›
 = 
∑øms
->op;

331 
ty≥
 = 
∑øms
->type;

332 
ho°_buf„r
 = 
∑øms
->
ho°_buf
;

333 
id
 = 
∑øms
->id;

334 
out_›
 = 
∑øms
->out_op;

335 
out_ty≥
 = 
∑øms
->out_type;

336 
out_size
 = 
∑øms
->out_size;

337 
√tw‹k_buf„r
 = 
∑øms
->
√t_buf
;

339 *
out_›
 = 
IBV_EXP_CALC_OP_NUMBER
;

340 *
out_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_NUMBER
;

341 *
out_size
 = 
IBV_EXP_CALC_DATA_SIZE_NUMBER
;

343 
›
) {

344 
PP_CALC_LXOR
:

345 *
out_›
 = 
IBV_EXP_CALC_OP_BXOR
;

346 
c⁄v_›_to_bö
 = 1;

349 
PP_CALC_LOR
:

350 *
out_›
 = 
IBV_EXP_CALC_OP_BOR
;

351 
c⁄v_›_to_bö
 = 1;

354 
PP_CALC_LAND
:

355 *
out_›
 = 
IBV_EXP_CALC_OP_BAND
;

356 
c⁄v_›_to_bö
 = 1;

359 
PP_CALC_MIN
:

360 *
out_›
 = 
IBV_EXP_CALC_OP_MAXLOC
;

361 
do_√g
 = 1;

364 
PP_CALC_BXOR
:

365 *
out_›
 = 
IBV_EXP_CALC_OP_BXOR
;

368 
PP_CALC_BOR
:

369 *
out_›
 = 
IBV_EXP_CALC_OP_BOR
;

372 
PP_CALC_BAND
:

373 *
out_›
 = 
IBV_EXP_CALC_OP_BAND
;

376 
PP_CALC_ADD
:

377 *
out_›
 = 
IBV_EXP_CALC_OP_ADD
;

380 
PP_CALC_MAX
:

381 *
out_›
 = 
IBV_EXP_CALC_OP_MAXLOC
;

384 
PP_CALC_MAXLOC
:

385 
PP_CALC_MINLOC
:

386 
PP_CALC_PROD
:

387 
PP_CALC_INVALID
:

389 
	`Ârötf
(
°dîr
, "unsuµ‹ãd o∞%d\n", 
›
);

390  
EINVAL
;

394 i‡(
	`µ_¥ï¨e_√t_buff
(
do_√g
, 
ty≥
, 
ho°_buf„r
, 
√tw‹k_buf„r
, 
out_ty≥
, 
out_size
))

395  
EINVAL
;

398 i‡(
c⁄v_›_to_bö
)

399 *(
uöt64_t
 *)
√tw‹k_buf„r
 = !!(*(uint64_t *)network_buffer);

402 *(
uöt64_t
 *)
√tw‹k_buf„r
 = 
	`ht⁄Œ
(*(uint64_t *)network_buffer);

405 i‡(
›
 =
PP_CALC_MINLOC
 || o∞=
PP_CALC_MAXLOC
)

406 *(
uöt64_t
 *)((*)
√tw‹k_buf„r
 + 8Ë
	`ht⁄Œ
(
id
);

409 
	}
}

415 
	$µ_u≈ack_d©a_‰om_ˇlc
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

416 
ˇlc_u≈ack_öput
 *
∑øms
)

418 
µ_wr_ˇlc_›
 
›
;

419 
µ_wr_d©a_ty≥
 
ty≥
;

420 c⁄° *
√tw‹k_buf„r
;

421 
uöt64_t
 *
id
;

422 *
ho°_buf„r
;

423 
do_√g
 = 0;

425 i‡(!
c⁄ãxt
 ||

426 !
∑øms
 ||

427 !
∑øms
->
√t_buf
 ||

428 !
∑øms
->
ho°_buf
 ||

429 
∑øms
->
ty≥
 =
PP_DATA_TYPE_INVALID
 ||

430 
∑øms
->
›
 =
PP_CALC_INVALID
)

431  
EINVAL
;

433 
›
 = 
∑øms
->op;

434 
ty≥
 = 
∑øms
->type;

435 
√tw‹k_buf„r
 = 
∑øms
->
√t_buf
;

436 
id
 = 
∑øms
->id;

437 
ho°_buf„r
 = 
∑øms
->
ho°_buf
;

440 i‡((
›
 =
PP_CALC_MIN
Ë|| (› =
PP_CALC_MINLOC
))

441 
do_√g
 = 1;

444 i‡(
	`µ_¥ï¨e_ho°_buff
(
do_√g
, 
ty≥
, 
√tw‹k_buf„r
, 
ho°_buf„r
))

445  
EINVAL
;

448 i‡(
›
 =
PP_CALC_MINLOC
 || o∞=
PP_CALC_MAXLOC
) {

449 i‡(
id
)

450 *
id
 = 
	`¡ohŒ
(*(
uöt64_t
 *)((*)
√tw‹k_buf„r
 + 8));

452  
EINVAL
;

456 
	}
}

459 
	$µ_c⁄√˘_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
,

460 
ibv_qp
 *
qp
,

461 
p‹t
,

462 
my_p¢
,

463 
ibv_mtu
 
mtu
,

464 
¶
,

465 
pögp⁄g_de°
 *
de°
)

467 
ibv_qp_©å
 
©å
 = {

468 .
qp_°©e
 = 
IBV_QPS_RTR
,

469 .
∑th_mtu
 = 
mtu
,

470 .
de°_qp_num
 = 
de°
->
q≤
,

471 .
rq_p¢
 = 
de°
->
p¢
,

472 .
max_de°_rd_©omic
 = 1,

473 .
mö_∫r_timî
 = 12,

474 .
ah_©å
 = {

475 .
is_globÆ
 = !!
˘x
->
u£_grh
,

476 .
dlid
 = 
de°
->
lid
,

477 .
¶
 = sl,

478 .
§c_∑th_bôs
 = 0,

479 .
p‹t_num
 = 
p‹t
,

482 i‡(
˘x
->
u£_grh
) {

483 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
˘x
->
gid_ödex
;

484 
©å
.
ah_©å
.
grh
.
h›_limô
 = 1;

485 
©å
.
ah_©å
.
grh
.
dgid
 = 
˘x
->dgid;

488 i‡(
	`ibv_modify_qp
(
qp
, &
©å
,

489 
IBV_QP_STATE
 |

490 
IBV_QP_AV
 |

491 
IBV_QP_PATH_MTU
 |

492 
IBV_QP_DEST_QPN
 |

493 
IBV_QP_RQ_PSN
 |

494 
IBV_QP_MAX_DEST_RD_ATOMIC
 |

495 
IBV_QP_MIN_RNR_TIMER
)) {

496 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

500 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

501 
©å
.
timeout
 = 14;

502 
©å
.
ªåy_˙t
 = 7;

503 
©å
.
∫r_ªåy
 = 7;

504 
©å
.
sq_p¢
 = 
my_p¢
;

505 
©å
.
max_rd_©omic
 = 1;

506 i‡(
	`ibv_modify_qp
(
qp
, &
©å
,

507 
IBV_QP_STATE
 |

508 
IBV_QP_TIMEOUT
 |

509 
IBV_QP_RETRY_CNT
 |

510 
IBV_QP_RNR_RETRY
 |

511 
IBV_QP_SQ_PSN
 |

512 
IBV_QP_MAX_QP_RD_ATOMIC
)) {

513 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

518 
	}
}

520 
pögp⁄g_de°
 *
	$µ_˛õ¡_exch_de°
(c⁄° *
£rvî«me
,

521 
p‹t
,

522 c⁄° 
pögp⁄g_de°
 *
my_de°
)

524 
addröfo
 *
ªs
, *
t
;

525 
addröfo
 
höts
 = {

526 .
ai_Ámûy
 = 
AF_UNSPEC
,

527 .
ai_sockty≥
 = 
SOCK_STREAM


529 *
£rvi˚
;

530 
msg
[ "0000:000000:000000"];

531 
n
;

532 
sockfd
 = -1;

533 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

535 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

536  
NULL
;

538 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

539 i‡(
n
 < 0) {

540 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

541 
	`‰ì
(
£rvi˚
);

542  
NULL
;

545 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

546 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

547 i‡(
sockfd
 >= 0) {

548 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

550 
	`˛o£
(
sockfd
);

551 
sockfd
 = -1;

555 
	`‰ìaddröfo
(
ªs
);

556 
	`‰ì
(
£rvi˚
);

558 i‡(
sockfd
 < 0) {

559 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

560  
NULL
;

563 
	`•rötf
(
msg
, "%04x:%06x:%06x", 
my_de°
->
lid
, my_de°->
q≤
, my_de°->
p¢
);

564 i‡(
	`wrôe
(
sockfd
, 
msg
,  msg) !=  msg) {

565 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

566 
out
;

569 i‡(
	`ªad
(
sockfd
, 
msg
,  msg) !=  msg) {

570 
	`≥º‹
("clientÑead");

571 
	`Ârötf
(
°dîr
, "Couldn'tÑeadÑemoteáddress\n");

572 
out
;

575 if(
	`wrôe
(
sockfd
, "done", ("done")) != ("done")) {

576 
	`Ârötf
(
°dîr
, "Couldn't send \"done\" msg\n");

577 
out
;

581 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

582 i‡(!
ªm_de°
)

583 
out
;

585 
	`ssˇnf
(
msg
, "%x:%x:%x", &
ªm_de°
->
lid
, &ªm_de°->
q≤
, &ªm_de°->
p¢
);

587 
out
:

588 
	`˛o£
(
sockfd
);

589  
ªm_de°
;

590 
	}
}

592 
pögp⁄g_de°
 *
	$µ_£rvî_exch_de°
(
pögp⁄g_c⁄ãxt
 *
˘x
,

593 
ib_p‹t
,

594 
ibv_mtu
 
mtu
,

595 
p‹t
,

596 
¶
,

597 c⁄° 
pögp⁄g_de°
 *
my_de°
)

599 
addröfo
 *
ªs
, *
t
;

600 
addröfo
 
höts
 = {

601 .
ai_Êags
 = 
AI_PASSIVE
,

602 .
ai_Ámûy
 = 
AF_UNSPEC
,

603 .
ai_sockty≥
 = 
SOCK_STREAM


605 *
£rvi˚
;

606 
msg
[ "0000:000000:000000"];

607 
n
;

608 
sockfd
 = -1, 
c⁄nfd
;

609 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

611 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

612  
NULL
;

614 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

616 i‡(
n
 < 0) {

617 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
p‹t
);

618 
	`‰ì
(
£rvi˚
);

619  
NULL
;

622 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

623 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

624 i‡(
sockfd
 >= 0) {

625 
n
 = 1;

627 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, Ç);

629 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

632 
	`˛o£
(
sockfd
);

633 
sockfd
 = -1;

637 
	`‰ìaddröfo
(
ªs
);

638 
	`‰ì
(
£rvi˚
);

640 i‡(
sockfd
 < 0) {

641 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

642  
NULL
;

645 
	`li°í
(
sockfd
, 1);

646 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

647 
	`˛o£
(
sockfd
);

649 i‡(
c⁄nfd
 < 0) {

650 
	`Ârötf
(
°dîr
, "accept() failed\n");

651  
NULL
;

654 
n
 = 
	`ªad
(
c⁄nfd
, 
msg
,  msg);

655 i‡(
n
 ! 
msg
) {

656 
	`≥º‹
("serverÑead");

657 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'tÑeadÑemoteáddress\n",

658 
n
, (Ë 
msg
);

659 
out
;

662 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

663 i‡(!
ªm_de°
)

664 
out
;

666 
	`ssˇnf
(
msg
, "%x:%x:%x", &
ªm_de°
->
lid
, &ªm_de°->
q≤
, &ªm_de°->
p¢
);

668 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, ctx->
qp
, 
ib_p‹t
, 
my_de°
->
p¢
, 
mtu
,

669 
¶
, 
ªm_de°
)) {

670 
	`Ârötf
(
°dîr
, "Couldn't connectÅoÑemote QP\n");

671 
	`‰ì
(
ªm_de°
);

672 
ªm_de°
 = 
NULL
;

673 
out
;

676 
	`•rötf
(
msg
, "%04x:%06x:%06x", 
my_de°
->
lid
, my_de°->
q≤
,

677 
my_de°
->
p¢
);

678 i‡(
	`wrôe
(
c⁄nfd
, 
msg
,  msg) !=  msg) {

679 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

680 
	`‰ì
(
ªm_de°
);

681 
ªm_de°
 = 
NULL
;

682 
out
;

686 i‡(
	`ªad
(
c⁄nfd
, 
msg
, (msg)) <= 0) {

687 
	`Ârötf
(
°dîr
, "Couldn'tÑead \"done\" msg\n");

688 
	`‰ì
(
ªm_de°
);

689 
ªm_de°
 = 
NULL
;

690 
out
;

693 
out
:

694 
	`˛o£
(
c⁄nfd
);

695  
ªm_de°
;

696 
	}
}

698 
	$µ_∑r£_ˇlc_to_g©hî
(*
›s_°r
,

699 
µ_wr_ˇlc_›
 
ˇlc_›
,

700 
µ_wr_d©a_ty≥
 
d©a_ty≥
,

701 
pögp⁄g_ˇlc_˘x
 *
ˇlc_˘x
,

702 
ibv_c⁄ãxt
 *
ibv_˘x
,

703 *
buff
,

704 *
√t_buff
)

706 
ˇlc_∑ck_öput
 
∑øms
;

707 
i
, 
num_›î™ds
;

708 *
__g©hî_tokí
, *
__îr_±r
 = 
NULL
;

710 i‡(!
›s_°r
) {

711 
	`Ârötf
(
°dîr
, "You must chooseán operationÅoÖerform.\n");

715 
ˇlc_˘x
->
öô_›code
 = 
ˇlc_›
;

716 
ˇlc_˘x
->
öô_d©a_ty≥
 = 
d©a_ty≥
;

717 
ˇlc_˘x
->
›code
 = 
IBV_EXP_CALC_OP_NUMBER
;

718 
ˇlc_˘x
->
d©a_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_NUMBER
;

719 
ˇlc_˘x
->
d©a_size
 = 
IBV_EXP_CALC_DATA_SIZE_NUMBER
;

721 
i
 = 0, 
num_›î™ds
 = 1; i < 
	`°æí
(
›s_°r
); i++) {

722 i‡(
›s_°r
[
i
] == ',')

723 
num_›î™ds
++;

726 
ˇlc_˘x
->
g©hî_li°_size
 = 
num_›î™ds
;

728 
__g©hî_tokí
 = 
	`°πok
(
›s_°r
, ",");

729 i‡(!
__g©hî_tokí
)

733 
i
 = 0; i < 
num_›î™ds
; i++) {

735 
d©a_ty≥
) {

736 
PP_DATA_TYPE_INT8
:

739 
PP_DATA_TYPE_INT16
:

742 
PP_DATA_TYPE_INT32
:

743 
PP_DATA_TYPE_UINT32
:

744 *((
öt32_t
 *)
buff
 + 
i
*4Ë
	`°πﬁ
(
__g©hî_tokí
, &
__îr_±r
, 0);

747 
PP_DATA_TYPE_INT64
:

748 
PP_DATA_TYPE_UINT64
:

749 *((
öt64_t
 *)
buff
 + 
i
*2Ë
	`°πﬁl
(
__g©hî_tokí
, &
__îr_±r
, 0);

752 
PP_DATA_TYPE_FLOAT32
:

753 *((*)
buff
 + 
i
*4Ë
	`°πof
(
__g©hî_tokí
, &
__îr_±r
);

756 
PP_DATA_TYPE_FLOAT64
:

757 *((
FLOAT64
 *)
buff
 + 
i
*2Ë
	`°πof
(
__g©hî_tokí
, &
__îr_±r
);

764 
	`mem£t
(&
∑øms
, 0, (params));

765 
∑øms
.
›
 = 
ˇlc_˘x
->
öô_›code
;

766 
∑øms
.
ty≥
 = 
ˇlc_˘x
->
öô_d©a_ty≥
;

767 
∑øms
.
ho°_buf
 = (
öt64_t
 *Ë
buff
 + 
i
 * 2;

768 
∑øms
.
id
 = 0;

769 
∑øms
.
out_›
 = &
ˇlc_˘x
->
›code
;

770 
∑øms
.
out_ty≥
 = &
ˇlc_˘x
->
d©a_ty≥
;

771 
∑øms
.
out_size
 = &
ˇlc_˘x
->
d©a_size
;

772 
∑øms
.
√t_buf
 = (
uöt64_t
 *Ë
√t_buff
 + 
i
 * 2;

774 i‡(
	`µ_∑ck_d©a_f‹_ˇlc
(
ibv_˘x
, &
∑øms
)) {

775 
	`Ârötf
(
°dîr
, "Error inÖack\n");

778 
__g©hî_tokí
 = 
	`°πok
(
NULL
, ",");

779 i‡(!
__g©hî_tokí
)

784 
ˇlc_˘x
->
g©hî_buff
 = 
√t_buff
;

786  
num_›î™ds
;

787 
	}
}

789 
	$µ_¥ï¨e_sg_li°
(
›_≥r_g©hî
,

790 
num_›î™ds
,

791 
uöt32_t
 
lkey
,

792 
pögp⁄g_ˇlc_˘x
 *
ˇlc_˘x
,

793 *
buff
)

795 
num_sge
, 
sz
;

796 
i
, 
g©hî_ix
;

797 
ibv_sge
 *
g©hî_li°
 = 
NULL
;

802 
sz
 = -1;

803 
sz
 = 
	`µ_ˇlc_d©a_size_to_byãs
(
ˇlc_˘x
->
d©a_size
);

804 
num_sge
 = (
num_›î™ds
 / 
›_≥r_g©hî
) + ((num_operands % op_per_gather) ? 1 : 0);

806 
g©hî_li°
 = 
	`ˇŒoc
(
num_sge
, (*gather_list));

807 i‡(!
g©hî_li°
) {

808 
	`Ârötf
(
°dîr
, "FailedÅoállocate %Zu bytes for gather_list\n",

809 (
num_sge
 * (*
g©hî_li°
)));

814 
i
 = 0, 
g©hî_ix
 = 0; i < 
num_›î™ds
; i++) {

815 i‡(!(
i
 % 
›_≥r_g©hî
)) {

816 
g©hî_li°
[
g©hî_ix
].
addr
 = (
uöt64_t
)(
uöçå_t
)
buff
 + ((
sz
 + 8Ë* 
i
);

817 
g©hî_li°
[
g©hî_ix
].
Àngth
 = (
sz
 + 8Ë* 
›_≥r_g©hî
;

818 
g©hî_li°
[
g©hî_ix
].
lkey
 =Ükey;

820 
g©hî_ix
++;

824 
ˇlc_˘x
->
g©hî_li°
 = gather_list;

827 
	}
}

829 
pögp⁄g_c⁄ãxt
 *
	$µ_öô_˘x
(
ibv_devi˚
 *
ib_dev
, 
size
,

830 
rx_dïth
, 
p‹t
, 
u£_evít
,

831 
µ_wr_ˇlc_›
 
ˇlc_›
,

832 
µ_wr_d©a_ty≥
 
ˇlc_d©a_ty≥
,

833 *
ˇlc_›î™ds_°r
)

835 
pögp⁄g_c⁄ãxt
 *
˘x
;

836 
rc
;

838 
˘x
 = 
	`mÆloc
( *ctx);

839 i‡(!
˘x
)

840  
NULL
;

841 
	`mem£t
(
˘x
, 0,  *ctx);

843 
˘x
->
size
 = size;

844 
˘x
->
rx_dïth
 =Ñx_depth;

846 
˘x
->
ˇlc_›
.
›code
 = 
IBV_EXP_CALC_OP_NUMBER
;

847 
˘x
->
ˇlc_›
.
d©a_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_NUMBER
;

848 
˘x
->
ˇlc_›
.
d©a_size
 = 
IBV_EXP_CALC_DATA_SIZE_NUMBER
;

850 
˘x
->
buf
 = 
	`memÆign
(
∑ge_size
, 
size
);

851 i‡(!
˘x
->
buf
) {

852 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

853 
˛ón_˘x
;

856 
	`mem£t
(
˘x
->
buf
, 0, 
size
);

858 
˘x
->
√t_buf
 = 
	`memÆign
(
∑ge_size
, 
size
);

859 i‡(!
˘x
->
√t_buf
) {

860 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

861 
˛ón_buf„r
;

863 
	`mem£t
(
˘x
->
√t_buf
, 0, 
size
);

865 
˘x
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
ib_dev
);

866 i‡(!
˘x
->
c⁄ãxt
) {

867 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

868 
	`ibv_gë_devi˚_«me
(
ib_dev
));

869 
˛ón_√t_buf
;

872 i‡(
u£_evít
) {

873 
˘x
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
(˘x->
c⁄ãxt
);

874 i‡(!
˘x
->
ch™√l
) {

875 
	`Ârötf
(
°dîr
, "Couldn't create completion channel\n");

876 
˛ón_devi˚
;

879 
˘x
->
ch™√l
 = 
NULL
;

881 
˘x
->
pd
 = 
	`ibv_Æloc_pd
(˘x->
c⁄ãxt
);

882 i‡(!
˘x
->
pd
) {

883 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

884 
˛ón_comp_ch™√l
;

887 
˘x
->
mr
 = 
	`ibv_ªg_mr
(˘x->
pd
, ctx->
√t_buf
, 
size
, 
IBV_ACCESS_LOCAL_WRITE
);

888 i‡(!
˘x
->
mr
) {

889 
	`Ârötf
(
°dîr
, "Couldn'tÑegister MR\n");

890 
˛ón_pd
;

893 i‡(
ˇlc_›
 !
PP_CALC_INVALID
) {

894 
›_≥r_g©hî
, 
num_›
, 
max_num_›
;

896 
˘x
->
ˇlc_›
.
›code
 = 
IBV_EXP_CALC_OP_NUMBER
;

897 
˘x
->
ˇlc_›
.
d©a_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_NUMBER
;

898 
˘x
->
ˇlc_›
.
d©a_size
 = 
IBV_EXP_CALC_DATA_SIZE_NUMBER
;

900 
num_›
 = 
	`µ_∑r£_ˇlc_to_g©hî
(
ˇlc_›î™ds_°r
, 
ˇlc_›
, 
ˇlc_d©a_ty≥
,

901 &
˘x
->
ˇlc_›
, ctx->
c⁄ãxt
, ctx->
buf
, ctx->
√t_buf
);

902 i‡(
num_›
 < 0) {

903 
	`Ârötf
(
°dîr
, "-E- failedÖarsing calc operators\n");

904 
˛ón_mr
;

907 
rc
 = 
	`µ_quîy_ˇlc_ˇp
(
˘x
->
c⁄ãxt
,

908 
˘x
->
ˇlc_›
.
›code
,

909 
˘x
->
ˇlc_›
.
d©a_ty≥
,

910 
˘x
->
ˇlc_›
.
d©a_size
,

911 &
›_≥r_g©hî
, &
max_num_›
);

912 i‡(
rc
) {

913 
	`Ârötf
(
°dîr
, "-E- operationÇot supported on %s. valid opsáre:\n",

914 
	`ibv_gë_devi˚_«me
(
ib_dev
));

916 
	`µ_¥öt_dev_ˇlc_›s
(
˘x
->
c⁄ãxt
);

917 
˛ón_mr
;

920 i‡(
	`µ_¥ï¨e_sg_li°
(
›_≥r_g©hî
, 
num_›
, 
˘x
->
mr
->
lkey
, &˘x->
ˇlc_›
, ctx->
√t_buf
)) {

921 
	`Ârötf
(
°dîr
, "-failedÅoÖrepareÅhe sgÜist\n");

922 
˛ón_mr
;

926 
˘x
->
cq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 
rx_dïth
 + 1, 
NULL
,

927 
˘x
->
ch™√l
, 0);

928 i‡(!
˘x
->
cq
) {

929 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

930 
˛ón_g©hî_li°
;

934 
ibv_exp_qp_öô_©å
 
©å
 = {

935 .
£nd_cq
 = 
˘x
->
cq
,

936 .
ªcv_cq
 = 
˘x
->
cq
,

937 .
ˇp
 = {

938 .
max_£nd_wr
 = 16,

939 .
max_ªcv_wr
 = 
rx_dïth
,

940 .
max_£nd_sge
 = 16,

941 .
max_ªcv_sge
 = 16

943 .
qp_ty≥
 = 
IBV_QPT_RC
,

944 .
pd
 = 
˘x
->pd

947 
©å
.
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 | 
IBV_EXP_QP_INIT_ATTR_PD
;

948 
©å
.
exp_¸óã_Êags
 = 
IBV_EXP_QP_CREATE_CROSS_CHANNEL
;

950 
˘x
->
qp
 = 
	`ibv_exp_¸óã_qp
(˘x->
c⁄ãxt
, &
©å
);

951 i‡(!
˘x
->
qp
) {

952 
	`Ârötf
(
°dîr
, "Couldn't create QP\n");

953 
˛ón_cq
;

958 
ibv_qp_©å
 
©å
 = {

959 .
qp_°©e
 = 
IBV_QPS_INIT
,

960 .
pkey_ödex
 = 0,

961 .
p‹t_num
 = 
p‹t
,

962 .
qp_ac˚ss_Êags
 = 0

965 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

966 
IBV_QP_STATE
 |

967 
IBV_QP_PKEY_INDEX
 |

968 
IBV_QP_PORT
 |

969 
IBV_QP_ACCESS_FLAGS
)) {

970 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

971 
˛ón_qp
;

976 
˘x
->
mcq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 
rx_dïth
 + 1, 
NULL
,

977 
˘x
->
ch™√l
, 0);

978 i‡(!
˘x
->
mcq
) {

979 
	`Ârötf
(
°dîr
, "Couldn't create CQ for MQP\n");

980 
˛ón_qp
;

984 
ibv_exp_qp_öô_©å
 
m©å
 = {

985 .
£nd_cq
 = 
˘x
->
mcq
,

986 .
ªcv_cq
 = 
˘x
->
mcq
,

987 .
ˇp
 = {

988 .
max_£nd_wr
 = 1,

989 .
max_ªcv_wr
 = 
rx_dïth
,

990 .
max_£nd_sge
 = 16,

991 .
max_ªcv_sge
 = 16

993 .
qp_ty≥
 = 
IBV_QPT_RC
,

994 .
pd
 = 
˘x
->pd

997 
m©å
.
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 | 
IBV_EXP_QP_INIT_ATTR_PD
;

998 
m©å
.
exp_¸óã_Êags
 = 
IBV_EXP_QP_CREATE_CROSS_CHANNEL
;

1000 
˘x
->
mqp
 = 
	`ibv_exp_¸óã_qp
(˘x->
c⁄ãxt
, &
m©å
);

1001 i‡(!
˘x
->
qp
) {

1002 
	`Ârötf
(
°dîr
, "Couldn't create MQP\n");

1003 
˛ón_mcq
;

1008 
ibv_qp_©å
 
m©å
 = {

1009 .
qp_°©e
 = 
IBV_QPS_INIT
,

1010 .
pkey_ödex
 = 0,

1011 .
p‹t_num
 = 
p‹t
,

1012 .
qp_ac˚ss_Êags
 = 0

1015 i‡(
	`ibv_modify_qp
(
˘x
->
mqp
, &
m©å
,

1016 
IBV_QP_STATE
 |

1017 
IBV_QP_PKEY_INDEX
 |

1018 
IBV_QP_PORT
 |

1019 
IBV_QP_ACCESS_FLAGS
)) {

1020 
	`Ârötf
(
°dîr
, "FailedÅo modify MQPÅo INIT\n");

1021 
˛ón_mqp
;

1025  
˘x
;

1027 
˛ón_mqp
:

1028 
	`ibv_de°roy_qp
(
˘x
->
mqp
);

1030 
˛ón_mcq
:

1031 
	`ibv_de°roy_cq
(
˘x
->
mcq
);

1033 
˛ón_qp
:

1034 
	`ibv_de°roy_qp
(
˘x
->
qp
);

1036 
˛ón_cq
:

1037 
	`ibv_de°roy_cq
(
˘x
->
cq
);

1039 
˛ón_g©hî_li°
:

1040 
	`‰ì
(
˘x
->
ˇlc_›
.
g©hî_li°
);

1042 
˛ón_mr
:

1043 
	`ibv_dîeg_mr
(
˘x
->
mr
);

1045 
˛ón_pd
:

1046 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

1048 
˛ón_comp_ch™√l
:

1049 i‡(
˘x
->
ch™√l
)

1050 
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
);

1052 
˛ón_devi˚
:

1053 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

1055 
˛ón_√t_buf
:

1056 
	`‰ì
(
˘x
->
√t_buf
);

1058 
˛ón_buf„r
:

1059 
	`‰ì
(
˘x
->
buf
);

1061 
˛ón_˘x
:

1062 
	`‰ì
(
˘x
);

1064  
NULL
;

1065 
	}
}

1067 
	$µ_˛o£_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
)

1069 i‡(
	`ibv_de°roy_qp
(
˘x
->
qp
)) {

1070 
	`Ârötf
(
°dîr
, "Couldn't destroy QP\n");

1075 i‡(
	`ibv_de°roy_qp
(
˘x
->
mqp
)) {

1076 
	`Ârötf
(
°dîr
, "Couldn't destroy MQP\n");

1081 i‡(
	`ibv_de°roy_cq
(
˘x
->
cq
)) {

1082 
	`Ârötf
(
°dîr
, "Couldn't destroy CQ\n");

1086 i‡(
	`ibv_de°roy_cq
(
˘x
->
mcq
)) {

1087 
	`Ârötf
(
°dîr
, "Couldn't destroy MCQ\n");

1091 
	`‰ì
(
˘x
->
ˇlc_›
.
g©hî_li°
);

1093 i‡(
	`ibv_dîeg_mr
(
˘x
->
mr
)) {

1094 
	`Ârötf
(
°dîr
, "Couldn't deregister MR\n");

1098 i‡(
	`ibv_dóŒoc_pd
(
˘x
->
pd
)) {

1099 
	`Ârötf
(
°dîr
, "Couldn't deallocate PD\n");

1103 i‡(
˘x
->
ch™√l
) {

1104 i‡(
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
)) {

1105 
	`Ârötf
(
°dîr
, "Couldn't destroy completion channel\n");

1110 i‡(
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
)) {

1111 
	`Ârötf
(
°dîr
, "Couldn'tÑelease context\n");

1114 
	`‰ì
(
˘x
->
buf
);

1115 
	`‰ì
(
˘x
->
√t_buf
);

1116 
	`‰ì
(
˘x
);

1119 
	}
}

1121 
	$µ_po°_ªcv
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
n
)

1123 
rc
;

1125 
ibv_sge
 
li°
 = {

1126 .
addr
 = (
uöçå_t
Ë
˘x
->
√t_buf
,

1127 .
Àngth
 = 
˘x
->
size
,

1128 .
lkey
 = 
˘x
->
mr
->lkey

1130 
ibv_ªcv_wr
 
wr
 = {

1131 .
wr_id
 = 
PP_RECV_WRID
,

1132 .
sg_li°
 = &
li°
,

1133 .
num_sge
 = 1,

1135 
ibv_ªcv_wr
 *
bad_wr
;

1136 
i
;

1138 
i
 = 0; i < 
n
; ++i) {

1139 
rc
 = 
	`ibv_po°_ªcv
(
˘x
->
qp
, &
wr
, &
bad_wr
);

1140 i‡(
rc
)

1141  
rc
;

1144  
i
;

1145 
	}
}

1147 
	$µ_po°_£nd
(
pögp⁄g_c⁄ãxt
 *
˘x
)

1149 
ªt
;

1151 
ibv_sge
 
li°
 = {

1152 .
addr
 = (
uöçå_t
Ë
˘x
->
√t_buf
,

1153 .
Àngth
 = 
˘x
->
size
,

1154 .
lkey
 = 
˘x
->
mr
->lkey

1156 
ibv_exp_£nd_wr
 
wr
 = {

1157 .
wr_id
 = 
PP_SEND_WRID
,

1158 .
sg_li°
 = &
li°
,

1159 .
num_sge
 = 1,

1160 .
exp_›code
 = 
IBV_EXP_WR_SEND
,

1161 .
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
,

1163 
ibv_exp_£nd_wr
 *
bad_wr
;

1165 i‡(
˘x
->
ˇlc_›
.
›code
 !
IBV_EXP_CALC_OP_NUMBER
) {

1166 
wr
.
exp_›code
 = 
IBV_EXP_WR_SEND
;

1167 
wr
.
exp_£nd_Êags
 |
IBV_EXP_SEND_WITH_CALC
;

1168 
wr
.
sg_li°
 = 
˘x
->
ˇlc_›
.
g©hî_li°
;

1169 
wr
.
num_sge
 = 
˘x
->
ˇlc_›
.
g©hî_li°_size
;

1171 
wr
.
›
.
ˇlc
.
ˇlc_›
 = 
˘x
->ˇlc_›.
›code
;

1172 
wr
.
›
.
ˇlc
.
d©a_ty≥
 = 
˘x
->
ˇlc_›
.data_type;

1173 
wr
.
›
.
ˇlc
.
d©a_size
 = 
˘x
->
ˇlc_›
.data_size;

1177 
ªt
 = 
	`ibv_exp_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

1179  
ªt
;

1180 
	}
}

1182 
	$µ_po°_ext_wqe
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
ibv_exp_wr_›code
 
›
)

1184 
ªt
;

1185 
ibv_exp_£nd_wr
 
wr
 = {

1186 .
wr_id
 = 
PP_CQE_WAIT
,

1187 .
sg_li°
 = 
NULL
,

1188 .
num_sge
 = 0,

1189 .
exp_›code
 = 
›
,

1190 .
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
,

1192 
ibv_exp_£nd_wr
 *
bad_wr
;

1194 
›
) {

1195 
IBV_EXP_WR_RECV_ENABLE
:

1196 
IBV_EXP_WR_SEND_ENABLE
:

1198 
wr
.
èsk
.
wqe_íabÀ
.
qp
 = 
˘x
->qp;

1199 
wr
.
èsk
.
wqe_íabÀ
.
wqe_cou¡
 = 0;

1201 
wr
.
exp_£nd_Êags
 |
IBV_EXP_SEND_WAIT_EN_LAST
;

1205 
IBV_EXP_WR_CQE_WAIT
:

1206 
wr
.
èsk
.
cqe_waô
.
cq
 = 
˘x
->cq;

1207 
wr
.
èsk
.
cqe_waô
.
cq_cou¡
 = 1;

1209 
wr
.
exp_£nd_Êags
 |
IBV_EXP_SEND_WAIT_EN_LAST
;

1214 
	`Ârötf
(
°dîr
, "-E- unsuµ‹ãd m_wqê›codê%d\n", 
›
);

1218 
ªt
 = 
	`ibv_exp_po°_£nd
(
˘x
->
mqp
, &
wr
, &
bad_wr
);

1220  
ªt
;

1221 
	}
}

1223 
	$µ_pﬁl_mcq
(
ibv_cq
 *
cq
, 
num_cqe
)

1225 
√
; 
i
;

1226 
ibv_wc
 
wc
[2];

1228 i‡(
num_cqe
 > 2) {

1229 
	`Ârötf
(
°dîr
, "-E- maxÇum cqeÉxceeded\n");

1234 
√
 = 
	`ibv_pﬁl_cq
(
cq
, 
num_cqe
, 
wc
);

1235 i‡(
√
 < 0) {

1236 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

1239 } 
√
 < 1);

1241 
i
 = 0; i < 
√
; ++i) {

1242 i‡(
wc
[
i
].
°©us
 !
IBV_WC_SUCCESS
) {

1243 
	`Ârötf
(
°dîr
, "Failed %s status %s (%d)\n",

1244 
wr_id_°r
[()
wc
[
i
].
wr_id
],

1245 
	`ibv_wc_°©us_°r
(
wc
[
i
].
°©us
),

1246 
wc
[
i
].
°©us
);

1250 i‡((Ë
wc
[
i
].
wr_id
 !
PP_CQE_WAIT
) {

1251 
	`Ârötf
(
°dîr
, "övÆid wr_id %" 
PRIx64
 "\n", 
wc
[
i
].
wr_id
);

1257 
	}
}

1259 
	$µ_ˇlc_vîify
(
pögp⁄g_c⁄ãxt
 *
˘x
,

1260 
µ_wr_d©a_ty≥
 
ˇlc_d©a_ty≥
,

1261 
µ_wr_ˇlc_›
 
ˇlc_›code
)

1263 
uöt64_t
 *
›1
 = &(
˘x
->
œ°_ªsu…
);

1264 
uöt64_t
 *
›2
 = (uöt64_à*)
˘x
->
buf
 + 2;

1265 
uöt64_t
 *
ªs
 = (uöt64_à*)
˘x
->
buf
;

1267  !
	`EXEC_VERIFY
(
ˇlc_d©a_ty≥
, 
ˇlc_›code
, 1, 
›1
, 
›2
, 
ªs
);

1268 
	}
}

1270 
	$µ_upd©e_œ°_ªsu…
(
pögp⁄g_c⁄ãxt
 *
˘x
,

1271 
µ_wr_d©a_ty≥
 
ˇlc_d©a_ty≥
,

1272 
µ_wr_ˇlc_›
 
ˇlc_›code
)

1275 
uöt64_t
 *
dummy
;

1277 
uöt64_t
 *
›1
 = (uöt64_à*)
˘x
->
buf
;

1278 
uöt64_t
 *
›2
 = (uöt64_à*)
˘x
->
buf
 + 2;

1279 
uöt64_t
 
ªs
 = (uöt64_t)
	`EXEC_VERIFY
(
ˇlc_d©a_ty≥
, 
ˇlc_›code
, 0, 
›1
, 
›2
, 
dummy
);

1281 
˘x
->
œ°_ªsu…
 = 
ªs
;

1283 
	}
}

1286 
	$ußge
(c⁄° *
¨gv0
)

1288 
	`¥ötf
("Usage:\n");

1289 
	`¥ötf
(" %s sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

1290 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

1291 
	`¥ötf
("\n");

1292 
	`¥ötf
("Options:\n");

1293 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

1294 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

1295 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

1296 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 4096 minimum 16)\n");

1297 
	`¥ötf
(" -m, --mtu=<size>Öath MTU (default 1024)\n");

1298 
	`¥ötf
(" -r, --rx-depth=<dep>Çumber ofÑeceivesÅoÖostátáÅime (default 500)\n");

1299 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchanges (default 1000)\n");

1300 
	`¥ötf
(" -l, --sl=<sl> serviceÜevel value\n");

1301 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

1302 
	`¥ötf
(" -c, --calc=<operation> calc operation\n");

1303 
	`¥ötf
(" -t, --op_type=<type> calc operandsÅype\n");

1304 
	`¥ötf
(" -o, --operands=<o1,o2,...> comma separatedÜist of operands\n");

1305 
	`¥ötf
(" -w, --wait_cq=cqn wait forÉntries on cq\n");

1306 
	`¥ötf
(" -v, --verboseÖrint verbose information\n");

1307 
	`¥ötf
(" -V, --verify verify calc operations\n");

1308 
	`¥ötf
(" -g, --gid-index gid index\n");

1309 
	`¥ötf
(" -G, --dgidÑemote gid, must be given if -g is used\n");

1310 
	}
}

1312 
	$maö
(
¨gc
, *
¨gv
[])

1314 
ibv_devi˚
 **
dev_li°
;

1315 
ibv_devi˚
 *
ib_dev
 = 
NULL
;

1316 
pögp⁄g_c⁄ãxt
 *
˘x
;

1317 
pögp⁄g_de°
 
my_de°
;

1318 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

1319 
timevÆ
 
°¨t
, 
íd
;

1320 *
ib_dev«me
 = 
NULL
;

1321 *
£rvî«me
 = 
NULL
;

1322 
p‹t
 = 18515;

1323 
ib_p‹t
 = 1;

1324 
size
 = 4096;

1326 
ibv_mtu
 
mtu
 = 
IBV_MTU_1024
;

1327 
rx_dïth
 = 500;

1328 
ôîs
 = 1000;

1329 
routs
;

1330 
num_cq_evíts
 = 0;

1331 
¶
 = 0;

1332 
r˙t
, 
s˙t
;

1333 
u£_evít
 = 0;

1334 
mqe_pﬁl
 = 0;

1335 
vîbo£
 = 0;

1336 
vîify
 = 0;

1338 
ˇlc_u≈ack_öput
 
∑øms
;

1340 
µ_wr_d©a_ty≥
 
ˇlc_d©a_ty≥
 = 
PP_DATA_TYPE_INVALID
;

1341 
µ_wr_ˇlc_›
 
ˇlc_›code
 = 
PP_CALC_INVALID
;

1342 *
ˇlc_›î™ds_°r
 = 
NULL
;

1343 
ibv_wc
 
wc
[2];

1344 
√
, 
i
, 
u£_grh
 = 0, 
ªt
 = 0, 
dgid_¥ovided
 = 0;

1345 
gid_ödex
 = 0;

1346 
ibv_gid
 
dgid
;

1348 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

1350 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1353 
c
;

1355 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

1356 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

1357 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

1358 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

1359 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

1360 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

1361 { .
«me
 = "rx-dïth", .
has_¨g
 = 1, .
vÆ
 = 'r' },

1362 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

1363 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

1364 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

1365 { .
«me
 = "ˇlc", .
has_¨g
 = 1, .
vÆ
 = 'c' },

1366 { .
«me
 = "›_ty≥", .
has_¨g
 = 1, .
vÆ
 = 't' },

1367 { .
«me
 = "›î™ds", .
has_¨g
 = 1, .
vÆ
 = 'o' },

1368 { .
«me
 = "pﬁl_mqe", .
has_¨g
 = 0, .
vÆ
 = 'w' },

1369 { .
«me
 = "vîbo£", .
has_¨g
 = 0, .
vÆ
 = 'v' },

1370 { .
«me
 = "vîify", .
has_¨g
 = 0, .
vÆ
 = 'V' },

1371 { .
«me
 = "gid-ödex", .
has_¨g
 = 1, .
vÆ
 = 'g' },

1372 { .
«me
 = "dgid", .
has_¨g
 = 1, .
vÆ
 = 'G' },

1376 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:m:r:n:l:ë:c:o:wfvVg:G:", 
l⁄g_›ti⁄s
, 
NULL
);

1377 i‡(
c
 == -1)

1380 
c
) {

1382 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1383 i‡(
p‹t
 < 0 ||Öort > 65535) {

1384 
	`ußge
(
¨gv
[0]);

1390 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

1394 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1395 i‡(
ib_p‹t
 < 0) {

1396 
	`ußge
(
¨gv
[0]);

1402 
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1403 i‡(
size
 < 16) {

1404 
	`ußge
(
¨gv
[0]);

1410 
mtu
 = 
	`µ_mtu_to_íum
(
	`°πﬁ
(
›èrg
, 
NULL
, 0));

1411 i‡(
mtu
 < 0) {

1412 
	`ußge
(
¨gv
[0]);

1418 
rx_dïth
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1422 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1426 
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1430 
vîbo£
 = 1;

1434 
vîify
 = 1;

1438 ++
u£_evít
;

1442 
ˇlc_d©a_ty≥
 = 
	`µ_°r_to_d©a_ty≥
(
›èrg
);

1443 i‡(
ˇlc_d©a_ty≥
 =
PP_DATA_TYPE_INVALID
) {

1444 
	`¥ötf
("-E- invalid dataÅypes. Valid valuesáre:\n");

1445 
	`µ_¥öt_d©a_ty≥
();

1451 
ˇlc_›î™ds_°r
 = 
	`°rdup
(
›èrg
);

1455 
ˇlc_›code
 = 
	`µ_°r_to_ˇlc_›
(
›èrg
);

1456 i‡(
ˇlc_›code
 =
PP_CALC_INVALID
) {

1457 
	`¥ötf
("-E- invalid dataÅypes. Valid valuesáre:\n");

1458 
	`µ_¥öt_ˇlc_›
();

1464 
mqe_pﬁl
 = 1;

1468 
gid_ödex
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1469 i‡(
gid_ödex
 < 0) {

1470 
	`ußge
(
¨gv
[0]);

1473 
u£_grh
 = 1;

1477 i‡(!
	`öë_±⁄
(
AF_INET6
, 
›èrg
, &
dgid
.
øw
)) {

1478 
	`¥ötf
("%pI6\n", 
›èrg
);

1479 
	`ußge
(
¨gv
[0]);

1482 
dgid_¥ovided
 = 1;

1486 
	`ußge
(
¨gv
[0]);

1491 i‡(
u£_grh
 && !
dgid_¥ovided
) {

1492 
	`Ârötf
(
°dîr
, "GRH should be used butÑemote GID wasÇotÖrovided\n");

1493  
EINVAL
;

1496 
	`mem£t
(&
∑øms
, 0, (params));

1499 i‡(
ˇlc_›code
 =
PP_CALC_INVALID
 || 
ˇlc_d©a_ty≥
 =
PP_DATA_TYPE_INVALID
) {

1500 
	`Ârötf
(
°dîr
, "DataÅypeánd calc operation must be specified\n");

1505 i‡(!
ˇlc_›î™ds_°r
) {

1506 
	`Ârötf
(
°dîr
, "Operands must be set for calc operation\n");

1510 i‡(
›töd
 =
¨gc
 - 1)

1511 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

1512 i‡(
›töd
 < 
¨gc
) {

1513 
	`ußge
(
¨gv
[0]);

1517 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

1518 i‡(!
dev_li°
) {

1519 
	`Ârötf
(
°dîr
, "No IB devices found\n");

1523 i‡(
ib_dev«me
) {

1524 
i
;

1526 
i
 = 0; 
dev_li°
[i]; ++i) {

1527 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
)) {

1528 
ib_dev
 = 
dev_li°
[
i
];

1532 i‡(!
ib_dev
) {

1533 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

1537 
ib_dev
 = *
dev_li°
;

1539 
˘x
 = 
	`µ_öô_˘x
(
ib_dev
, 
size
, 
rx_dïth
, 
ib_p‹t
, 
u£_evít
,

1540 
ˇlc_›code
, 
ˇlc_d©a_ty≥
, 
ˇlc_›î™ds_°r
);

1541 i‡(!
˘x
)

1544 
˘x
->
gid_ödex
 = gid_index;

1545 
˘x
->
u£_grh
 = use_grh;

1546 
	`mem˝y
(&
˘x
->
dgid
.
øw
, &dgid.øw, (
ibv_gid
));

1547 i‡(
£rvî«me
)

1548 
	`µ_upd©e_œ°_ªsu…
(
˘x
, 
ˇlc_d©a_ty≥
, 
ˇlc_›code
);

1550 
˘x
->
œ°_ªsu…
 = *(
uöt64_t
 *)˘x->
buf
;

1552 
routs
 = 
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
);

1553 i‡(
routs
 < 
˘x
->
rx_dïth
) {

1554 
	`Ârötf
(
°dîr
, "Couldn'àpo°Ñe˚ivê(%d)\n", 
routs
);

1555 
ªt
 = 1;

1556 
out
;

1559 i‡(
u£_evít
)

1560 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

1561 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

1562 
ªt
 = 1;

1563 
out
;

1566 
my_de°
.
lid
 = 
	`µ_gë_loˇl_lid
(
˘x
->
c⁄ãxt
, 
ib_p‹t
);

1567 
my_de°
.
q≤
 = 
˘x
->
qp
->
qp_num
;

1568 
my_de°
.
p¢
 = 
	`Ã™d48
() & 0xffffff;

1569 i‡(!
my_de°
.
lid
) {

1570 
	`Ârötf
(
°dîr
, "Couldn't getÜocal LID\n");

1571 
ªt
 = 1;

1572 
out
;

1575 
	`¥ötf
("Üocaláddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x : MQPN 0x%06x\n",

1576 
my_de°
.
lid
, my_de°.
q≤
, my_de°.
p¢
, 
˘x
->
mqp
->
qp_num
);

1578 i‡(
£rvî«me
)

1579 
ªm_de°
 = 
	`µ_˛õ¡_exch_de°
(
£rvî«me
, 
p‹t
, &
my_de°
);

1581 
ªm_de°
 = 
	`µ_£rvî_exch_de°
(
˘x
, 
ib_p‹t
, 
mtu
, 
p‹t
, 
¶
, &
my_de°
);

1583 i‡(!
ªm_de°
) {

1584 
ªt
 = 1;

1585 
out
;

1588 
	`¥ötf
("Ñemoteáddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x\n",

1589 
ªm_de°
->
lid
,Ñem_de°->
q≤
,Ñem_de°->
p¢
);

1591 i‡(
£rvî«me
)

1592 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, ctx->
qp
, 
ib_p‹t
, 
my_de°
.
p¢
, 
mtu
, 
¶
, 
ªm_de°
)) {

1593 
ªt
 = 1;

1594 
out
;

1597 i‡(
mqe_pﬁl
) {

1598 
pögp⁄g_de°
 
lo›_de°
;

1600 
lo›_de°
.
lid
 = 
my_de°
.lid;

1601 
lo›_de°
.
p¢
 = 
my_de°
.psn;

1602 
lo›_de°
.
q≤
 = 
˘x
->
mqp
->
qp_num
;

1604 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, ctx->
mqp
, 
ib_p‹t
, 
my_de°
.
p¢
, 
mtu
, 
¶
, &
lo›_de°
)) {

1605 
	`Ârötf
(
°dîr
, "failed moving mqpÅo RTS\n");

1606 
ªt
 = 1;

1607 
out
;

1611 
˘x
->
≥ndög
 = 
PP_RECV_WRID
;

1613 i‡(
£rvî«me
) {

1614 i‡(
	`µ_po°_£nd
(
˘x
)) {

1615 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

1616 
ªt
 = 1;

1617 
out
;

1619 
˘x
->
≥ndög
 |
PP_SEND_WRID
;

1623 i‡(
	`gëtimeofday
(&
°¨t
, 
NULL
)) {

1624 
	`≥º‹
("gettimeofday");

1625 
ªt
 = 1;

1626 
out
;

1631 
r˙t
 = 
s˙t
 = 0;

1632 
r˙t
 < 
ôîs
 || 
s˙t
 < iters) {

1633 i‡(
u£_evít
) {

1634 
ibv_cq
 *
ev_cq
;

1635 *
ev_˘x
;

1637 i‡(
	`ibv_gë_cq_evít
(
˘x
->
ch™√l
, &
ev_cq
, &
ev_˘x
)) {

1638 
	`Ârötf
(
°dîr
, "FailedÅo get cq_event\n");

1639 
ªt
 = 1;

1640 
out
;

1643 ++
num_cq_evíts
;

1645 i‡(
ev_cq
 !
˘x
->
cq
) {

1646 
	`Ârötf
(
°dîr
, "CQÉvíàf‹ unknow¿CQ %p\n", 
ev_cq
);

1647 
ªt
 = 1;

1648 
out
;

1651 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

1652 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

1653 
ªt
 = 1;

1654 
out
;

1658 i‡(
mqe_pﬁl
) {

1659 
√
;

1661 i‡(
	`µ_po°_ext_wqe
(
˘x
, 
IBV_EXP_WR_CQE_WAIT
)) {

1662 
	`Ârötf
(
°dîr
, "FailedÖosting cqe_wait wqe\n");

1663 
ªt
 = -1;

1664 
out
;

1667 
√
 = 
	`µ_pﬁl_mcq
(
˘x
->
mcq
, 1);

1668 i‡(
√
 < 0) {

1669 
	`Ârötf
(
°dîr
, "pﬁ»MCQ faûed %d\n", 
√
);

1670 
ªt
 = -1;

1671 
out
;

1676 
√
 = 
	`ibv_pﬁl_cq
(
˘x
->
cq
, 2, 
wc
);

1677 i‡(
√
 < 0) {

1678 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

1679 
ªt
 = 1;

1680 
out
;

1682 } !
u£_evít
 && 
√
 < 1);

1684 
i
 = 0; i < 
√
; ++i) {

1685 i‡(
wc
[
i
].
°©us
 !
IBV_WC_SUCCESS
) {

1686 
	`Ârötf
(
°dîr
, "Failed %s status %s (%d v:%d) for count %d\n",

1687 
wr_id_°r
[(Ë
wc
[
i
].
wr_id
],

1688 
	`ibv_wc_°©us_°r
(
wc
[
i
].
°©us
), wc[i].°©us, wc[i].
víd‹_îr
,

1689 ()(
wc
[
i
].
wr_id
 =
PP_SEND_WRID
 ? 
s˙t
 : 
routs
));

1690 
ªt
 = 1;

1691 
out
;

1694 ()
wc
[
i
].
wr_id
) {

1695 
PP_SEND_WRID
:

1696 ++
s˙t
;

1699 
PP_RECV_WRID
:

1700 
∑øms
.
›
 = 
ˇlc_›code
;

1701 
∑øms
.
ty≥
 = 
ˇlc_d©a_ty≥
;

1702 
∑øms
.
√t_buf
 = 
˘x
->net_buf;

1703 
∑øms
.
id
 = 
NULL
;

1704 
∑øms
.
ho°_buf
 = 
˘x
->
buf
;

1706 i‡(
	`µ_u≈ack_d©a_‰om_ˇlc
(
˘x
->
c⁄ãxt
, &
∑øms
))

1707 
	`Ârötf
(
°dîr
, "Error in unpack \n");

1709 i‡(
vîbo£
) {

1711 
ˇlc_d©a_ty≥
) {

1712 
PP_DATA_TYPE_INT32
:

1713 
PP_DATA_TYPE_INT64
:

1714 
PP_DATA_TYPE_UINT32
:

1715 
PP_DATA_TYPE_UINT64
:

1716 
	`¥ötf
("öcomög d©®i†%" 
PRIu64
 "\n", *(
uöt64_t
 *)
˘x
->
buf
);

1719 
PP_DATA_TYPE_FLOAT32
:

1720 
	`¥ötf
("öcomög d©®i†%f\n", *(*)
˘x
->
buf
);

1723 
PP_DATA_TYPE_FLOAT64
:

1724 
	`¥ötf
("öcomög d©®i†%f\n", *(
FLOAT64
 *)
˘x
->
buf
);

1728 
	`¥ötf
("öcomög d©®i†0%016" 
PRIu64
 "\n",

1729 *(
uöt64_t
 *)
˘x
->
buf
);

1732 i‡(
vîify
) {

1733 i‡(
	`µ_ˇlc_vîify
(
˘x
, 
ˇlc_d©a_ty≥
, 
ˇlc_›code
)) {

1734 
	`Ârötf
(
°dîr
, "Calc verification failed\n");

1735 
ªt
 = 1;

1736 
out
;

1739 
	`µ_upd©e_œ°_ªsu…
(
˘x
, 
ˇlc_d©a_ty≥
, 
ˇlc_›code
);

1741 i‡(--
routs
 <= 1) {

1742 
routs
 +
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
 -Ñouts);

1744 i‡(
routs
 < 
˘x
->
rx_dïth
) {

1745 
	`Ârötf
(
°dîr
,

1747 
routs
);

1748 
ªt
 = 1;

1749 
out
;

1753 ++
r˙t
;

1757 
	`Ârötf
(
°dîr
, "Completion for unknown wr_id %d\n",

1758 (Ë
wc
[
i
].
wr_id
);

1759 
ªt
 = 1;

1760 
out
;

1763 
˘x
->
≥ndög
 &~()
wc
[
i
].
wr_id
;

1764 i‡(
s˙t
 < 
ôîs
 && !
˘x
->
≥ndög
) {

1765 i‡(
	`µ_po°_£nd
(
˘x
)) {

1766 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

1767 
ªt
 = 1;

1768 
out
;

1770 
˘x
->
≥ndög
 = 
PP_RECV_WRID
 | 
PP_SEND_WRID
;

1775 i‡(
	`gëtimeofday
(&
íd
, 
NULL
)) {

1776 
	`≥º‹
("gettimeofday");

1777 
ªt
 = 1;

1778 
out
;

1782 
u£c
 = (
íd
.
tv_£c
 - 
°¨t
.tv_sec) * 1000000 +

1783 (
íd
.
tv_u£c
 - 
°¨t
.tv_usec);

1784 
byãs
 = (Ë
size
 * 
ôîs
 * 2;

1786 
	`¥ötf
("%lld bytes in %.2f seconds = %.2f Mbit/sec\n",

1787 
byãs
, 
u£c
 / 1000000., bytes * 8. / usec);

1788 
	`¥ötf
("%d iters in %.2f seconds = %.2f usec/iter\n",

1789 
ôîs
, 
u£c
 / 1000000., usec / iters);

1792 
	`ibv_ack_cq_evíts
(
˘x
->
cq
, 
num_cq_evíts
);

1793 
out
:

1794 
ªt
 = 
	`µ_˛o£_˘x
(
˘x
);

1796 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

1797 i‡(
ˇlc_›î™ds_°r
)

1798 
	`‰ì
(
ˇlc_›î™ds_°r
);

1800 
	`‰ì
(
ªm_de°
);

1802  
ªt
;

1803 
	}
}

	@libibverbs-41mlnx1/examples/cc_pingpong.h

6 #i‚de‡
IBV_CC_PINGPONG_H


7 
	#IBV_CC_PINGPONG_H


	)

9 
	~<°dio.h
>

10 
	~<öföib™d/vîbs.h
>

11 
	~<öföib™d/vîbs_exp.h
>

14 
	#FLOAT64
 

	)

16 
	eµ_wr_d©a_ty≥
 {

17 
	mPP_DATA_TYPE_INT8
 = 0,

18 
	mPP_DATA_TYPE_INT16
,

19 
	mPP_DATA_TYPE_INT32
,

20 
	mPP_DATA_TYPE_INT64
,

21 
	mPP_DATA_TYPE_UINT8
,

22 
	mPP_DATA_TYPE_UINT16
,

23 
	mPP_DATA_TYPE_UINT32
,

24 
	mPP_DATA_TYPE_UINT64
,

25 
	mPP_DATA_TYPE_FLOAT32
,

26 
	mPP_DATA_TYPE_FLOAT64
,

27 
	mPP_DATA_TYPE_FLOAT96
,

28 
	mPP_DATA_TYPE_INVALID


31 
	eµ_wr_ˇlc_›
 {

32 
	mPP_CALC_LXOR
 = 0,

33 
	mPP_CALC_BXOR
,

34 
	mPP_CALC_LOR
,

35 
	mPP_CALC_BOR
,

36 
	mPP_CALC_LAND
,

37 
	mPP_CALC_BAND
,

38 
	mPP_CALC_ADD
,

39 
	mPP_CALC_MAX
,

40 
	mPP_CALC_MIN
,

41 
	mPP_CALC_MAXLOC
,

42 
	mPP_CALC_MINLOC
,

43 
	mPP_CALC_PROD
,

44 
	mPP_CALC_INVALID


48 
	msize
;

49 c⁄° 
	m°r
[32];

50 } 
	gµ_wr_d©a_ty≥_°r
[] = {

51 [
PP_DATA_TYPE_INT8
] = { .
size
 = 1, .
	g°r
 = "INT8" },

52 [
PP_DATA_TYPE_INT16
] = { .
size
 = 2, .
	g°r
 = "INT16"},

53 [
PP_DATA_TYPE_INT32
] = { .
size
 = 4, .
	g°r
 = "INT32"},

54 [
PP_DATA_TYPE_INT64
] = { .
size
 = 8, .
	g°r
 = "INT64"},

55 [
PP_DATA_TYPE_UINT8
] = { .
size
 = 1, .
	g°r
 = "UINT8" },

56 [
PP_DATA_TYPE_UINT16
] = { .
size
 = 2, .
	g°r
 = "UINT16"},

57 [
PP_DATA_TYPE_UINT32
] = { .
size
 = 4, .
	g°r
 = "UINT32"},

58 [
PP_DATA_TYPE_UINT64
] = { .
size
 = 8, .
	g°r
 = "UINT64"},

59 [
PP_DATA_TYPE_FLOAT32
] = { .
size
 = 4, .
	g°r
 = "FLOAT32"},

60 [
PP_DATA_TYPE_FLOAT64
] = { .
size
 = 8, .
	g°r
 = "FLOAT64"},

63 c⁄° 
	gµ_wr_ˇlc_›_°r
[][32] = {

64 [
PP_CALC_LXOR
] = "XOR",

65 [
PP_CALC_BXOR
] = "BXOR",

66 [
PP_CALC_LOR
] = "LOR",

67 [
PP_CALC_BOR
] = "BOR",

68 [
PP_CALC_LAND
] = "LAND",

69 [
PP_CALC_BAND
] = "BAND",

70 [
PP_CALC_ADD
] = "ADD",

71 [
PP_CALC_MAX
] = "MAX",

72 [
PP_CALC_MIN
] = "MIN",

73 [
PP_CALC_MAXLOC
] = "MAXLOC",

74 [
PP_CALC_MINLOC
] = "MINLOC",

75 [
PP_CALC_PROD
] = "PROD"

78 
ölöe
 
	$µ_ˇlc_d©a_size_to_byãs
(
ibv_exp_ˇlc_d©a_size
 
d©a_size
)

80 
d©a_size
) {

81 
IBV_EXP_CALC_DATA_SIZE_64_BIT
:  8;

82 
IBV_EXP_CALC_DATA_SIZE_NUMBER
:

85 
	}
}

87 
ölöe
 
	$µ_quîy_ˇlc_ˇp
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

88 
ibv_exp_ˇlc_›
 
ˇlc_›
,

89 
ibv_exp_ˇlc_d©a_ty≥
 
d©a_ty≥
,

90 
ibv_exp_ˇlc_d©a_size
 
d©a_size
,

91 *
›î™ds_≥r_g©hî
,

92 *
max_num_›î™ds
)

96 i‡(
›î™ds_≥r_g©hî
)

97 *
›î™ds_≥r_g©hî
 = 1;

99 i‡(
max_num_›î™ds
)

100 *
max_num_›î™ds
 = 2;

103 
	}
}

105 
ölöe
 
	$µ_¥öt_d©a_ty≥
()

107 
i
;

109 
i
 = 0; i < 
PP_DATA_TYPE_INVALID
; i++)

110 
	`¥ötf
("\t%s\n", 
µ_wr_d©a_ty≥_°r
[
i
].
°r
);

111 
	}
}

113 
ölöe
 c⁄° *
	$µ_d©a_ty≥_to_°r
(
µ_wr_d©a_ty≥
 
d©a_ty≥
)

115 i‡(
d©a_ty≥
 < (
µ_wr_d©a_ty≥_°r
)/(pp_wr_data_type_str[0]))

116  
µ_wr_d©a_ty≥_°r
[
d©a_ty≥
].
°r
;

120 
	}
}

122 
ölöe
 
	$µ_d©a_ty≥_to_size
(
µ_wr_d©a_ty≥
 
d©a_ty≥
)

124 i‡(
d©a_ty≥
 < (
µ_wr_d©a_ty≥_°r
)/(pp_wr_data_type_str[0]))

125  
µ_wr_d©a_ty≥_°r
[
d©a_ty≥
].
size
;

128 
	}
}

130 
ölöe
 
µ_wr_d©a_ty≥
 
	$µ_°r_to_d©a_ty≥
(c⁄° *
d©a_ty≥_°r
)

132 
i
;

134 
i
 = 0; i < (
µ_wr_d©a_ty≥_°r
)/(pp_wr_data_type_str[0]); i++) {

135 i‡(!
	`°rcmp
(
d©a_ty≥_°r
, 
µ_wr_d©a_ty≥_°r
[
i
].
°r
))

136  
i
;

139  
PP_DATA_TYPE_INVALID
;

140 
	}
}

142 
ölöe
 
	$µ_¥öt_ˇlc_›
()

144 
i
;

146 
i
 = 0; i < 
PP_CALC_INVALID
; i++)

147 
	`¥ötf
("\t%s\n", 
µ_wr_ˇlc_›_°r
[
i
]);

148 
	}
}

150 
ölöe
 c⁄° *
	$µ_ˇlc_›_to_°r
(
µ_wr_ˇlc_›
 
ˇlc_›
)

152 i‡(
ˇlc_›
 < (
µ_wr_ˇlc_›_°r
)/(pp_wr_calc_op_str[0]))

153  
µ_wr_ˇlc_›_°r
[
ˇlc_›
];

157 
	}
}

159 
ölöe
 
µ_wr_ˇlc_›
 
	$µ_°r_to_ˇlc_›
(c⁄° *
ˇlc_›
)

161 
i
;

163 
i
 = 0; i < (
µ_wr_ˇlc_›_°r
)/(pp_wr_calc_op_str[0]); i++) {

164 i‡(!
	`°rcmp
(
ˇlc_›
, 
µ_wr_ˇlc_›_°r
[
i
]))

165  
i
;

168  
PP_CALC_INVALID
;

169 
	}
}

171 
ölöe
 
	$µ_¥öt_dev_ˇlc_›s
(
ibv_c⁄ãxt
 *
c⁄ãxt
)

175 
i
, 
j
, 
Êag
, 
suµ
;

177 
i
 = 0; i < 
PP_CALC_INVALID
; i++) {

178 
Êag
 = 0;

180 
j
 = 0; j < 
PP_DATA_TYPE_INVALID
; j++) {

181 
suµ
 = 
	`µ_quîy_ˇlc_ˇp
(
c⁄ãxt
, 
i
, 
j
, 
NULL
, NULL);

183 i‡(!
suµ
) {

184 i‡(!
Êag
) {

185 
	`¥ötf
("\t%s:\n", 
	`µ_ˇlc_›_to_°r
(
i
));

186 
Êag
 = 1;

189 
	`¥ötf
("\t\t%s\n", 
	`µ_d©a_ty≥_to_°r
(
j
));

194 
	}
}

196 
ölöe
 
ibv_mtu
 
	$µ_mtu_to_íum
(
mtu
)

198 
mtu
) {

199 256:  
IBV_MTU_256
;

200 512:  
IBV_MTU_512
;

201 1024:  
IBV_MTU_1024
;

202 2048:  
IBV_MTU_2048
;

203 4096:  
IBV_MTU_4096
;

206 
	}
}

208 
ölöe
 
uöt16_t
 
	$µ_gë_loˇl_lid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
p‹t
)

210 
ibv_p‹t_©å
 
©å
;

212 i‡(
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t
, &
©å
))

215  
©å
.
lid
;

216 
	}
}

	@libibverbs-41mlnx1/examples/dc.h

33 #i‚de‡
__DC_H


34 
	#__DC_H


	)

36 
	~<°dio.h
>

37 
	~<öföib™d/vîbs.h
>

39 
	spögp⁄g_de°
 {

40 
	mlid
;

41 
	mr¢
;

42 
uöt64_t
 
	mdckey
;

46 
	#MSG_FORMAT
 "000000:0000:0000000000000000"

	)

48 
ölöe
 
	$to_ib_mtu
(
mtu
, 
ibv_mtu
 *
ibmtu
)

50 
mtu
) {

52 *
ibmtu
 = 
IBV_MTU_256
;

55 *
ibmtu
 = 
IBV_MTU_512
;

58 *
ibmtu
 = 
IBV_MTU_1024
;

61 *
ibmtu
 = 
IBV_MTU_2048
;

64 *
ibmtu
 = 
IBV_MTU_4096
;

69 
	}
}

	@libibverbs-41mlnx1/examples/dcini.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<öây≥s.h
>

40 
	~<uni°d.h
>

41 
	~<°rög.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<öföib™d/vîbs.h
>

44 
	~<sys/sockë.h
>

45 
	~<sys/time.h
>

46 
	~<√tdb.h
>

47 
	~<mÆloc.h
>

48 
	~<gë›t.h
>

49 
	~<¨∑/öë.h
>

50 
	~<time.h
>

51 
	~"dc.h
"

53 
	sdc_˘x
 {

54 
ibv_qp
 *
	mqp
;

55 
ibv_cq
 *
	mcq
;

56 
ibv_pd
 *
	mpd
;

57 
ibv_mr
 *
	mmr
;

58 
ibv_ah
 *
	mah
;

59 
ibv_c⁄ãxt
 *
	m˘x
;

60 *
	maddr
;

61 
size_t
 
	mÀngth
;

62 
	mp‹t
;

63 
	mlid
;

64 
uöt64_t
 
	mªmŸe_d˘_key
;

65 
uöt64_t
 
	md˘_key
;

66 
	mloˇl_key_deföed
;

67 
uöt32_t
 
	md˘_numbî
;

68 
ibv_p‹t_©å
 
	mp‹töfo
;

69 
	mib_p‹t
;

70 
ibv_mtu
 
	mmtu
;

71 
	m¶
;

72 
uöt16_t
 
	mgid_ödex
;

73 
	mu£_gid
;

74 
ibv_gid
 
	mdgid
;

75 
	mu£_ooo
;

76 
	mªmŸe_key_deföed
;

77 
uöt32_t
 
	mrkey
;

78 
uöt64_t
 
	møddr
;

81 
	#DC_SEND_TEST
 1

	)

82 
	#DC_READ_TEST
 2

	)

83 
	#DC_WRITE_TEST
 3

	)

85 
	$ußge
(c⁄° *
¨gv0
)

87 
	`¥ötf
("Usage:\n");

88 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

89 
	`¥ötf
("\n");

90 
	`¥ötf
("Options:\n");

91 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

92 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

93 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

94 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 4096)\n");

95 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchanges (default 1000)\n");

96 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

97 
	`¥ötf
(" -c, --contiguous-mr use contiguous mr\n");

98 
	`¥ötf
(" -k, --dc-key DCÅransport key\n");

99 
	`¥ötf
(" -m, --mtu MTU ofÅhe DCI\n");

100 
	`¥ötf
(" -a, --check-nop check NOP opcode\n");

101 
	`¥ötf
(" -g, --gid-index gid index\n");

102 
	`¥ötf
(" -r, --dgidÑemote gid. must be given if -g is used\n");

103 
	`¥ötf
(" -b, --oooÉnable out of orderÖrocessing\n");

104 
	`¥ötf
(" -K, --remote-keyÑemote RDMA key\n");

105 
	`¥ötf
(" -A, --remote-addrÑemote RDMAáddress\n");

106 
	`¥ötf
(" -l, --sl serviceÜevel\n");

107 
	}
}

109 
	$£nd_n›
(
dc_˘x
 *
˘x
)

111 
ibv_exp_£nd_wr
 *
bad_wr
;

112 
ibv_exp_£nd_wr
 
wr
;

113 
ibv_exp_wc
 
wc
;

114 
îr
;

115 
n
;

117 
	`mem£t
(&
wr
, 0, (wr));

119 
wr
.
num_sge
 = 0;

120 
wr
.
exp_›code
 = 
IBV_EXP_WR_NOP
;

121 
wr
.
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
;

123 
îr
 = 
	`ibv_exp_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

124 i‡(
îr
) {

125 
	`Ârötf
(
°dîr
, "postÇop failed\n");

126  
îr
;

130 
n
 = 
	`ibv_exp_pﬁl_cq
(
˘x
->
cq
, 1, &
wc
, (wc));

131 i‡(
n
 < 0) {

132 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
n
);

135 } !
n
);

137 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

138 
	`Ârötf
(
°dîr
, "com∂ëi⁄ wôhÉº‹ %d\n", 
wc
.
°©us
);

143 
	}
}

145 
	$to_πs
(
dc_˘x
 *
˘x
)

147 
ibv_exp_qp_©å
 
©å
 = {

148 .
qp_°©e
 = 
IBV_QPS_INIT
,

149 .
pkey_ödex
 = 0,

150 .
p‹t_num
 = 
˘x
->
ib_p‹t
,

151 .
qp_ac˚ss_Êags
 = 0,

152 .
d˘_key
 = 
˘x
->dct_key,

154 
ibv_exp_qp_©å_mask
 
©å_mask
;

156 i‡(
	`ibv_exp_modify_qp
(
˘x
->
qp
, &
©å
,

157 
IBV_EXP_QP_STATE
 |

158 
IBV_EXP_QP_PKEY_INDEX
 |

159 
IBV_EXP_QP_PORT
 |

160 
IBV_EXP_QP_DC_KEY
)) {

161 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

165 
©å
.
qp_°©e
 = 
IBV_QPS_RTR
;

166 
©å
.
max_de°_rd_©omic
 = 0;

167 
©å
.
∑th_mtu
 = 
˘x
->
mtu
;

168 
©å
.
ah_©å
.
is_globÆ
 = !!
˘x
->
u£_gid
;

169 
©å_mask
 = 
IBV_EXP_QP_STATE
 | 
IBV_EXP_QP_PATH_MTU
 |

170 
IBV_EXP_QP_AV
;

171 
©å_mask
 |
˘x
->
u£_ooo
 ? 
IBV_EXP_QP_OOO_RW_DATA_PLACEMENT
 : 0;

173 i‡(
˘x
->
u£_gid
) {

174 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
˘x
->
gid_ödex
;

175 
©å
.
ah_©å
.
grh
.
h›_limô
 = 64;

176 
©å
.
ah_©å
.
grh
.
dgid
 = 
˘x
->dgid;

179 
©å
.
ah_©å
.
dlid
 = 
˘x
->
lid
;

180 
©å
.
ah_©å
.
p‹t_num
 = 
˘x
->
ib_p‹t
;

181 
©å
.
ah_©å
.
¶
 = 
˘x
->sl;

182 
©å
.
d˘_key
 = 
˘x
->dct_key;

184 i‡(
	`ibv_exp_modify_qp
(
˘x
->
qp
, &
©å
, 
©å_mask
)) {

185 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

189 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

190 
©å
.
timeout
 = 14;

191 
©å
.
ªåy_˙t
 = 7;

192 
©å
.
∫r_ªåy
 = 7;

193 
©å
.
max_rd_©omic
 = 1;

194 i‡(
	`ibv_exp_modify_qp
(
˘x
->
qp
, &
©å
, 
IBV_EXP_QP_STATE
 |

195 
IBV_EXP_QP_TIMEOUT
 |

196 
IBV_EXP_QP_RETRY_CNT
 |

197 
IBV_EXP_QP_RNR_RETRY
 |

198 
IBV_EXP_QP_MAX_QP_RD_ATOMIC
)) {

199 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

204 
	}
}

206 
	$µ_˛õ¡_exch_de°
(
dc_˘x
 *
˘x
, c⁄° *
£rvî«me
, 
p‹t
)

208 
addröfo
 *
ªs
, *
t
;

209 
addröfo
 
höts
 = {

210 .
ai_Ámûy
 = 
AF_UNSPEC
,

211 .
ai_sockty≥
 = 
SOCK_STREAM


213 *
£rvi˚
;

214 
msg
[(
MSG_FORMAT
)];

215 
n
;

216 
sockfd
 = -1;

217 
îr
;

219 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

222 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

224 i‡(
n
 < 0) {

225 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

226 
	`‰ì
(
£rvi˚
);

230 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

231 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

232 i‡(
sockfd
 >= 0) {

233 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

236 
	`˛o£
(
sockfd
);

237 
sockfd
 = -1;

241 
	`‰ìaddröfo
(
ªs
);

242 
	`‰ì
(
£rvi˚
);

244 i‡(
sockfd
 < 0) {

245 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

249 
	`•rötf
(
msg
, "%06x:%04x:0000000000000000", 
˘x
->
qp
->
qp_num
, ctx->
p‹töfo
.
lid
);

250 i‡(
	`wrôe
(
sockfd
, 
msg
, (msg)) != (msg)) {

251 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

252 
îr
 = -1;

255 
îr
 = 
	`ªad
(
sockfd
, 
msg
, (msg));

256 i‡(
îr
 !(
msg
)) {

257 
	`≥º‹
("clientÑead");

258 
	`Ârötf
(
°dîr
, "Ród %d/%zu\n", 
îr
, (
msg
));

259 
îr
 = -1;

260 
out
;

263 
	`ssˇnf
(
msg
, "%06x:%04x:%016" 
SCNx64
, &
˘x
->
d˘_numbî
, &˘x->
lid
, &˘x->
ªmŸe_d˘_key
);

264 
	`¥ötf
("RemŸêaddªss: DCTN %06x, LID %04x, DCT key %016" 
PRIx64
 "\n",

265 
˘x
->
d˘_numbî
, ctx->
lid
, ctx->
ªmŸe_d˘_key
);

267 i‡(!
˘x
->
loˇl_key_deföed
)

268 
˘x
->
d˘_key
 = ctx->
ªmŸe_d˘_key
;

272 
out
:

273 
	`˛o£
(
sockfd
);

274  
îr
;

275 
	}
}

277 
	$run_£nd_rdma_ã°
(
dc_˘x
 *
˘x
, 
ôîs
, 
ã°_ty≥
)

279 
ibv_exp_£nd_wr
 
wr
;

280 
ibv_exp_£nd_wr
 *
bad_wr
;

281 
ibv_sge
 
sg_li°
;

282 
îr
, 
i
;

283 
pﬁl_˙t
 = 0;

285 
i
 = 0; i < 
ôîs
; ++i) {

286 
	`mem£t
(&
wr
, 0, (wr));

287 
wr
.
num_sge
 = 1;

288 
wr
.
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
;

289 
sg_li°
.
addr
 = (
uöt64_t
)()
˘x
->addr;

290 
sg_li°
.
Àngth
 = 
˘x
->length;

291 
sg_li°
.
lkey
 = 
˘x
->
mr
->lkey;

292 
wr
.
sg_li°
 = &sg_list;

293 
wr
.
dc
.
ah
 = 
˘x
->ah;

294 
wr
.
dc
.
d˘_ac˚ss_key
 = 
˘x
->
d˘_key
;

295 
wr
.
dc
.
d˘_numbî
 = 
˘x
->dct_number;

297 i‡(
ã°_ty≥
 =
DC_SEND_TEST
) {

298 
wr
.
exp_›code
 = 
IBV_EXP_WR_SEND
;

300 
wr
.wr.
rdma
.
rkey
 = 
˘x
->rkey;

301 
wr
.wr.
rdma
.
ªmŸe_addr
 = 
˘x
->
øddr
;

303 i‡(
ã°_ty≥
 =
DC_WRITE_TEST
)

304 
wr
.
exp_›code
 = 
IBV_EXP_WR_RDMA_WRITE
;

306 
wr
.
exp_›code
 = 
IBV_EXP_WR_RDMA_READ
;

308 
îr
 = 
	`ibv_exp_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

309 i‡(
îr
) {

310 
	`Ârötf
(
°dîr
, "failedÅoÖost sendÑequest\n");

311 
d⁄e
;

313 
num
;

314 
ibv_wc
 
wc
;

317 
num
 = 
	`ibv_pﬁl_cq
(
˘x
->
cq
, 1, &
wc
);

318 i‡(
num
 < 0) {

319 
	`Ârötf
(
°dîr
, "failedÅoÖoll cq\n");

320 
îr
 = -1;

321 
d⁄e
;

322 } i‡(
num
) {

323 
pﬁl_˙t
++;

325 } !
num
);

326 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

327 
	`Ârötf
(
°dîr
, "completion withÉrror %d\n",

328 
wc
.
°©us
);

333 
ã°_ty≥
) {

334 
DC_SEND_TEST
:

335 
	`¥ötf
("£ndÅe° com∂ëed suc˚ssfuŒy %d.\n", 
pﬁl_˙t
);

337 
DC_READ_TEST
:

338 
	`¥ötf
("ªadÅe° com∂ëed suc˚ssfuŒy %d.\n", 
pﬁl_˙t
);

340 
DC_WRITE_TEST
:

341 
	`¥ötf
("wrôêã° com∂ëed suc˚ssfuŒy %d.\n", 
pﬁl_˙t
);

344 
d⁄e
:

345  
îr
;

346 
	}
}

348 
	$maö
(
¨gc
, *
¨gv
[])

350 
ibv_devi˚
 **
dev_li°
;

351 
ibv_devi˚
 *
ib_dev
;

352 *
ib_dev«me
 = 
NULL
;

353 
p‹t
 = 18515;

354 
size
 = 4096;

355 
ôîs
 = 1000;

356 
u£_evít
 = 0;

357 
u£_c⁄tig_mr
;

358 
îr
;

359 
ibv_ah_©å
 
ah_©å
;

360 
dc_˘x
 
˘x
 = {

361 .
ib_p‹t
 = 1,

362 .
mtu
 = 
IBV_MTU_1024
,

363 .
¶
 = 0,

365 
ªt
;

366 *
£rvî«me
 = 
NULL
;

367 
ibv_mtu
 
mtu
;

368 
check_n›
 = 0;

369 
dgid_giví
 = 0;

371 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

374 
c
;

376 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

377 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

378 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

379 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

380 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

381 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

382 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

383 { .
«me
 = "c⁄tig-mr", .
has_¨g
 = 0, .
vÆ
 = 'c' },

384 { .
«me
 = "dc-key", .
has_¨g
 = 1, .
vÆ
 = 'k' },

385 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

386 { .
«me
 = "check-n›", .
has_¨g
 = 0, .
vÆ
 = 'a' },

387 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

388 { .
«me
 = "gid-ödex", .
has_¨g
 = 1, .
vÆ
 = 'g' },

389 { .
«me
 = "dgid", .
has_¨g
 = 1, .
vÆ
 = 'r' },

390 { .
«me
 = "ooo", .
has_¨g
 = 0, .
vÆ
 = 'b' },

391 { .
«me
 = "remoteáddr",

392 .
has_¨g
 = 1, .
vÆ
 = 'A' },

393 { .
«me
 = "ªmŸêkey", .
has_¨g
 = 1, .
vÆ
 = 'K' },

397 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:n:ecbt:k:m:al:g:r:A:K:",

398 
l⁄g_›ti⁄s
, 
NULL
);

399 i‡(
c
 == -1)

402 
c
) {

404 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

405 i‡(
p‹t
 < 0 ||Öort > 65535) {

406 
	`ußge
(
¨gv
[0]);

412 
˘x
.
d˘_key
 = 
	`°πouŒ
(
›èrg
, 
NULL
, 0);

413 
˘x
.
loˇl_key_deföed
 = 1;

417 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

421 
˘x
.
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

422 i‡(
˘x
.
ib_p‹t
 < 0) {

423 
	`ußge
(
¨gv
[0]);

429 
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

433 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

437 ++
u£_evít
;

441 ++
u£_c⁄tig_mr
;

445 
mtu
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

446 i‡(
	`to_ib_mtu
(
mtu
, &
˘x
.mtu)) {

447 
	`¥ötf
("övÆid MTU %d\n", 
mtu
);

453 
check_n›
 = 1;

457 
˘x
.
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

461 
˘x
.
gid_ödex
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

462 
˘x
.
u£_gid
 = 1;

466 i‡(!
	`öë_±⁄
(
AF_INET6
, 
›èrg
, &
˘x
.
dgid
)) {

467 
	`ußge
(
¨gv
[0]);

470 
dgid_giví
 = 1;

474 
˘x
.
u£_ooo
 = 1;

478 
˘x
.
rkey
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

479 
˘x
.
ªmŸe_key_deföed
 = 1;

482 
˘x
.
øddr
 = 
	`°πouŒ
(
›èrg
, 
NULL
, 0);

485 
	`ußge
(
¨gv
[0]);

490 i‡(
›töd
 =
¨gc
 - 1) {

491 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

492 i‡(
˘x
.
u£_gid
 && !
dgid_giví
) {

493 
	`ußge
(
¨gv
[0]);

496 } i‡(
›töd
 < 
¨gc
) {

497 
	`ußge
(
¨gv
[0]);

501 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

502 i‡(!
dev_li°
) {

503 
	`≥º‹
("FailedÅo get IB devicesÜist");

507 i‡(!
ib_dev«me
) {

508 
ib_dev
 = *
dev_li°
;

509 i‡(!
ib_dev
) {

510 
	`Ârötf
(
°dîr
, "No IB devices found\n");

514 
i
;

515 
i
 = 0; 
dev_li°
[i]; ++i)

516 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

518 
ib_dev
 = 
dev_li°
[
i
];

519 i‡(!
ib_dev
) {

520 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

525 
˘x
.˘x = 
	`ibv_›í_devi˚
(
ib_dev
);

526 i‡(!
˘x
.ctx) {

527 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

528 
	`ibv_gë_devi˚_«me
(
ib_dev
));

532 
˘x
.
pd
 = 
	`ibv_Æloc_pd
(ctx.ctx);

533 i‡(!
˘x
.
pd
) {

534 
	`Ârötf
(
°dîr
, "failedÅoállocateÖd\n");

538 
˘x
.
Àngth
 = 
size
;

539 
˘x
.
addr
 = 
	`mÆloc
(˘x.
Àngth
);

540 i‡(!
˘x
.
addr
) {

541 
	`Ârötf
(
°dîr
, "failedÅoállocate memory\n");

545 i‡(
	`ibv_quîy_p‹t
(
˘x
.˘x, ctx.
ib_p‹t
, &˘x.
p‹töfo
)) {

546 
	`Ârötf
(
°dîr
, "Couldn't getÖort info\n");

550 
˘x
.
mr
 = 
	`ibv_ªg_mr
(˘x.
pd
, ctx.
addr
, ctx.
Àngth
,

551 
IBV_ACCESS_REMOTE_WRITE
 | 
IBV_ACCESS_LOCAL_WRITE
);

552 i‡(!
˘x
.
mr
) {

553 
	`Ârötf
(
°dîr
, "failedÅo create mr\n");

557 
˘x
.
cq
 = 
	`ibv_¸óã_cq
(˘x.˘x, 128, 
NULL
, NULL, 0);

558 i‡(!
˘x
.
cq
) {

559 
	`Ârötf
(
°dîr
, "failedÅo create cq\n");

564 
ibv_qp_öô_©å_ex
 
©å
 = {

565 .
£nd_cq
 = 
˘x
.
cq
,

566 .
ªcv_cq
 = 
˘x
.
cq
,

567 .
ˇp
 = {

568 .
max_£nd_wr
 = 100,

569 .
max_£nd_sge
 = 1,

571 .
qp_ty≥
 = 
IBV_EXP_QPT_DC_INI
,

572 .
pd
 = 
˘x
.pd,

573 .
comp_mask
 = 
IBV_QP_INIT_ATTR_PD
,

576 
˘x
.
qp
 = 
	`ibv_¸óã_qp_ex
(˘x.˘x, &
©å
);

577 i‡(!
˘x
.
qp
) {

578 
	`Ârötf
(
°dîr
, "failedÅo create qp\n");

583 i‡(
	`µ_˛õ¡_exch_de°
(&
˘x
, 
£rvî«me
, 
p‹t
)) {

584 
	`¥ötf
("failedÅo connectÅoÅarget\n");

588 
	`¥ötf
("loˇ»addªss: LID %04x, QPN %06x, DC_KEY %016" 
PRIx64
 "\n",

589 
˘x
.
p‹töfo
.
lid
, ctx.
qp
->
qp_num
, ctx.
d˘_key
);

591 
	`mem£t
(&
ah_©å
, 0, (ah_attr));

592 
ah_©å
.
is_globÆ
 = 0;

593 
ah_©å
.
dlid
 = 
˘x
.
lid
;

594 
ah_©å
.
¶
 = 
˘x
.sl;

595 
ah_©å
.
§c_∑th_bôs
 = 0;

596 
ah_©å
.
p‹t_num
 = 
˘x
.
ib_p‹t
;

597 i‡(
˘x
.
u£_gid
) {

598 
ah_©å
.
is_globÆ
 = 1;

599 
ah_©å
.
grh
.
h›_limô
 = 64;

600 
ah_©å
.
grh
.
sgid_ödex
 = 
˘x
.
gid_ödex
;

601 
ah_©å
.
grh
.
dgid
 = 
˘x
.dgid;

603 
˘x
.
ah
 = 
	`ibv_¸óã_ah
(˘x.
pd
, &
ah_©å
);

604 i‡(!
˘x
.
ah
) {

605 
	`Ârötf
(
°dîr
, "failedÅo createáh\n");

609 
îr
 = 
	`to_πs
(&
˘x
);

610 i‡(
îr
) {

611 
	`Ârötf
(
°dîr
, "failedÅo moveÅoÑts\n");

616 i‡(
check_n›
) {

617 
îr
 = 
	`£nd_n›
(&
˘x
);

618 i‡(
îr
) {

619 
	`Ârötf
(
°dîr
, "nop operation failed\n");

620  
îr
;

624 
ªt
 = 
	`run_£nd_rdma_ã°
(&
˘x
, 
ôîs
, 
DC_SEND_TEST
);

625 i‡(
ªt
) {

626 
	`Ârötf
(
°dîr
, "wrôêã° faûed wôhÉº‹ = %d\n", 
ªt
);

630 i‡(
˘x
.
ªmŸe_key_deföed
 && ctx.
øddr
) {

631 
ªt
 = 
	`run_£nd_rdma_ã°
(&
˘x
, 
ôîs
, 
DC_WRITE_TEST
);

632 i‡(
ªt
) {

633 
	`Ârötf
(
°dîr
, "wrôêã° faûedÉº‹ = %d\n", 
ªt
);

637 
ªt
 = 
	`run_£nd_rdma_ã°
(&
˘x
, 
ôîs
, 
DC_READ_TEST
);

638 i‡(
ªt
) {

639 
	`Ârötf
(
°dîr
, "ªadÅe° faûedÉº‹ = %d\n", 
ªt
);

643 
	`¥ötf
("test finished successfully\n");

645 
	}
}

	@libibverbs-41mlnx1/examples/dctgt.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<öây≥s.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<öföib™d/vîbs.h
>

44 
	~<sys/sockë.h
>

45 
	~<sys/time.h
>

46 
	~<√tdb.h
>

47 
	~<mÆloc.h
>

48 
	~<gë›t.h
>

49 
	~<¨∑/öë.h
>

50 
	~<time.h
>

51 
	~<±hªad.h
>

52 
	~<sig«l.h
>

53 
	~<öföib™d/vîbs_exp.h
>

54 
	~"dc.h
"

56 
	sdc_˘x
 {

57 
ibv_qp
 *
	mqp
;

58 
ibv_cq
 *
	mcq
;

59 
ibv_pd
 *
	mpd
;

60 
ibv_mr
 *
	mmr
;

61 
ibv_§q
 *
	m§q
;

62 
ibv_c⁄ãxt
 *
	m˘x
;

63 *
	maddr
;

64 
size_t
 
	mÀngth
;

65 
	mp‹t
;

66 
uöt64_t
 
	md˘_key
;

67 
	msize
;

68 
	mib_p‹t
;

69 
ibv_mtu
 
	mmtu
;

70 
	mrcv_idx
;

71 
ibv_p‹t_©å
 
	mp‹töfo
;

72 
ibv_exp_d˘
 *
	md˘
;

73 
±hªad_t
 
	mthªad
;

74 
	mthªad_a˘ive
;

75 
	möl
;

76 
±hªad_t
 
	mpﬁl_thªad
;

77 
	mu£_ooo
;

78 
	mgidx
;

81 
	$ußge
(c⁄° *
¨gv0
)

83 
	`¥ötf
("Usage:\n");

84 
	`¥ötf
(" %† sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

85 
	`¥ötf
("\n");

86 
	`¥ötf
("Options:\n");

87 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

88 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

89 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

90 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 4096)\n");

91 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchanges (unlimited)\n");

92 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

93 
	`¥ötf
(" -k, --dc-key DCÅransport key\n");

94 
	`¥ötf
(" -m, --mtu MTU ofÅhe DCT\n");

95 
	`¥ötf
(" -b, --oooÉnable out of orderÖrocessing\n");

96 
	`¥ötf
(" -l, --inline Requested inlineÑeceive size\n");

97 
	`¥ötf
(" -g, --gid-index Gid indexássociated withÅhe DCT\n");

98 
	}
}

100 
	$po°_ªcv
(
dc_˘x
 *
˘x
, 
n
)

102 
ibv_sge
 
li°
 = {

103 .
Àngth
 = 
˘x
->
size
,

104 .
lkey
 = 
˘x
->
mr
->lkey

106 
ibv_ªcv_wr
 
wr
 = {

107 .
sg_li°
 = &
li°
,

108 .
num_sge
 = 1,

110 
ibv_ªcv_wr
 *
bad_wr
;

111 
i
;

113 
i
 = 0; i < 
n
; ++i) {

114 
li°
.
addr
 = (
uöçå_t
)
˘x
->add∏+ (˘x->
size
 * (˘x->
rcv_idx
++ % 32));

115 i‡(
	`ibv_po°_§q_ªcv
(
˘x
->
§q
, &
wr
, &
bad_wr
))

119  
i
;

120 
	}
}

122 
pögp⁄g_de°
 *
	$µ_£rvî_exch_de°
(
dc_˘x
 *
˘x
,

123 c⁄° 
pögp⁄g_de°
 *
my_de°
)

125 
addröfo
 *
ªs
, *
t
;

126 
addröfo
 
höts
 = {

127 .
ai_Êags
 = 
AI_PASSIVE
,

128 .
ai_Ámûy
 = 
AF_UNSPEC
,

129 .
ai_sockty≥
 = 
SOCK_STREAM


131 *
£rvi˚
;

132 
msg
[(
MSG_FORMAT
)];

133 
n
;

134 
sockfd
 = -1, 
c⁄nfd
;

135 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

136 
îr
;

138 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
˘x
->
p‹t
) < 0)

139  
NULL
;

141 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

143 i‡(
n
 < 0) {

144 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
˘x
->
p‹t
);

145 
	`‰ì
(
£rvi˚
);

146  
NULL
;

149 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

150 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

151 i‡(
sockfd
 >= 0) {

152 
n
 = 1;

154 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, (n));

156 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

158 
	`˛o£
(
sockfd
);

159 
sockfd
 = -1;

163 
	`‰ìaddröfo
(
ªs
);

164 
	`‰ì
(
£rvi˚
);

166 i‡(
sockfd
 < 0) {

167 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
˘x
->
p‹t
);

168  
NULL
;

171 
îr
 = 
	`li°í
(
sockfd
, 1);

172 i‡(
îr
)

173  
NULL
;

175 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

176 
	`˛o£
(
sockfd
);

177 i‡(
c⁄nfd
 < 0) {

178 
	`Ârötf
(
°dîr
, "accept() failed\n");

179  
NULL
;

182 
n
 = 
	`ªad
(
c⁄nfd
, 
msg
, (msg));

183 i‡(
n
 !(
msg
)) {

184 
	`≥º‹
("serverÑead");

185 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'àªadÑemŸêaddªss\n", 
n
, ()(
msg
));

186 
out
;

189 
ªm_de°
 = 
	`mÆloc
((*rem_dest));

190 i‡(!
ªm_de°
)

191 
out
;

193 
	`ssˇnf
(
msg
, "%06x:%04x:%016" 
SCNx64
, &
ªm_de°
->
r¢
, &ªm_de°->
lid
, &ªm_de°->
dckey
);

194 
	`¥ötf
("C⁄√˘i⁄ from: QPN %06x, LID %04x\n", 
ªm_de°
->
r¢
,Ñem_de°->
lid
);

196 
	`•rötf
(
msg
, "%06x:%04x:%016" 
PRIx64
, 
˘x
->
d˘
->
d˘_num
, ctx->
p‹töfo
.
lid
, ctx->
d˘_key
);

198 i‡(
	`wrôe
(
c⁄nfd
, 
msg
, (msg)) != (msg)) {

199 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

200 
	`‰ì
(
ªm_de°
);

201 
ªm_de°
 = 
NULL
;

202 
out
;

205 
out
:

206 
	`˛o£
(
c⁄nfd
);

207  
ªm_de°
;

208 
	}
}

210 *
	$h™dÀ_˛õ¡s
(*
¨g
)

212 
dc_˘x
 *
˘x
 = 
¨g
;

213 
pögp⁄g_de°
 
my_de°
;

214 
pögp⁄g_de°
 *
ªt
;

216 
˘x
->
thªad_a˘ive
) {

217 
ªt
 = 
	`µ_£rvî_exch_de°
(
˘x
, &
my_de°
);

218 i‡(!
ªt
)

219 
	`exô
(
EXIT_FAILURE
);

222  
NULL
;

223 
	}
}

225 c⁄° *
	$evít_«me_°r
(
ibv_evít_ty≥
 
evít_ty≥
)

227 
evít_ty≥
) {

228 
IBV_EVENT_DEVICE_FATAL
:

230 
IBV_EVENT_PORT_ACTIVE
:

232 
IBV_EVENT_PORT_ERR
:

234 
IBV_EVENT_LID_CHANGE
:

236 
IBV_EVENT_PKEY_CHANGE
:

238 
IBV_EVENT_SM_CHANGE
:

240 
IBV_EVENT_CLIENT_REREGISTER
:

242 
IBV_EVENT_GID_CHANGE
:

244 
IBV_EXP_EVENT_DCT_KEY_VIOLATION
:

246 
IBV_EVENT_QP_ACCESS_ERR
:

249 
IBV_EVENT_CQ_ERR
:

250 
IBV_EVENT_QP_FATAL
:

251 
IBV_EVENT_QP_REQ_ERR
:

252 
IBV_EVENT_COMM_EST
:

253 
IBV_EVENT_SQ_DRAINED
:

254 
IBV_EVENT_PATH_MIG
:

255 
IBV_EVENT_PATH_MIG_ERR
:

256 
IBV_EVENT_SRQ_ERR
:

257 
IBV_EVENT_SRQ_LIMIT_REACHED
:

258 
IBV_EVENT_QP_LAST_WQE_REACHED
:

262 
	}
}

264 *
	$pﬁl_async
(*
¨g
)

266 
dc_˘x
 *
˘x
 = 
¨g
;

267 
ibv_async_evít
 
evít
;

268 
ibv_exp_¨m_©å
 
©å
;

269 
îr
;

272 
©å
.
comp_mask
 = 0;

273 
îr
 = 
	`ibv_exp_¨m_d˘
(
˘x
->
d˘
, &
©å
);

274 i‡(
îr
) {

275 
	`Ârötf
(
°dîr
, "¨m d˘ faûed %d\n", 
îr
);

276  
NULL
;

278 i‡(
	`ibv_gë_async_evít
(
˘x
->˘x, &
evít
))

279  
NULL
;

281 
	`¥ötf
("Évent_type %s (%d)\n",

282 
	`evít_«me_°r
(
evít
.
evít_ty≥
),

283 
evít
.
evít_ty≥
);

285 
	`ibv_ack_async_evít
(&
evít
);

288  
NULL
;

289 
	}
}

291 
	$maö
(
¨gc
, *
¨gv
[])

293 
ibv_devi˚
 **
dev_li°
;

294 
ibv_devi˚
 *
ib_dev
;

295 *
ib_dev«me
 = 
NULL
;

296 
ôîs
 = 0;

297 
u£_evít
 = 0;

298 
îr
;

299 
dc_˘x
 
˘x
 = {

300 .
p‹t
 = 18515,

301 .
ib_p‹t
 = 1,

302 .
d˘_key
 = 0x1234,

303 .
size
 = 4096,

304 .
mtu
 = 
IBV_MTU_1024
,

305 .
öl
 = 0,

306 .
gidx
 = -1,

308 
i
;

309 
uöt32_t
 
§qn
;

310 
mtu
;

311 
ibv_exp_devi˚_©å
 
d©å
;

312 
ibv_gid
 
my_gid
;

314 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

317 
c
;

319 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

320 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

321 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

322 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

323 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

324 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

325 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

326 { .
«me
 = "dc-key", .
has_¨g
 = 1, .
vÆ
 = 'k' },

327 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

328 { .
«me
 = "ölöe", .
has_¨g
 = 1, .
vÆ
 = 'l' },

329 { .
«me
 = "ooo", .
has_¨g
 = 0, .
vÆ
 = 'b' },

330 { .
«me
 = "gid-ödex", .
has_¨g
 = 1, .
vÆ
 = 'g' },

334 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:n:ebk:m:l:g:",

335 
l⁄g_›ti⁄s
, 
NULL
);

336 i‡(
c
 == -1)

339 
c
) {

341 
˘x
.
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

342 i‡(
˘x
.
p‹t
 < 0 || ctx.port > 65535) {

343 
	`ußge
(
¨gv
[0]);

349 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

353 
˘x
.
öl
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

354 i‡(
˘x
.
öl
 < 0) {

355 
	`ußge
(
¨gv
[0]);

361 
˘x
.
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

362 i‡(
˘x
.
ib_p‹t
 < 0) {

363 
	`ußge
(
¨gv
[0]);

369 
mtu
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

370 i‡(
	`to_ib_mtu
(
mtu
, &
˘x
.mtu)) {

371 
	`¥ötf
("övÆid MTU %d\n", 
mtu
);

377 
˘x
.
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

381 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

385 ++
u£_evít
;

389 
˘x
.
d˘_key
 = 
	`°πouŒ
(
›èrg
, 
NULL
, 0);

393 
˘x
.
u£_ooo
 = 1;

397 
˘x
.
gidx
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

401 
	`ußge
(
¨gv
[0]);

406 i‡(
›töd
 < 
¨gc
) {

407 
	`ußge
(
¨gv
[0]);

411 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

412 i‡(!
dev_li°
) {

413 
	`≥º‹
("FailedÅo get IB devicesÜist");

417 i‡(!
ib_dev«me
) {

418 
ib_dev
 = *
dev_li°
;

419 i‡(!
ib_dev
) {

420 
	`Ârötf
(
°dîr
, "No IB devices found\n");

424 
i
;

425 
i
 = 0; 
dev_li°
[i]; ++i)

426 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

428 
ib_dev
 = 
dev_li°
[
i
];

429 i‡(!
ib_dev
) {

430 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

435 
˘x
.˘x = 
	`ibv_›í_devi˚
(
ib_dev
);

436 i‡(!
˘x
.ctx) {

437 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

438 
	`ibv_gë_devi˚_«me
(
ib_dev
));

443 
d©å
.
comp_mask
 = 
IBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
 |

444 
IBV_EXP_DEVICE_DC_RD_REQ
 |

445 
IBV_EXP_DEVICE_DC_RD_RES
 |

446 
IBV_EXP_DEVICE_ATTR_OOO_CAPS
;

447 
îr
 = 
	`ibv_exp_quîy_devi˚
(
˘x
.˘x, &
d©å
);

448 i‡(
îr
) {

449 
	`¥ötf
("couldn't query deviceÉxtendedáttributes\n");

452 i‡(!(
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
)) {

453 
	`¥ötf
("noÉxtended capability flgas\n");

456 i‡(!(
d©å
.
exp_devi˚_ˇp_Êags
 & 
IBV_EXP_DEVICE_DC_TRANSPORT
)) {

457 
	`¥ötf
("DCÅransportÇotÉnabled\n");

461 i‡(!(
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_DC_RD_REQ
)) {

462 
	`¥ötf
("noÑeport on maxÑequestorÑdma/atomicÑesources\n");

466 i‡(!(
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_DC_RD_RES
)) {

467 
	`¥ötf
("noÑeport on maxÑesponderÑdma/atomicÑesources\n");

471 i‡(
˘x
.
u£_ooo
) {

472 i‡(!(
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_OOO_CAPS
) ||

473 ((
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_OOO_CAPS
) &&

474 !(
d©å
.
ooo_ˇps
.
dc_ˇps
 & 
IBV_EXP_OOO_SUPPORT_RW_DATA_PLACEMENT
))) {

475 
	`¥ötf
("Device doesn't support out of orderÖrocessing\n");

481 
˘x
.
pd
 = 
	`ibv_Æloc_pd
(ctx.ctx);

482 i‡(!
˘x
.
pd
) {

483 
	`Ârötf
(
°dîr
, "failedÅoállocateÖd\n");

487 
˘x
.
Àngth
 = 32 * ctx.
size
;

488 
˘x
.
addr
 = 
	`mÆloc
(˘x.
Àngth
);

489 i‡(!
˘x
.
addr
) {

490 
	`Ârötf
(
°dîr
, "failedÅoállocate memory\n");

494 
˘x
.
mr
 = 
	`ibv_ªg_mr
(˘x.
pd
, ctx.
addr
, ctx.
Àngth
,

495 
IBV_ACCESS_REMOTE_WRITE
 | 
IBV_ACCESS_LOCAL_WRITE
 |

496 
IBV_ACCESS_REMOTE_READ
);

497 i‡(!
˘x
.
mr
) {

498 
	`Ârötf
(
°dîr
, "failedÅo create mr\n");

502 
˘x
.
cq
 = 
	`ibv_¸óã_cq
(˘x.˘x, 128, 
NULL
, NULL, 0);

503 i‡(!
˘x
.
cq
) {

504 
	`Ârötf
(
°dîr
, "failedÅo create cq\n");

508 i‡(
˘x
.
gidx
 >= 0) {

509 i‡(
	`ibv_quîy_gid
(
˘x
.˘x, ctx.
ib_p‹t
, ctx.
gidx
, &
my_gid
)) {

510 
	`Ârötf
(
°dîr
, "ˇn'àªad sgid o‡ödex %d\n", 
˘x
.
gidx
);

516 
ibv_§q_öô_©å
 
©å
 = {

517 .
©å
 = {

518 .
max_wr
 = 100,

519 .
max_sge
 = 1

523 
˘x
.
§q
 = 
	`ibv_¸óã_§q
(˘x.
pd
, &
©å
);

524 i‡(!
˘x
.
§q
) {

525 
	`Ârötf
(
°dîr
, "Couldn't create SRQ\n");

528 
	`ibv_gë_§q_num
(
˘x
.
§q
, &
§qn
);

531 
îr
 = 
	`po°_ªcv
(&
˘x
, 100);

532 i‡(
îr
 != 100) {

533 
	`Ârötf
(
°dîr
, "po°ed %d ouào‡%dÑe˚ivêbuf„rs\n", 
îr
, 100);

538 
ibv_exp_d˘_öô_©å
 
d˘©å
 = {

539 .
pd
 = 
˘x
.pd,

540 .
cq
 = 
˘x
.cq,

541 .
§q
 = 
˘x
.srq,

542 .
dc_key
 = 
˘x
.
d˘_key
,

543 .
p‹t
 = 
˘x
.
ib_p‹t
,

544 .
ac˚ss_Êags
 = 
IBV_ACCESS_REMOTE_WRITE
,

545 .
mö_∫r_timî
 = 2,

546 .
t˛ass
 = 0,

547 .
Êow_œbñ
 = 0,

548 .
mtu
 = 
˘x
.mtu,

549 .
pkey_ödex
 = 0,

550 .
gid_ödex
 = (
˘x
.
gidx
 >= 0) ? ctx.gidx : 0,

551 .
h›_limô
 = 64,

552 .
¸óã_Êags
 = 0,

553 .
ölöe_size
 = 
˘x
.
öl
,

555 
d˘©å
.
¸óã_Êags
 |=

556 
˘x
.
u£_ooo
 ? 
IBV_EXP_DCT_OOO_RW_DATA_PLACEMENT
 : 0;

558 
˘x
.
d˘
 = 
	`ibv_exp_¸óã_d˘
(˘x.˘x, &
d˘©å
);

559 i‡(!
˘x
.
d˘
) {

560 
	`¥ötf
("create dct failed\n");

565 
ibv_exp_d˘_©å
 
dcq©å
;

567 
dcq©å
.
comp_mask
 = 0;

568 
îr
 = 
	`ibv_exp_quîy_d˘
(
˘x
.
d˘
, &
dcq©å
);

569 i‡(
îr
) {

570 
	`¥ötf
("query dct failed\n");

572 } i‡(
dcq©å
.
dc_key
 !
˘x
.
d˘_key
) {

573 
	`¥ötf
("queried dckry (0x%llx) is differentÅhenÖrovidedát create (0x%llx)\n",

574 ()
dcq©å
.
dc_key
,

575 ()
˘x
.
d˘_key
);

577 } i‡(
dcq©å
.
°©e
 !
IBV_EXP_DCT_STATE_ACTIVE
) {

578 
	`¥ötf
("°©êi†nŸá˘ivê%d\n", 
dcq©å
.
°©e
);

583 
	`¥ötf
("localáddress: DCTN 0x%06x, SRQN 0x%06x, DCKEY 0x%016llx MR KEY %d MR ADDR %p\n",

584 
˘x
.
d˘
->
d˘_num
, 
§qn
, ()˘x.
d˘_key
,

585 
˘x
.
mr
->
rkey
, ctx.
addr
);

588 i‡(
	`ibv_quîy_p‹t
(
˘x
.˘x, ctx.
ib_p‹t
, &˘x.
p‹töfo
)) {

589 
	`Ârötf
(
°dîr
, "Couldn't getÖort info\n");

593 
˘x
.
thªad_a˘ive
 = 1;

594 
îr
 = 
	`±hªad_¸óã
(&
˘x
.
thªad
, 
NULL
, 
h™dÀ_˛õ¡s
, &ctx);

595 i‡(
îr
) {

596 
	`≥º‹
("thread create faild:");

600 
îr
 = 
	`±hªad_¸óã
(&
˘x
.
pﬁl_thªad
, 
NULL
, 
pﬁl_async
, &ctx);

601 i‡(
îr
) {

602 
	`≥º‹
("thread create faild:");

606 
i
 = 0; i < 
ôîs
 || iters == 0; ++i) {

607 
num
;

608 
ibv_wc
 
wc
;

611 
num
 = 
	`ibv_pﬁl_cq
(
˘x
.
cq
, 1, &
wc
);

612 i‡(
num
 < 0) {

613 
	`Ârötf
(
°dîr
, "failedÅoÖoll cq\n");

616 } !
num
);

617 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

618 
	`Ârötf
(
°dîr
, "completion withÉrror:\n");

619 
	`Ârötf
(
°dîr
, "°©us: %d\n", 
wc
.
°©us
);

621 i‡(
	`po°_ªcv
(&
˘x
, 1) != 1) {

622 
	`Ârötf
(
°dîr
, "failedÅoÖostÑeceive buffer\n");

627 
	`¥ötf
("test finished successfully\n");

628 
˘x
.
thªad_a˘ive
 = 0;

629 i‡(
	`±hªad_ˇn˚l
(
˘x
.
thªad
))

630 
	`¥ötf
("pthread_cancel failed\n");

632 i‡(
	`±hªad_ˇn˚l
(
˘x
.
pﬁl_thªad
))

633 
	`¥ötf
("pthread_cancel failed\n");

635 
îr
 = 
	`±hªad_joö
(
˘x
.
thªad
, 
NULL
);

636 i‡(
îr
) {

637 
	`≥º‹
("thread join faild:");

640 i‡(
	`ibv_exp_de°roy_d˘
(
˘x
.
d˘
))

641 
	`¥ötf
("destroy dct failed\n");

644 
	}
}

	@libibverbs-41mlnx1/examples/device_list.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

39 
	~<ídün.h
>

40 
	~<byãsw≠.h
>

42 
	~<öföib™d/vîbs.h
>

43 
	~<öföib™d/¨ch.h
>

45 
	$maö
(
¨gc
, *
¨gv
[])

47 
ibv_devi˚
 **
dev_li°
;

48 
num_devi˚s
, 
i
;

50 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(&
num_devi˚s
);

51 i‡(!
dev_li°
) {

52 
	`≥º‹
("FailedÅo get IB devicesÜist");

56 
	`¥ötf
(" %-16s\tÇode GUID\n", "device");

57 
	`¥ötf
(" %-16s\t----------------\n", "------");

59 
i
 = 0; i < 
num_devi˚s
; ++i) {

60 
	`¥ötf
(" %-16s\t%016llx\n",

61 
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]),

62 (Ë
	`¡ohŒ
(
	`ibv_gë_devi˚_guid
(
dev_li°
[
i
])));

65 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

68 
	}
}

	@libibverbs-41mlnx1/examples/devinfo.c

34 #i‡
HAVE_CONFIG_H


35 
	~<c⁄fig.h
>

38 
	~<°dio.h
>

39 
	~<°döt.h
>

40 
	~<°dlib.h
>

41 
	~<uni°d.h
>

42 
	~<°rög.h
>

43 
	~<gë›t.h
>

44 
	~<√töë/ö.h
>

45 
	~<ídün.h
>

46 
	~<byãsw≠.h
>

47 
	~<öây≥s.h
>

49 
	~<öföib™d/vîbs.h
>

50 
	~<öföib™d/drivî.h
>

51 
	~<öföib™d/¨ch.h
>

53 
	gvîbo£
;

55 
	$nuŒ_gid
(
ibv_gid
 *
gid
)

57  !(
gid
->
øw
[8] | gid->raw[9] | gid->raw[10] | gid->raw[11] |

58 
gid
->
øw
[12] | gid->raw[13] | gid->raw[14] | gid->raw[15]);

59 
	}
}

61 c⁄° *
	$guid_°r
(
uöt64_t
 
node_guid
, *
°r
)

63 
node_guid
 = 
	`¡ohŒ
(node_guid);

64 
	`•rötf
(
°r
, "%04x:%04x:%04x:%04x",

65 (Ë(
node_guid
 >> 48) & 0xffff,

66 (Ë(
node_guid
 >> 32) & 0xffff,

67 (Ë(
node_guid
 >> 16) & 0xffff,

68 (Ë(
node_guid
 >> 0) & 0xffff);

69  
°r
;

70 
	}
}

72 c⁄° *
	$å™•‹t_°r
(
ibv_å™•‹t_ty≥
 
å™•‹t
)

74 
å™•‹t
) {

75 
IBV_TRANSPORT_IB
:  "InfiniBand";

76 
IBV_TRANSPORT_IWARP
:  "iWARP";

77 
IBV_EXP_TRANSPORT_SCIF
:  "SCIF";

80 
	}
}

82 c⁄° *
	$p‹t_°©e_°r
(
ibv_p‹t_°©e
 
p°©e
)

84 
p°©e
) {

85 
IBV_PORT_DOWN
:  "PORT_DOWN";

86 
IBV_PORT_INIT
:  "PORT_INIT";

87 
IBV_PORT_ARMED
:  "PORT_ARMED";

88 
IBV_PORT_ACTIVE
:  "PORT_ACTIVE";

91 
	}
}

93 c⁄° *
	$p‹t_phy_°©e_°r
(
uöt8_t
 
phys_°©e
)

95 
phys_°©e
) {

105 
	}
}

107 c⁄° *
	$exp_©omic_ˇp_°r
(
ibv_exp_©omic_ˇp
 
exp_©om_ˇp
)

109 
exp_©om_ˇp
) {

110 
IBV_EXP_ATOMIC_NONE
:  "ATOMIC_NONE";

111 
IBV_EXP_ATOMIC_HCA
:  "ATOMIC_HCA";

112 
IBV_EXP_ATOMIC_GLOB
:  "ATOMIC_GLOB";

113 
IBV_EXP_ATOMIC_HCA_REPLY_BE
:  "ATOMIC_HCA_REPLY_BE";

116 
	}
}

118 c⁄° *
	$mtu_°r
(
ibv_mtu
 
max_mtu
)

120 
max_mtu
) {

121 
IBV_MTU_256
:  "256";

122 
IBV_MTU_512
:  "512";

123 
IBV_MTU_1024
:  "1024";

124 
IBV_MTU_2048
:  "2048";

125 
IBV_MTU_4096
:  "4096";

128 
	}
}

130 c⁄° *
	$width_°r
(
uöt8_t
 
width
)

132 
width
) {

139 
	}
}

141 c⁄° *
	$•ìd_°r
(
uöt8_t
 
•ìd
)

143 
•ìd
) {

155 
	}
}

157 c⁄° *
	$vl_°r
(
uöt8_t
 
vl_num
)

159 
vl_num
) {

167 
	}
}

169 
	$¥öt_Æl_p‹t_gids
(
ibv_c⁄ãxt
 *
˘x
, 
uöt8_t
 
p‹t_num
, 
tbl_Àn
)

171 
ibv_gid
 
gid
;

172 
rc
 = 0;

173 
i
;

175 
i
 = 0; i < 
tbl_Àn
; i++) {

176 
rc
 = 
	`ibv_quîy_gid
(
˘x
, 
p‹t_num
, 
i
, &
gid
);

177 i‡(
rc
) {

178 
	`Ârötf
(
°dîr
, "FailedÅo query gidÅoÖort %d, index %d\n",

179 
p‹t_num
, 
i
);

180  
rc
;

182 i‡(!
	`nuŒ_gid
(&
gid
))

183 
	`¥ötf
("\t\t\tGID[%3d]:\t\t%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x\n",

184 
i
,

185 
gid
.
øw
[ 0], gid.raw[ 1],

186 
gid
.
øw
[ 2], gid.raw[ 3],

187 
gid
.
øw
[ 4], gid.raw[ 5],

188 
gid
.
øw
[ 6], gid.raw[ 7],

189 
gid
.
øw
[ 8], gid.raw[ 9],

190 
gid
.
øw
[10], gid.raw[11],

191 
gid
.
øw
[12], gid.raw[13],

192 
gid
.
øw
[14], gid.raw[15]);

194  
rc
;

195 
	}
}

197 c⁄° *
	$lök_œyî_°r
(
uöt8_t
 
lök_œyî
)

199 
lök_œyî
) {

200 
IBV_LINK_LAYER_UNSPECIFIED
:

201 
IBV_LINK_LAYER_INFINIBAND
:

203 
IBV_LINK_LAYER_ETHERNET
:

205 
IBV_EXP_LINK_LAYER_SCIF
:

210 
	}
}

212 
	$¥öt_ˇps
(
ˇps
)

214 
unknown_Êags
 = ~(
IBV_DEVICE_RESIZE_MAX_WR
 |

215 
IBV_DEVICE_BAD_PKEY_CNTR
 |

216 
IBV_DEVICE_BAD_QKEY_CNTR
 |

217 
IBV_DEVICE_RAW_MULTI
 |

218 
IBV_DEVICE_AUTO_PATH_MIG
 |

219 
IBV_DEVICE_CHANGE_PHY_PORT
 |

220 
IBV_DEVICE_UD_AV_PORT_ENFORCE
 |

221 
IBV_DEVICE_CURR_QP_STATE_MOD
 |

222 
IBV_DEVICE_SHUTDOWN_PORT
 |

223 
IBV_DEVICE_INIT_TYPE
 |

224 
IBV_DEVICE_PORT_ACTIVE_EVENT
 |

225 
IBV_DEVICE_SYS_IMAGE_GUID
 |

226 
IBV_DEVICE_RC_RNR_NAK_GEN
 |

227 
IBV_DEVICE_SRQ_RESIZE
 |

228 
IBV_DEVICE_N_NOTIFY_CQ
 |

229 
IBV_DEVICE_XRC
);

231 i‡(
ˇps
 & 
IBV_DEVICE_RESIZE_MAX_WR
)

232 
	`¥ötf
("\t\t\t\t\tRESIZE_MAX_WR\n");

233 i‡(
ˇps
 & 
IBV_DEVICE_BAD_PKEY_CNTR
)

234 
	`¥ötf
("\t\t\t\t\tBAD_PKEY_CNTR\n");

235 i‡(
ˇps
 & 
IBV_DEVICE_BAD_QKEY_CNTR
)

236 
	`¥ötf
("\t\t\t\t\tBAD_QKEY_CNTR\n");

237 i‡(
ˇps
 & 
IBV_DEVICE_RAW_MULTI
)

238 
	`¥ötf
("\t\t\t\t\tRAW_MULTI\n");

239 i‡(
ˇps
 & 
IBV_DEVICE_AUTO_PATH_MIG
)

240 
	`¥ötf
("\t\t\t\t\tAUTO_PATH_MIG\n");

241 i‡(
ˇps
 & 
IBV_DEVICE_CHANGE_PHY_PORT
)

242 
	`¥ötf
("\t\t\t\t\tCHANGE_PHY_PORT\n");

243 i‡(
ˇps
 & 
IBV_DEVICE_UD_AV_PORT_ENFORCE
)

244 
	`¥ötf
("\t\t\t\t\tUD_AV_PORT_ENFORCE\n");

245 i‡(
ˇps
 & 
IBV_DEVICE_CURR_QP_STATE_MOD
)

246 
	`¥ötf
("\t\t\t\t\tCURR_QP_STATE_MOD\n");

247 i‡(
ˇps
 & 
IBV_DEVICE_SHUTDOWN_PORT
)

248 
	`¥ötf
("\t\t\t\t\tSHUTDOWN_PORT\n");

249 i‡(
ˇps
 & 
IBV_DEVICE_INIT_TYPE
)

250 
	`¥ötf
("\t\t\t\t\tINIT_TYPE\n");

251 i‡(
ˇps
 & 
IBV_DEVICE_PORT_ACTIVE_EVENT
)

252 
	`¥ötf
("\t\t\t\t\tPORT_ACTIVE_EVENT\n");

253 i‡(
ˇps
 & 
IBV_DEVICE_SYS_IMAGE_GUID
)

254 
	`¥ötf
("\t\t\t\t\tSYS_IMAGE_GUID\n");

255 i‡(
ˇps
 & 
IBV_DEVICE_RC_RNR_NAK_GEN
)

256 
	`¥ötf
("\t\t\t\t\tRC_RNR_NAK_GEN\n");

257 i‡(
ˇps
 & 
IBV_DEVICE_SRQ_RESIZE
)

258 
	`¥ötf
("\t\t\t\t\tSRQ_RESIZE\n");

259 i‡(
ˇps
 & 
IBV_DEVICE_N_NOTIFY_CQ
)

260 
	`¥ötf
("\t\t\t\t\tN_NOTIFY_CQ\n");

261 i‡(
ˇps
 & 
IBV_DEVICE_XRC
)

262 
	`¥ötf
("\t\t\t\t\tXRC\n");

263 i‡(
ˇps
 & 
unknown_Êags
)

264 
	`¥ötf
("\t\t\t\t\tUnknow¿Êags: 0x%08x\n", 
ˇps
 & 
unknown_Êags
);

265 
	}
}

267 
	$¥öt_ˇps_exp
(
uöt64_t
 
ˇps
)

269 
uöt64_t
 
unknown_Êags
 = ~(
IBV_EXP_DEVICE_DC_TRANSPORT
 |

270 
IBV_EXP_DEVICE_QPG
 |

271 
IBV_EXP_DEVICE_UD_RSS
 |

272 
IBV_EXP_DEVICE_UD_TSS
 |

273 
IBV_EXP_DEVICE_MEM_WINDOW
 |

274 
IBV_EXP_DEVICE_MEM_MGT_EXTENSIONS
 |

275 
IBV_EXP_DEVICE_MW_TYPE_2A
 |

276 
IBV_EXP_DEVICE_MW_TYPE_2B
 |

277 
IBV_EXP_DEVICE_CROSS_CHANNEL
 |

278 
IBV_EXP_DEVICE_MANAGED_FLOW_STEERING
 |

279 
IBV_EXP_DEVICE_MR_ALLOCATE
 |

280 
IBV_EXP_DEVICE_MR_ALLOCATE
 |

281 
IBV_EXP_DEVICE_EXT_ATOMICS
 |

282 
IBV_EXP_DEVICE_NOP
 |

283 
IBV_EXP_DEVICE_UMR
 |

284 
IBV_EXP_DEVICE_ODP
 |

285 
IBV_EXP_DEVICE_VXLAN_SUPPORT
 |

286 
IBV_EXP_DEVICE_RX_CSUM_TCP_UDP_PKT
 |

287 
IBV_EXP_DEVICE_RX_CSUM_IP_PKT
 |

288 
IBV_EXP_DEVICE_DC_INFO
 |

289 
IBV_EXP_DEVICE_EXT_MASKED_ATOMICS
 |

290 
IBV_EXP_DEVICE_RX_TCP_UDP_PKT_TYPE
 |

291 
IBV_EXP_DEVICE_SCATTER_FCS
 |

292 
IBV_EXP_DEVICE_WQ_DELAY_DROP
 |

293 
IBV_EXP_DEVICE_PHYSICAL_RANGE_MR
 |

294 
IBV_EXP_DEVICE_CAPI
 |

295 
IBV_EXP_DEVICE_UMR_FIXED_SIZE
 |

296 
IBV_EXP_DEVICE_PACKET_BASED_CREDIT_MODE
);

298 i‡(
ˇps
 & 
IBV_EXP_DEVICE_DC_TRANSPORT
)

299 
	`¥ötf
("\t\t\t\t\tEXP_DC_TRANSPORT\n");

300 i‡(
ˇps
 & 
IBV_EXP_DEVICE_QPG
)

301 
	`¥ötf
("\t\t\t\t\tEXP_DEVICE_QPG\n");

302 i‡(
ˇps
 & 
IBV_EXP_DEVICE_UD_RSS
)

303 
	`¥ötf
("\t\t\t\t\tEXP_UD_RSS\n");

304 i‡(
ˇps
 & 
IBV_EXP_DEVICE_UD_TSS
)

305 
	`¥ötf
("\t\t\t\t\tEXP_UD_TSS\n");

306 i‡(
ˇps
 & 
IBV_EXP_DEVICE_MEM_WINDOW
)

307 
	`¥ötf
("\t\t\t\t\tEXP_MEM_WINDOW\n");

308 i‡(
ˇps
 & 
IBV_EXP_DEVICE_MEM_MGT_EXTENSIONS
)

309 
	`¥ötf
("\t\t\t\t\tEXP_MEM_MGT_EXTENSIONS\n");

310 i‡(
ˇps
 & 
IBV_EXP_DEVICE_MW_TYPE_2A
)

311 
	`¥ötf
("\t\t\t\t\tEXP_MW_TYPE_2A\n");

312 i‡(
ˇps
 & 
IBV_EXP_DEVICE_MW_TYPE_2B
)

313 
	`¥ötf
("\t\t\t\t\tEXP_MW_TYPE_2B\n");

314 i‡(
ˇps
 & 
IBV_EXP_DEVICE_CROSS_CHANNEL
)

315 
	`¥ötf
("\t\t\t\t\tEXP_CROSS_CHANNEL\n");

316 i‡(
ˇps
 & 
IBV_EXP_DEVICE_MANAGED_FLOW_STEERING
)

317 
	`¥ötf
("\t\t\t\t\tEXP_MANAGED_FLOW_STEERING\n");

318 i‡(
ˇps
 & 
IBV_EXP_DEVICE_MR_ALLOCATE
)

319 
	`¥ötf
("\t\t\t\t\tEXP_MR_ALLOCATE\n");

320 i‡(
ˇps
 & 
IBV_EXP_DEVICE_SHARED_MR
)

321 
	`¥ötf
("\t\t\t\t\tEXP_SHARED_MR\n");

322 i‡(
ˇps
 & 
IBV_EXP_DEVICE_EXT_ATOMICS
)

323 
	`¥ötf
("\t\t\t\t\tEXT_ATOMICS\n");

324 i‡(
ˇps
 & 
IBV_EXP_DEVICE_NOP
)

325 
	`¥ötf
("\t\t\t\t\tEXT_SEND NOP\n");

326 i‡(
ˇps
 & 
IBV_EXP_DEVICE_UMR
)

327 
	`¥ötf
("\t\t\t\t\tEXP_UMR\n");

328 i‡(
ˇps
 & 
IBV_EXP_DEVICE_ODP
)

329 
	`¥ötf
("\t\t\t\t\tEXP_ODP\n");

330 i‡(
ˇps
 & 
IBV_EXP_DEVICE_VXLAN_SUPPORT
)

331 
	`¥ötf
("\t\t\t\t\tEXP_VXLAN_SUPPORT\n");

332 i‡(
ˇps
 & 
IBV_EXP_DEVICE_RX_CSUM_TCP_UDP_PKT
)

333 
	`¥ötf
("\t\t\t\t\tEXP_RX_CSUM_TCP_UDP_PKT\n");

334 i‡(
ˇps
 & 
IBV_EXP_DEVICE_RX_CSUM_IP_PKT
)

335 
	`¥ötf
("\t\t\t\t\tEXP_RX_CSUM_IP_PKT\n");

336 i‡(
ˇps
 & 
IBV_EXP_DEVICE_DC_INFO
)

337 
	`¥ötf
("\t\t\t\t\tEXP_DC_INFO\n");

338 i‡(
ˇps
 & 
IBV_EXP_DEVICE_EXT_MASKED_ATOMICS
)

339 
	`¥ötf
("\t\t\t\t\tEXP_MASKED_ATOMICS\n");

340 i‡(
ˇps
 & 
IBV_EXP_DEVICE_RX_TCP_UDP_PKT_TYPE
)

341 
	`¥ötf
("\t\t\t\t\tEXP_RX_TCP_UDP_PKT_TYPE\n");

342 i‡(
ˇps
 & 
IBV_EXP_DEVICE_SCATTER_FCS
)

343 
	`¥ötf
("\t\t\t\t\tEXP_SCATTER_FCS\n");

344 i‡(
ˇps
 & 
IBV_EXP_DEVICE_WQ_DELAY_DROP
)

345 
	`¥ötf
("\t\t\t\t\tEXP_WQ_DELAY_DROP\n");

346 i‡(
ˇps
 & 
IBV_EXP_DEVICE_PHYSICAL_RANGE_MR
)

347 
	`¥ötf
("\t\t\t\t\tEXP_PHYSICAL_RANGE_MR\n");

348 i‡(
ˇps
 & 
IBV_EXP_DEVICE_CAPI
)

349 
	`¥ötf
("\t\t\t\t\tEXP_DEVICE_CAPI\n");

350 i‡(
ˇps
 & 
IBV_EXP_DEVICE_UMR_FIXED_SIZE
)

351 
	`¥ötf
("\t\t\t\t\tEXP_UMR_FIXED_SIZE\n");

352 i‡(
ˇps
 & 
IBV_EXP_DEVICE_PACKET_BASED_CREDIT_MODE
)

353 
	`¥ötf
("\t\t\t\t\tEXP_PACKET_BASED_CREDIT_MODE\n");

354 i‡(
ˇps
 & 
unknown_Êags
)

355 
	`¥ötf
("\t\t\t\t\tUnknow¿Êags: 0x%" 
PRIX64
 "\n", 
ˇps
 & 
unknown_Êags
);

356 
	}
}

358 
	$¥öt_odp_å™s_ˇps
(
uöt32_t
 
å™s
)

360 
uöt32_t
 
unknown_å™•‹t_ˇps
 = ~(
IBV_EXP_ODP_SUPPORT_SEND
 |

361 
IBV_EXP_ODP_SUPPORT_RECV
 |

362 
IBV_EXP_ODP_SUPPORT_WRITE
 |

363 
IBV_EXP_ODP_SUPPORT_READ
 |

364 
IBV_EXP_ODP_SUPPORT_ATOMIC
 |

365 
IBV_EXP_ODP_SUPPORT_SRQ_RECV
);

367 i‡(!
å™s
)

368 
	`¥ötf
("\t\t\t\t\tNO SUPPORT\n");

370 i‡(
å™s
 & 
IBV_EXP_ODP_SUPPORT_SEND
)

371 
	`¥ötf
("\t\t\t\t\tSUPPORT_SEND\n");

372 i‡(
å™s
 & 
IBV_EXP_ODP_SUPPORT_RECV
)

373 
	`¥ötf
("\t\t\t\t\tSUPPORT_RECV\n");

374 i‡(
å™s
 & 
IBV_EXP_ODP_SUPPORT_WRITE
)

375 
	`¥ötf
("\t\t\t\t\tSUPPORT_WRITE\n");

376 i‡(
å™s
 & 
IBV_EXP_ODP_SUPPORT_READ
)

377 
	`¥ötf
("\t\t\t\t\tSUPPORT_READ\n");

378 i‡(
å™s
 & 
IBV_EXP_ODP_SUPPORT_ATOMIC
)

379 
	`¥ötf
("\t\t\t\t\tSUPPORT_ATOMIC\n");

380 i‡(
å™s
 & 
IBV_EXP_ODP_SUPPORT_SRQ_RECV
)

381 
	`¥ötf
("\t\t\t\t\tSUPPORT_SRQ_RECV\n");

382 i‡(
å™s
 & 
unknown_å™•‹t_ˇps
)

383 
	`¥ötf
("\t\t\t\t\tUnkow¿Êags: 0x%" 
PRIX32
 "\n",

384 
å™s
 & 
unknown_å™•‹t_ˇps
);

386 
	}
}

388 
	$¥öt_odp_ˇps
(
ibv_exp_odp_ˇps
 
ˇps
,

389 
uöt64_t
 
odp_mr_max_size
)

391 
uöt64_t
 
unknown_gíîÆ_ˇps
 = ~(
IBV_EXP_ODP_SUPPORT
 |

392 
IBV_EXP_ODP_SUPPORT_IMPLICIT
);

395 
	`¥ötf
("\tgeneral_odp_caps:\n");

396 i‡(
ˇps
.
gíîÆ_odp_ˇps
 & 
IBV_EXP_ODP_SUPPORT
)

397 
	`¥ötf
("\t\t\t\t\tODP_SUPPORT\n");

398 i‡(
ˇps
.
gíîÆ_odp_ˇps
 & 
IBV_EXP_ODP_SUPPORT_IMPLICIT
)

399 
	`¥ötf
("\t\t\t\t\tODP_SUPPORT_IMPLICIT\n");

400 i‡(
ˇps
.
gíîÆ_odp_ˇps
 & 
unknown_gíîÆ_ˇps
)

401 
	`¥ötf
("\t\t\t\t\tUnkow¿Êags: 0x%" 
PRIX64
 "\n",

402 
ˇps
.
gíîÆ_odp_ˇps
 & 
unknown_gíîÆ_ˇps
);

404 
	`¥ötf
("\tmax_size:\t\t\t0x%" 
PRIX64
 "\n", 
odp_mr_max_size
);

407 
	`¥ötf
("\trc_odp_caps:\n");

408 
	`¥öt_odp_å™s_ˇps
(
ˇps
.
≥r_å™•‹t_ˇps
.
rc_odp_ˇps
);

409 
	`¥ötf
("\tuc_odp_caps:\n");

410 
	`¥öt_odp_å™s_ˇps
(
ˇps
.
≥r_å™•‹t_ˇps
.
uc_odp_ˇps
);

411 
	`¥ötf
("\tud_odp_caps:\n");

412 
	`¥öt_odp_å™s_ˇps
(
ˇps
.
≥r_å™•‹t_ˇps
.
ud_odp_ˇps
);

413 
	`¥ötf
("\tdc_odp_caps:\n");

414 
	`¥öt_odp_å™s_ˇps
(
ˇps
.
≥r_å™•‹t_ˇps
.
dc_odp_ˇps
);

415 
	`¥ötf
("\txrc_odp_caps:\n");

416 
	`¥öt_odp_å™s_ˇps
(
ˇps
.
≥r_å™•‹t_ˇps
.
xrc_odp_ˇps
);

417 
	`¥ötf
("\traw_eth_odp_caps:\n");

418 
	`¥öt_odp_å™s_ˇps
(
ˇps
.
≥r_å™•‹t_ˇps
.
øw_ëh_odp_ˇps
);

419 
	}
}

421 
	$¥öt_tso_ˇps
(c⁄° 
ibv_exp_tso_ˇps
 *
ˇps
)

423 
uöt32_t
 
unknown_gíîÆ_ˇps
 = ~(1 << 
IBV_QPT_RAW_PACKET
 |

424 1 << 
IBV_QPT_UD
);

425 
	`¥ötf
("\ttso_caps:\n");

426 
	`¥ötf
("\tmax_tso:\t\t\t%d\n", 
ˇps
->
max_tso
);

428 i‡(
ˇps
->
max_tso
) {

429 
	`¥ötf
("\tsupported_qp:\n");

430 i‡(
	`ibv_is_q±_suµ‹ãd
(
ˇps
->
suµ‹ãd_q±s
, 
IBV_QPT_RAW_PACKET
))

431 
	`¥ötf
("\t\t\t\t\tSUPPORT_RAW_PACKET\n");

432 i‡(
	`ibv_is_q±_suµ‹ãd
(
ˇps
->
suµ‹ãd_q±s
, 
IBV_QPT_UD
))

433 
	`¥ötf
("\t\t\t\t\tSUPPORT_UD\n");

434 i‡(
ˇps
->
suµ‹ãd_q±s
 & 
unknown_gíîÆ_ˇps
)

435 
	`¥ötf
("\t\t\t\t\tUnknow¿Êags: 0x%" 
PRIX32
 "\n",

436 
ˇps
->
suµ‹ãd_q±s
 & 
unknown_gíîÆ_ˇps
);

438 
	}
}

440 
	$¥öt_∑ckë_∑cög_ˇps
(c⁄° 
ibv_exp_∑ckë_∑cög_ˇps
 *
ˇps
)

442 
uöt32_t
 
unknown_gíîÆ_ˇps
 = ~(1 << 
IBV_QPT_RAW_PACKET
 |

443 1 << 
IBV_QPT_UD
);

444 
	`¥ötf
("\tpacket_pacing_caps:\n");

445 
	`¥ötf
("\tqp_øã_limô_mö:\t\t%dkbps\n", 
ˇps
->
qp_øã_limô_mö
);

446 
	`¥ötf
("\tqp_øã_limô_max:\t\t%dkbps\n", 
ˇps
->
qp_øã_limô_max
);

448 i‡(
ˇps
->
qp_øã_limô_max
) {

449 
	`¥ötf
("\tsupported_qp:\n");

450 i‡(
	`ibv_is_q±_suµ‹ãd
(
ˇps
->
suµ‹ãd_q±s
, 
IBV_QPT_RAW_PACKET
))

451 
	`¥ötf
("\t\t\t\t\tSUPPORT_RAW_PACKET\n");

452 i‡(
	`ibv_is_q±_suµ‹ãd
(
ˇps
->
suµ‹ãd_q±s
, 
IBV_QPT_UD
))

453 
	`¥ötf
("\t\t\t\t\tSUPPORT_UD\n");

454 i‡(
ˇps
->
suµ‹ãd_q±s
 & 
unknown_gíîÆ_ˇps
)

455 
	`¥ötf
("\t\t\t\t\tUnknow¿Êags: 0x%" 
PRIX32
 "\n",

456 
ˇps
->
suµ‹ãd_q±s
 & 
unknown_gíîÆ_ˇps
);

457 
	`¥ötf
("\tsupport_burst_control:\t\t");

458 i‡(
ˇps
->
ˇp_Êags
 & 
IBV_EXP_QP_SUPPORT_BURST
)

459 
	`¥ötf
("YES\n");

461 
	`¥ötf
("NO\n");

463 
	}
}

465 
	$¥öt_ooo_ˇps
(c⁄° 
ibv_exp_ooo_ˇps
 *
ˇps
)

467 
	`¥ötf
("\tooo_caps:\n");

468 
	`¥ötf
("\tooo_rc_ˇp† = 0x%x\n", 
ˇps
->
rc_ˇps
);

469 
	`¥ötf
("\tooo_xrc_ˇp†0x%x\n", 
ˇps
->
xrc_ˇps
);

470 
	`¥ötf
("\tooo_dc_ˇp† = 0x%x\n", 
ˇps
->
dc_ˇps
);

471 
	`¥ötf
("\tooo_ud_ˇp† = 0x%x\n", 
ˇps
->
ud_ˇps
);

473 i‡(
ˇps
->
rc_ˇps
 & 
IBV_EXP_OOO_SUPPORT_RW_DATA_PLACEMENT
)

474 
	`¥ötf
("\t\t\t\t\tSUPPORT_RC_RW_DATA_PLACEMENT\n");

475 i‡(
ˇps
->
xrc_ˇps
 & 
IBV_EXP_OOO_SUPPORT_RW_DATA_PLACEMENT
)

476 
	`¥ötf
("\t\t\t\t\tSUPPORT_XRC_RW_DATA_PLACEMENT\n");

477 i‡(
ˇps
->
dc_ˇps
 & 
IBV_EXP_OOO_SUPPORT_RW_DATA_PLACEMENT
)

478 
	`¥ötf
("\t\t\t\t\tSUPPORT_DC_RW_DATA_PLACEMENT\n");

479 i‡(
ˇps
->
ud_ˇps
 & 
IBV_EXP_OOO_SUPPORT_RW_DATA_PLACEMENT
)

480 
	`¥ötf
("\t\t\t\t\tSUPPORT_UD_RW_DATA_PLACEMENT\n");

481 
	}
}

483 
	$¥öt_tu¬ñ_ofÊﬂds_ˇps
(c⁄° 
uöt32_t
 
tu¬ñ_ofÊﬂds_ˇps
)

485 
uöt32_t
 
unknown_ofÊﬂds
 =

486 ~(
IBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_VXLAN
 |

487 
IBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_GRE
 |

488 
IBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_GENEVE
);

490 
	`¥ötf
("\ttunnel_offloads_caps:\n");

492 i‡(
tu¬ñ_ofÊﬂds_ˇps
 &

493 
IBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_VXLAN
)

494 
	`¥ötf
("\t\t\t\t\tTUNNEL_OFFLOADS_VXLAN\n");

495 i‡(
tu¬ñ_ofÊﬂds_ˇps
 &

496 
IBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_GRE
)

497 
	`¥ötf
("\t\t\t\t\tTUNNEL_OFFLOADS_GRE\n");

498 i‡(
tu¬ñ_ofÊﬂds_ˇps
 &

499 
IBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_GENEVE
)

500 
	`¥ötf
("\t\t\t\t\tTUNNEL_OFFLOADS_GENEVE\n");

501 i‡(
tu¬ñ_ofÊﬂds_ˇps
 & 
unknown_ofÊﬂds
)

502 
	`¥ötf
("\t\t\t\t\tUnknow¿Êags: 0x%" 
PRIX32
 "\n",

503 
tu¬ñ_ofÊﬂds_ˇps
 & 
unknown_ofÊﬂds
);

504 
	}
}

505 
	$¥öt_sw_∑rsög_ˇps
(c⁄° 
ibv_exp_sw_∑rsög_ˇps
 *
ˇps
)

507 
uöt32_t
 
unknown_ofÊﬂds
 = ~(
IBV_EXP_SW_PARSING
 |

508 
IBV_EXP_SW_PARSING_CSUM
 |

509 
IBV_EXP_SW_PARSING_LSO
);

511 
	`¥ötf
("\tsw_parsing_caps:\n");

513 i‡(
ˇps
->
sw_∑rsög_ofÊﬂds
 & 
IBV_EXP_SW_PARSING
)

514 
	`¥ötf
("\t\t\t\t\tSW_PARSING\n");

515 i‡(
ˇps
->
sw_∑rsög_ofÊﬂds
 & 
IBV_EXP_SW_PARSING_CSUM
)

516 
	`¥ötf
("\t\t\t\t\tSW_PARSING_CSUM\n");

517 i‡(
ˇps
->
sw_∑rsög_ofÊﬂds
 & 
IBV_EXP_SW_PARSING_LSO
)

518 
	`¥ötf
("\t\t\t\t\tSW_PARSING_LSO\n");

519 i‡(
ˇps
->
sw_∑rsög_ofÊﬂds
 & 
unknown_ofÊﬂds
)

520 
	`¥ötf
("\t\t\t\t\tUnknow¿Êags: 0x%" 
PRIX32
 "\n",

521 
ˇps
->
sw_∑rsög_ofÊﬂds
 & 
unknown_ofÊﬂds
);

523 
	`¥ötf
("\tsupported_qp:\n");

524 i‡(
	`ibv_is_q±_suµ‹ãd
(
ˇps
->
suµ‹ãd_q±s
, 
IBV_QPT_RAW_PACKET
))

525 
	`¥ötf
("\t\t\t\t\tSUPPORT_RAW_PACKET\n");

526 
	}
}

528 
	$¥öt_tm_ˇps
(c⁄° 
ibv_exp_tm_ˇps
 *
ˇps
)

530 i‡(
ˇps
->
max_num_ègs
) {

531 
	`¥ötf
("\tmax_rndv_hdr_size:\t\t0x%x\n",

532 
ˇps
->
max_∫dv_hdr_size
);

533 
	`¥ötf
("\tmax_num_ègs:\t\t\t0x%x\n", 
ˇps
->
max_num_ègs
);

534 
	`¥ötf
("\tmax_›s:\t\t\t0x%x\n", 
ˇps
->
max_›s
);

535 
	`¥ötf
("\tmax_sge:\t\t\t0x%x\n", 
ˇps
->
max_sge
);

536 
	`¥ötf
("\tcapability_flags:\n");

537 i‡(
ˇps
->
ˇ∑bûôy_Êags
 & 
IBV_EXP_TM_CAP_RC
)

538 
	`¥ötf
("\t\t\t\t\tIBV_EXP_TM_CAP_RC\n");

539 i‡(
ˇps
->
ˇ∑bûôy_Êags
 & 
IBV_EXP_TM_CAP_DC
)

540 
	`¥ötf
("\t\t\t\t\tIBV_EXP_TM_CAP_DC\n");

542 
	`¥ötf
("\ttag matchingÇot supported\n");

544 
	}
}

546 
	$¥öt_hˇ_ˇp
(
ibv_devi˚
 *
ib_dev
, 
uöt8_t
 
ib_p‹t
)

548 
ibv_c⁄ãxt
 *
˘x
;

549 
ibv_exp_devi˚_©å
 
devi˚_©å
;

550 
ibv_devi˚_©å
 
devi˚_Àgacy_©å
;

551 
ibv_p‹t_©å
 
p‹t_©å
;

552 
rc
 = 0;

553 
uöt8_t
 
p‹t
;

554 
buf
[256];

556 
˘x
 = 
	`ibv_›í_devi˚
(
ib_dev
);

557 i‡(!
˘x
) {

558 
	`Ârötf
(
°dîr
, "FailedÅo open device\n");

559 
rc
 = 1;

560 
˛ónup
;

563 
	`mem£t
(&
devi˚_©å
, 0, (device_attr));

564 
devi˚_©å
.
comp_mask
 = 0xffffffff;

565 
devi˚_©å
.
comp_mask_2
 = 
IBV_EXP_DEVICE_ATTR_RESERVED_2
 - 1;

567 i‡(
	`ibv_exp_quîy_devi˚
(
˘x
, &
devi˚_©å
)) {

568 i‡(
	`ibv_quîy_devi˚
(
˘x
, &
devi˚_Àgacy_©å
)) {

569 
	`Ârötf
(
°dîr
, "FailedÅo query deviceÖrops\n");

570 
rc
 = 2;

571 
˛ónup
;

574 
	`mem˝y
(&
devi˚_©å
, &
devi˚_Àgacy_©å
, (device_legacy_attr));

577 
	`¥ötf
("hˇ_id:\t%s\n", 
	`ibv_gë_devi˚_«me
(
ib_dev
));

578 
	`¥ötf
("\ttransport:\t\t\t%s (%d)\n",

579 
	`å™•‹t_°r
(
ib_dev
->
å™•‹t_ty≥
), ib_dev->transport_type);

580 i‡(
	`°æí
(
devi˚_©å
.
fw_vî
))

581 
	`¥ötf
("\tfw_vî:\t\t\t\t%s\n", 
devi˚_©å
.
fw_vî
);

582 
	`¥ötf
("\äode_guid:\t\t\t%s\n", 
	`guid_°r
(
devi˚_©å
.
node_guid
, 
buf
));

583 
	`¥ötf
("\tsys_image_guid:\t\t\t%s\n", 
	`guid_°r
(
devi˚_©å
.
sys_image_guid
, 
buf
));

584 
	`¥ötf
("\tvíd‹_id:\t\t\t0x%04x\n", 
devi˚_©å
.
víd‹_id
);

585 
	`¥ötf
("\tvíd‹_∑π_id:\t\t\t%d\n", 
devi˚_©å
.
víd‹_∑π_id
);

586 
	`¥ötf
("\thw_vî:\t\t\t\t0x%X\n", 
devi˚_©å
.
hw_vî
);

588 i‡(
	`ibv_ªad_sysfs_fûe
(
ib_dev
->
ibdev_∑th
, "bﬂrd_id", 
buf
,  buf) > 0)

589 
	`¥ötf
("\tbﬂrd_id:\t\t\t%s\n", 
buf
);

591 
	`¥ötf
("\çhys_p‹t_˙t:\t\t\t%d\n", 
devi˚_©å
.
phys_p‹t_˙t
);

593 i‡(
vîbo£
) {

594 
	`¥ötf
("\tmax_mr_size:\t\t\t0x%llx\n",

595 (Ë
devi˚_©å
.
max_mr_size
);

596 
	`¥ötf
("\tpage_size_cap:\t\t\t0x%llx\n",

597 (Ë
devi˚_©å
.
∑ge_size_ˇp
);

598 
	`¥ötf
("\tmax_qp:\t\t\t\t%d\n", 
devi˚_©å
.
max_qp
);

599 
	`¥ötf
("\tmax_qp_wr:\t\t\t%d\n", 
devi˚_©å
.
max_qp_wr
);

600 
	`¥ötf
("\tdevice_cap_flags:\t\t0x%08x\n",

601 ()(
devi˚_©å
.
exp_devi˚_ˇp_Êags
 & (
IBV_EXP_START_FLAG
 - 1)));

602 
	`¥öt_ˇps
(
devi˚_©å
.
exp_devi˚_ˇp_Êags
 & (
IBV_EXP_START_FLAG
 - 1));

603 
	`¥ötf
("\tdevi˚_ˇp_exp_Êags:\t\t0x%" 
PRIX64
 "\n",

604 
devi˚_©å
.
exp_devi˚_ˇp_Êags
 & ~(
IBV_EXP_START_FLAG
 - 1));

605 
	`¥öt_ˇps_exp
(
devi˚_©å
.
exp_devi˚_ˇp_Êags
 & ~(
IBV_EXP_START_FLAG
 - 1));

606 
	`¥ötf
("\tmax_sge:\t\t\t%d\n", 
devi˚_©å
.
max_sge
);

607 
	`¥ötf
("\tmax_sge_rd:\t\t\t%d\n", 
devi˚_©å
.
max_sge_rd
);

608 
	`¥ötf
("\tmax_cq:\t\t\t\t%d\n", 
devi˚_©å
.
max_cq
);

609 
	`¥ötf
("\tmax_cqe:\t\t\t%d\n", 
devi˚_©å
.
max_cqe
);

610 
	`¥ötf
("\tmax_mr:\t\t\t\t%d\n", 
devi˚_©å
.
max_mr
);

611 
	`¥ötf
("\tmax_pd:\t\t\t\t%d\n", 
devi˚_©å
.
max_pd
);

612 
	`¥ötf
("\tmax_qp_rd_©om:\t\t\t%d\n", 
devi˚_©å
.
max_qp_rd_©om
);

613 
	`¥ötf
("\tmax_ì_rd_©om:\t\t\t%d\n", 
devi˚_©å
.
max_ì_rd_©om
);

614 
	`¥ötf
("\tmax_ªs_rd_©om:\t\t%d\n", 
devi˚_©å
.
max_ªs_rd_©om
);

615 
	`¥ötf
("\tmax_qp_öô_rd_©om:\t\t%d\n", 
devi˚_©å
.
max_qp_öô_rd_©om
);

616 
	`¥ötf
("\tmax_ì_öô_rd_©om:\t\t%d\n", 
devi˚_©å
.
max_ì_öô_rd_©om
);

617 
	`¥ötf
("\tatomic_cap:\t\t\t%s (%d)\n",

618 
	`exp_©omic_ˇp_°r
(
devi˚_©å
.
exp_©omic_ˇp
),

619 
devi˚_©å
.
exp_©omic_ˇp
);

620 
	`¥ötf
("\éogátomi¯¨g size†(mask)\t\t0x%" 
PRIx64
 "\n", 
devi˚_©å
.
ext_©om
.
log_©omic_¨g_sizes
);

621 
	`¥ötf
("\tmasked_log_©omic_¨g_size†(mask)\t0x%" 
PRIx64
 "\n", 
devi˚_©å
.
masked_©omic
.
masked_log_©omic_¨g_sizes
);

622 
	`¥ötf
("\tmasked_log_©omic_¨g_sizes_√tw‹k_ídü¬es†(mask)\t0x%" 
PRIx64
 "\n",

623 
devi˚_©å
.
masked_©omic
.
masked_log_©omic_¨g_sizes_√tw‹k_ídü¬ess
);

624 
	`¥ötf
("\tmax fëchándádd bô bound¨y\t%d\n", 
devi˚_©å
.
masked_©omic
.
max_Á_bô_bound¨y
);

625 
	`¥ötf
("\éog maxátomi¯ölöe\t\t%d\n", 
devi˚_©å
.
masked_©omic
.
log_max_©omic_ölöe
);

626 
	`¥ötf
("\tmax_ì:\t\t\t\t%d\n", 
devi˚_©å
.
max_ì
);

627 
	`¥ötf
("\tmax_rdd:\t\t\t%d\n", 
devi˚_©å
.
max_rdd
);

628 
	`¥ötf
("\tmax_mw:\t\t\t\t%d\n", 
devi˚_©å
.
max_mw
);

629 
	`¥ötf
("\tmax_øw_ùv6_qp:\t\t%d\n", 
devi˚_©å
.
max_øw_ùv6_qp
);

630 
	`¥ötf
("\tmax_øw_ëhy_qp:\t\t%d\n", 
devi˚_©å
.
max_øw_ëhy_qp
);

631 
	`¥ötf
("\tmax_mˇ°_gΩ:\t\t\t%d\n", 
devi˚_©å
.
max_mˇ°_gΩ
);

632 
	`¥ötf
("\tmax_mˇ°_qp_©èch:\t\t%d\n", 
devi˚_©å
.
max_mˇ°_qp_©èch
);

633 
	`¥ötf
("\tmax_total_mcast_qp_attach:\t%d\n",

634 
devi˚_©å
.
max_tŸÆ_mˇ°_qp_©èch
);

635 
	`¥ötf
("\tmax_ah:\t\t\t\t%d\n", 
devi˚_©å
.
max_ah
);

636 
	`¥ötf
("\tmax_fmr:\t\t\t%d\n", 
devi˚_©å
.
max_fmr
);

637 i‡(
devi˚_©å
.
max_fmr
)

638 
	`¥ötf
("\tmax_m≠_≥r_fmr:\t\t%d\n", 
devi˚_©å
.
max_m≠_≥r_fmr
);

639 
	`¥ötf
("\tmax_§q:\t\t\t%d\n", 
devi˚_©å
.
max_§q
);

640 i‡(
devi˚_©å
.
max_§q
) {

641 
	`¥ötf
("\tmax_§q_wr:\t\t\t%d\n", 
devi˚_©å
.
max_§q_wr
);

642 
	`¥ötf
("\tmax_§q_sge:\t\t\t%d\n", 
devi˚_©å
.
max_§q_sge
);

644 
	`¥ötf
("\tmax_pkeys:\t\t\t%d\n", 
devi˚_©å
.
max_pkeys
);

645 
	`¥ötf
("\éoˇl_ˇ_ack_dñay:\t\t%d\n", 
devi˚_©å
.
loˇl_ˇ_ack_dñay
);

646 
	`¥ötf
("\thˇ_c‹e_˛ock:\t\t\t%" 
PRIu64
 "\n",

647 
devi˚_©å
.
hˇ_c‹e_˛ock
);

648 
	`¥ötf
("\tmax_klm_li°_size:\t\t%d\n", 
devi˚_©å
.
umr_ˇps
.
max_klm_li°_size
);

649 
	`¥ötf
("\tmax_£nd_wqe_ölöe_klms:\t%d\n", 
devi˚_©å
.
umr_ˇps
.
max_£nd_wqe_ölöe_klms
);

650 
	`¥ötf
("\tmax_umr_ªcursi⁄_dïth:\t%d\n", 
devi˚_©å
.
umr_ˇps
.
max_umr_ªcursi⁄_dïth
);

651 
	`¥ötf
("\tmax_umr_°ride_dimísi⁄:\t%d\n", 
devi˚_©å
.
umr_ˇps
.
max_umr_°ride_dimísi⁄
);

652 
	`¥öt_odp_ˇps
(
devi˚_©å
.
odp_ˇps
, devi˚_©å.
odp_mr_max_size
);

653 
	`¥ötf
("\tmax_d˘:\t\t\t%d\n", 
devi˚_©å
.
max_d˘
);

654 
	`¥ötf
("\tmax_devi˚_˘x:\t\t\t%d\n", 
devi˚_©å
.
max_devi˚_˘x
);

655 i‡((
devi˚_©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MP_RQ
) &&

656 
devi˚_©å
.
mp_rq_ˇps
.
suµ‹ãd_qps
) {

657 
uöt32_t
 
unknown_ty≥s_mask
 =

658 ~(
IBV_EXP_MP_RQ_SUP_TYPE_SRQ_TM
 |

659 
IBV_EXP_MP_RQ_SUP_TYPE_WQ_RQ
);

660 
uöt32_t
 
ty≥s_mask
 =

661 
devi˚_©å
.
mp_rq_ˇps
.
suµ‹ãd_qps
;

662 
uöt32_t
 
unknown_shi·s_Êags
 = 
devi˚_©å
.
mp_rq_ˇps
.
Ælowed_shi·s
 &

663 ~
IBV_EXP_MP_RQ_2BYTES_SHIFT
;

665 
	`¥ötf
("\tMulti-Packet RQ supported\n");

666 
	`¥ötf
("\t\tSupported for objectsÅype:\n");

667 i‡(
ty≥s_mask
 & 
IBV_EXP_MP_RQ_SUP_TYPE_SRQ_TM
)

668 
	`¥ötf
("\t\t\tIBV_EXP_MP_RQ_SUP_TYPE_SRQ_TM\n");

669 i‡(
ty≥s_mask
 & 
IBV_EXP_MP_RQ_SUP_TYPE_WQ_RQ
)

670 
	`¥ötf
("\t\t\tIBV_EXP_MP_RQ_SUP_TYPE_WQ_RQ\n");

671 i‡(
ty≥s_mask
 & 
unknown_ty≥s_mask
)

672 
	`¥ötf
("\t\t\tUnkownÅypes: 0x%x\n",

673 
ty≥s_mask
 & 
unknown_ty≥s_mask
);

674 
	`¥ötf
("\t\tSupportedÖayload shifts:\n");

675 i‡(
devi˚_©å
.
mp_rq_ˇps
.
Ælowed_shi·s
 & 
IBV_EXP_MP_RQ_2BYTES_SHIFT
)

676 
	`¥ötf
("\t\t\t2 bytes\n");

677 i‡(
unknown_shi·s_Êags
)

678 
	`¥ötf
("\t\t\tUnknow¿∑ylﬂd shi· fœg†(0x%x)\n", 
unknown_shi·s_Êags
);

679 
	`¥ötf
("\t\tLogÇumber of strides for single WQE: %d - %d\n",

680 
devi˚_©å
.
mp_rq_ˇps
.
mö_sögÀ_wqe_log_num_of_°rides
,

681 
devi˚_©å
.
mp_rq_ˇps
.
max_sögÀ_wqe_log_num_of_°rides
);

682 
	`¥ötf
("\t\tLogÇumber of bytes in single stride: %d - %d\n",

683 
devi˚_©å
.
mp_rq_ˇps
.
mö_sögÀ_°ride_log_num_of_byãs
,

684 
devi˚_©å
.
mp_rq_ˇps
.
max_sögÀ_°ride_log_num_of_byãs
);

686 
	`¥ötf
("\tMulti-Packet RQ isÇot supported\n");

688 i‡(
devi˚_©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_VLAN_OFFLOADS
) {

689 
uöt32_t
 
unknown_vœn_ˇps
;

690 
	`¥ötf
("\n\tVLAN offloads caps:\n");

691 i‡(
devi˚_©å
.
wq_vœn_ofÊﬂds_ˇp
 &

692 
IBV_EXP_RECEIVE_WQ_CVLAN_STRIP
)

693 
	`¥ötf
("\t\t\t\t\tC-VLAN stripping offload\n");

694 i‡(
devi˚_©å
.
wq_vœn_ofÊﬂds_ˇp
 &

695 
IBV_EXP_RECEIVE_WQ_CVLAN_INSERTION
)

696 
	`¥ötf
("\t\t\t\t\tC-VLAN insertion offload\n");

697 
unknown_vœn_ˇps
 = 
devi˚_©å
.
wq_vœn_ofÊﬂds_ˇp
 &

698 ~(
IBV_EXP_RECEIVE_WQ_CVLAN_STRIP
 |

699 
IBV_EXP_RECEIVE_WQ_CVLAN_INSERTION
);

700 i‡(
unknown_vœn_ˇps
)

701 
	`¥ötf
("\tVLAN offloads unknown caps:\t\t0x%x\n",

702 
unknown_vœn_ˇps
);

704 
	`¥ötf
("\åx_∑d_íd_addr_Æign:\t%d\n", 
devi˚_©å
.
rx_∑d_íd_addr_Æign
);

705 
	`¥öt_tso_ˇps
(&
devi˚_©å
.
tso_ˇps
);

706 
	`¥öt_∑ckë_∑cög_ˇps
(&
devi˚_©å
.
∑ckë_∑cög_ˇps
);

707 
	`¥öt_ooo_ˇps
(&
devi˚_©å
.
ooo_ˇps
);

708 
	`¥öt_sw_∑rsög_ˇps
(&
devi˚_©å
.
sw_∑rsög_ˇps
);

709 
	`¥öt_tm_ˇps
(&
devi˚_©å
.
tm_ˇps
);

710 
	`¥öt_tu¬ñ_ofÊﬂds_ˇps
(
devi˚_©å
.
tu¬ñ_ofÊﬂds_ˇps
);

711 i‡(
devi˚_©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TUNNELED_ATOMIC
) {

712 
	`¥ötf
("\tTunneledátomic:\t\t");

713 i‡(
devi˚_©å
.
tu¬ñed_©omic_ˇps
 &

714 
IBV_EXP_TUNNELED_ATOMIC_SUPPORTED
)

715 
	`¥ötf
("SUPPORT\n");

717 i‡(
devi˚_©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_COMP_MASK_2
) {

718 i‡(
devi˚_©å
.
comp_mask_2
 & 
IBV_EXP_DEVICE_ATTR_UMR_FIXED_SIZE_CAPS
) {

719 
	`¥ötf
("\tUMR fixed size:\n");

720 
	`¥ötf
("\t\tmaxÉ¡ôy size:\t%" 
PRIu64
 "\n", 
devi˚_©å
.
umr_fixed_size_ˇps
.
max_ítôy_size
);

725 i‡(
devi˚_©å
.
phys_p‹t_˙t
)

726 
	`¥ötf
("\tDeviceÖorts:\n");

727 
p‹t
 = 1;Ö‹à<
devi˚_©å
.
phys_p‹t_˙t
; ++port) {

729 i‡((
ib_p‹t
Ë&& (
p‹t
 != ib_port))

732 
rc
 = 
	`ibv_quîy_p‹t
(
˘x
, 
p‹t
, &
p‹t_©å
);

733 i‡(
rc
) {

734 
	`Ârötf
(
°dîr
, "FaûedÅÿquîyÖ‹à%uÖr›s\n", 
p‹t
);

735 
˛ónup
;

737 
	`¥ötf
("\t\ç‹t:\t%d\n", 
p‹t
);

738 
	`¥ötf
("\t\t\tstate:\t\t\t%s (%d)\n",

739 
	`p‹t_°©e_°r
(
p‹t_©å
.
°©e
),Öort_attr.state);

740 
	`¥ötf
("\t\t\tmax_mtu:\t\t%s (%d)\n",

741 
	`mtu_°r
(
p‹t_©å
.
max_mtu
),Öort_attr.max_mtu);

742 
	`¥ötf
("\t\t\tactive_mtu:\t\t%s (%d)\n",

743 
	`mtu_°r
(
p‹t_©å
.
a˘ive_mtu
),Öort_attr.active_mtu);

744 
	`¥ötf
("\t\t\tsm_lid:\t\t\t%d\n", 
p‹t_©å
.
sm_lid
);

745 
	`¥ötf
("\t\t\ç‹t_lid:\t\t%d\n", 
p‹t_©å
.
lid
);

746 
	`¥ötf
("\t\t\ç‹t_lmc:\t\t0x%02x\n", 
p‹t_©å
.
lmc
);

747 
	`¥ötf
("\t\t\tlink_layer:\t\t%s\n",

748 
	`lök_œyî_°r
(
p‹t_©å
.
lök_œyî
));

750 i‡(
vîbo£
) {

751 
	`¥ötf
("\t\t\tmax_msg_sz:\t\t0x%x\n", 
p‹t_©å
.
max_msg_sz
);

752 
	`¥ötf
("\t\t\ç‹t_ˇp_Êags:\t\t0x%08x\n", 
p‹t_©å
.
p‹t_ˇp_Êags
);

753 
	`¥ötf
("\t\t\tmax_vl_num:\t\t%s (%d)\n",

754 
	`vl_°r
(
p‹t_©å
.
max_vl_num
),Öort_attr.max_vl_num);

755 
	`¥ötf
("\t\t\tbad_pkey_˙å:\t\t0x%x\n", 
p‹t_©å
.
bad_pkey_˙å
);

756 
	`¥ötf
("\t\t\tqkey_viﬁ_˙å:\t\t0x%x\n", 
p‹t_©å
.
qkey_viﬁ_˙å
);

757 
	`¥ötf
("\t\t\tsm_¶:\t\t\t%d\n", 
p‹t_©å
.
sm_¶
);

758 
	`¥ötf
("\t\t\çkey_tbl_Àn:\t\t%d\n", 
p‹t_©å
.
pkey_tbl_Àn
);

759 
	`¥ötf
("\t\t\tgid_tbl_Àn:\t\t%d\n", 
p‹t_©å
.
gid_tbl_Àn
);

760 
	`¥ötf
("\t\t\tsub√t_timeout:\t\t%d\n", 
p‹t_©å
.
sub√t_timeout
);

761 
	`¥ötf
("\t\t\töô_ty≥_ª∂y:\t%d\n", 
p‹t_©å
.
öô_ty≥_ª∂y
);

762 
	`¥ötf
("\t\t\tactive_width:\t\t%sX (%d)\n",

763 
	`width_°r
(
p‹t_©å
.
a˘ive_width
),Öort_attr.active_width);

764 
	`¥ötf
("\t\t\tactive_speed:\t\t%s (%d)\n",

765 
	`•ìd_°r
(
p‹t_©å
.
a˘ive_•ìd
),Öort_attr.active_speed);

766 
	`¥ötf
("\t\t\tphys_state:\t\t%s (%d)\n",

767 
	`p‹t_phy_°©e_°r
(
p‹t_©å
.
phys_°©e
),Öort_attr.phys_state);

769 i‡(
	`¥öt_Æl_p‹t_gids
(
˘x
, 
p‹t
, 
p‹t_©å
.
gid_tbl_Àn
))

770 
˛ónup
;

772 
	`¥ötf
("\n");

774 
˛ónup
:

775 i‡(
˘x
)

776 i‡(
	`ibv_˛o£_devi˚
(
˘x
)) {

777 
	`Ârötf
(
°dîr
, "FailedÅo close device");

778 
rc
 = 3;

780  
rc
;

781 
	}
}

783 
	$ußge
(c⁄° *
¨gv0
)

785 
	`¥ötf
("Ußge: %†Öröàthêˇáâribuãs\n", 
¨gv0
);

786 
	`¥ötf
("\n");

787 
	`¥ötf
("Options:\n");

788 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (defaultáll devices found)\n");

789 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 0:állÖorts)\n");

790 
	`¥ötf
(" -l, --listÖrint onlyÅhe IB devicesÇames\n");

791 
	`¥ötf
(" -v, --verboseÖrintállÅheáttributes ofÅhe IB device(s)\n");

792 
	}
}

794 
	$maö
(
¨gc
, *
¨gv
[])

796 *
ib_dev«me
 = 
NULL
;

797 
ªt
 = 0;

798 
ibv_devi˚
 **
dev_li°
, **
‹ig_dev_li°
;

799 
num_of_hˇs
;

800 
ib_p‹t
 = 0;

804 
c
;

805 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

806 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

807 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

808 { .
«me
 = "li°", .
has_¨g
 = 0, .
vÆ
 = 'l' },

809 { .
«me
 = "vîbo£", .
has_¨g
 = 0, .
vÆ
 = 'v' },

813 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "d:i:lv", 
l⁄g_›ti⁄s
, 
NULL
);

814 i‡(
c
 == -1)

817 
c
) {

819 
ib_dev«me
 = 
	`°rdup
(
›èrg
);

823 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

824 i‡(
ib_p‹t
 < 0) {

825 
	`ußge
(
¨gv
[0]);

831 
vîbo£
 = 1;

835 
dev_li°
 = 
‹ig_dev_li°
 = 
	`ibv_gë_devi˚_li°
(&
num_of_hˇs
);

836 i‡(!
dev_li°
) {

837 
	`≥º‹
("FailedÅo get IB devicesÜist");

841 
	`¥ötf
("%d HCA%†found:\n", 
num_of_hˇs
,

842 
num_of_hˇs
 != 1 ? "s" : "");

844 *
dev_li°
) {

845 
	`¥ötf
("\t%s\n", 
	`ibv_gë_devi˚_«me
(*
dev_li°
));

846 ++
dev_li°
;

849 
	`¥ötf
("\n");

851 
	`ibv_‰ì_devi˚_li°
(
‹ig_dev_li°
);

856 
	`ußge
(
¨gv
[0]);

861 
dev_li°
 = 
‹ig_dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

862 i‡(!
dev_li°
) {

863 
	`≥º‹
("FailedÅo get IB devicesÜist");

867 i‡(
ib_dev«me
) {

868 *
dev_li°
) {

869 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(*
dev_li°
), 
ib_dev«me
))

871 ++
dev_li°
;

874 i‡(!*
dev_li°
) {

875 
	`Ârötf
(
°dîr
, "IB devi˚ '%s' wa¢'àfound\n", 
ib_dev«me
);

879 
ªt
 |
	`¥öt_hˇ_ˇp
(*
dev_li°
, 
ib_p‹t
);

881 i‡(!*
dev_li°
) {

882 
	`Ârötf
(
°dîr
, "No IB devices found\n");

886 *
dev_li°
) {

887 
ªt
 |
	`¥öt_hˇ_ˇp
(*
dev_li°
, 
ib_p‹t
);

888 ++
dev_li°
;

892 i‡(
ib_dev«me
)

893 
	`‰ì
(
ib_dev«me
);

895 
	`ibv_‰ì_devi˚_li°
(
‹ig_dev_li°
);

897  
ªt
;

898 
	}
}

	@libibverbs-41mlnx1/examples/get_clock.c

41 
	#_DEFAULT_SOURCE


	)

42 
	#_BSD_SOURCE


	)

43 
	~<sys/time.h
>

45 
	~<uni°d.h
>

46 
	~<°dio.h
>

47 
	~<°rög.h
>

48 
	~"gë_˛ock.h
"

50 #i‚de‡
DEBUG


51 
	#DEBUG
 0

	)

53 #i‚de‡
DEBUG_DATA


54 
	#DEBUG_DATA
 0

	)

57 
	#MEASUREMENTS
 200

	)

58 
	#USECSTEP
 10

	)

59 
	#USECSTART
 100

	)

65 
	$ßm∂e_gë_˝u_mhz
()

67 
timevÆ
 
tv1
, 
tv2
;

68 
cy˛es_t
 
°¨t
;

69 
sx
 = 0, 
sy
 = 0, 
sxx
 = 0, 
syy
 = 0, 
sxy
 = 0;

70 
tx
, 
ty
;

71 
i
;

74 
x
[
MEASUREMENTS
];

75 
cy˛es_t
 
y
[
MEASUREMENTS
];

76 
a
;

77 
b
;

78 
r_2
;

80 
i
 = 0; i < 
MEASUREMENTS
; ++i) {

81 
°¨t
 = 
	`gë_cy˛es
();

83 i‡(
	`gëtimeofday
(&
tv1
, 
NULL
)) {

84 
	`Ârötf
(
°dîr
, "gettimeofday failed.\n");

89 i‡(
	`gëtimeofday
(&
tv2
, 
NULL
)) {

90 
	`Ârötf
(
°dîr
, "gettimeofday failed.\n");

93 } (
tv2
.
tv_£c
 - 
tv1
.tv_sec) * 1000000 +

94 (
tv2
.
tv_u£c
 - 
tv1
.tv_u£cË< 
USECSTART
 + 
i
 * 
USECSTEP
);

96 
x
[
i
] = (
tv2
.
tv_£c
 - 
tv1
.tv_sec) * 1000000 +

97 
tv2
.
tv_u£c
 - 
tv1
.tv_usec;

98 
y
[
i
] = 
	`gë_cy˛es
(Ë- 
°¨t
;

99 i‡(
DEBUG_DATA
)

100 
	`Ârötf
(
°dîr
, "x=%ld y=%Œd\n", 
x
[
i
], ()
y
[i]);

103 
i
 = 0; i < 
MEASUREMENTS
; ++i) {

104 
tx
 = 
x
[
i
];

105 
ty
 = 
y
[
i
];

106 
sx
 +
tx
;

107 
sy
 +
ty
;

108 
sxx
 +
tx
 *Åx;

109 
syy
 +
ty
 *Åy;

110 
sxy
 +
tx
 * 
ty
;

113 
b
 = (
MEASUREMENTS
 * 
sxy
 - 
sx
 * 
sy
Ë/ (MEASUREMENTS * 
sxx
 - sx * sx);

114 
a
 = (
sy
 - 
b
 * 
sx
Ë/ 
MEASUREMENTS
;

116 i‡(
DEBUG
)

117 
	`Ârötf
(
°dîr
, "®%g\n", 
a
);

118 i‡(
DEBUG
)

119 
	`Ârötf
(
°dîr
, "b = %g\n", 
b
);

120 i‡(
DEBUG
)

121 
	`Ârötf
(
°dîr
, "®/ b = %g\n", 
a
 / 
b
);

122 
r_2
 = (
MEASUREMENTS
 * 
sxy
 - 
sx
 * 
sy
) * (MEASUREMENTS * sxy - sx * sy) /

123 (
MEASUREMENTS
 * 
sxx
 - 
sx
 * sx) /

124 (
MEASUREMENTS
 * 
syy
 - 
sy
 * sy);

126 i‡(
DEBUG
)

127 
	`Ârötf
(
°dîr
, "r^2 = %g\n", 
r_2
);

128 i‡(
r_2
 < 0.9) {

129 
	`Ârötf
(
°dîr
, "C‹ªœti⁄ c€fficõ¡Ñ^2: %g < 0.9\n", 
r_2
);

133  
b
;

134 
	}
}

136 #i‚de‡
__s390x__


137 
	$¥oc_gë_˝u_mhz
(
no_˝u_‰eq_Áû
)

139 
FILE
 *
f
;

140 
buf
[256];

141 
mhz
 = 0.0;

142 
¥öt_Êag
 = 0;

143 
dñè
;

145 
f
 = 
	`f›í
("/proc/cpuinfo", "r");

146 i‡(!
f
)

148 
	`fgës
(
buf
, (buf), 
f
)) {

149 
m
;

150 
rc
;

152 #i‡
	`deföed
(
__ü64__
)

154 
rc
 = 
	`ssˇnf
(
buf
, "ô¯MHz : %lf", &
m
);

155 #ñi‡
	`deföed
(
__PPC__
Ë|| deföed(
__PPC64__
)

157 
rc
 = 
	`ssˇnf
(
buf
, "˛ock : %lf", &
m
);

158 #ñi‡
	`deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)

164 *
s
;

165 
vÆ
;

167 
s
 = 
	`°r°r
(
buf
, "ClkTck\t: ");

168 i‡(!
s
)

170 
s
 +(
	`°æí
("ClkTck\t: ") - strlen("0x"));

171 
	`°∫˝y
(
s
, "0x", 
	`°æí
("0x"));

172 
rc
 = 
	`ssˇnf
(
s
, "%x", &
vÆ
);

173 
m
 = 
vÆ
/1000000;

175 
rc
 = 
	`ssˇnf
(
buf
, "˝u MHz : %lf", &
m
);

178 i‡(
rc
 != 1)

181 i‡(
mhz
 == 0.0) {

182 
mhz
 = 
m
;

185 
dñè
 = 
mhz
 > 
m
 ? mhz - m : m - mhz;

186 i‡((
dñè
 / 
mhz
 > 0.02Ë&& (
¥öt_Êag
 == 0)) {

187 
¥öt_Êag
 = 1;

188 
	`Ârötf
(
°dîr
, "Conflicting CPU frequency values"

189 " dëe˘ed: %l‡!%lf\n", 
mhz
, 
m
);

190 i‡(
no_˝u_‰eq_Áû
) {

191 
	`Ârötf
(
°dîr
, "Test integrity may be harmed !\n");

193 
	`f˛o£
(
f
);

200 
	`f˛o£
(
f
);

201  
mhz
;

202 
	}
}

205 
	$gë_˝u_mhz
(
no_˝u_‰eq_Áû
)

207 #ifde‡
__s390x__


208  
	`ßm∂e_gë_˝u_mhz
();

210 
ßm∂e
, 
¥oc
, 
dñè
;

212 
ßm∂e
 = 
	`ßm∂e_gë_˝u_mhz
();

213 
¥oc
 = 
	`¥oc_gë_˝u_mhz
(
no_˝u_‰eq_Áû
);

214 #ifde‡
__Ørch64__


215 i‡(
¥oc
 < 1)

216 
¥oc
 = 
ßm∂e
;

218 i‡(!
¥oc
 || !
ßm∂e
)

221 
dñè
 = 
¥oc
 > 
ßm∂e
 ?Öroc - sample : sample -Öroc;

222 i‡(
dñè
 / 
¥oc
 > 0.02) {

223 #i‡!
	`deföed
(
__PPC__
Ë&& !deföed(
__PPC64__
)

224 
	`Ârötf
(
°dîr
, "Warning: measuredÅimestamp frequency "

226 
ßm∂e
, 
¥oc
);

227 i‡(!
no_˝u_‰eq_Áû
)

228 
	`Ârötf
(
°dîr
, " Add --CPU-freq flagÅo showÑeport\n");

230  
ßm∂e
;

232  
¥oc
;

234 
	}
}

	@libibverbs-41mlnx1/examples/get_clock.h

36 #i‚de‡
GET_CLOCK_H


37 
	#GET_CLOCK_H


	)

39 #i‡
deföed
(
__x86_64__
Ë|| deföed(
__i386__
)

41 
	tcy˛es_t
;

42 
ölöe
 
cy˛es_t
 
	$gë_cy˛es
()

44 
low
, 
high
;

45 
vÆ
;

47 
asm
 vﬁ©ûê("rdtsc" : "˜" (
low
), "=d" (
high
));

48 
vÆ
 = 
high
;

49 
vÆ
 = (vÆ << 32Ë| 
low
;

50  
vÆ
;

51 
	}
}

52 #ñi‡
deföed
(
__PPC__
Ë|| deföed(
__PPC64__
)

55 
	tcy˛es_t
;

56 
ölöe
 
cy˛es_t
 
	$gë_cy˛es
()

58 
cy˛es_t
 
ªt
;

60 
asm
 vﬁ©ûê("m·b %0" : "Ù" (
ªt
) : );

61  
ªt
;

62 
	}
}

63 #ñi‡
deföed
(
__ü64__
)

65 
	tcy˛es_t
;

66 
ölöe
 
cy˛es_t
 
	$gë_cy˛es
()

68 
cy˛es_t
 
ªt
;

70 
asm
 vﬁ©ûê("mov %0˜r.ôc" : "Ù" (
ªt
));

71  
ªt
;

72 
	}
}

73 #ñi‡
deföed
(
__s390x__
)

74 
	tcy˛es_t
;

75 
ölöe
 
cy˛es_t
 
	$gë_cy˛es
()

77 
cy˛es_t
 
˛k
;

79 
asm
 vﬁ©ûe("°ck %0" : "=Q" (
˛k
) : : "cc");

80  
˛k
 >> 2;

81 
	}
}

82 #ñi‡
deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)

83 
	tcy˛es_t
;

84 
ölöe
 
cy˛es_t
 
	$gë_cy˛es
()

86 
cy˛es_t
 
v
;

88 
asm
 vﬁ©ûê("rd %%tick, %0" : "Ù" (
v
) : );

89  
v
;

90 
	}
}

91 #ñi‡
deföed
(
__Ørch64__
)

93 
	tcy˛es_t
;

94 
ölöe
 
cy˛es_t
 
	$gë_cy˛es
()

96 
cy˛es_t
 
cvÆ
;

98 
asm
 volatile("isb" : : : "memory");

99 
asm
 vﬁ©ûe("mr†%0, c¡v˘_ñ0" : "Ù" (
cvÆ
));

100  
cvÆ
;

101 
	}
}

104 #w¨nög 
gë_cy˛es
 
nŸ
 
im∂emíãd
 
this
 
¨chôe˘uª
: 
©ãm±
 
asm
/
timex
.
h


105 
	~<asm/timex.h
>

108 
gë_˝u_mhz
();

	@libibverbs-41mlnx1/examples/intf.c

36 
	#_GNU_SOURCE


	)

38 
	~<±hªad.h
>

39 
	~<°dio.h
>

40 
	~<°dlib.h
>

41 
	~<uni°d.h
>

42 
	~<°rög.h
>

43 
	~<sys/ty≥s.h
>

44 
	~<sys/sockë.h
>

45 
	~<sys/time.h
>

46 
	~<√tdb.h
>

47 
	~<mÆloc.h
>

48 
	~<gë›t.h
>

49 
	~<¨∑/öë.h
>

50 
	~<time.h
>

51 
	~<öföib™d/vîbs.h
>

52 
	~<öföib™d/vîbs_exp.h
>

53 
	~<£m≠h‹e.h
>

54 
	~<loˇÀ.h
>

56 
	~"gë_˛ock.h
"

58 #i‚de‡
likñy


59 #ifde‡
__GNUC__


60 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

62 
	#likñy
(
x
Ë(x)

	)

67 #i‚de‡
u∆ikñy


68 #ifde‡
__GNUC__


69 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

71 
	#u∆ikñy
(
x
Ë(x)

	)

76 
	eöput_£nd_ötf
 {

77 
	mIN_NORMAL_SEND_INTF
,

78 
	mIN_ACC_SEND_PENDING_INTF
,

79 
	mIN_ACC_SEND_PENDING_INL_INTF
,

80 
	mIN_ACC_SEND_PENDING_SG_LIST_INTF
,

81 
	mIN_ACC_SEND_BURST_INTF
,

82 
	mIN_NUM_SEND_INTF


85 
	eöput_ªcv_ötf
 {

86 
	mIN_NORMAL_RECV_INTF
,

87 
	mIN_ACC_RECV_BURST_INTF
,

88 
	mIN_NUM_RECV_INTF
,

91 
	eöput_pﬁl_ötf
 {

92 
	mIN_NORMAL_POLL_INTF
,

93 
	mIN_ACC_POLL_CNT_INTF
,

94 
	mIN_ACC_POLL_LENGTH_INTF
,

95 
	mIN_NUM_POLL_INTF


98 
	eqp_ötf
 {

99 
	mNORMAL_SEND_INTF
,

100 
	mNORMAL_RECV_INTF
,

101 
	mACC_SEND_PENDING_INTF
,

102 
	mACC_SEND_PENDING_INL_INTF
,

103 
	mACC_SEND_PENDING_SG_LIST_INTF
,

104 
	mACC_SEND_BURST_INTF
,

105 
	mACC_RECV_BURST_INTF
,

108 
	ecq_ötf
 {

109 
	mNORMAL_POLL_INTF
,

110 
	mACC_POLL_CNT_INTF
,

111 
	mACC_POLL_LENGTH_INTF
,

112 
	mACC_POLL_LENGTH_INL_INTF
,

115 
	sqp_∑øms
 {

116 
	mwr_bur°
;

117 
	mmax_£nd_wr
;

118 
	mmax_ªcv_wr
;

119 
	mmax_öl_ªcv_d©a
;

120 
öput_£nd_ötf
 
	mvîbs_£nd_ötf
;

121 
öput_ªcv_ötf
 
	mvîbs_ªcv_ötf
;

122 
öput_pﬁl_ötf
 
	mvîbs_£nd_pﬁl_ötf
;

123 
öput_pﬁl_ötf
 
	mvîbs_ªcv_pﬁl_ötf
;

126 
	s£nd_∑øms
 {

127 
	mmsg_size
;

128 
	mnum_qp_msgs
;

131 
	s˝u_£t
 {

132 
	mmö
;

133 
	mmax
;

136 
	#MAX_CPU_SETS
 4

	)

137 
	sthªad_∑øms
 {

138 
	mnum_thªads
;

139 
	mnum_˝u_£ts
;

140 
˝u_£t
 
	m˝u_£ts
[
MAX_CPU_SETS
];

142 
	#MAX_DEV_NAME_SIZE
 20

	)

143 
	sib_d©a
 {

144 
	mdev_«me
[
MAX_DEV_NAME_SIZE
];

145 
	mib_p‹t_num
;

146 
	m¶
;

147 
ibv_mtu
 
	mmtu
;

148 
	mcheck_d©a
;

149 
	mu£_ªs_domaö
;

152 
	#MAX_SERVER_NAME_SIZE
 128

	)

153 
	s£rvî_d©a
 {

154 
	m«me
[
MAX_SERVER_NAME_SIZE
];

155 
	mp‹t
;

158 
	sötf_öput
 {

159 
£rvî_d©a
 
	m£rvî_d©a
;

160 
ib_d©a
 
	mib_d©a
;

161 
qp_∑øms
 
	mqp_¥ms
;

162 
£nd_∑øms
 
	m£nd_¥ms
;

163 
thªad_∑øms
 
	mthªad_¥ms
;

166 
ötf_öput
 
	götf_deÁu…_öput
 = {

167 .
£rvî_d©a
 = {

168 .
«me
 = "",

169 .
	gp‹t
 = 18515

171 .
	gib_d©a
 = {

172 .
dev_«me
 = "mlx4_0",

173 .
	gib_p‹t_num
 = 1,

174 .
	g¶
 = 0,

175 .
	gmtu
 = 
IBV_MTU_4096
,

176 .
	gcheck_d©a
 = 0,

177 .
	gu£_ªs_domaö
 = 1,

179 .
	gqp_¥ms
 = {

180 .
wr_bur°
 = 10,

181 .
	gmax_£nd_wr
 = 3*5*4*5*7,

182 .
	gmax_ªcv_wr
 = 3*5*4*5*7,

183 .
	gmax_öl_ªcv_d©a
 = 0,

184 .
	gvîbs_£nd_ötf
 = 
IN_ACC_SEND_PENDING_INTF
,

185 .
	gvîbs_ªcv_ötf
 = 
IN_ACC_RECV_BURST_INTF
,

186 .
	gvîbs_£nd_pﬁl_ötf
 = 
IN_ACC_POLL_CNT_INTF
,

187 .
	gvîbs_ªcv_pﬁl_ötf
 = 
IN_ACC_POLL_LENGTH_INTF
,

189 .
	g£nd_¥ms
 = {

190 .
msg_size
 = 64,

191 .
	gnum_qp_msgs
 = 1000000,

194 .
	gthªad_¥ms
 = {

195 .
num_thªads
 = 1,

196 .
	gnum_˝u_£ts
 = 2,

197 .
	g˝u_£ts
 = { {0, 5}, {12, 17} }

200 
ötf_öput
 
	götf_öput
;

202 
	#INVALID_DURATION
 (()(-1))

	)

203 
	sqp_d©a
 {

204 
	mªmŸe_q≤
;

205 
	mp¢
;

206 
	mmsg_size
;

207 
	mmsg_°ride
;

208 
	mnum_msgs
;

209 
	mwr_bur°
;

210 
	mmax_wrs
;

211 
	mmax_öl_ªcv_d©a
;

212 
	mmax_ölöe_d©a
;

213 
qp_ötf
 
	mqp_ötf
;

214 
	mtŸÆ_ms
;

215 
ibv_qp
 *
	mqp
;

216 
ibv_sge
 *
	msg_li°
;

217 
ibv_£nd_wr
 *
	m£nd_wr
;

218 
ibv_ªcv_wr
 *
	mªcv_wr
;

219 
ibv_exp_qp_bur°_Ámûy
 *
	mqp_bur°_Ámûy
;

220 *
	mbuf
;

221 
ibv_mr
 *
	mmr
;

224 
	scq_d©a
 {

225 
	mwc_bur°
;

226 
	mcq_size
;

227 
cq_ötf
 
	mcq_ötf
;

228 
ibv_cq
 *
	mcq
;

229 
ibv_wc
 *
	mwc
;

230 
ibv_exp_cq_Ámûy
 *
	mcq_Ámûy
;

233 
	sqp_cq_d©a
 {

234 
	midx
;

235 
qp_d©a
 
	mqp
;

236 
cq_d©a
 
	mcq
;

239 
	#MAX_INLINE_RECV
 512

	)

240 
	götf_c⁄ãxt
;

241 
	sötf_thªad
 {

242 
ötf_c⁄ãxt
 *
	m˘x
;

243 
ibv_exp_ªs_domaö
 *
	msögÀ_ªs_domaö
;

244 
	möÃ_buf
[
MAX_INLINE_RECV
];

245 
uöt32_t
 
	mu£_öÃ
;

246 
	mqp_idx
;

247 
	mthªad_idx
;

248 
	m˝u
;

249 
	m˝u_‰eq
;

252 
	#MAX_MSG_SIZE
 0x10000

	)

254 
	sib_de°
 {

255 
	mlid
;

256 
ibv_gid
 
	mgid
;

257 *
	mq≤
;

258 *
	mp¢
;

261 
	sötf_c⁄ãxt
 {

262 *
	m£rvî«me
;

263 
	mis_£nd
;

264 
	mp‹t
;

265 
	mdev_«me
[
MAX_DEV_NAME_SIZE
];

266 
ibv_devi˚
 *
	mib_dev
;

267 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

268 
ibv_pd
 *
	mpd
;

269 
	mib_p‹t_num
;

270 
	m¶
;

271 
ibv_mtu
 
	mmtu
;

272 
	mnum_qps_cqs
;

273 
qp_cq_d©a
 *
	mqps_cqs
;

274 
	mnum_thªads
;

275 
ötf_thªad
 *
	mthªads
;

276 
£m_t
 
	mthªads_£m
;

277 
£m_t
 
	mthªads_d⁄e_£m
;

278 
	mthªad_°›
;

279 
ibv_exp_devi˚_©å
 
	md©å
;

280 
ib_de°
 
	mªmŸe_d°
;

281 
ib_de°
 
	mloˇl_d°
;

282 
	mcheck_d©a
;

283 
	mu£_ªs_domaö
;

286 
£m_t
 
	g˛k_£m
;

288 
ölöe
 
	$˛k_gë_˝u_hz
(
no_˝u_‰eq_Áû
)

290 
cy˛es_ö_£c
;

292 
	`£m_waô
(&
˛k_£m
);

293 
cy˛es_ö_£c
 = 
	`gë_˝u_mhz
(0) * 1000000;

294 
	`£m_po°
(&
˛k_£m
);

296  
cy˛es_ö_£c
;

297 
	}
}

299 
ölöe
 
cy˛es_t
 
	$˛k_gë_cy˛es
()

301 
cy˛es_t
 
cy˛es
;

303 
	`£m_waô
(&
˛k_£m
);

304 
cy˛es
 = 
	`gë_cy˛es
();

305 
	`£m_po°
(&
˛k_£m
);

307  
cy˛es
;

308 
	}
}

310 
ölöe
 
	$˛k_öô
()

312 
	`£m_öô
(&
˛k_£m
, 0, 1);

313 
	}
}

315 
	#mmax
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

316 
	#mmö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

318 
	$gid_to_wúe_gid
(c⁄° 
ibv_gid
 *
gid
, 
wgid
[])

320 
i
;

321 
uöt32_t
 *
øw
 = (uöt32_à*)
gid
->raw;

323 
i
 = 0; i < 4; ++i)

324 
	`•rötf
(&
wgid
[
i
 * 8], "%08x",

325 
	`ht⁄l
(
øw
[
i
]));

326 
	}
}

328 
	$wúe_gid_to_gid
(c⁄° *
wgid
, c⁄° 
ibv_gid
 *
gid
)

330 
tmp
[9];

331 
uöt32_t
 
v32
;

332 
uöt32_t
 *
øw
 = (uöt32_à*)
gid
->raw;

333 
i
;

335 
tmp
[8] = 0, 
i
 = 0; i < 4; ++i) {

336 
	`mem˝y
(
tmp
, 
wgid
 + 
i
 * 8, 8);

337 i‡(
	`ssˇnf
(
tmp
, "%x", &
v32
) != 1)

338 
v32
 = 0;

339 
øw
[
i
] = 
	`¡ohl
(
v32
);

341 
	}
}

343 
	$gë_ønd
(
a
, 
b
)

345  (
	`Ã™d48
(Ë& 0xffffffffË% (
b
 - 
a
);

346 
	}
}

348 
ölöe
 *
	$íum_to_cq_ötf_°r
(
cq_ötf
 cq_intf)

350 
cq_ötf
) {

351 
NORMAL_POLL_INTF
:  "NORMAL_POLL_INTF";

352 
ACC_POLL_CNT_INTF
:  "ACC_POLL_CNT_INTF";

353 
ACC_POLL_LENGTH_INTF
:  "ACC_POLL_LENGTH_INTF";

354 
ACC_POLL_LENGTH_INL_INTF
:  "ACC_POLL_LENGTH_INL_INTF";

357 
	}
}

362 
ölöe
 
	$qp_pﬁl
(
cq_d©a
 *cq_d©a, c⁄° 
cq_ötf
 cq_ötf, 
ötf_thªad
 *
thªad
Ë
	`__©åibuã__
((
Æways_ölöe
));

363 
ölöe
 
	$qp_pﬁl
(
cq_d©a
 *cq_d©a, c⁄° 
cq_ötf
 cq_ötf, 
ötf_thªad
 *
thªad
)

365 
c⁄sumed
;

366 
i
;

368 
cq_ötf
) {

369 
NORMAL_POLL_INTF
:

370 
c⁄sumed
 = 
	`ibv_pﬁl_cq
(
cq_d©a
->
cq
, cq_d©a->
wc_bur°
, cq_d©a->
wc
);

371 i‡(
	`likñy
(
c⁄sumed
 > 0)) {

372 
i
 = 0; i < 
c⁄sumed
; i++) {

373 i‡(
cq_d©a
->
wc
[
i
].
°©us
) {

374 
	`Ârötf
(
°dîr
, "pﬁl_cqÉº⁄eou†°©u†%d\n", 
cq_d©a
->
wc
[
i
].
°©us
);

382 
ACC_POLL_CNT_INTF
:

383 
c⁄sumed
 = 
cq_d©a
->
cq_Ámûy
->
	`pﬁl_˙t
(cq_d©a->
cq
, cq_d©a->
wc_bur°
);

386 
ACC_POLL_LENGTH_INTF
:

387 
c⁄sumed
 = 
cq_d©a
->
cq_Ámûy
->
	`pﬁl_Àngth
(cq_d©a->
cq
, 
NULL
, NULL);

388 i‡(
c⁄sumed
 > 0)

389 
c⁄sumed
 = 1;

392 
ACC_POLL_LENGTH_INL_INTF
:

393 
c⁄sumed
 = 
cq_d©a
->
cq_Ámûy
->
	`pﬁl_Àngth
(cq_d©a->
cq
, 
thªad
->
öÃ_buf
, &thªad->
u£_öÃ
);

394 i‡(
c⁄sumed
 > 0)

395 
c⁄sumed
 = 1;

399 
	`Ârötf
(
°dîr
, "qp_pﬁ»- i¡îÁ˚ %dÇŸ suµ‹ãd\n", 
cq_ötf
);

400 
c⁄sumed
 = -1;

403  
c⁄sumed
;

404 
	}
}

409 
ölöe
 
	$qp_po°
(
qp_d©a
 *qp_d©a, 
ibv_sge
 *
sg_li°
, 
wr_idx
, c⁄° 
qp_ötf
 qp_ötfË
	`__©åibuã__
((
Æways_ölöe
));

410 
ölöe
 
	$qp_po°
(
qp_d©a
 *qp_d©a, 
ibv_sge
 *
sg_li°
, 
wr_idx
, c⁄° 
qp_ötf
 qp_intf)

412 
i
;

413 
ªt
 = 0;

414 
ibv_ªcv_wr
 *
bad_rwr
;

415 
ibv_£nd_wr
 *
bad_swr
;

417 
qp_ötf
) {

418 
NORMAL_SEND_INTF
:

419 
ªt
 = 
	`ibv_po°_£nd
(
qp_d©a
->
qp
, &qp_d©a->
£nd_wr
[
wr_idx
 % qp_d©a->
max_wrs
], &
bad_swr
);

422 
NORMAL_RECV_INTF
:

423 
ªt
 = 
	`ibv_po°_ªcv
(
qp_d©a
->
qp
, &qp_d©a->
ªcv_wr
[
wr_idx
 % qp_d©a->
max_wrs
], &
bad_rwr
);

426 
ACC_SEND_PENDING_INTF
:

427 
i
 = 0; i < 
qp_d©a
->
wr_bur°
 && !
ªt
; i++) {

428 
ibv_sge
 *
sg_l
 = 
sg_li°
 + 
i
;

430 
ªt
 = 
qp_d©a
->
qp_bur°_Ámûy
->
	`£nd_≥ndög
(qp_d©a->
qp
, 
sg_l
->
addr
, sg_l->
Àngth
, sg_l->
lkey
, 
IBV_EXP_QP_BURST_SIGNALED
);

432 i‡(!
ªt
)

433 
ªt
 = 
qp_d©a
->
qp_bur°_Ámûy
->
	`£nd_Êush
(qp_d©a->
qp
);

436 
ACC_SEND_PENDING_INL_INTF
:

437 
i
 = 0; i < 
qp_d©a
->
wr_bur°
 && !
ªt
; i++) {

438 
ibv_sge
 *
sg_l
 = 
sg_li°
 + 
i
;

440 
ªt
 = 
qp_d©a
->
qp_bur°_Ámûy
->
	`£nd_≥ndög_ölöe
(qp_d©a->
qp
, (*)(
uöçå_t
)
sg_l
->
addr
, sg_l->
Àngth
, 
IBV_EXP_QP_BURST_SIGNALED
);

442 i‡(!
ªt
)

443 
ªt
 = 
qp_d©a
->
qp_bur°_Ámûy
->
	`£nd_Êush
(qp_d©a->
qp
);

446 
ACC_SEND_PENDING_SG_LIST_INTF
:

447 
i
 = 0; i < 
qp_d©a
->
wr_bur°
 && !
ªt
; i++) {

448 
ibv_sge
 *
sg_l
 = 
sg_li°
 + 
i
;

450 
ªt
 = 
qp_d©a
->
qp_bur°_Ámûy
->
	`£nd_≥ndög_sg_li°
(qp_d©a->
qp
, 
sg_l
, 1, 
IBV_EXP_QP_BURST_SIGNALED
);

452 i‡(!
ªt
)

453 
ªt
 = 
qp_d©a
->
qp_bur°_Ámûy
->
	`£nd_Êush
(qp_d©a->
qp
);

456 
ACC_SEND_BURST_INTF
:

457 
ªt
 = 
qp_d©a
->
qp_bur°_Ámûy
->
	`£nd_bur°
(qp_d©a->
qp
, 
sg_li°
, qp_d©a->
wr_bur°
, 
IBV_EXP_QP_BURST_SIGNALED
);

460 
ACC_RECV_BURST_INTF
:

461 
ªt
 = 
qp_d©a
->
qp_bur°_Ámûy
->
	`ªcv_bur°
(qp_d©a->
qp
, 
sg_li°
, qp_d©a->
wr_bur°
);

465 i‡(
	`u∆ikñy
(
ªt
)) {

466 
	`Ârötf
(
°dîr
, "ibv_po°_£nd faûed i¿öãrÁ˚ = %d,Éº = %d\n", 
qp_ötf
, 
ªt
);

470  
qp_d©a
->
wr_bur°
;

471 
	}
}

476 
	$ˇlc_msg_d©a
(
wr_idx
, 
qp_idx
)

478 
d©a
 = ()((
wr_idx
 & 0xFË| (
qp_idx
 << 4));

480  
d©a
;

481 
	}
}

488 
	$is_d©a_vÆid
(*
cuº_pﬁl_wr
, 
c⁄sumed
, 
qp_cq_d©a
 *qp_cq_d©a, 
ötf_thªad
 *
thªad
)

490 
ønd_d©a
;

491 
ønd_wr
 = (*
cuº_pﬁl_wr
 + 
	`gë_ønd
(0, 
c⁄sumed
)Ë% 
qp_cq_d©a
->
qp
.
max_wrs
;

492 
ønd_idx
 = 
	`gë_ønd
(0, 
qp_cq_d©a
->
qp
.
msg_size
);

493 
£nd_d©a
 = 
	`ˇlc_msg_d©a
(
ønd_wr
, 
qp_cq_d©a
->
idx
);

495 i‡(
thªad
->
u£_öÃ
)

496 
ønd_d©a
 = 
thªad
->
öÃ_buf
[
ønd_idx
];

498 
ønd_d©a
 = (
qp_cq_d©a
->
qp
.
buf
 + 
ønd_wr
 * qp_cq_d©a->qp.
msg_°ride
)[
ønd_idx
];

499 i‡(
ønd_d©a
 !
£nd_d©a
) {

500 
wr
, 
i
;

502 
	`Ârötf
(
°dîr
, "Received wrong data onÅhread = %dÉxpected value = 0x%xáctual value = 0x%x\n",

503 
thªad
->
thªad_idx
, 
£nd_d©a
, 
ønd_d©a
);

504 
	`Ârötf
(
°dîr
, " use_inlr %d, curr_poll_wr %ld(0x%lx), consumed %d,Ñand_wr = %d,Ñand_idx = %d msg_size = %d\n",

505 
thªad
->
u£_öÃ
, *
cuº_pﬁl_wr
, *cuº_pﬁl_wr, 
c⁄sumed
, 
ønd_wr
, 
ønd_idx
, 
qp_cq_d©a
->
qp
.
msg_size
);

506 
wr
 = 0; w∏< 
ønd_wr
 + 2; wr++) {

507 
max_¥öt
 = 
	`mmö
(
qp_cq_d©a
->
qp
.
msg_°ride
, 128);

509 
	`Ârötf
(
°dîr
, "w∏%d:", 
wr
);

510 
i
 = 0; i < 
max_¥öt
; i++) {

511 i‡(
i
 =
qp_cq_d©a
->
qp
.
msg_size
)

512 
	`Ârötf
(
°dîr
, " |");

513 
	`Ârötf
(
°dîr
, " %x", *(
qp_cq_d©a
->
qp
.
buf
 + 
wr
 * qp_cq_d©a->qp.
msg_°ride
 + 
i
));

515 
	`Ârötf
(
°dîr
, "\n:");

519 
thªad
->
u£_öÃ
 = 0;

520 *
cuº_pﬁl_wr
 +
c⁄sumed
;

523 
	}
}

532 
ölöe
 
	$£nd_ªcv
(
qp_cq_d©a
 *qp_cq_data,

533 
ötf_thªad
 *
thªad
, c⁄° 
check_d©a
,

534 c⁄° 
qp_ötf
 qp_ötf, 
cq_ötf
 cq_intf)

536 
msg
 = 0;

537 
num_wrs
;

538 
‰ì_wrs
;

539 
c⁄sumed
;

540 
cuº_pﬁl_wr
 = 0;

541 
ibv_sge
 *
ba£_sg_li°
;

543 
num_wrs
 = 
qp_cq_d©a
->
qp
.
max_wrs
;

544 
ba£_sg_li°
 = 
qp_cq_d©a
->
qp
.
sg_li°
;

546 
‰ì_wrs
 = 
	`mmö
(
num_wrs
, 
qp_cq_d©a
->
qp
.
num_msgs
);

548 
msg
 < 
qp_cq_d©a
->
qp
.
num_msgs
) {

550 
‰ì_wrs
 >
qp_cq_d©a
->
qp
.
wr_bur°
) {

551 i‡(
	`qp_po°
(&
qp_cq_d©a
->
qp
, 
ba£_sg_li°
 + (
msg
 % 
num_wrs
), msg, 
qp_ötf
) < 0) {

552 
	`Ârötf
(
°dîr
, "Po° QP(%dËÁûed f‹Åhªad %d\n", 
qp_ötf
, 
thªad
->
thªad_idx
);

555 
msg
 +
qp_cq_d©a
->
qp
.
wr_bur°
;

556 
‰ì_wrs
 -
qp_cq_d©a
->
qp
.
wr_bur°
;

564 
c⁄sumed
 = 
	`qp_pﬁl
(&
qp_cq_d©a
->
cq
, 
cq_ötf
, 
thªad
);

565 i‡(
	`likñy
(
c⁄sumed
 > 0)) {

566 
‰ì_wrs
 +
c⁄sumed
;

567 i‡(
	`u∆ikñy
(
check_d©a
))

568 i‡(!
	`is_d©a_vÆid
(&
cuº_pﬁl_wr
, 
c⁄sumed
, 
qp_cq_d©a
, 
thªad
))

570 } i‡(
c⁄sumed
 < 0) {

571 
	`Ârötf
(
°dîr
, "Pﬁ»CQ(%sËÁûed f‹Åhªad %d\n", 
	`íum_to_cq_ötf_°r
(
cq_ötf
), 
thªad
->
thªad_idx
);

574 } 
‰ì_wrs
 < 
qp_cq_d©a
->
qp
.
wr_bur°
 && 
msg
 < qp_cq_d©a->qp.
num_msgs
);

578 
	}
}

580 
qp_ötf
 
	g£nd_2_qp
[
IN_NUM_SEND_INTF
] = {

581 [
IN_NORMAL_SEND_INTF
] = 
NORMAL_SEND_INTF
,

582 [
IN_ACC_SEND_PENDING_INTF
] = 
ACC_SEND_PENDING_INTF
,

583 [
IN_ACC_SEND_PENDING_INL_INTF
] = 
ACC_SEND_PENDING_INL_INTF
,

584 [
IN_ACC_SEND_PENDING_SG_LIST_INTF
] = 
ACC_SEND_PENDING_SG_LIST_INTF
,

585 [
IN_ACC_SEND_BURST_INTF
] = 
ACC_SEND_BURST_INTF
,

588 
qp_ötf
 
	gªcv_2_qp
[
IN_NUM_POLL_INTF
] = {

589 [
IN_NORMAL_RECV_INTF
] = 
NORMAL_RECV_INTF
,

590 [
IN_ACC_RECV_BURST_INTF
] = 
ACC_RECV_BURST_INTF
,

593 
cq_ötf
 
	gpﬁl_2_cq
[
IN_NUM_POLL_INTF
] = {

594 [
IN_NORMAL_POLL_INTF
] = 
NORMAL_POLL_INTF
,

595 [
IN_ACC_POLL_CNT_INTF
] = 
ACC_POLL_CNT_INTF
,

596 [
IN_ACC_POLL_LENGTH_INTF
] = 
ACC_POLL_LENGTH_INTF
,

599 
	$run_thªad_⁄_˝u
(
˝u
, 
thªad_idx
) {

600 
j
;

601 
˝u_£t_t
 
˝u£t
;

602 
±hªad_t
 
±hªad
;

604 
±hªad
 = 
	`±hªad_£lf
();

607 
	`CPU_ZERO
(&
˝u£t
);

608 
	`CPU_SET
(
˝u
, &
˝u£t
);

611 i‡(
	`±hªad_£èfföôy_≈
(
±hªad
, (
˝u_£t_t
), &
˝u£t
))

615 i‡(
	`±hªad_gëafföôy_≈
(
±hªad
, (
˝u_£t_t
), &
˝u£t
)) {

616 
	`Ârötf
(
°dîr
, "Couldn't getÅhread(%d)áffinity\n",

617 
thªad_idx
);

619 
j
 = 0; j < 
CPU_SETSIZE
; j++)

620 i‡(
	`CPU_ISSET
(
j
, &
˝u£t
Ë&& (j !
˝u
))

625 
	}
}

633 *
	$__thªad_wøp
(*
¨g
)

635 
cy˛es_t
 
°¨t
;

636 
ötf_thªad
 *
thªad
 = (ötf_thªad *)
¨g
;

637 
qp_cq_d©a
 *
qp_cq
 = &
thªad
->
˘x
->
qps_cqs
[thªad->
qp_idx
];

638 
check_d©a
 = 
thªad
->
˘x
->check_data;

642 i‡(
	`run_thªad_⁄_˝u
(
thªad
->
˝u
,Åhªad->
thªad_idx
)) {

643 
	`Ârötf
(
°dîr
, "Couldn'tÑunÅhread %d on cpu %d (errno = %d)\n",

644 
thªad
->
thªad_idx
,Åhªad->
˝u
, 
î∫o
);

645 
thªad_out
;

647 
	`¥ötf
("\tThªad %d - Sèπ o¿˝u %d\n", 
thªad
->
thªad_idx
,Åhªad->
˝u
);

651 
thªad
->
˝u_‰eq
 = ()
	`˛k_gë_˝u_hz
(0);

652 i‡(
thªad
->
˝u_‰eq
 == 0)

653 
	`Ârötf
(
°dîr
, "C™'àgë cpu(%dË‰equícy\n", 
thªad
->
˝u
);

656 
	`£m_waô
(&
thªad
->
˘x
->
thªads_£m
);

658 
qp_cq
->
qp
.
tŸÆ_ms
 = 
INVALID_DURATION
;

660 
°¨t
 = 
	`˛k_gë_cy˛es
();

663 i‡(
	`£nd_ªcv
(
qp_cq
, 
thªad
, 
check_d©a
, qp_cq->
qp
.
qp_ötf
, qp_cq->
cq
.
cq_ötf
) ||

664 !
thªad
->
˝u_‰eq
)

666 
thªad_out
;

669 
qp_cq
->
qp
.
tŸÆ_ms
 = ((
	`˛k_gë_cy˛es
(Ë- 
°¨t
) * 1000) /

670 
thªad
->
˝u_‰eq
;

672 
thªad_out
:

674 
	`£m_po°
(&
thªad
->
˘x
->
thªads_d⁄e_£m
);

675 
	`¥ötf
("\tThªad %d - d⁄e\n", 
thªad
->
thªad_idx
);

676 
	`±hªad_exô
(
NULL
);

677 
	}
}

679 
ölöe
 *
	$£nd_íum_to_vîbs_ötf_°r
(
öput_£nd_ötf
 
vîbs_ötf
)

681 
vîbs_ötf
) {

682 
IN_NORMAL_SEND_INTF
:  "S_NORM";

683 
IN_ACC_SEND_PENDING_INTF
:  "S_PEND";

684 
IN_ACC_SEND_PENDING_INL_INTF
:  "S_PEND_INL";

685 
IN_ACC_SEND_PENDING_SG_LIST_INTF
:  "S_PEND_SG_LIST";

686 
IN_ACC_SEND_BURST_INTF
:  "S_BURST";

689 
	}
}

691 
ölöe
 *
	$ªcv_íum_to_vîbs_ötf_°r
(
öput_ªcv_ötf
 
vîbs_ötf
)

693 
vîbs_ötf
) {

694 
IN_NORMAL_RECV_INTF
:  "R_NORM";

695 
IN_ACC_RECV_BURST_INTF
:  "R_BURST";

698 
	}
}

700 
ölöe
 *
	$pﬁl_íum_to_vîbs_ötf_°r
(
öput_pﬁl_ötf
 
vîbs_ötf
)

702 
vîbs_ötf
) {

703 
IN_NORMAL_POLL_INTF
:  "P_NORM";

704 
IN_ACC_POLL_CNT_INTF
:  "P_CNT";

705 
IN_ACC_POLL_LENGTH_INTF
:  "P_LEN";

708 
	}
}

710 
ölöe
 *
	$qp_ötf_to_∑øm_°r
(
qp_ötf
 
vîbs_ötf
)

712 
vîbs_ötf
) {

713 
NORMAL_SEND_INTF
:  "S_NORM";

714 
NORMAL_RECV_INTF
:  "R_NORM";

715 
ACC_SEND_PENDING_INTF
:  "S_PEND";

716 
ACC_SEND_PENDING_INL_INTF
:  "S_PEND_INL";

717 
ACC_SEND_PENDING_SG_LIST_INTF
:  "S_PEND_SG_LIST";

718 
ACC_SEND_BURST_INTF
:  "S_BURST";

719 
ACC_RECV_BURST_INTF
:  "R_BURST";

722 
	}
}

724 
ölöe
 *
	$cq_ötf_to_∑øm_°r
(
cq_ötf
 
vîbs_ötf
)

726 
vîbs_ötf
) {

727 
NORMAL_POLL_INTF
:  "P_NORM";

728 
ACC_POLL_CNT_INTF
:  "P_CNT";

729 
ACC_POLL_LENGTH_INTF
:  "P_LEN";

730 
ACC_POLL_LENGTH_INL_INTF
:  "P_LEN";

733 
	}
}

735 
	$¥öt_qp_ªp‹t
(
qp_cq_d©a
 *qp_cq_d©a, 
£nd
)

738 
qp_d©a
 *qp_d©®&
qp_cq_d©a
->
qp
;

739 *
po°_s
 = 
	`qp_ötf_to_∑øm_°r
(
qp_d©a
->
qp_ötf
);

740 *
pﬁl_s
 = 
	`cq_ötf_to_∑øm_°r
(
qp_cq_d©a
->
cq
.
cq_ötf
);

741 
mps
;

743 i‡(!
qp_d©a
->
tŸÆ_ms
 || qp_d©a->tŸÆ_m†=
INVALID_DURATION
) {

744 i‡(
qp_d©a
->
tŸÆ_ms
 =
INVALID_DURATION
)

745 
	`¥ötf
("\tTestÉxecutionáborted!\n");

747 
	`¥ötf
("\tTestÉxecutionÅime isÅoo shortÅo measure!\n");

748 
mps
 = 0;

750 
mps
 = (
qp_d©a
->
num_msgs
 * 1000Ë/ qp_d©a->
tŸÆ_ms
;

752 
	`¥ötf
("\tmsg_size = %d,Çum_sge = 1, wr_burst = %d, intf = %s:%s,Çum_msgs = %'ld,Åime_ms = %'ld",

753 
qp_d©a
->
msg_size
, qp_d©a->
wr_bur°
, 
po°_s
, 
pﬁl_s
,

754 
qp_d©a
->
num_msgs
, qp_d©a->
tŸÆ_ms
);

755 i‡(
mps
)

756 
	`¥ötf
(" mp†%'ld\n", 
mps
);

758 
	`¥ötf
("\n");

759 
	}
}

761 
	$¥öt_thªad_ªp‹t
(
ötf_thªad
 *
thªad
)

763 
	`¥ötf
("Thread %d: CPU = %d MHz = %ld\n",

764 
thªad
->
thªad_idx
,Åhªad->
˝u
,Åhªad->
˝u_‰eq
/1000000);

766 i‡(!
thªad
->
˘x
->
thªad_°›
) {

767 
	`¥ötf
("\t%s QP %d data:\n",

768 
thªad
->
˘x
->
is_£nd
 ? "Send" : "Recv",

769 
thªad
->
qp_idx
);

770 
	`¥öt_qp_ªp‹t
(&
thªad
->
˘x
->
qps_cqs
[thªad->
qp_idx
],

771 
thªad
->
˘x
->
is_£nd
);

773 
	}
}

775 
	$¥öt_globÆ_ªp‹t
(
ötf_c⁄ãxt
 *
˘x
)

777 
	`¥ötf
("GlobalÅestÖarameters: check_data = %d use_res_domain = %d\n",

778 
˘x
->
check_d©a
, ctx->
u£_ªs_domaö
);

779 
	}
}

781 
	$run_thªads
(
ötf_c⁄ãxt
 *
˘x
)

783 
i
, 
j
;

784 
îr
;

785 
±hªad_t
 
tid
;

787 
	`£m_öô
(&
˘x
->
thªads_£m
, 0, 0);

788 
	`£m_öô
(&
˘x
->
thªads_d⁄e_£m
, 0, 0);

789 
	`˛k_öô
();

790 
i
 = 0; i < 
˘x
->
num_thªads
; i++) {

791 
˘x
->
thªads
[
i
].
thªad_idx
 = i;

792 
˘x
->
thªads
[
i
].ctx = ctx;

793 
îr
 = 
	`±hªad_¸óã
(&
tid
, 
NULL
, 
__thªad_wøp
, &
˘x
->
thªads
[
i
]);

794 i‡(
îr
 != 0) {

795 
	`Ârötf
(
°dîr
, "C™'à¸óãÅhªad :[%s]", 
	`°ªº‹
(
îr
));

796 
˛ón_thªads
;

800 
i
 = 0; i < 
˘x
->
num_thªads
; i++)

801 
	`£m_po°
(&
˘x
->
thªads_£m
);

803 
i
 = 0; i < 
˘x
->
num_thªads
; i++)

804 
	`£m_waô
(&
˘x
->
thªads_d⁄e_£m
);

806 
	`¥öt_globÆ_ªp‹t
(
˘x
);

807 
i
 = 0; i < 
˘x
->
num_thªads
; i++)

808 
	`¥öt_thªad_ªp‹t
(&
˘x
->
thªads
[
i
]);

812 
˛ón_thªads
:

814 
˘x
->
thªad_°›
 = 1;

815 
j
 = 
i
 ; j > 0; j--)

816 
	`£m_po°
(&
˘x
->
thªads_£m
);

818 
j
 = 
i
 ; j > 0; j--)

819 
	`£m_waô
(&
˘x
->
thªads_d⁄e_£m
);

822 
	}
}

824 
	$c⁄√˘_qp
(
ibv_qp
 *
qp
, 
p‹t
, 
my_p¢
,

825 
ibv_mtu
 
mtu
, 
¶
,

826 
ibv_gid
 
r_gid
, 
r_lid
, 
r_p¢
, 
r_q≤
,

827 
sgid_idx
)

829 
ibv_qp_©å
 
©å
 = {

830 .
qp_°©e
 = 
IBV_QPS_RTR
,

831 .
∑th_mtu
 = 
mtu
,

832 .
de°_qp_num
 = 
r_q≤
,

833 .
rq_p¢
 = 
r_p¢
,

834 .
max_de°_rd_©omic
 = 1,

835 .
mö_∫r_timî
 = 12,

836 .
ah_©å
 = {

837 .
is_globÆ
 = 0,

838 .
dlid
 = 
r_lid
,

839 .
¶
 = sl,

840 .
§c_∑th_bôs
 = 0,

841 .
p‹t_num
 = 
p‹t


845 i‡(
r_gid
.
globÆ
.
öãrÁ˚_id
) {

846 
©å
.
ah_©å
.
is_globÆ
 = 1;

847 
©å
.
ah_©å
.
grh
.
h›_limô
 = 1;

848 
©å
.
ah_©å
.
grh
.
dgid
 = 
r_gid
;

849 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
sgid_idx
;

851 i‡(
	`ibv_modify_qp
(
qp
, &
©å
,

852 
IBV_QP_STATE
 |

853 
IBV_QP_AV
 |

854 
IBV_QP_PATH_MTU
 |

855 
IBV_QP_DEST_QPN
 |

856 
IBV_QP_RQ_PSN
 |

857 
IBV_QP_MAX_DEST_RD_ATOMIC
 |

858 
IBV_QP_MIN_RNR_TIMER
)) {

859 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

863 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

864 
©å
.
timeout
 = 14;

865 
©å
.
ªåy_˙t
 = 7;

866 
©å
.
∫r_ªåy
 = 7;

867 
©å
.
sq_p¢
 = 
my_p¢
;

868 
©å
.
max_rd_©omic
 = 1;

869 i‡(
	`ibv_modify_qp
(
qp
, &
©å
,

870 
IBV_QP_STATE
 |

871 
IBV_QP_TIMEOUT
 |

872 
IBV_QP_RETRY_CNT
 |

873 
IBV_QP_RNR_RETRY
 |

874 
IBV_QP_SQ_PSN
 |

875 
IBV_QP_MAX_QP_RD_ATOMIC
)) {

876 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

881 
	}
}

884 
	$¸óã_cq
(
ötf_c⁄ãxt
 *
˘x
,

885 
qp_cq_d©a
 *
qps_cqs
,

886 
ibv_exp_cq_öô_©å
 *
öô_©å
,

887 
ibv_exp_quîy_ötf_∑øms
 *
ötf_∑øms
)

889 
ibv_exp_quîy_ötf_°©us
 
ötf_°©us
;

891 
qps_cqs
->
cq
.
wc
 = 
	`ˇŒoc
(1, (
ibv_wc
Ë* qps_cqs->cq.
wc_bur°
);

893 i‡(!
qps_cqs
->
cq
.
wc
)

896 
öô_©å
->
ªs_domaö
 = 
˘x
->
thªads
[
qps_cqs
->
idx
].
sögÀ_ªs_domaö
;

898 
qps_cqs
->
cq
.cq = 
	`ibv_exp_¸óã_cq
(
˘x
->
c⁄ãxt
, qps_cqs->cq.
cq_size
,

899 
NULL
, NULL, 0, 
öô_©å
);

900 i‡(!
qps_cqs
->
cq
.cq) {

901 
	`Ârötf
(
°dîr
, "Couldn'à¸óã CQ (î∫ÿ%d)\n", 
î∫o
);

902 
‰ì_wc
;

905 
ötf_∑øms
->
ötf
 = 
IBV_EXP_INTF_CQ
;

906 
ötf_∑øms
->
obj
 = 
qps_cqs
->
cq
.cq;

907 i‡(
qps_cqs
->
cq
.
cq_ötf
 !
NORMAL_POLL_INTF
) {

908 
qps_cqs
->
cq
.
cq_Ámûy
 = 
	`ibv_exp_quîy_ötf
(
˘x
->
c⁄ãxt
, 
ötf_∑øms
, &
ötf_°©us
);

909 i‡(!
qps_cqs
->
cq
.
cq_Ámûy
) {

910 
	`Ârötf
(
°dîr
, "Couldn'à¸óã CQ famûy (ötf_°©u†%d)\n", 
ötf_°©us
);

911 
de°roy_cq
;

917 
de°roy_cq
:

918 
	`ibv_de°roy_cq
(
qps_cqs
->
cq
.cq);

920 
‰ì_wc
:

921 
	`‰ì
(
qps_cqs
->
cq
.
wc
);

924 
	}
}

926 
	$de°roy_cq
(
ötf_c⁄ãxt
 *
˘x
,

927 
qp_cq_d©a
 *
qps_cqs
,

928 
ibv_exp_ªÀa£_ötf_∑øms
 *
ªl_ötf
)

930 
	`ibv_exp_ªÀa£_ötf
(
˘x
->
c⁄ãxt
, 
qps_cqs
->
cq
.
cq_Ámûy
, 
ªl_ötf
);

931 
	`ibv_de°roy_cq
(
qps_cqs
->
cq
.cq);

932 
	`‰ì
(
qps_cqs
->
cq
.
wc
);

933 
	}
}

935 
	$¸óã_qp
(
ötf_c⁄ãxt
 *
˘x
,

936 
qp_cq_d©a
 *
qps_cqs
,

937 
ibv_qp_©å
 *
©å
,

938 
ibv_exp_qp_öô_©å
 *
öô_©å
,

939 
ibv_exp_quîy_ötf_∑øms
 *
ötf_∑øms
)

941 
ibv_exp_quîy_ötf_°©us
 
ötf_°©us
;

942 
qp_d©a
 *
qp
 = &
qps_cqs
->qp;

943 
max_wr
;

944 *
tmp
;

945 
j
;

947 
öô_©å
->
ªcv_cq
 = 
qps_cqs
->
cq
.cq;

948 
öô_©å
->
£nd_cq
 = 
qps_cqs
->
cq
.cq;

950 
öô_©å
->
pd
 = 
˘x
->pd,

951 
öô_©å
->
max_öl_ªcv
 = 
qp
->
max_öl_ªcv_d©a
;

952 
öô_©å
->
ˇp
.
max_£nd_wr
 = 
qp
->
max_wrs
,

953 
öô_©å
->
ˇp
.
max_ªcv_wr
 = 
qp
->
max_wrs
,

954 
öô_©å
->
ˇp
.
max_£nd_sge
 = 1,

955 
öô_©å
->
ˇp
.
max_ªcv_sge
 = 1,

956 
öô_©å
->
ˇp
.
max_ölöe_d©a
 = 
qp
->max_inline_data,

957 
öô_©å
->
qp_ty≥
 = 
IBV_QPT_RC
;

959 
qp
->
p¢
 = 
	`Ã™d48
() & 0xffffff;

962 
max_wr
 = 
qp
->
max_wrs
;

963 
qp
->
sg_li°
 = 
	`ˇŒoc
(1, 
max_wr
 * (
ibv_sge
));

964 i‡(
˘x
->
is_£nd
) {

965 
qp
->
£nd_wr
 = 
	`ˇŒoc
(1, (
ibv_£nd_wr
Ë* 
max_wr
);

966 
tmp
 = 
qp
->
£nd_wr
;

968 
qp
->
ªcv_wr
 = 
	`ˇŒoc
(1, (
ibv_ªcv_wr
Ë* 
max_wr
);

969 
tmp
 = 
qp
->
ªcv_wr
;

971 i‡(!
tmp
 || !
qp
->
sg_li°
) {

972 
	`Ârötf
(
°dîr
, "Couldn'tállocate WRs/WCs buffers\n");

973 
˛ón_qp
;

977 
öô_©å
->
ªs_domaö
 = 
˘x
->
thªads
[
qps_cqs
->
idx
].
sögÀ_ªs_domaö
;

978 
öô_©å
->
max_öl_ªcv
 = 
qp
->
max_öl_ªcv_d©a
;

979 i‡(
qp
->
max_öl_ªcv_d©a
)

980 
öô_©å
->
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_INL_RECV
;

982 
öô_©å
->
comp_mask
 &~
IBV_EXP_QP_INIT_ATTR_INL_RECV
;

984 
qp
->q∞
	`ibv_exp_¸óã_qp
(
˘x
->
c⁄ãxt
, 
öô_©å
);

985 i‡(!
qp
->qp) {

986 
	`Ârötf
(
°dîr
, "Couldn't create QP\n");

987 
˛ón_qp
;

991 
qp
->
msg_°ride
 = 
	`mmax
(qp->
msg_size
, 64);

992 
qp
->
buf
 = 
	`memÆign
(
	`sysc⁄f
(
_SC_PAGESIZE
), 
max_wr
 * qp->
msg_°ride
);

993 i‡(!
qp
->
buf
) {

994 
	`Ârötf
(
°dîr
, "Couldn'àÆloˇãÑecv/£nd buf‡f‹ qp[%d]\n", 
qps_cqs
->
idx
);

995 
de°roy_qp
;

997 
qp
->
mr
 = 
	`ibv_ªg_mr
(
˘x
->
pd
, qp->
buf
, 
max_wr
 * qp->
msg_°ride
,

998 
IBV_ACCESS_LOCAL_WRITE
);

999 i‡(!
qp
->
mr
) {

1000 
	`Ârötf
(
°dîr
, "Couldn'àÆloˇãÑecv/£nd MR f‹ qp[%d]\n", 
qps_cqs
->
idx
);

1001 
‰ì_buf
;

1005 i‡(
	`ibv_modify_qp
(
qp
->qp, 
©å
,

1006 
IBV_QP_STATE
 |

1007 
IBV_QP_PKEY_INDEX
 |

1008 
IBV_QP_PORT
 |

1009 
IBV_QP_ACCESS_FLAGS
)) {

1010 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

1011 
dîeg_mr
;

1016 
j
 = 0; j < 
max_wr
; j++) {

1017 *
msg_buf
 = 
qp
->
buf
 + (
j
 * qp->
msg_°ride
);

1018 
£nd_d©a
 = 
	`ˇlc_msg_d©a
(
j
, 
qps_cqs
->
idx
);

1019 
£g_size
 = 
qp
->
msg_size
;

1021 i‡(
˘x
->
is_£nd
)

1022 
	`mem£t
(
msg_buf
, 
£nd_d©a
, 
qp
->
msg_size
);

1024 
qp
->
sg_li°
[
j
].
addr
 = (
uöçå_t
)
msg_buf
;

1025 
qp
->
sg_li°
[
j
].
Àngth
 = 
£g_size
;

1026 
qp
->
sg_li°
[
j
].
lkey
 = qp->
mr
->lkey;

1028 
msg_buf
 +
£g_size
;

1029 i‡(
˘x
->
is_£nd
) {

1031 
ibv_£nd_wr
 *
£nd_wr
 = &
qp
->£nd_wr[
j
];

1033 i‡(
j
 % 
qp
->
wr_bur°
 != qp->wr_burst - 1)

1034 
£nd_wr
->
√xt
 = &
qp
->£nd_wr[
j
 + 1];

1035 
£nd_wr
->
num_sge
 = 1;

1036 
£nd_wr
->
›code
 = 
IBV_WR_SEND
;

1037 
£nd_wr
->
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

1038 
£nd_wr
->
sg_li°
 = &
qp
->sg_li°[
j
];

1041 
ibv_ªcv_wr
 *
ªcv_wr
 = &
qp
->ªcv_wr[
j
];

1043 i‡(
j
 % 
qp
->
wr_bur°
 != qp->wr_burst - 1)

1044 
ªcv_wr
->
√xt
 = &
qp
->ªcv_wr[
j
 + 1];

1045 
ªcv_wr
->
num_sge
 = 1;

1046 
ªcv_wr
->
sg_li°
 = &
qp
->sg_li°[
j
];

1051 
ötf_∑øms
->
ötf
 = 
IBV_EXP_INTF_QP_BURST
;

1052 
ötf_∑øms
->
obj
 = 
qp
->qp;

1053 i‡(
qp
->
qp_ötf
 !
NORMAL_RECV_INTF
 && qp->qp_öt‡!
NORMAL_SEND_INTF
) {

1054 
qp
->
qp_bur°_Ámûy
 = 
	`ibv_exp_quîy_ötf
(
˘x
->
c⁄ãxt
, 
ötf_∑øms
, &
ötf_°©us
);

1055 i‡(!
qp
->
qp_bur°_Ámûy
) {

1056 
	`Ârötf
(
°dîr
, "FaûÅÿquîy QP bur° famûy (ötf_°©u†%d)\n", 
ötf_°©us
);

1057 
dîeg_mr
;

1063 
dîeg_mr
:

1064 
	`ibv_dîeg_mr
(
qp
->
mr
);

1066 
‰ì_buf
:

1067 
	`‰ì
(
qp
->
buf
);

1069 
de°roy_qp
:

1070 
	`ibv_de°roy_qp
(
qp
->qp);

1072 
˛ón_qp
:

1073 i‡(!
qp
->
£nd_wr
)

1074 
	`‰ì
(
qp
->
£nd_wr
);

1075 i‡(!
qp
->
ªcv_wr
)

1076 
	`‰ì
(
qp
->
ªcv_wr
);

1077 
	`‰ì
(
qp
->
sg_li°
);

1080 
	}
}

1082 
	$de°roy_qp
(
ötf_c⁄ãxt
 *
˘x
,

1083 
qp_cq_d©a
 *
qps_cqs
,

1084 
ibv_exp_ªÀa£_ötf_∑øms
 *
ªl_ötf
)

1086 
qp_d©a
 *
qp
 = &
qps_cqs
->qp;

1088 i‡(
qp
->
qp_bur°_Ámûy
)

1089 
	`ibv_exp_ªÀa£_ötf
(
˘x
->
c⁄ãxt
, 
qp
->
qp_bur°_Ámûy
, 
ªl_ötf
);

1091 
	`ibv_dîeg_mr
(
qp
->
mr
);

1092 
	`‰ì
(
qp
->
buf
);

1093 
	`ibv_de°roy_qp
(
qp
->qp);

1094 i‡(!
qp
->
£nd_wr
)

1095 
	`‰ì
(
qp
->
£nd_wr
);

1096 i‡(!
qp
->
ªcv_wr
)

1097 
	`‰ì
(
qp
->
ªcv_wr
);

1098 i‡(!
qp
->
sg_li°
)

1099 
	`‰ì
(
qp
->
sg_li°
);

1100 
	}
}

1102 
	$öô_qps_cqs
(
ötf_c⁄ãxt
 *
˘x
)

1104 
i
;

1105 
ibv_exp_qp_öô_©å
 
qp_öô_©å
;

1106 
ibv_exp_cq_öô_©å
 
cq_öô_©å
;

1107 
ibv_exp_quîy_ötf_∑øms
 
ötf_∑øms
;

1108 
ibv_exp_ªÀa£_ötf_∑øms
 
ªl_ötf_∑øms
;

1109 
ibv_qp_©å
 
qp_©å
;

1111 
	`mem£t
(&
qp_©å
, 0, (qp_attr));

1112 
	`mem£t
(&
cq_öô_©å
, 0, (cq_init_attr));

1113 
	`mem£t
(&
qp_öô_©å
, 0, (qp_init_attr));

1114 
	`mem£t
(&
ötf_∑øms
, 0, (intf_params));

1115 
	`mem£t
(&
ªl_ötf_∑øms
, 0, (rel_intf_params));

1117 
qp_öô_©å
.
comp_mask
 = 
IBV_EXP_QP_INIT_ATTR_PD
 |

1118 
IBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 |

1119 
IBV_EXP_QP_INIT_ATTR_INL_RECV
;

1120 i‡(
˘x
->
u£_ªs_domaö
) {

1121 
cq_öô_©å
.
comp_mask
 = 
IBV_EXP_CQ_INIT_ATTR_RES_DOMAIN
;

1122 
qp_öô_©å
.
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_RES_DOMAIN
;

1125 
qp_©å
.
qp_°©e
 = 
IBV_QPS_INIT
;

1126 
qp_©å
.
pkey_ödex
 = 0;

1127 
qp_©å
.
p‹t_num
 = 
˘x
->
ib_p‹t_num
;

1128 
qp_©å
.
qp_ac˚ss_Êags
 = 0;

1130 
ötf_∑øms
.
ötf_sc›e
 = 
IBV_EXP_INTF_GLOBAL
;

1132 
i
 = 0; i < 
˘x
->
num_qps_cqs
; i++) {

1133 i‡(
	`¸óã_cq
(
˘x
, &˘x->
qps_cqs
[
i
], &
cq_öô_©å
, &
ötf_∑øms
))

1134 
˛ón_qps_cqs
;

1136 i‡(
	`¸óã_qp
(
˘x
, &˘x->
qps_cqs
[
i
], &
qp_©å
, &
qp_öô_©å
, &
ötf_∑øms
)) {

1137 
	`de°roy_cq
(
˘x
, &˘x->
qps_cqs
[
i
], &
ªl_ötf_∑øms
);

1138 
˛ón_qps_cqs
;

1144 
˛ón_qps_cqs
:

1145 ; 
i
 > 0; i--) {

1146 
	`de°roy_cq
(
˘x
, &˘x->
qps_cqs
[
i
], &
ªl_ötf_∑øms
);

1147 
	`de°roy_qp
(
˘x
, &˘x->
qps_cqs
[
i
], &
ªl_ötf_∑øms
);

1151 
	}
}

1153 
	$de°roy_qps_cqs
(
ötf_c⁄ãxt
 *
˘x
)

1155 
ibv_exp_ªÀa£_ötf_∑øms
 
ªl_ötf_∑øms
;

1156 
i
;

1158 
	`mem£t
(&
ªl_ötf_∑øms
, 0, (rel_intf_params));

1159 
i
 = 0; i < 
˘x
->
num_qps_cqs
; i++) {

1160 
	`de°roy_cq
(
˘x
, &˘x->
qps_cqs
[
i
], &
ªl_ötf_∑øms
);

1161 
	`de°roy_qp
(
˘x
, &˘x->
qps_cqs
[
i
], &
ªl_ötf_∑øms
);

1165 
	}
}

1167 
	$öô_ªs_domaös
(
ötf_c⁄ãxt
 *
˘x
)

1169 
ibv_exp_de°roy_ªs_domaö_©å
 
de°_ªs_dom_©å
;

1170 
ibv_exp_ªs_domaö_öô_©å
 
ªs_domaö_©å
;

1171 
i
;

1173 
ªs_domaö_©å
.
comp_mask
 = 
IBV_EXP_RES_DOMAIN_THREAD_MODEL
 | 
IBV_EXP_RES_DOMAIN_MSG_MODEL
;

1174 
ªs_domaö_©å
.
thªad_modñ
 = 
IBV_EXP_THREAD_SINGLE
;

1175 
ªs_domaö_©å
.
msg_modñ
 = 
IBV_EXP_MSG_HIGH_BW
;

1179 
i
 = 0; i < 
˘x
->
num_thªads
; i++) {

1180 
˘x
->
thªads
[
i
].
sögÀ_ªs_domaö
 = 
	`ibv_exp_¸óã_ªs_domaö
(˘x->
c⁄ãxt
, &
ªs_domaö_©å
);

1181 i‡(!
˘x
->
thªads
[
i
].
sögÀ_ªs_domaö
) {

1182 
	`Ârötf
(
°dîr
, "C™'à¸óãÑesour˚ domaö f‹Åhªad %dÉºnÿ%d\n", 
i
, 
î∫o
);

1183 
˛ónup
;

1189 
˛ónup
:

1190 
de°_ªs_dom_©å
.
comp_mask
 = 0;

1191 ; 
i
 > 0; i--)

1192 
	`ibv_exp_de°roy_ªs_domaö
(
˘x
->
c⁄ãxt
, ctx->
thªads
[
i
 - 1].
sögÀ_ªs_domaö
, &
de°_ªs_dom_©å
);

1195 
	}
}

1197 
	$˛ón_ªs_domaös
(
ötf_c⁄ãxt
 *
˘x
)

1199 
ibv_exp_de°roy_ªs_domaö_©å
 
de°_ªs_dom_©å
;

1200 
i
;

1202 
de°_ªs_dom_©å
.
comp_mask
 = 0;

1204 
i
 = 0; i < 
˘x
->
num_thªads
; i++)

1205 
	`ibv_exp_de°roy_ªs_domaö
(
˘x
->
c⁄ãxt
, ctx->
thªads
[
i
].
sögÀ_ªs_domaö
, &
de°_ªs_dom_©å
);

1208 
	}
}

1210 
	$¸óã_ªsour˚s
(
ötf_c⁄ãxt
 *
˘x
)

1212 
ibv_devi˚
 **
dev_li°
;

1213 
i
;

1215 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

1216 i‡(!
dev_li°
) {

1217 
	`≥º‹
("FailedÅo get IB devicesÜist");

1221 i‡(!
˘x
->
dev_«me
) {

1222 
˘x
->
ib_dev
 = *
dev_li°
;

1223 i‡(!
˘x
->
ib_dev
) {

1224 
	`Ârötf
(
°dîr
, "No IB devices found\n");

1228 
i
 = 0; 
dev_li°
[i]; ++i)

1229 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
˘x
->
dev_«me
)) {

1230 
˘x
->
ib_dev
 = 
dev_li°
[
i
];

1233 i‡(!
˘x
->
ib_dev
) {

1234 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
˘x
->
dev_«me
);

1239 
˘x
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(˘x->
ib_dev
);

1240 i‡(!
˘x
->
c⁄ãxt
) {

1241 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

1242 
	`ibv_gë_devi˚_«me
(
˘x
->
ib_dev
));

1246 
˘x
->
pd
 = 
	`ibv_Æloc_pd
(˘x->
c⁄ãxt
);

1247 i‡(!
˘x
->
pd
) {

1248 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

1249 
˛ón_devi˚
;

1252 i‡(
˘x
->
u£_ªs_domaö
) {

1253 
˘x
->
d©å
.
comp_mask
 = 
IBV_EXP_DEVICE_ATTR_CALC_CAP
 |

1254 
IBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
 |

1255 
IBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
 |

1256 
IBV_EXP_DEVICE_ATTR_EXT_ATOMIC_ARGS
 |

1257 
IBV_EXP_DEVICE_ATTR_MAX_CTX_RES_DOMAIN
;

1259 i‡(
	`ibv_exp_quîy_devi˚
(
˘x
->
c⁄ãxt
, &˘x->
d©å
)) {

1260 
	`Ârötf
(
°dîr
, "Couldn't query device capabilities.\n");

1261 
˛ón_pd
;

1263 i‡(!(
˘x
->
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_CTX_RES_DOMAIN
)) {

1264 
	`Ârötf
(
°dîr
, "query-device failedÅoÑetrieve max_ctx_res_domain\n");

1265 
˛ón_pd
;

1267 i‡(
˘x
->
num_thªads
 > ctx->
d©å
.
max_˘x_ªs_domaö
) {

1268 
	`Ârötf
(
°dîr
, "can'tállocateÑesource domainÖerÅhread,Ñequired=%d,ávailable=%d\n",

1269 
˘x
->
num_thªads
, ctx->
d©å
.
max_˘x_ªs_domaö
);

1270 
˛ón_pd
;

1272 i‡(
	`öô_ªs_domaös
(
˘x
))

1273 
˛ón_pd
;

1276 i‡(
	`öô_qps_cqs
(
˘x
))

1277 
˛ón_ªs_doms
;

1281 
˛ón_ªs_doms
:

1282 i‡(
˘x
->
u£_ªs_domaö
)

1283 
	`˛ón_ªs_domaös
(
˘x
);

1285 
˛ón_pd
:

1286 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

1288 
˛ón_devi˚
:

1289 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

1292 
	}
}

1293 
	$de°roy_ªsour˚s
(
ötf_c⁄ãxt
 *
˘x
)

1295 
	`de°roy_qps_cqs
(
˘x
);

1296 i‡(
˘x
->
u£_ªs_domaö
)

1297 
	`˛ón_ªs_domaös
(
˘x
);

1298 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

1299 
˘x
->
pd
 = 
NULL
;

1300 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

1301 
˘x
->
c⁄ãxt
 = 
NULL
;

1302 
	}
}

1305 
	$is_£nd
(
ötf_öput
 *
öput
)

1307 i‡(
	`°æí
(
öput
->
£rvî_d©a
.
«me
) > 0)

1311 
	}
}

1313 
	#PS_MAX_CPUS
 128

	)

1318 
	$¸óã_c⁄ãxt
(
ötf_c⁄ãxt
 *
˘x
, 
ötf_öput
 *
öput
)

1320 
˝u_idx
;

1321 
qp_idx
;

1322 
i
, 
j
;

1323 
˝u_¨øy
[
PS_MAX_CPUS
];

1326 i‡(
	`°æí
(
öput
->
£rvî_d©a
.
«me
) > 0)

1327 
˘x
->
£rvî«me
 = 
öput
->
£rvî_d©a
.
«me
;

1329 
˘x
->
is_£nd
 = 
	`is_£nd
(
öput
);

1330 
˘x
->
p‹t
 = 
öput
->
£rvî_d©a
.port;

1333 
˘x
->
num_qps_cqs
 = 
öput
->
thªad_¥ms
.
num_thªads
;

1336 
˘x
->
check_d©a
 = 
öput
->
ib_d©a
.check_d©®&& !˘x->
is_£nd
;

1337 
˘x
->
u£_ªs_domaö
 = 
öput
->
ib_d©a
.use_res_domain;

1338 
˘x
->
num_thªads
 = 
öput
->
thªad_¥ms
.num_threads;

1339 
˝u_idx
 = 0;

1342 
i
 = 0; i < 
öput
->
thªad_¥ms
.
num_˝u_£ts
; i++)

1343 
j
 = 
öput
->
thªad_¥ms
.
˝u_£ts
[
i
].
mö
; j <öput->thªad_¥ms.˝u_£ts[i].
max
; j++)

1344 i‡(
˝u_idx
 < 
PS_MAX_CPUS
)

1345 
˝u_¨øy
[
˝u_idx
++] = 
j
;

1347 
	`Ârötf
(
°dîr
, "Suµ‹tög u∞tÿ%d cpu†(ign‹ög somêo‡ªque°ed cpus)\n", 
PS_MAX_CPUS
);

1349 
˘x
->
ib_p‹t_num
 = 
öput
->
ib_d©a
.ib_port_num;

1350 
˘x
->
¶
 = 
öput
->
ib_d©a
.sl;

1351 
˘x
->
mtu
 = 
öput
->
ib_d©a
.mtu;

1352 i‡(
	`°æí
(
öput
->
ib_d©a
.
dev_«me
Ë> 0 && såÀn(öput->ib_d©a.dev_«meË< 
MAX_DEV_NAME_SIZE
 - 1)

1353 
	`°r˝y
(
˘x
->
dev_«me
, 
öput
->
ib_d©a
.dev_name);

1356 
˘x
->
qps_cqs
 = 
	`ˇŒoc
(1, ctx->
num_qps_cqs
 * (*ctx->qps_cqs));

1357 i‡(!
˘x
->
qps_cqs
)

1360 
˘x
->
thªads
 = 
	`ˇŒoc
(1, ctx->
num_thªads
 * (*ctx->threads));

1361 i‡(!
˘x
->
thªads
)

1362 
‰ì_qps_cqs
;

1365 
i
 = 0; i < 
˘x
->
num_qps_cqs
; i++) {

1366 
qp_cq_d©a
 *qp_cq_d©®&
˘x
->
qps_cqs
[
i
];

1367 
qp_d©a
 *qp_d©®&
qp_cq_d©a
->
qp
;

1370 
qp_cq_d©a
->
idx
 = 
i
;

1371 
qp_d©a
->
max_öl_ªcv_d©a
 = 
öput
->
qp_¥ms
.max_inl_recv_data;

1372 
qp_d©a
->
msg_size
 = 
öput
->
£nd_¥ms
.msg_size;

1373 
qp_d©a
->
num_msgs
 = 
öput
->
£nd_¥ms
.
num_qp_msgs
;

1374 
qp_d©a
->
wr_bur°
 = 
öput
->
qp_¥ms
.wr_burst;

1375 
qp_d©a
->
max_ölöe_d©a
 = 0;

1377 i‡(
˘x
->
is_£nd
) {

1378 
qp_d©a
->
qp_ötf
 = 
£nd_2_qp
[
öput
->
qp_¥ms
.
vîbs_£nd_ötf
];

1379 
qp_cq_d©a
->
cq
.
cq_ötf
 = 
pﬁl_2_cq
[
öput
->
qp_¥ms
.
vîbs_£nd_pﬁl_ötf
];

1380 
qp_d©a
->
max_wrs
 = 
öput
->
qp_¥ms
.
max_£nd_wr
;

1383 i‡(
qp_d©a
->
qp_ötf
 =
ACC_SEND_PENDING_INL_INTF
)

1384 
qp_d©a
->
max_ölöe_d©a
 = 
öput
->
£nd_¥ms
.
msg_size
;

1386 
qp_d©a
->
qp_ötf
 = 
ªcv_2_qp
[
öput
->
qp_¥ms
.
vîbs_ªcv_ötf
];

1387 
qp_cq_d©a
->
cq
.
cq_ötf
 = 
pﬁl_2_cq
[
öput
->
qp_¥ms
.
vîbs_ªcv_pﬁl_ötf
];

1392 i‡(
qp_cq_d©a
->
qp
.
max_öl_ªcv_d©a
 &&

1393 
qp_cq_d©a
->
cq
.
cq_ötf
 =
ACC_POLL_LENGTH_INTF
)

1394 
qp_cq_d©a
->
cq
.
cq_ötf
 = 
ACC_POLL_LENGTH_INL_INTF
;

1395 
qp_d©a
->
max_wrs
 = 
öput
->
qp_¥ms
.
max_ªcv_wr
;

1397 
qp_cq_d©a
->
cq
.
cq_size
 = 
qp_d©a
->
max_wrs
;

1398 
qp_cq_d©a
->
cq
.
wc_bur°
 = 
öput
->
qp_¥ms
.
wr_bur°
;

1402 
i
 = 0, 
qp_idx
 = 0; i < 
˘x
->
num_thªads
; i++, qp_idx ++) {

1404 
˘x
->
thªads
[
i
].
qp_idx
 = qp_idx;

1406 
˘x
->
thªads
[
i
].
˝u
 = 
˝u_¨øy
[ò% 
˝u_idx
];

1411 
‰ì_qps_cqs
:

1412 
	`‰ì
(
˘x
->
qps_cqs
);

1415 
	}
}

1417 
	$de°roy_c⁄ãxt
(
ötf_c⁄ãxt
 *
˘x
)

1419 
	`‰ì
(
˘x
->
qps_cqs
);

1420 
	`‰ì
(
˘x
->
thªads
);

1421 
	}
}

1423 
	$˛õ¡_exch_de°
(c⁄° *
£rvî«me
, 
p‹t
,

1424 c⁄° 
ib_de°
 *
my_de°
,

1425 
ib_de°
 *
ªm_de°
, 
num_qps
)

1427 
addröfo
 *
ªs
, *
t
;

1428 
addröfo
 
höts
 = {

1429 .
ai_Ámûy
 = 
AF_UNSPEC
,

1430 .
ai_sockty≥
 = 
SOCK_STREAM


1432 *
£rvi˚
;

1433 
msg
[("0000:00000000000000000000000000000000")];

1434 
qp_msg
[("000000:000000")];

1435 
n
;

1436 
sockfd
 = -1;

1437 
gid
[33];

1438 
i
;

1440 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

1443 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

1445 i‡(
n
 < 0) {

1446 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

1447 
	`‰ì
(
£rvi˚
);

1451 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

1452 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

1453 i‡(
sockfd
 >= 0) {

1454 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

1456 
	`˛o£
(
sockfd
);

1457 
sockfd
 = -1;

1461 
	`‰ìaddröfo
(
ªs
);

1462 
	`‰ì
(
£rvi˚
);

1464 i‡(
sockfd
 < 0) {

1465 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

1469 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

1470 
	`•rötf
(
msg
, "%04x:%s", 
my_de°
->
lid
, 
gid
);

1471 i‡(
	`wrôe
(
sockfd
, 
msg
, (msg)) != (msg)) {

1472 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

1473 
out
;

1476 i‡(
	`ªcv
(
sockfd
, 
msg
, (msg), 
MSG_WAITALL
) != (msg)) {

1477 
	`≥º‹
("clientÑead");

1478 
	`Ârötf
(
°dîr
, "Couldn'tÑeadÑemoteáddress\n");

1479 
out
;

1482 i‡(
	`ssˇnf
(
msg
, "%x:%s", &
ªm_de°
->
lid
, 
gid
) != 2)

1483 
out
;

1484 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

1486 
i
 = 0; i < 
num_qps
; i++) {

1487 
	`•rötf
(
qp_msg
, "%06x:%06x", 
my_de°
->
q≤
[
i
], my_de°->
p¢
[i]);

1488 i‡(
	`wrôe
(
sockfd
, 
qp_msg
, (qp_msg)) != (qp_msg)) {

1489 
	`Ârötf
(
°dîr
, "Couldn'à£ndÜoˇ»qp[%d] d©a\n", 
i
);

1490 
out
;

1493 i‡(
	`ªcv
(
sockfd
, 
qp_msg
, (qp_msg), 
MSG_WAITALL
) != (qp_msg)) {

1494 
	`≥º‹
("clientÑead");

1495 
	`Ârötf
(
°dîr
, "Couldn'àªadÑemŸêqp[%d] d©a\n", 
i
);

1496 
out
;

1498 i‡(
	`ssˇnf
(
qp_msg
, "%x:%x", &
ªm_de°
->
q≤
[
i
], &ªm_de°->
p¢
[i]) != 2)

1499 
out
;

1502 i‡(
	`wrôe
(
sockfd
, "done", ("done")) != ("done")) {

1503 
	`Ârötf
(
°dîr
, "Couldn't send \"done\" msg\n");

1504 
out
;

1507 
	`˛o£
(
sockfd
);

1512 
out
:

1513 
	`˛o£
(
sockfd
);

1516 
	}
}

1518 
	$£rvî_exch_de°
(
ötf_c⁄ãxt
 *
˘x
,

1519 
ib_p‹t
, 
ibv_mtu
 
mtu
,

1520 
p‹t
, 
¶
,

1521 c⁄° 
ib_de°
 *
my_de°
,

1522 
ib_de°
 *
ªm_de°
,

1523 
sgid_idx
, 
num_qps
)

1525 
addröfo
 *
ªs
, *
t
;

1526 
addröfo
 
höts
 = {

1527 .
ai_Êags
 = 
AI_PASSIVE
,

1528 .
ai_Ámûy
 = 
AF_UNSPEC
,

1529 .
ai_sockty≥
 = 
SOCK_STREAM


1531 *
£rvi˚
;

1532 
msg
[("0000:00000000000000000000000000000000")];

1533 
qp_msg
[("000000:000000")];

1534 
n
;

1535 
sockfd
 = -1, 
c⁄nfd
;

1536 
gid
[33];

1537 
i
;

1539 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

1542 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

1544 i‡(
n
 < 0) {

1545 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
p‹t
);

1546 
	`‰ì
(
£rvi˚
);

1550 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

1551 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

1552 i‡(
sockfd
 >= 0) {

1553 
n
 = 1;

1555 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, (n));

1557 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

1559 
	`˛o£
(
sockfd
);

1560 
sockfd
 = -1;

1564 
	`‰ìaddröfo
(
ªs
);

1565 
	`‰ì
(
£rvi˚
);

1567 i‡(
sockfd
 < 0) {

1568 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

1572 
	`li°í
(
sockfd
, 1);

1573 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

1574 
	`˛o£
(
sockfd
);

1575 i‡(
c⁄nfd
 < 0) {

1576 
	`Ârötf
(
°dîr
, "accept() failed\n");

1580 
n
 = 
	`ªcv
(
c⁄nfd
, 
msg
, (msg), 
MSG_WAITALL
);

1581 i‡(
n
 !(
msg
)) {

1582 
	`≥º‹
("serverÑead");

1583 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'àªadÑemŸêaddªss\n", 
n
, (Ë(
msg
));

1584 
out
;

1587 i‡(
	`ssˇnf
(
msg
, "%x:%s", &
ªm_de°
->
lid
, 
gid
) != 2)

1588 
out
;

1589 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

1592 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

1593 
	`•rötf
(
msg
, "%04x:%s", 
my_de°
->
lid
, 
gid
);

1594 i‡(
	`wrôe
(
c⁄nfd
, 
msg
, (msg)) != (msg)) {

1595 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

1596 
out
;

1599 
i
 = 0; i < 
num_qps
; i++) {

1600 i‡(
	`ªcv
(
c⁄nfd
, 
qp_msg
, (qp_msg), 
MSG_WAITALL
) != (qp_msg)) {

1601 
	`≥º‹
("clientÑead");

1602 
	`Ârötf
(
°dîr
, "Couldn'àªadÑemŸêqp[%d] d©a\n", 
i
);

1603 
out
;

1605 i‡(
	`ssˇnf
(
qp_msg
, "%x:%x", &
ªm_de°
->
q≤
[
i
], &ªm_de°->
p¢
[i]) != 2)

1606 
out
;

1608 
	`•rötf
(
qp_msg
, "%06x:%06x", 
my_de°
->
q≤
[
i
], my_de°->
p¢
[i]);

1609 i‡(
	`wrôe
(
c⁄nfd
, 
qp_msg
, (qp_msg)) != (qp_msg)) {

1610 
	`Ârötf
(
°dîr
, "Couldn'à£ndÜoˇ»qp[%d] d©a\n", 
i
);

1611 
out
;

1617 i‡(
	`ªad
(
c⁄nfd
, 
msg
, (msg)) <= 0) {

1618 
	`Ârötf
(
°dîr
, "Couldn'tÑead \"done\" msg\n");

1619 
out
;

1622 
	`˛o£
(
c⁄nfd
);

1626 
out
:

1627 
	`˛o£
(
c⁄nfd
);

1630 
	}
}

1633 
	$exch™ge_ªmŸe_d©a
(
ötf_c⁄ãxt
 *
˘x
)

1635 
i
;

1636 
ib_de°
 
my_de°
;

1637 
ib_de°
 
ªm_de°
;

1638 
gid
[
INET6_ADDRSTRLEN
];

1639 
ibv_p‹t_©å
 
p‹töfo
;

1641 i‡(
	`ibv_quîy_p‹t
(
˘x
->
c⁄ãxt
, ctx->
ib_p‹t_num
, &
p‹töfo
)) {

1642 
	`Ârötf
(
°dîr
, "Couldn't getÖort info\n");

1646 i‡(
p‹töfo
.
lök_œyî
 !
IBV_LINK_LAYER_INFINIBAND
) {

1647 
	`Ârötf
(
°dîr
, "link_layer != IBV_LINK_LAYER_INFINIBAND\n");

1651 
my_de°
.
lid
 = 
p‹töfo
.lid;

1652 i‡(!
my_de°
.
lid
) {

1653 
	`Ârötf
(
°dîr
, "Couldn't getÜocal LID\n");

1657 
	`mem£t
(&
my_de°
.
gid
, 0, (my_dest.gid));

1659 
my_de°
.
p¢
 = 
	`ˇŒoc
(1, (*my_de°.p¢Ë* 
˘x
->
num_qps_cqs
);

1660 
my_de°
.
q≤
 = 
	`ˇŒoc
(1, (*my_de°.q≤Ë* 
˘x
->
num_qps_cqs
);

1661 
ªm_de°
.
p¢
 = 
	`ˇŒoc
(1, (*
my_de°
.p¢Ë* 
˘x
->
num_qps_cqs
);

1662 
ªm_de°
.
q≤
 = 
	`ˇŒoc
(1, (*
my_de°
.q≤Ë* 
˘x
->
num_qps_cqs
);

1664 i‡(!
my_de°
.
p¢
 || !my_de°.
q≤
 || !
ªm_de°
.psn || !rem_dest.qpn)

1665 
‰ì_buffs
;

1667 
i
 = 0; i < 
˘x
->
num_qps_cqs
; i++) {

1668 
my_de°
.
q≤
[
i
] = 
˘x
->
qps_cqs
[i].
qp
.qp->
qp_num
;

1669 
my_de°
.
p¢
[
i
] = 
˘x
->
qps_cqs
[i].
qp
.psn;

1671 
	`öë_¡›
(
AF_INET6
, &
my_de°
.
gid
, gid, (gid));

1672 
	`¥ötf
("Üoˇ»addªss: LID 0x%04x, GID %s\n", 
my_de°
.
lid
, 
gid
);

1674 i‡(
˘x
->
£rvî«me
) {

1675 i‡(
	`˛õ¡_exch_de°
(
˘x
->
£rvî«me
, ctx->
p‹t
,

1676 &
my_de°
, &
ªm_de°
, 
˘x
->
num_qps_cqs
)) {

1677 
	`Ârötf
(
°dîr
, "Couldn't getÑemote LID\n");

1678 
‰ì_buffs
;

1681 i‡(
	`£rvî_exch_de°
(
˘x
, ctx->
ib_p‹t_num
, ctx->
mtu
, ctx->
p‹t
, ctx->
¶
,

1682 &
my_de°
, &
ªm_de°
, 0, 
˘x
->
num_qps_cqs
)) {

1683 
	`Ârötf
(
°dîr
, "Couldn't getÑemote LID\n");

1684 
‰ì_buffs
;

1688 
i
 = 0; i < 
˘x
->
num_qps_cqs
; i++) {

1689 
˘x
->
qps_cqs
[
i
].
qp
.
ªmŸe_q≤
 = 
ªm_de°
.
q≤
[i];

1690 i‡(
	`c⁄√˘_qp
(
˘x
->
qps_cqs
[
i
].
qp
.qp, ctx->
ib_p‹t_num
, 
my_de°
.
p¢
[i], ctx->
mtu
, ctx->
¶
,

1691 
ªm_de°
.
gid
,Ñem_de°.
lid
,Ñem_de°.
p¢
[
i
],

1692 
ªm_de°
.
q≤
[
i
], 0)) {

1693 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘ÅÿªmŸêqp[%d]\n", 
i
);

1694 
‰ì_buffs
;

1700 
‰ì_buffs
:

1701 i‡(
my_de°
.
p¢
)

1702 
	`‰ì
(
my_de°
.
p¢
);

1703 i‡(
my_de°
.
q≤
)

1704 
	`‰ì
(
my_de°
.
q≤
);

1705 i‡(
ªm_de°
.
p¢
)

1706 
	`‰ì
(
ªm_de°
.
p¢
);

1707 i‡(
ªm_de°
.
q≤
)

1708 
	`‰ì
(
ªm_de°
.
q≤
);

1711 
	}
}

1713 
ölöe
 
ibv_mtu
 
	$mtu_to_íum
(
mtu
)

1715 
mtu
) {

1716 256:  
IBV_MTU_256
;

1717 512:  
IBV_MTU_512
;

1718 1024:  
IBV_MTU_1024
;

1719 2048:  
IBV_MTU_2048
;

1720 4096:  
IBV_MTU_4096
;

1723 
	}
}

1725 
ölöe
 
	$íum_to_mtu
(
ibv_mtu
 
mtu
)

1727 
mtu
) {

1728 
IBV_MTU_256
:  256;

1729 
IBV_MTU_512
:  512;

1730 
IBV_MTU_1024
:  1024;

1731 
IBV_MTU_2048
:  2048;

1732 
IBV_MTU_4096
:  4096;

1735 
	}
}

1737 
	$ußge
(c⁄° *
¨gv0
, 
ötf_öput
 *
deÁu…_öput
)

1739 
i
;

1741 
	`¥ötf
("Usage:\n");

1742 
	`¥ötf
(" %† sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

1743 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

1744 
	`¥ötf
("\n");

1745 
	`¥ötf
("Options:\n");

1746 
	`¥ötf
(" -p, --p‹t=<p‹t>Üi°í on/c⁄√˘Åÿp‹à<p‹t> (deÁu… %d)\n", 
deÁu…_öput
->
£rvî_d©a
.
p‹t
);

1747 
	`¥ötf
(" -d, --ib-dev=<dev> u£ IB devi˚ <dev> (deÁu… %s)\n", 
deÁu…_öput
->
ib_d©a
.
dev_«me
);

1748 
	`¥ötf
(" -i, --ib-p‹t=<p‹t> u£Ö‹à<p‹t> o‡IB devi˚ (deÁu… %d)\n", 
deÁu…_öput
->
ib_d©a
.
ib_p‹t_num
);

1749 
	`¥ötf
(" -s, --size=<size> sizêo‡mesßgê(deÁu… %'d max sizê%'d)\n", 
deÁu…_öput
->
£nd_¥ms
.
msg_size
, 
MAX_MSG_SIZE
);

1750 
	`¥ötf
(" -m, --mtu=<size>Ö©h MTU (deÁu… %'d)\n", 
	`íum_to_mtu
(
deÁu…_öput
->
ib_d©a
.
mtu
));

1751 
	`¥ötf
(" -r, --rx-dïth=<dï>Ñe˚ivêqueuêsizê(deÁu… %'d)\n", 
deÁu…_öput
->
qp_¥ms
.
max_ªcv_wr
);

1752 
	`¥ötf
(" -n, --ôîs=<ôîs>Çumbî o‡mesßge†(deÁu… %'d)\n", 
deÁu…_öput
->
£nd_¥ms
.
num_qp_msgs
);

1753 
	`¥ötf
(" -l, --¶=<¶> sîvi˚Üevñ vÆuê(deÁu… %d)\n", 
deÁu…_öput
->
ib_d©a
.
¶
);

1754 
	`¥ötf
(" -t, --ölöe-ªcv=<size> sizêo‡ölöe-ªcv (deÁu… %d)\n", 
deÁu…_öput
->
qp_¥ms
.
max_öl_ªcv_d©a
);

1755 
	`¥ötf
(" -S, --send-verb=<verbs> send verb interfaceÅo use S_NORM/S_PEND/S_PEND_INL/S_PEND_SG_LIST/S_BURST (default %s)\n",

1756 
	`£nd_íum_to_vîbs_ötf_°r
(
deÁu…_öput
->
qp_¥ms
.
vîbs_£nd_ötf
));

1757 
	`¥ötf
(" -R, --recv-verb=<verbs>Ñecv verb interfaceÅo use R_NORM/R_BURST (default %s)\n",

1758 
	`ªcv_íum_to_vîbs_ötf_°r
(
deÁu…_öput
->
qp_¥ms
.
vîbs_ªcv_ötf
));

1759 
	`¥ötf
(" -P, --poll-verb=<verbs>Öoll verb interfaceÅo use P_NORM/P_CNT/P_LEN (default send: %sÑecv: %s)\n",

1760 
	`pﬁl_íum_to_vîbs_ötf_°r
(
deÁu…_öput
->
qp_¥ms
.
vîbs_£nd_pﬁl_ötf
),

1761 
	`pﬁl_íum_to_vîbs_ötf_°r
(
deÁu…_öput
->
qp_¥ms
.
vîbs_ªcv_pﬁl_ötf
));

1762 
	`¥ötf
(" -c, --cpus-list=<list> CPUsÜistÅoÑun on (default ");

1763 
i
 = 0; i < 
deÁu…_öput
->
thªad_¥ms
.
num_˝u_£ts
; i++) {

1764 
	`¥ötf
("[%d..%d]", 
deÁu…_öput
->
thªad_¥ms
.
˝u_£ts
[
i
].
mö
, deÁu…_öput->thªad_¥ms.˝u_£ts[i].
max
);

1765 i‡(
i
 + 1 =
deÁu…_öput
->
thªad_¥ms
.
num_˝u_£ts
)

1766 
	`¥ötf
(")\n");

1768 
	`¥ötf
(",");

1770 
	`¥ötf
(" -b, --bur°=<size> sizêo‡£nd/ªcv w∏bur° (deÁu… %'d)\n", 
deÁu…_öput
->
qp_¥ms
.
wr_bur°
);

1771 
	`¥ötf
(" -T, --num-thªads=<num> Numbî o‡thªad†tÿru¿(deÁu… %'d)\n", 
deÁu…_öput
->
thªad_¥ms
.
num_thªads
);

1772 
	`¥ötf
(" -C, --check-data checkÅhe dataÑeceived (defaultÇo-checks)\n");

1773 
	`¥ötf
(" -A, --avoid-res-domainávoid usage ofÑesource domain (default useÑes-domain)\n");

1774 
	}
}

1776 
	$°r_to_˝u_£t
(*
°r
, *
num_˝us
, 
˝u_£t
 *
˝u_£ts
)

1778 *
p
;

1779 *
t
;

1780 
mö
, 
max
;

1781 
°mp
[64];

1782 
n˝us
 = 0;

1784 i‡(
	`°æí
(
°r
) >= 64)

1787 
	`°r˝y
(
°mp
, 
°r
);

1788 
p
 = 
°mp
;

1790 
n˝us
 < 
MAX_CPU_SETS
 && 
p
 && 
	`°æí
(p)) {

1791 
t
 = 
	`°rchr
(
p
, ']');

1792 i‡(
t
) {

1793 
t
++;

1794 i‡(
	`°æí
(
t
)) {

1795 *
t
 = 0;

1796 
t
++;

1800 i‡(
	`ssˇnf
(
p
, "[%d..%d]", &
mö
, &
max
) != 2)

1802 
p
 = 
t
;

1804 i‡(
mö
 > 
max
)

1807 
˝u_£ts
[
n˝us
].
mö
 = min;

1808 
˝u_£ts
[
n˝us
].
max
 = max;

1809 
n˝us
++;

1812 i‡(!
n˝us
)

1815 *
num_˝us
 = 
n˝us
;

1818 
	}
}

1824 
	$∑r£_öput
(
ötf_öput
 *
öput
, ötf_öpuà*
deÁu…_öput
, 
¨gc
, *
¨gv
[])

1826 
tmp
;

1827 
ibv_mtu
 
mtu
;

1828 *
ib_dev«me
 = 
NULL
;

1829 *
vrbs_ötf
 = 
NULL
;

1830 *
˝us_°r
 = 
NULL
;

1831 
size
;

1833 
	`mem˝y
(
öput
, 
deÁu…_öput
, (*input));

1836 
c
;

1838 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

1839 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

1840 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

1841 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

1842 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

1843 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

1844 { .
«me
 = "rx-dïth", .
has_¨g
 = 1, .
vÆ
 = 'r' },

1845 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

1846 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

1847 { .
«me
 = "ölöe-ªcv", .
has_¨g
 = 1, .
vÆ
 = 't' },

1848 { .
«me
 = "£nd-vîb", .
has_¨g
 = 1, .
vÆ
 = 'S' },

1849 { .
«me
 = "ªcv-vîb", .
has_¨g
 = 1, .
vÆ
 = 'R' },

1850 { .
«me
 = "pﬁl-vîb", .
has_¨g
 = 1, .
vÆ
 = 'P' },

1851 { .
«me
 = "˝us-li°", .
has_¨g
 = 1, .
vÆ
 = 'c' },

1852 { .
«me
 = "bur°", .
has_¨g
 = 1, .
vÆ
 = 'b' },

1853 { .
«me
 = "num-thªads", .
has_¨g
 = 1, .
vÆ
 = 'T' },

1854 { .
«me
 = "check-d©a", .
has_¨g
 = 0, .
vÆ
 = 'C' },

1855 { .
«me
 = "avoid-ªs-domaö", .
has_¨g
 = 0, .
vÆ
 = 'A' },

1859 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:m:r:n:l:t:c:S:R:P:b:T:CA",

1860 
l⁄g_›ti⁄s
, 
NULL
);

1861 i‡(
c
 == -1)

1864 
c
) {

1866 
tmp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1867 i‡(
tmp
 < 0 ||Åmp > 65535)

1868 
¥öt_ußge
;

1869 
öput
->
£rvî_d©a
.
p‹t
 = 
tmp
;

1874 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

1875 i‡(
	`°æí
(
ib_dev«me
Ë>
MAX_DEV_NAME_SIZE
 - 1) {

1876 
	`Ârötf
(
°dîr
, "Devi˚Çamêtoÿl⁄g (max %d)\n", 
MAX_DEV_NAME_SIZE
 - 1);

1877 
¥öt_ußge
;

1880 
	`°r˝y
(
öput
->
ib_d©a
.
dev_«me
, 
ib_dev«me
);

1884 
tmp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1885 i‡(
tmp
 < 0)

1886 
¥öt_ußge
;

1887 
öput
->
ib_d©a
.
ib_p‹t_num
 = 
tmp
;

1891 
size
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 0);

1893 i‡(
size
 < 0 || sizê> 
MAX_MSG_SIZE
)

1894 
¥öt_ußge
;

1896 
öput
->
£nd_¥ms
.
msg_size
 = 
size
;

1900 
mtu
 = 
	`mtu_to_íum
(
	`°πﬁ
(
›èrg
, 
NULL
, 0));

1901 i‡(
mtu
 < 0)

1902 
¥öt_ußge
;

1903 
öput
->
ib_d©a
.
mtu
 = mtu;

1907 
tmp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1908 
öput
->
qp_¥ms
.
max_ªcv_wr
 = 
tmp
;

1912 
tmp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1913 
öput
->
£nd_¥ms
.
num_qp_msgs
 = 
tmp
;

1917 
tmp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1918 
öput
->
ib_d©a
.
¶
 = 
tmp
;

1922 
tmp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1923 
öput
->
qp_¥ms
.
max_öl_ªcv_d©a
 = 
tmp
;

1924 i‡(
öput
->
qp_¥ms
.
max_öl_ªcv_d©a
 > 
MAX_INLINE_RECV
) {

1925 
	`Ârötf
(
°dîr
, "MaxáŒowed i∆öe-ªcv = %d\n", 
MAX_INLINE_RECV
);

1926 
¥öt_ußge
;

1931 
vrbs_ötf
 = 
	`°rdu∑
(
›èrg
);

1932 i‡(!
	`°rcmp
(
vrbs_ötf
, "S_NORM")) {

1933 
öput
->
qp_¥ms
.
vîbs_£nd_ötf
 = 
IN_NORMAL_SEND_INTF
;

1934 } i‡(!
	`°rcmp
(
vrbs_ötf
, "S_PEND")) {

1935 
öput
->
qp_¥ms
.
vîbs_£nd_ötf
 = 
IN_ACC_SEND_PENDING_INTF
;

1936 } i‡(!
	`°rcmp
(
vrbs_ötf
, "S_PEND_INL")) {

1937 
öput
->
qp_¥ms
.
vîbs_£nd_ötf
 = 
IN_ACC_SEND_PENDING_INL_INTF
;

1938 } i‡(!
	`°rcmp
(
vrbs_ötf
, "S_PEND_SG_LIST")) {

1939 
öput
->
qp_¥ms
.
vîbs_£nd_ötf
 = 
IN_ACC_SEND_PENDING_SG_LIST_INTF
;

1940 } i‡(!
	`°rcmp
(
vrbs_ötf
, "S_BURST")) {

1941 
öput
->
qp_¥ms
.
vîbs_£nd_ötf
 = 
IN_ACC_SEND_BURST_INTF
;

1943 
	`Ârötf
(
°dîr
, "Síd i¡îÁ˚Çamê%†nŸ suµ‹ãd\n", 
vrbs_ötf
);

1944 
¥öt_ußge
;

1949 
vrbs_ötf
 = 
	`°rdu∑
(
›èrg
);

1950 i‡(!
	`°rcmp
(
vrbs_ötf
, "R_NORM")) {

1951 
öput
->
qp_¥ms
.
vîbs_ªcv_ötf
 = 
IN_NORMAL_RECV_INTF
;

1952 } i‡(!
	`°rcmp
(
vrbs_ötf
, "R_BURST")) {

1953 
öput
->
qp_¥ms
.
vîbs_ªcv_ötf
 = 
IN_ACC_RECV_BURST_INTF
;

1955 
	`Ârötf
(
°dîr
, "Re˚ivêöãrÁ˚Çamê%†nŸ suµ‹ãd\n", 
vrbs_ötf
);

1956 
¥öt_ußge
;

1961 
vrbs_ötf
 = 
	`°rdu∑
(
›èrg
);

1962 i‡(!
	`°rcmp
(
vrbs_ötf
, "P_NORM")) {

1963 
öput
->
qp_¥ms
.
vîbs_ªcv_pﬁl_ötf
 = 
IN_NORMAL_POLL_INTF
;

1964 
öput
->
qp_¥ms
.
vîbs_£nd_pﬁl_ötf
 = 
IN_NORMAL_POLL_INTF
;

1965 } i‡(!
	`°rcmp
(
vrbs_ötf
, "P_CNT")) {

1966 
öput
->
qp_¥ms
.
vîbs_ªcv_pﬁl_ötf
 = 
IN_ACC_POLL_CNT_INTF
;

1967 
öput
->
qp_¥ms
.
vîbs_£nd_pﬁl_ötf
 = 
IN_ACC_POLL_CNT_INTF
;

1968 } i‡(!
	`°rcmp
(
vrbs_ötf
, "P_LEN")) {

1969 
öput
->
qp_¥ms
.
vîbs_ªcv_pﬁl_ötf
 = 
IN_ACC_POLL_LENGTH_INTF
;

1970 
öput
->
qp_¥ms
.
vîbs_£nd_pﬁl_ötf
 = 
IN_ACC_POLL_LENGTH_INTF
;

1972 
	`Ârötf
(
°dîr
, "Pﬁ»öãrÁ˚Çamê%†nŸ suµ‹ãd\n", 
vrbs_ötf
);

1973 
¥öt_ußge
;

1978 
˝us_°r
 = 
	`°rdu∑
(
›èrg
);

1979 i‡(
	`°r_to_˝u_£t
(
˝us_°r
, &
öput
->
thªad_¥ms
.
num_˝u_£ts
, i≈ut->thªad_¥ms.
˝u_£ts
)) {

1980 
	`Ârötf
(
°dîr
, "Wr⁄g cpu†li°: %s\n", 
˝us_°r
);

1981 
¥öt_ußge
;

1986 
tmp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1987 i‡(
tmp
 < 0 ||Åmp > 65535)

1988 
¥öt_ußge
;

1990 
öput
->
qp_¥ms
.
wr_bur°
 = 
tmp
;

1994 
tmp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1995 i‡(
tmp
 < 0 ||Åmp > 65535)

1996 
¥öt_ußge
;

1998 
öput
->
thªad_¥ms
.
num_thªads
 = 
tmp
;

2002 
öput
->
ib_d©a
.
check_d©a
 = 1;

2006 
öput
->
ib_d©a
.
u£_ªs_domaö
 = 0;

2010 
¥öt_ußge
;

2014 i‡(
›töd
 =
¨gc
 - 1) {

2015 i‡(
	`°æí
(
¨gv
[
›töd
]Ë> 0 && såÀn◊rgv[›töd]Ë< 
MAX_SERVER_NAME_SIZE
 - 1)

2016 
	`°r˝y
(
öput
->
£rvî_d©a
.
«me
, 
¨gv
[
›töd
]);

2017 } i‡(
›töd
 < 
¨gc
) {

2018 
¥öt_ußge
;

2021 i‡(
	`is_£nd
(
öput
Ë&& i≈ut->
qp_¥ms
.
wr_bur°
 * 2 >öput->qp_¥ms.
max_£nd_wr
) {

2022 
	`Ârötf
(
°dîr
, "Invalid input, max_send_wr(%d) should beátÜeastÅwiceÅhe size of burst size(%d)\n",

2023 
öput
->
qp_¥ms
.
max_£nd_wr
, i≈ut->qp_¥ms.
wr_bur°
);

2027 i‡(!
	`is_£nd
(
öput
Ë&& i≈ut->
qp_¥ms
.
wr_bur°
 * 2 >öput->qp_¥ms.
max_ªcv_wr
) {

2028 
	`Ârötf
(
°dîr
, "Invalid input, max_recv_wr(%d) should beátÜeastÅwiceÅhe size of burst size(%d)\n",

2029 
öput
->
qp_¥ms
.
max_ªcv_wr
, i≈ut->qp_¥ms.
wr_bur°
);

2033 i‡(
	`is_£nd
(
öput
Ë&& i≈ut->
qp_¥ms
.
max_£nd_wr
 % i≈ut->qp_¥ms.
wr_bur°
) {

2034 
	`Ârötf
(
°dîr
, "Invalid input modulo(max_send_wr(%d), burst size(%d)) != 0\n",

2035 
öput
->
qp_¥ms
.
max_£nd_wr
, i≈ut->qp_¥ms.
wr_bur°
);

2039 i‡(!
	`is_£nd
(
öput
Ë&& i≈ut->
qp_¥ms
.
max_ªcv_wr
 % i≈ut->qp_¥ms.
wr_bur°
) {

2040 
	`Ârötf
(
°dîr
, "Invalid input modulo(max_recv_wr(%d), burst size(%d)) != 0\n",

2041 
öput
->
qp_¥ms
.
max_ªcv_wr
, i≈ut->qp_¥ms.
wr_bur°
);

2046 i‡(
	`is_£nd
(
öput
Ë&& i≈ut->
qp_¥ms
.
vîbs_£nd_pﬁl_ötf
 =
IN_ACC_POLL_LENGTH_INTF
) {

2047 
	`Ârötf
(
°dîr
, "It isÇotállowedÅo useÖoll-length(P_LEN) for send messages.\n");

2048 
	`Ârötf
(
°dîr
, "Use -P P_CNT or -P P_NORM optionsÅoÖoll for send messages completion\n");

2054 
¥öt_ußge
:

2055 
	`ußge
(
¨gv
[0], 
deÁu…_öput
);

2057 
	}
}

2059 
	$maö
(
¨gc
, *
¨gv
[])

2061 
ötf_c⁄ãxt
 *
˘x
;

2062 
ªt
 = 0;

2064 
	`£éoˇÀ
(
LC_NUMERIC
, "");

2065 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

2067 i‡(
	`∑r£_öput
(&
ötf_öput
, &
ötf_deÁu…_öput
, 
¨gc
, 
¨gv
)) {

2068 
	`Ârötf
(
°dîr
, "FailedÅo updateánd validateÅest inputs\n");

2072 
˘x
 = 
	`ˇŒoc
(1, (*ctx));

2073 i‡(!
˘x
)

2076 i‡(
	`¸óã_c⁄ãxt
(
˘x
, &
ötf_öput
)) {

2077 
	`Ârötf
(
°dîr
, "FailedÅo createÅest context\n");

2078 
ªt
 = 1;

2079 
‰ì_˘x
;

2082 i‡(
	`¸óã_ªsour˚s
(
˘x
)) {

2083 
	`Ârötf
(
°dîr
, "FailedÅo createÅestÑesources\n");

2084 
ªt
 = 1;

2085 
de°roy_c⁄ãxt
;

2088 i‡(
	`exch™ge_ªmŸe_d©a
(
˘x
)) {

2089 
	`Ârötf
(
°dîr
, "FailedÅo createÅest contextándÑesources\n");

2090 
ªt
 = 1;

2091 
de°roy_ªsour˚s
;

2094 i‡(
	`run_thªads
(
˘x
)) {

2095 
	`Ârötf
(
°dîr
, "Failed inÅestÉxecution\n");

2096 
ªt
 = 1;

2097 
de°roy_ªsour˚s
;

2100 
de°roy_ªsour˚s
:

2101 
	`de°roy_ªsour˚s
(
˘x
);

2103 
de°roy_c⁄ãxt
:

2104 
	`de°roy_c⁄ãxt
(
˘x
);

2106 
‰ì_˘x
:

2107 
	`‰ì
(
˘x
);

2109  
ªt
;

2110 
	}
}

	@libibverbs-41mlnx1/examples/pingpong.c

33 
	~"pögp⁄g.h
"

34 
	~<¨∑/öë.h
>

35 
	~<°dlib.h
>

36 
	~<°dio.h
>

37 
	~<°rög.h
>

39 
ibv_mtu
 
	$µ_mtu_to_íum
(
mtu
)

41 
mtu
) {

42 256:  
IBV_MTU_256
;

43 512:  
IBV_MTU_512
;

44 1024:  
IBV_MTU_1024
;

45 2048:  
IBV_MTU_2048
;

46 4096:  
IBV_MTU_4096
;

49 
	}
}

51 
uöt16_t
 
	$µ_gë_loˇl_lid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
p‹t
)

53 
ibv_p‹t_©å
 
©å
;

55 i‡(
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t
, &
©å
))

58  
©å
.
lid
;

59 
	}
}

61 
	$µ_gë_p‹t_öfo
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
p‹t
,

62 
ibv_p‹t_©å
 *
©å
)

64  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t
, 
©å
);

65 
	}
}

67 
	$wúe_gid_to_gid
(c⁄° *
wgid
, 
ibv_gid
 *
gid
)

69 
tmp
[9];

70 
uöt32_t
 
v32
;

71 
uöt32_t
 *
øw
 = (uöt32_à*)
gid
->raw;

72 
i
;

74 
tmp
[8] = 0, 
i
 = 0; i < 4; ++i) {

75 
	`mem˝y
(
tmp
, 
wgid
 + 
i
 * 8, 8);

76 
	`ssˇnf
(
tmp
, "%x", &
v32
);

77 
øw
[
i
] = 
	`¡ohl
(
v32
);

79 
	}
}

81 
	$gid_to_wúe_gid
(c⁄° 
ibv_gid
 *
gid
, 
wgid
[])

83 
i
;

84 
uöt32_t
 *
øw
 = (uöt32_à*)
gid
->raw;

86 
i
 = 0; i < 4; ++i)

87 
	`•rötf
(&
wgid
[
i
 * 8], "%08x",

88 
	`ht⁄l
(
øw
[
i
]));

89 
	}
}

	@libibverbs-41mlnx1/examples/pingpong.h

33 #i‚de‡
IBV_PINGPONG_H


34 
	#IBV_PINGPONG_H


	)

36 
	~<öföib™d/vîbs.h
>

37 
	~<öföib™d/vîbs_exp.h
>

39 
ibv_mtu
 
µ_mtu_to_íum
(
mtu
);

40 
uöt16_t
 
µ_gë_loˇl_lid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
p‹t
);

41 
µ_gë_p‹t_öfo
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
p‹t
,

42 
ibv_p‹t_©å
 *
©å
);

43 
wúe_gid_to_gid
(c⁄° *
wgid
, 
ibv_gid
 *
gid
);

44 
gid_to_wúe_gid
(c⁄° 
ibv_gid
 *
gid
, 
wgid
[]);

	@libibverbs-41mlnx1/examples/polldcinfo.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<öây≥s.h
>

40 
	~<uni°d.h
>

41 
	~<°rög.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<öföib™d/vîbs.h
>

44 
	~<sys/sockë.h
>

45 
	~<sys/time.h
>

46 
	~<√tdb.h
>

47 
	~<mÆloc.h
>

48 
	~<gë›t.h
>

49 
	~<¨∑/öë.h
>

50 
	~<time.h
>

51 
	~"dc.h
"

53 
	$ußge
(c⁄° *
¨gv0
)

55 
	`¥ötf
("Usage:\n");

56 
	`¥ötf
(" %s\n", 
¨gv0
);

57 
	`¥ötf
("\n");

58 
	`¥ötf
("Options:\n");

59 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

60 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

61 
	}
}

63 
	$maö
(
¨gc
, *
¨gv
[])

65 
ibv_devi˚
 **
dev_li°
;

66 
ibv_devi˚
 *
ib_dev
;

67 *
ib_dev«me
 = 
NULL
;

68 
ib_p‹t
 = 1;

69 
ibv_c⁄ãxt
 *
˘x
;

70 
n
;

71 
ibv_exp_dc_öfo_ít
 
íts
[2];

72 
i
;

73 
j
;

75 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

78 
c
;

80 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

81 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

82 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

86 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "d:i:",

87 
l⁄g_›ti⁄s
, 
NULL
);

88 i‡(
c
 == -1)

91 
c
) {

93 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

97 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

98 i‡(
ib_p‹t
 < 0) {

99 
	`ußge
(
¨gv
[0]);

105 
	`ußge
(
¨gv
[0]);

110 i‡(
›töd
 < 
¨gc
) {

111 
	`ußge
(
¨gv
[0]);

115 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

116 i‡(!
dev_li°
) {

117 
	`≥º‹
("FailedÅo get IB devicesÜist");

121 i‡(!
ib_dev«me
) {

122 
ib_dev
 = *
dev_li°
;

123 i‡(!
ib_dev
) {

124 
	`Ârötf
(
°dîr
, "No IB devices found\n");

128 
i
;

130 
i
 = 0; 
dev_li°
[i]; ++i)

131 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

134 
ib_dev
 = 
dev_li°
[
i
];

135 i‡(!
ib_dev
) {

136 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

141 
˘x
 = 
	`ibv_›í_devi˚
(
ib_dev
);

142 i‡(!
˘x
) {

143 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

144 
	`ibv_gë_devi˚_«me
(
ib_dev
));

149 
n
 = 
	`ibv_exp_pﬁl_dc_öfo
(
˘x
, 
íts
, 2, 
ib_p‹t
);

150 i‡(
n
 < 0) {

151 
	`¥ötf
("errorÖolling dc info,áborting\n");

154 
i
 = 0; i < 
n
; i++) {

155 
	`¥ötf
("==sqeuí˚Çumbî 0x%08x\n", 
íts
[
i
].
£qnum
);

156 
j
 = 0; j < 30; j++)

157 
	`¥ötf
("lid[%d] = 0x%04x\n", 
j
, 
íts
[
i
].
lid
[j]);

162 
	}
}

	@libibverbs-41mlnx1/examples/rc_pingpong.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/sockë.h
>

43 
	~<sys/time.h
>

44 
	~<√tdb.h
>

45 
	~<mÆloc.h
>

46 
	~<gë›t.h
>

47 
	~<¨∑/öë.h
>

48 
	~<time.h
>

50 
	~"pögp⁄g.h
"

53 
	mPINGPONG_RECV_WRID
 = 1,

54 
	mPINGPONG_SEND_WRID
 = 2,

57 
	g∑ge_size
;

58 
	gu£_c⁄tiguous_mr
;

59 
	gu£_odp
;

60 
	gu£_dm
;

61 
	gu£_up°ªam
;

62 
	gu£_ooo
;

63 *
	gc⁄tig_addr
;

65 
	spögp⁄g_c⁄ãxt
 {

66 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

67 
ibv_comp_ch™√l
 *
	mch™√l
;

68 
ibv_pd
 *
	mpd
;

69 
ibv_mr
 *
	mmr
;

70 
ibv_exp_dm
 *
	mdm
;

71 
ibv_cq
 *
	mcq
;

72 
ibv_qp
 *
	mqp
;

73 *
	mbuf
;

74 
	msize
;

75 
	mrx_dïth
;

76 
	m≥ndög
;

77 
ibv_p‹t_©å
 
	mp‹töfo
;

78 
	möÃ_ªcv
;

81 
	spögp⁄g_de°
 {

82 
	mlid
;

83 
	mq≤
;

84 
	mp¢
;

85 
ibv_gid
 
	mgid
;

88 
	$µ_c⁄√˘_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
p‹t
, 
my_p¢
,

89 
ibv_mtu
 
mtu
, 
¶
,

90 
pögp⁄g_de°
 *
de°
, 
sgid_idx
)

92 
ibv_exp_qp_©å
 
©å
 = {

93 .
qp_°©e
 = 
IBV_QPS_RTR
,

94 .
∑th_mtu
 = 
mtu
,

95 .
de°_qp_num
 = 
de°
->
q≤
,

96 .
rq_p¢
 = 
de°
->
p¢
,

97 .
max_de°_rd_©omic
 = 1,

98 .
mö_∫r_timî
 = 12,

99 .
ah_©å
 = {

100 .
is_globÆ
 = 0,

101 .
dlid
 = 
de°
->
lid
,

102 .
¶
 = sl,

103 .
§c_∑th_bôs
 = 0,

104 .
p‹t_num
 = 
p‹t


107 
ibv_exp_qp_©å_mask
 
©å_mask
;

109 i‡(
de°
->
gid
.
globÆ
.
öãrÁ˚_id
) {

110 
©å
.
ah_©å
.
is_globÆ
 = 1;

111 
©å
.
ah_©å
.
grh
.
h›_limô
 = 1;

112 
©å
.
ah_©å
.
grh
.
dgid
 = 
de°
->
gid
;

113 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
sgid_idx
;

115 
©å_mask
 = 
IBV_QP_STATE
 |

116 
IBV_QP_AV
 |

117 
IBV_QP_PATH_MTU
 |

118 
IBV_QP_DEST_QPN
 |

119 
IBV_QP_RQ_PSN
 |

120 
IBV_QP_MAX_DEST_RD_ATOMIC
 |

121 
IBV_QP_MIN_RNR_TIMER
;

122 
©å_mask
 |
u£_ooo
 ? 
IBV_EXP_QP_OOO_RW_DATA_PLACEMENT
 : 0;

124 i‡(
	`ibv_exp_modify_qp
(
˘x
->
qp
, &
©å
, 
©å_mask
)) {

125 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

129 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

130 
©å
.
timeout
 = 14;

131 
©å
.
ªåy_˙t
 = 7;

132 
©å
.
∫r_ªåy
 = 7;

133 
©å
.
sq_p¢
 = 
my_p¢
;

134 
©å
.
max_rd_©omic
 = 1;

135 i‡(
	`ibv_exp_modify_qp
(
˘x
->
qp
, &
©å
,

136 
IBV_QP_STATE
 |

137 
IBV_QP_TIMEOUT
 |

138 
IBV_QP_RETRY_CNT
 |

139 
IBV_QP_RNR_RETRY
 |

140 
IBV_QP_SQ_PSN
 |

141 
IBV_QP_MAX_QP_RD_ATOMIC
)) {

142 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

147 
	}
}

149 
pögp⁄g_de°
 *
	$µ_˛õ¡_exch_de°
(c⁄° *
£rvî«me
, 
p‹t
,

150 c⁄° 
pögp⁄g_de°
 *
my_de°
)

152 
addröfo
 *
ªs
, *
t
;

153 
addröfo
 
höts
 = {

154 .
ai_Ámûy
 = 
AF_UNSPEC
,

155 .
ai_sockty≥
 = 
SOCK_STREAM


157 *
£rvi˚
;

158 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

159 
n
;

160 
sockfd
 = -1;

161 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

162 
gid
[33];

164 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

165  
NULL
;

167 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

169 i‡(
n
 < 0) {

170 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

171 
	`‰ì
(
£rvi˚
);

172  
NULL
;

175 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

176 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

177 i‡(
sockfd
 >= 0) {

178 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

180 
	`˛o£
(
sockfd
);

181 
sockfd
 = -1;

185 
	`‰ìaddröfo
(
ªs
);

186 
	`‰ì
(
£rvi˚
);

188 i‡(
sockfd
 < 0) {

189 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

190  
NULL
;

193 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

194 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
->
lid
, my_de°->
q≤
,

195 
my_de°
->
p¢
, 
gid
);

196 i‡(
	`wrôe
(
sockfd
, 
msg
,  msg) !=  msg) {

197 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

198 
out
;

201 i‡(
	`ªcv
(
sockfd
, 
msg
, (msg), 
MSG_WAITALL
) != (msg)) {

202 
	`≥º‹
("clientÑead");

203 
	`Ârötf
(
°dîr
, "Couldn'tÑeadÑemoteáddress\n");

204 
out
;

207 i‡(
	`wrôe
(
sockfd
, "done", ("done")) != ("done")) {

208 
	`Ârötf
(
°dîr
, "Couldn't send \"done\" msg\n");

209 
out
;

212 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

213 i‡(!
ªm_de°
)

214 
out
;

216 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
->
lid
, &ªm_de°->
q≤
,

217 &
ªm_de°
->
p¢
, 
gid
);

218 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

220 
out
:

221 
	`˛o£
(
sockfd
);

222  
ªm_de°
;

223 
	}
}

225 
pögp⁄g_de°
 *
	$µ_£rvî_exch_de°
(
pögp⁄g_c⁄ãxt
 *
˘x
,

226 
ib_p‹t
, 
ibv_mtu
 
mtu
,

227 
p‹t
, 
¶
,

228 c⁄° 
pögp⁄g_de°
 *
my_de°
,

229 
sgid_idx
)

231 
addröfo
 *
ªs
, *
t
;

232 
addröfo
 
höts
 = {

233 .
ai_Êags
 = 
AI_PASSIVE
,

234 .
ai_Ámûy
 = 
AF_UNSPEC
,

235 .
ai_sockty≥
 = 
SOCK_STREAM


237 *
£rvi˚
;

238 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

239 
n
;

240 
sockfd
 = -1, 
c⁄nfd
;

241 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

242 
gid
[33];

244 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

245  
NULL
;

247 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

249 i‡(
n
 < 0) {

250 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
p‹t
);

251 
	`‰ì
(
£rvi˚
);

252  
NULL
;

255 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

256 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

257 i‡(
sockfd
 >= 0) {

258 
n
 = 1;

260 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, Ç);

262 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

264 
	`˛o£
(
sockfd
);

265 
sockfd
 = -1;

269 
	`‰ìaddröfo
(
ªs
);

270 
	`‰ì
(
£rvi˚
);

272 i‡(
sockfd
 < 0) {

273 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

274  
NULL
;

277 
	`li°í
(
sockfd
, 1);

278 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

279 
	`˛o£
(
sockfd
);

280 i‡(
c⁄nfd
 < 0) {

281 
	`Ârötf
(
°dîr
, "accept() failed\n");

282  
NULL
;

285 
n
 = 
	`ªcv
(
c⁄nfd
, 
msg
, (msg), 
MSG_WAITALL
);

286 i‡(
n
 ! 
msg
) {

287 
	`≥º‹
("serverÑead");

288 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'àªadÑemŸêaddªss\n", 
n
, (Ë 
msg
);

289 
out
;

292 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

293 i‡(!
ªm_de°
)

294 
out
;

296 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
->
lid
, &ªm_de°->
q≤
,

297 &
ªm_de°
->
p¢
, 
gid
);

298 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

300 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
my_de°
->
p¢
, 
mtu
, 
¶
, 
ªm_de°
,

301 
sgid_idx
)) {

302 
	`Ârötf
(
°dîr
, "Couldn't connectÅoÑemote QP\n");

303 
	`‰ì
(
ªm_de°
);

304 
ªm_de°
 = 
NULL
;

305 
out
;

309 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

310 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
->
lid
, my_de°->
q≤
,

311 
my_de°
->
p¢
, 
gid
);

312 i‡(
	`wrôe
(
c⁄nfd
, 
msg
,  msg) !=  msg) {

313 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

314 
	`‰ì
(
ªm_de°
);

315 
ªm_de°
 = 
NULL
;

316 
out
;

320 i‡(
	`ªad
(
c⁄nfd
, 
msg
, (msg)) <= 0) {

321 
	`Ârötf
(
°dîr
, "Couldn'tÑead \"done\" msg\n");

322 
	`‰ì
(
ªm_de°
);

323 
ªm_de°
 = 
NULL
;

324 
out
;

327 
out
:

328 
	`˛o£
(
c⁄nfd
);

329  
ªm_de°
;

330 
	}
}

332 
pögp⁄g_c⁄ãxt
 *
	$µ_öô_˘x
(
ibv_devi˚
 *
ib_dev
, 
size
,

333 
rx_dïth
, 
p‹t
,

334 
u£_evít
, 
öÃ_ªcv
)

336 
pögp⁄g_c⁄ãxt
 *
˘x
;

337 
ibv_exp_devi˚_©å
 
d©å
;

338 
ªt
;

340 
˘x
 = 
	`ˇŒoc
(1,  *ctx);

341 i‡(!
˘x
)

342  
NULL
;

344 
	`mem£t
(&
d©å
, 0, (dattr));

346 
˘x
->
size
 = size;

347 
˘x
->
rx_dïth
 =Ñx_depth;

349 i‡(!
u£_c⁄tiguous_mr
) {

350 
˘x
->
buf
 = 
	`memÆign
(
∑ge_size
, 
size
);

351 i‡(!
˘x
->
buf
) {

352 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

353 
˛ón_˘x
;

357 
˘x
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
ib_dev
);

358 i‡(!
˘x
->
c⁄ãxt
) {

359 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

360 
	`ibv_gë_devi˚_«me
(
ib_dev
));

361 
˛ón_buf„r
;

363 i‡(
öÃ_ªcv
) {

364 
d©å
.
comp_mask
 |
IBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
;

365 
ªt
 = 
	`ibv_exp_quîy_devi˚
(
˘x
->
c⁄ãxt
, &
d©å
);

366 i‡(
ªt
) {

367 
	`¥ötf
(" Couldn't query device for inline-receive capabilities.\n");

368 } i‡(!(
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
)) {

369 
	`¥ötf
(" Inline-receiveÇot supported by driver.\n");

370 } i‡(
d©å
.
ölöe_ªcv_sz
 < 
öÃ_ªcv
) {

371 
	`¥ötf
(" Max inline-receive(%d) < Requested inline-receive(%d).\n",

372 
d©å
.
ölöe_ªcv_sz
, 
öÃ_ªcv
);

375 
˘x
->
öÃ_ªcv
 = inlr_recv;

377 i‡(
u£_evít
) {

378 
˘x
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
(˘x->
c⁄ãxt
);

379 i‡(!
˘x
->
ch™√l
) {

380 
	`Ârötf
(
°dîr
, "Couldn't create completion channel\n");

381 
˛ón_devi˚
;

384 
˘x
->
ch™√l
 = 
NULL
;

386 
˘x
->
pd
 = 
	`ibv_Æloc_pd
(˘x->
c⁄ãxt
);

387 i‡(!
˘x
->
pd
) {

388 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

389 
˛ón_comp_ch™√l
;

392 i‡(!
u£_c⁄tiguous_mr
 && !
u£_odp
 && !
u£_dm
) {

393 
˘x
->
mr
 = 
	`ibv_ªg_mr
(˘x->
pd
, ctx->
buf
, 
size
,

394 
IBV_ACCESS_LOCAL_WRITE
);

395 } i‡(
u£_odp
) {

396 i‡(
u£_up°ªam
) {

397 
ac˚ss_Êags
 = 
IBV_ACCESS_LOCAL_WRITE
;

398 c⁄° 
uöt32_t
 
rc_ˇps_mask
 = 
IBV_ODP_SUPPORT_SEND
 |

399 
IBV_ODP_SUPPORT_RECV
;

400 
ibv_devi˚_©å_ex
 
©åx
;

402 i‡(
	`ibv_quîy_devi˚_ex
(
˘x
->
c⁄ãxt
, 
NULL
, &
©åx
)) {

403 
	`Ârötf
(
°dîr
, "Couldn't query device for its features\n");

404 
˛ón_pd
;

407 i‡(!(
©åx
.
odp_ˇps
.
gíîÆ_ˇps
 & 
IBV_ODP_SUPPORT
) ||

408 (
©åx
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
rc_odp_ˇps
 & 
rc_ˇps_mask
) !=Ñc_caps_mask) {

409 
	`Ârötf
(
°dîr
, "The device isn't ODP capable or doesÇot support RC sendándÑeceive with ODP\n");

410 
˛ón_pd
;

413 
ac˚ss_Êags
 |
IBV_ACCESS_ON_DEMAND
;

414 
˘x
->
mr
 = 
	`ibv_ªg_mr
(˘x->
pd
, ctx->
buf
, 
size
, 
ac˚ss_Êags
);

417 
ibv_exp_ªg_mr_ö
 
ö
;

418 
ö
.
pd
 = 
˘x
->pd;

419 
ö
.
addr
 = 
˘x
->
buf
;

420 
ö
.
Àngth
 = 
size
;

421 
ö
.
exp_ac˚ss
 = 
IBV_EXP_ACCESS_LOCAL_WRITE
 | 
IBV_EXP_ACCESS_ON_DEMAND
;

422 
ö
.
comp_mask
 = 0;

423 
d©å
.
comp_mask
 |
IBV_EXP_DEVICE_ATTR_ODP
;

424 
ªt
 = 
	`ibv_exp_quîy_devi˚
(
˘x
->
c⁄ãxt
, &
d©å
);

425 i‡(
ªt
) {

426 
	`¥ötf
(" Couldn't query device for on-demand\
 capabilities.\n");

428 
˛ón_pd
;

429 } i‡(!(
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_ODP
)) {

430 
	`¥ötf
(" On-demandÖagingÇot supported by driver.\n");

431 
˛ón_pd
;

432 } i‡(!(
d©å
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
rc_odp_ˇps
 &

433 
IBV_EXP_ODP_SUPPORT_SEND
)) {

434 
	`¥ötf
(" Send isÇot supported for RCÅransport.\n");

435 
˛ón_pd
;

436 } i‡(!(
d©å
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
rc_odp_ˇps
 &

437 
IBV_EXP_ODP_SUPPORT_RECV
)) {

438 
	`¥ötf
(" Receive isÇot supported for RCÅransport.\n");

439 
˛ón_pd
;

442 
˘x
->
mr
 = 
	`ibv_exp_ªg_mr
(&
ö
);

444 } i‡(
u£_c⁄tiguous_mr
) {

445 
ibv_exp_ªg_mr_ö
 
ö
;

447 
ö
.
pd
 = 
˘x
->pd;

448 
ö
.
addr
 = 
c⁄tig_addr
;

449 
ö
.
Àngth
 = 
size
;

450 
ö
.
exp_ac˚ss
 = 
IBV_EXP_ACCESS_LOCAL_WRITE
;

451 i‡(
c⁄tig_addr
) {

452 
ö
.
comp_mask
 = 
IBV_EXP_REG_MR_CREATE_FLAGS
;

453 
ö
.
¸óã_Êags
 = 
IBV_EXP_REG_MR_CREATE_CONTIG
;

455 
ö
.
comp_mask
 = 0;

456 
ö
.
exp_ac˚ss
 |
IBV_EXP_ACCESS_ALLOCATE_MR
;

459 
˘x
->
mr
 = 
	`ibv_exp_ªg_mr
(&
ö
);

461 
ibv_exp_Æloc_dm_©å
 
dm_©å
 = {0};

462 
ibv_exp_ªg_mr_ö
 
mr_ö
 = { .
pd
 = 
˘x
->pd,

463 .
addr
 = 0,

464 .
Àngth
 = 
size
,

465 .
exp_ac˚ss
 = 
IBV_EXP_ACCESS_LOCAL_WRITE
,

466 .
¸óã_Êags
 = 0};

468 
d©å
.
comp_mask
 = 
IBV_EXP_DEVICE_ATTR_MAX_DM_SIZE
;

469 
ªt
 = 
	`ibv_exp_quîy_devi˚
(
˘x
->
c⁄ãxt
, &
d©å
);

470 i‡(
ªt
) {

471 
	`Ârötf
(
°dîr
, "Couldn't query device for max_dm_size\n");

472 
˛ón_pd
;

473 } i‡(!(
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_DM_SIZE
)) {

474 
	`Ârötf
(
°dîr
, "Device memoryÇot supported by driver\n");

475 
˛ón_pd
;

476 } i‡(!(
d©å
.
max_dm_size
)) {

477 
	`Ârötf
(
°dîr
, "Max dm size is zero\n");

478 
˛ón_pd
;

481 
dm_©å
.
Àngth
 = 
size
;

482 
˘x
->
dm
 = 
	`ibv_exp_Æloc_dm
(˘x->
c⁄ãxt
, &
dm_©å
);

483 i‡(!
˘x
->
dm
) {

484 
	`Ârötf
(
°dîr
, "Dev memállocation failed\n");

485 
˛ón_pd
;

488 
mr_ö
.
dm
 = 
˘x
->dm;

489 
mr_ö
.
comp_mask
 = 
IBV_EXP_REG_MR_DM
;

490 
˘x
->
mr
 = 
	`ibv_exp_ªg_mr
(&
mr_ö
);

493 i‡(!
˘x
->
mr
) {

494 
	`Ârötf
(
°dîr
, "Couldn'tÑegister MR\n");

495 
˛ón_dm
;

498 i‡(
u£_c⁄tiguous_mr
)

499 
˘x
->
buf
 = ctx->
mr
->
addr
;

502 
	`mem£t
(
˘x
->
buf
, 0x7b, 
size
);

504 i‡(
u£_dm
) {

505 
ibv_exp_mem˝y_dm_©å
 
˝y_©å
 = {0};

507 
˝y_©å
.
mem˝y_dú
 = 
IBV_EXP_DM_CPY_TO_DEVICE
;

508 
˝y_©å
.
ho°_addr
 = (*)
˘x
->
buf
;

509 
˝y_©å
.
Àngth
 = 
size
;

510 i‡(
	`ibv_exp_mem˝y_dm
(
˘x
->
dm
, &
˝y_©å
)) {

511 
	`Ârötf
(
°dîr
, "CopyÅo dev mem failed\n");

512 
˛ón_dm
;

516 
˘x
->
cq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 
rx_dïth
 + 1, 
NULL
,

517 
˘x
->
ch™√l
, 0);

518 i‡(!
˘x
->
cq
) {

519 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

520 
˛ón_mr
;

524 
ibv_exp_qp_öô_©å
 
©å
 = {

525 .
£nd_cq
 = 
˘x
->
cq
,

526 .
ªcv_cq
 = 
˘x
->
cq
,

527 .
ˇp
 = {

528 .
max_£nd_wr
 = 1,

529 .
max_ªcv_wr
 = 
rx_dïth
,

530 .
max_£nd_sge
 = 1,

531 .
max_ªcv_sge
 = 1

533 .
qp_ty≥
 = 
IBV_QPT_RC
,

534 .
pd
 = 
˘x
->pd,

535 .
comp_mask
 = 
IBV_EXP_QP_INIT_ATTR_PD
,

536 .
max_öl_ªcv
 = 
˘x
->
öÃ_ªcv


538 i‡(
˘x
->
öÃ_ªcv
)

539 
©å
.
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_INL_RECV
;

541 
˘x
->
qp
 = 
	`ibv_exp_¸óã_qp
(˘x->
c⁄ãxt
, &
©å
);

543 i‡(!
˘x
->
qp
) {

544 
	`Ârötf
(
°dîr
, "Couldn't create QP\n");

545 
˛ón_cq
;

547 i‡(
˘x
->
öÃ_ªcv
 > 
©å
.
max_öl_ªcv
)

548 
	`¥ötf
(" Actual inline-receive(%d) <Ñequested inline-receive(%d)\n",

549 
©å
.
max_öl_ªcv
, 
˘x
->
öÃ_ªcv
);

553 
ibv_qp_©å
 
©å
 = {

554 .
qp_°©e
 = 
IBV_QPS_INIT
,

555 .
pkey_ödex
 = 0,

556 .
p‹t_num
 = 
p‹t
,

557 .
qp_ac˚ss_Êags
 = 0

560 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

561 
IBV_QP_STATE
 |

562 
IBV_QP_PKEY_INDEX
 |

563 
IBV_QP_PORT
 |

564 
IBV_QP_ACCESS_FLAGS
)) {

565 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

566 
˛ón_qp
;

571  
˘x
;

574 
˛ón_qp
:

575 
	`ibv_de°roy_qp
(
˘x
->
qp
);

577 
˛ón_cq
:

578 
	`ibv_de°roy_cq
(
˘x
->
cq
);

580 
˛ón_mr
:

581 
	`ibv_dîeg_mr
(
˘x
->
mr
);

583 
˛ón_dm
:

584 i‡(
˘x
->
dm
)

585 
	`ibv_exp_‰ì_dm
(
˘x
->
dm
);

587 
˛ón_pd
:

588 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

590 
˛ón_comp_ch™√l
:

591 i‡(
˘x
->
ch™√l
)

592 
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
);

594 
˛ón_devi˚
:

595 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

597 
˛ón_buf„r
:

598 i‡(!
u£_c⁄tiguous_mr
)

599 
	`‰ì
(
˘x
->
buf
);

601 
˛ón_˘x
:

602 
	`‰ì
(
˘x
);

604  
NULL
;

605 
	}
}

607 
	$µ_˛o£_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
)

609 i‡(
	`ibv_de°roy_qp
(
˘x
->
qp
)) {

610 
	`Ârötf
(
°dîr
, "Couldn't destroy QP\n");

614 i‡(
	`ibv_de°roy_cq
(
˘x
->
cq
)) {

615 
	`Ârötf
(
°dîr
, "Couldn't destroy CQ\n");

619 i‡(
	`ibv_dîeg_mr
(
˘x
->
mr
)) {

620 
	`Ârötf
(
°dîr
, "Couldn't deregister MR\n");

624 i‡(
u£_dm
) {

625 i‡(
	`ibv_exp_‰ì_dm
(
˘x
->
dm
)) {

626 
	`Ârötf
(
°dîr
, "Couldn't free DM\n");

631 i‡(
	`ibv_dóŒoc_pd
(
˘x
->
pd
)) {

632 
	`Ârötf
(
°dîr
, "Couldn't deallocate PD\n");

636 i‡(
˘x
->
ch™√l
) {

637 i‡(
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
)) {

638 
	`Ârötf
(
°dîr
, "Couldn't destroy completion channel\n");

643 i‡(
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
)) {

644 
	`Ârötf
(
°dîr
, "Couldn'tÑelease context\n");

648 i‡(!
u£_c⁄tiguous_mr
)

649 
	`‰ì
(
˘x
->
buf
);

651 
	`‰ì
(
˘x
);

654 
	}
}

656 
	#mmö
(
a
, 
b
Ë®< b ?á : 
	)
b

657 
	#MAX_SGE_LEN
 0xFFFFFFF

	)

659 
	$µ_po°_ªcv
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
n
)

661 
ibv_sge
 
li°
 = {

662 .
addr
 = 
u£_dm
 ? 0 : (
uöçå_t
Ë
˘x
->
buf
,

663 .
Àngth
 = 
	`mmö
(
˘x
->
size
, 
MAX_SGE_LEN
),

664 .
lkey
 = 
˘x
->
mr
->lkey

666 
ibv_ªcv_wr
 
wr
 = {

667 .
wr_id
 = 
PINGPONG_RECV_WRID
,

668 .
sg_li°
 = &
li°
,

669 .
num_sge
 = 1,

671 
ibv_ªcv_wr
 *
bad_wr
;

672 
i
;

674 
i
 = 0; i < 
n
; ++i)

675 i‡(
	`ibv_po°_ªcv
(
˘x
->
qp
, &
wr
, &
bad_wr
))

678  
i
;

679 
	}
}

681 
	$µ_po°_£nd
(
pögp⁄g_c⁄ãxt
 *
˘x
)

683 
ibv_sge
 
li°
 = {

684 .
addr
 = 
u£_dm
 ? 0 : (
uöçå_t
Ë
˘x
->
buf
,

685 .
Àngth
 = 
	`mmö
(
˘x
->
size
, 
MAX_SGE_LEN
),

686 .
lkey
 = 
˘x
->
mr
->lkey

688 
ibv_£nd_wr
 
wr
 = {

689 .
wr_id
 = 
PINGPONG_SEND_WRID
,

690 .
sg_li°
 = &
li°
,

691 .
num_sge
 = 1,

692 .
›code
 = 
IBV_WR_SEND
,

693 .
£nd_Êags
 = 
IBV_SEND_SIGNALED
,

695 
ibv_£nd_wr
 *
bad_wr
;

697  
	`ibv_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

698 
	}
}

700 
	$ußge
(c⁄° *
¨gv0
)

702 
	`¥ötf
("Usage:\n");

703 
	`¥ötf
(" %† sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

704 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

705 
	`¥ötf
("\n");

706 
	`¥ötf
("Options:\n");

707 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

708 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

709 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

710 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 4096)\n");

711 
	`¥ötf
(" -m, --mtu=<size>Öath MTU (default 1024)\n");

712 
	`¥ötf
(" -r, --rx-depth=<dep>Çumber ofÑeceivesÅoÖostátáÅime (default 500)\n");

713 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchanges (default 1000)\n");

714 
	`¥ötf
(" -l, --sl=<sl> serviceÜevel value\n");

715 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

716 
	`¥ötf
(" -g, --gid-idx=<gid index>ÜocalÖort gid index\n");

717 
	`¥ötf
(" -c, --contiguous-mr use contiguous mr\n");

718 
	`¥ötf
(" -t, --inline-recv=<size> size of inline-recv\n");

719 
	`¥ötf
(" -a, --check-nop check NOP opcode\n");

720 
	`¥ötf
(" -o, --odp use on demandÖaging\n");

721 
	`¥ötf
(" -u, --upstream use upstream API\n");

722 
	`¥ötf
(" -t, --upstream use upstream API\n");

723 
	`¥ötf
(" -z, --contig_addr use specifixáddr for contigÖages MR, must use with -c flag\n");

724 
	`¥ötf
(" -b, --oooÉnable multipathÖrocessing\n");

725 
	`¥ötf
(" -j, --memic use device memory\n");

726 
	}
}

728 
	$£nd_n›
(
pögp⁄g_c⁄ãxt
 *
˘x
)

730 
ibv_exp_£nd_wr
 *
bad_wr
;

731 
ibv_exp_£nd_wr
 
wr
;

732 
ibv_exp_wc
 
wc
;

733 
îr
;

734 
n
;

736 
	`mem£t
(&
wr
, 0, (wr));

738 
wr
.
wr_id
 = 
PINGPONG_SEND_WRID
;

739 
wr
.
num_sge
 = 0;

740 
wr
.
exp_›code
 = 
IBV_EXP_WR_NOP
;

741 
wr
.
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
;

743 
îr
 = 
	`ibv_exp_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

744 i‡(
îr
) {

745 
	`Ârötf
(
°dîr
, "postÇop failed\n");

746  
îr
;

750 
n
 = 
	`ibv_exp_pﬁl_cq
(
˘x
->
cq
, 1, &
wc
, (wc));

751 i‡(
n
 < 0) {

752 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
n
);

755 } !
n
);

757 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

758 
	`Ârötf
(
°dîr
, "com∂ëi⁄ wôhÉº‹ %d\n", 
wc
.
°©us
);

763 
	}
}

765 
	$maö
(
¨gc
, *
¨gv
[])

767 
ibv_devi˚
 **
dev_li°
;

768 
ibv_devi˚
 *
ib_dev
;

769 
pögp⁄g_c⁄ãxt
 *
˘x
;

770 
pögp⁄g_de°
 
my_de°
;

771 
pögp⁄g_de°
 *
ªm_de°
;

772 
timevÆ
 
°¨t
, 
íd
;

773 *
ib_dev«me
 = 
NULL
;

774 *
£rvî«me
 = 
NULL
;

775 
p‹t
 = 18515;

776 
ib_p‹t
 = 1;

777 
size
 = 4096;

778 
ibv_mtu
 
mtu
 = 
IBV_MTU_1024
;

779 
rx_dïth
 = 500;

780 
ôîs
 = 1000;

781 
u£_evít
 = 0;

782 
routs
;

783 
r˙t
, 
s˙t
;

784 
num_cq_evíts
 = 0;

785 
¶
 = 0;

786 
gidx
 = -1;

787 
gid
[
INET6_ADDRSTRLEN
];

788 
öÃ_ªcv
 = 0;

789 
check_n›
 = 0;

790 
îr
;

792 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

793 
c⁄tig_addr
 = 
NULL
;

796 
c
;

798 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

799 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

800 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

801 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

802 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

803 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

804 { .
«me
 = "rx-dïth", .
has_¨g
 = 1, .
vÆ
 = 'r' },

805 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

806 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

807 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

808 { .
«me
 = "gid-idx", .
has_¨g
 = 1, .
vÆ
 = 'g' },

809 { .
«me
 = "c⁄tiguous-mr", .
has_¨g
 = 0, .
vÆ
 = 'c' },

810 { .
«me
 = "ölöe-ªcv", .
has_¨g
 = 1, .
vÆ
 = 't' },

811 { .
«me
 = "check-n›", .
has_¨g
 = 0, .
vÆ
 = 'a' },

812 { .
«me
 = "odp", .
has_¨g
 = 0, .
vÆ
 = 'o' },

813 { .
«me
 = "up°ªam", .
has_¨g
 = 0, .
vÆ
 = 'u' },

814 { .
«me
 = "c⁄tig_addr", .
has_¨g
 = 1, .
vÆ
 = 'z' },

815 { .
«me
 = "ooo", .
has_¨g
 = 0, .
vÆ
 = 'b' },

816 { .
«me
 = "memic", .
has_¨g
 = 0, .
vÆ
 = 'j' },

820 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:m:r:n:l:ecg:t:ajouz:",

821 
l⁄g_›ti⁄s
, 
NULL
);

822 i‡(
c
 == -1)

825 
c
) {

827 
u£_dm
 = 1;

830 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

831 i‡(
p‹t
 < 0 ||Öort > 65535) {

832 
	`ußge
(
¨gv
[0]);

838 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

842 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

843 i‡(
ib_p‹t
 < 0) {

844 
	`ußge
(
¨gv
[0]);

850 
size
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 0);

854 
mtu
 = 
	`µ_mtu_to_íum
(
	`°πﬁ
(
›èrg
, 
NULL
, 0));

855 i‡(
mtu
 < 0) {

856 
	`ußge
(
¨gv
[0]);

862 
rx_dïth
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

866 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

870 
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

874 ++
u£_evít
;

878 
gidx
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

882 ++
u£_c⁄tiguous_mr
;

886 
öÃ_ªcv
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

890 
check_n›
 = 1;

894 
u£_odp
 = 1;

898 
u£_up°ªam
 = 1;

901 
c⁄tig_addr
 = (*)(
uöçå_t
)
	`°πﬁ
(
›èrg
, 
NULL
, 0);

904 
u£_ooo
 = 1;

907 
	`ußge
(
¨gv
[0]);

912 i‡(
›töd
 =
¨gc
 - 1)

913 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

914 i‡(
›töd
 < 
¨gc
) {

915 
	`ußge
(
¨gv
[0]);

919 i‡(
c⁄tig_addr
 && !
u£_c⁄tiguous_mr
) {

920 
	`ußge
(
¨gv
[0]);

924 i‡(
u£_dm
 && (
u£_c⁄tiguous_mr
 || 
u£_odp
)) {

925 
	`Ârötf
(
°dîr
, "Can't use device memory with on-demandÖaging or contiguous mr\n");

928 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

930 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

931 i‡(!
dev_li°
) {

932 
	`≥º‹
("FailedÅo get IB devicesÜist");

936 i‡(!
ib_dev«me
) {

937 
ib_dev
 = *
dev_li°
;

938 i‡(!
ib_dev
) {

939 
	`Ârötf
(
°dîr
, "No IB devices found\n");

943 
i
;

944 
i
 = 0; 
dev_li°
[i]; ++i)

945 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

947 
ib_dev
 = 
dev_li°
[
i
];

948 i‡(!
ib_dev
) {

949 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

954 
˘x
 = 
	`µ_öô_˘x
(
ib_dev
, 
size
, 
rx_dïth
, 
ib_p‹t
, 
u£_evít
, 
öÃ_ªcv
);

955 i‡(!
˘x
)

958 
routs
 = 
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
);

959 i‡(
routs
 < 
˘x
->
rx_dïth
) {

960 
	`Ârötf
(
°dîr
, "Couldn'àpo°Ñe˚ivê(%d)\n", 
routs
);

964 i‡(
u£_evít
)

965 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

966 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

971 i‡(
	`µ_gë_p‹t_öfo
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, &˘x->
p‹töfo
)) {

972 
	`Ârötf
(
°dîr
, "Couldn't getÖort info\n");

976 
my_de°
.
lid
 = 
˘x
->
p‹töfo
.lid;

977 i‡(
˘x
->
p‹töfo
.
lök_œyî
 !
IBV_LINK_LAYER_ETHERNET
 &&

978 !
my_de°
.
lid
) {

979 
	`Ârötf
(
°dîr
, "Couldn't getÜocal LID\n");

983 i‡(
gidx
 >= 0) {

984 i‡(
	`ibv_quîy_gid
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, 
gidx
, &
my_de°
.
gid
)) {

985 
	`Ârötf
(
°dîr
, "ˇn'àªad sgid o‡ödex %d\n", 
gidx
);

989 
	`mem£t
(&
my_de°
.
gid
, 0,  my_dest.gid);

991 
my_de°
.
q≤
 = 
˘x
->
qp
->
qp_num
;

992 
my_de°
.
p¢
 = 
	`Ã™d48
() & 0xffffff;

993 
	`öë_¡›
(
AF_INET6
, &
my_de°
.
gid
, gid,  gid);

994 
	`¥ötf
("Üocaláddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, GID %s\n",

995 
my_de°
.
lid
, my_de°.
q≤
, my_de°.
p¢
, 
gid
);

998 i‡(
£rvî«me
)

999 
ªm_de°
 = 
	`µ_˛õ¡_exch_de°
(
£rvî«me
, 
p‹t
, &
my_de°
);

1001 
ªm_de°
 = 
	`µ_£rvî_exch_de°
(
˘x
, 
ib_p‹t
, 
mtu
, 
p‹t
, 
¶
,

1002 &
my_de°
, 
gidx
);

1004 i‡(!
ªm_de°
)

1007 
	`öë_¡›
(
AF_INET6
, &
ªm_de°
->
gid
, gid,  gid);

1008 
	`¥ötf
("Ñemoteáddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, GID %s\n",

1009 
ªm_de°
->
lid
,Ñem_de°->
q≤
,Ñem_de°->
p¢
, 
gid
);

1011 i‡(
£rvî«me
)

1012 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
my_de°
.
p¢
, 
mtu
, 
¶
, 
ªm_de°
,

1013 
gidx
))

1016 
˘x
->
≥ndög
 = 
PINGPONG_RECV_WRID
;

1018 i‡(
£rvî«me
) {

1019 i‡(
check_n›
) {

1020 
îr
 = 
	`£nd_n›
(
˘x
);

1021 i‡(
îr
) {

1022 
	`Ârötf
(
°dîr
, "nop operation failed\n");

1023  
îr
;

1027 i‡(
	`µ_po°_£nd
(
˘x
)) {

1028 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

1031 
˘x
->
≥ndög
 |
PINGPONG_SEND_WRID
;

1034 i‡(
	`gëtimeofday
(&
°¨t
, 
NULL
)) {

1035 
	`≥º‹
("gettimeofday");

1039 
r˙t
 = 
s˙t
 = 0;

1040 
r˙t
 < 
ôîs
 || 
s˙t
 < iters) {

1041 i‡(
u£_evít
) {

1042 
ibv_cq
 *
ev_cq
;

1043 *
ev_˘x
;

1045 i‡(
	`ibv_gë_cq_evít
(
˘x
->
ch™√l
, &
ev_cq
, &
ev_˘x
)) {

1046 
	`Ârötf
(
°dîr
, "FailedÅo get cq_event\n");

1050 ++
num_cq_evíts
;

1052 i‡(
ev_cq
 !
˘x
->
cq
) {

1053 
	`Ârötf
(
°dîr
, "CQÉvíàf‹ unknow¿CQ %p\n", 
ev_cq
);

1057 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

1058 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

1064 
ibv_exp_wc
 
wc
[2];

1065 
√
, 
i
;

1068 
√
 = 
	`ibv_exp_pﬁl_cq
(
˘x
->
cq
, 2, 
wc
, (wc[0]));

1069 i‡(
√
 < 0) {

1070 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

1073 } !
u£_evít
 && 
√
 < 1);

1075 
i
 = 0; i < 
√
; ++i) {

1076 i‡(
wc
[
i
].
°©us
 !
IBV_WC_SUCCESS
) {

1077 
	`Ârötf
(
°dîr
, "Failed status %s (%d) for wr_id %d\n",

1078 
	`ibv_wc_°©us_°r
(
wc
[
i
].
°©us
),

1079 
wc
[
i
].
°©us
, (Ëwc[i].
wr_id
);

1083 (Ë
wc
[
i
].
wr_id
) {

1084 
PINGPONG_SEND_WRID
:

1085 ++
s˙t
;

1088 
PINGPONG_RECV_WRID
:

1089 i‡(--
routs
 <= 1) {

1090 
routs
 +
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
 -Ñouts);

1091 i‡(
routs
 < 
˘x
->
rx_dïth
) {

1092 
	`Ârötf
(
°dîr
,

1094 
routs
);

1099 ++
r˙t
;

1103 
	`Ârötf
(
°dîr
, "Completion for unknown wr_id %d\n",

1104 (Ë
wc
[
i
].
wr_id
);

1108 
˘x
->
≥ndög
 &~(Ë
wc
[
i
].
wr_id
;

1109 i‡(
s˙t
 < 
ôîs
 && !
˘x
->
≥ndög
) {

1110 i‡(
	`µ_po°_£nd
(
˘x
)) {

1111 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

1114 
˘x
->
≥ndög
 = 
PINGPONG_RECV_WRID
 |

1115 
PINGPONG_SEND_WRID
;

1121 i‡(
	`gëtimeofday
(&
íd
, 
NULL
)) {

1122 
	`≥º‹
("gettimeofday");

1127 
u£c
 = (
íd
.
tv_£c
 - 
°¨t
.tv_sec) * 1000000 +

1128 (
íd
.
tv_u£c
 - 
°¨t
.tv_usec);

1129 
byãs
 = (Ë
size
 * 
ôîs
 * 2;

1131 
	`¥ötf
("%lld bytes in %.2f seconds = %.2f Mbit/sec\n",

1132 
byãs
, 
u£c
 / 1000000., bytes * 8. / usec);

1133 
	`¥ötf
("%d iters in %.2f seconds = %.2f usec/iter\n",

1134 
ôîs
, 
u£c
 / 1000000., usec / iters);

1137 
	`ibv_ack_cq_evíts
(
˘x
->
cq
, 
num_cq_evíts
);

1139 i‡(
	`µ_˛o£_˘x
(
˘x
))

1142 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

1143 
	`‰ì
(
ªm_de°
);

1146 
	}
}

	@libibverbs-41mlnx1/examples/srq_pingpong.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/sockë.h
>

43 
	~<sys/time.h
>

44 
	~<√tdb.h
>

45 
	~<mÆloc.h
>

46 
	~<gë›t.h
>

47 
	~<¨∑/öë.h
>

48 
	~<time.h
>

50 
	~"pögp⁄g.h
"

53 
	mPINGPONG_RECV_WRID
 = 1,

54 
	mPINGPONG_SEND_WRID
 = 2,

57 
	g∑ge_size
;

59 
	spögp⁄g_c⁄ãxt
 {

60 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

61 
ibv_comp_ch™√l
 *
	mch™√l
;

62 
ibv_pd
 *
	mpd
;

63 
ibv_mr
 *
	mmr
;

64 
ibv_cq
 *
	mcq
;

65 
ibv_§q
 *
	m§q
;

66 
ibv_qp
 **
	mqp
;

67 *
	mbuf
;

68 
	msize
;

69 
	mnum_qp
;

70 
	mrx_dïth
;

71 *
	m≥ndög
;

72 
ibv_p‹t_©å
 
	mp‹töfo
;

75 
	spögp⁄g_de°
 {

76 
	mlid
;

77 
	mq≤
;

78 
	mp¢
;

79 
ibv_gid
 
	mgid
;

82 
	$µ_c⁄√˘_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
p‹t
, 
ibv_mtu
 
mtu
,

83 
¶
, c⁄° 
pögp⁄g_de°
 *
my_de°
,

84 c⁄° 
pögp⁄g_de°
 *
de°
, 
sgid_idx
)

86 
i
;

88 
i
 = 0; i < 
˘x
->
num_qp
; ++i) {

89 
ibv_qp_©å
 
©å
 = {

90 .
qp_°©e
 = 
IBV_QPS_RTR
,

91 .
∑th_mtu
 = 
mtu
,

92 .
de°_qp_num
 = 
de°
[
i
].
q≤
,

93 .
rq_p¢
 = 
de°
[
i
].
p¢
,

94 .
max_de°_rd_©omic
 = 1,

95 .
mö_∫r_timî
 = 12,

96 .
ah_©å
 = {

97 .
is_globÆ
 = 0,

98 .
dlid
 = 
de°
[
i
].
lid
,

99 .
¶
 = sl,

100 .
§c_∑th_bôs
 = 0,

101 .
p‹t_num
 = 
p‹t


105 i‡(
de°
->
gid
.
globÆ
.
öãrÁ˚_id
) {

106 
©å
.
ah_©å
.
is_globÆ
 = 1;

107 
©å
.
ah_©å
.
grh
.
h›_limô
 = 1;

108 
©å
.
ah_©å
.
grh
.
dgid
 = 
de°
->
gid
;

109 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
sgid_idx
;

111 i‡(
	`ibv_modify_qp
(
˘x
->
qp
[
i
], &
©å
,

112 
IBV_QP_STATE
 |

113 
IBV_QP_AV
 |

114 
IBV_QP_PATH_MTU
 |

115 
IBV_QP_DEST_QPN
 |

116 
IBV_QP_RQ_PSN
 |

117 
IBV_QP_MAX_DEST_RD_ATOMIC
 |

118 
IBV_QP_MIN_RNR_TIMER
)) {

119 
	`Ârötf
(
°dîr
, "FaûedÅÿmodify QP[%d]ÅÿRTR\n", 
i
);

123 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

124 
©å
.
timeout
 = 14;

125 
©å
.
ªåy_˙t
 = 7;

126 
©å
.
∫r_ªåy
 = 7;

127 
©å
.
sq_p¢
 = 
my_de°
[
i
].
p¢
;

128 
©å
.
max_rd_©omic
 = 1;

129 i‡(
	`ibv_modify_qp
(
˘x
->
qp
[
i
], &
©å
,

130 
IBV_QP_STATE
 |

131 
IBV_QP_TIMEOUT
 |

132 
IBV_QP_RETRY_CNT
 |

133 
IBV_QP_RNR_RETRY
 |

134 
IBV_QP_SQ_PSN
 |

135 
IBV_QP_MAX_QP_RD_ATOMIC
)) {

136 
	`Ârötf
(
°dîr
, "FaûedÅÿmodify QP[%d]ÅÿRTS\n", 
i
);

142 
	}
}

144 
pögp⁄g_de°
 *
	$µ_˛õ¡_exch_de°
(c⁄° *
£rvî«me
, 
p‹t
,

145 c⁄° 
pögp⁄g_de°
 *
my_de°
,

146 
num_qp
)

148 
addröfo
 *
ªs
, *
t
;

149 
addröfo
 
höts
 = {

150 .
ai_Ámûy
 = 
AF_UNSPEC
,

151 .
ai_sockty≥
 = 
SOCK_STREAM


153 *
£rvi˚
;

154 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

155 
n
;

156 
r
;

157 
i
;

158 
sockfd
 = -1;

159 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

160 
gid
[33];

162 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

163  
NULL
;

165 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

167 i‡(
n
 < 0) {

168 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

169 
	`‰ì
(
£rvi˚
);

170  
NULL
;

173 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

174 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

175 i‡(
sockfd
 >= 0) {

176 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

178 
	`˛o£
(
sockfd
);

179 
sockfd
 = -1;

183 
	`‰ìaddröfo
(
ªs
);

184 
	`‰ì
(
£rvi˚
);

186 i‡(
sockfd
 < 0) {

187 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

188  
NULL
;

191 
i
 = 0; i < 
num_qp
; ++i) {

192 
	`gid_to_wúe_gid
(&
my_de°
[
i
].
gid
, gid);

193 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
[
i
].
lid
,

194 
my_de°
[
i
].
q≤
, my_de°[i].
p¢
, 
gid
);

195 i‡(
	`wrôe
(
sockfd
, 
msg
,  msg) !=  msg) {

196 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

197 
out
;

201 
ªm_de°
 = 
	`mÆloc
(
num_qp
 *  *rem_dest);

202 i‡(!
ªm_de°
)

203 
out
;

205 
i
 = 0; i < 
num_qp
; ++i) {

206 
n
 = 0;

207 
n
 <  
msg
) {

208 
r
 = 
	`ªad
(
sockfd
, 
msg
 + 
n
,  msg -Ç);

209 i‡(
r
 < 0) {

210 
	`≥º‹
("clientÑead");

211 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'tÑeadÑemoteáddress [%d]\n",

212 
n
, (Ë 
msg
, 
i
);

213 
out
;

215 
n
 +
r
;

218 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
[
i
].
lid
, &ªm_de°[i].
q≤
,

219 &
ªm_de°
[
i
].
p¢
, 
gid
);

220 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
[
i
].gid);

223 i‡(
	`wrôe
(
sockfd
, "done", ("done")) != ("done")) {

224 
	`Ârötf
(
°dîr
, "Couldn't send \"done\" msg\n");

225 
	`‰ì
(
ªm_de°
);

226 
ªm_de°
 = 
NULL
;

227 
out
;

230 
out
:

231 
	`˛o£
(
sockfd
);

232  
ªm_de°
;

233 
	}
}

235 
pögp⁄g_de°
 *
	$µ_£rvî_exch_de°
(
pögp⁄g_c⁄ãxt
 *
˘x
,

236 
ib_p‹t
, 
ibv_mtu
 
mtu
,

237 
p‹t
, 
¶
,

238 c⁄° 
pögp⁄g_de°
 *
my_de°
,

239 
sgid_idx
)

241 
addröfo
 *
ªs
, *
t
;

242 
addröfo
 
höts
 = {

243 .
ai_Êags
 = 
AI_PASSIVE
,

244 .
ai_Ámûy
 = 
AF_UNSPEC
,

245 .
ai_sockty≥
 = 
SOCK_STREAM


247 *
£rvi˚
;

248 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

249 
n
;

250 
r
;

251 
i
;

252 
sockfd
 = -1, 
c⁄nfd
;

253 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

254 
gid
[33];

256 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

257  
NULL
;

259 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

261 i‡(
n
 < 0) {

262 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
p‹t
);

263 
	`‰ì
(
£rvi˚
);

264  
NULL
;

267 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

268 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

269 i‡(
sockfd
 >= 0) {

270 
n
 = 1;

272 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, Ç);

274 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

276 
	`˛o£
(
sockfd
);

277 
sockfd
 = -1;

281 
	`‰ìaddröfo
(
ªs
);

282 
	`‰ì
(
£rvi˚
);

284 i‡(
sockfd
 < 0) {

285 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

286  
NULL
;

289 
	`li°í
(
sockfd
, 1);

290 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

291 
	`˛o£
(
sockfd
);

292 i‡(
c⁄nfd
 < 0) {

293 
	`Ârötf
(
°dîr
, "accept() failed\n");

294  
NULL
;

297 
ªm_de°
 = 
	`mÆloc
(
˘x
->
num_qp
 *  *rem_dest);

298 i‡(!
ªm_de°
)

299 
out
;

301 
i
 = 0; i < 
˘x
->
num_qp
; ++i) {

302 
n
 = 0;

303 
n
 <  
msg
) {

304 
r
 = 
	`ªad
(
c⁄nfd
, 
msg
 + 
n
,  msg -Ç);

305 i‡(
r
 < 0) {

306 
	`≥º‹
("serverÑead");

307 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'tÑeadÑemoteáddress [%d]\n",

308 
n
, (Ë 
msg
, 
i
);

309 
out
;

311 
n
 +
r
;

314 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
[
i
].
lid
, &ªm_de°[i].
q≤
,

315 &
ªm_de°
[
i
].
p¢
, 
gid
);

316 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
[
i
].gid);

319 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
mtu
, 
¶
, 
my_de°
, 
ªm_de°
,

320 
sgid_idx
)) {

321 
	`Ârötf
(
°dîr
, "Couldn't connectÅoÑemote QP\n");

322 
	`‰ì
(
ªm_de°
);

323 
ªm_de°
 = 
NULL
;

324 
out
;

327 
i
 = 0; i < 
˘x
->
num_qp
; ++i) {

328 
	`gid_to_wúe_gid
(&
my_de°
[
i
].
gid
, gid);

329 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
[
i
].
lid
,

330 
my_de°
[
i
].
q≤
, my_de°[i].
p¢
, 
gid
);

331 i‡(
	`wrôe
(
c⁄nfd
, 
msg
,  msg) !=  msg) {

332 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

333 
	`‰ì
(
ªm_de°
);

334 
ªm_de°
 = 
NULL
;

335 
out
;

340 i‡(
	`ªad
(
c⁄nfd
, 
msg
, (msg)) <= 0) {

341 
	`Ârötf
(
°dîr
, "Couldn'tÑead \"done\" msg\n");

342 
	`‰ì
(
ªm_de°
);

343 
ªm_de°
 = 
NULL
;

344 
out
;

347 
out
:

348 
	`˛o£
(
c⁄nfd
);

349  
ªm_de°
;

350 
	}
}

352 
pögp⁄g_c⁄ãxt
 *
	$µ_öô_˘x
(
ibv_devi˚
 *
ib_dev
, 
size
,

353 
num_qp
, 
rx_dïth
, 
p‹t
,

354 
u£_evít
)

356 
pögp⁄g_c⁄ãxt
 *
˘x
;

357 
i
;

359 
˘x
 = 
	`ˇŒoc
(1,  *ctx);

360 i‡(!
˘x
)

361  
NULL
;

363 
˘x
->
size
 = size;

364 
˘x
->
num_qp
 =Çum_qp;

365 
˘x
->
rx_dïth
 =Ñx_depth;

367 
˘x
->
buf
 = 
	`memÆign
(
∑ge_size
, 
size
);

368 i‡(!
˘x
->
buf
) {

369 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

370 
˛ón_˘x
;

373 
	`mem£t
(
˘x
->
buf
, 0, 
size
);

375 
˘x
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
ib_dev
);

376 i‡(!
˘x
->
c⁄ãxt
) {

377 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

378 
	`ibv_gë_devi˚_«me
(
ib_dev
));

379 
˛ón_buf„r
;

382 i‡(
u£_evít
) {

383 
˘x
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
(˘x->
c⁄ãxt
);

384 i‡(!
˘x
->
ch™√l
) {

385 
	`Ârötf
(
°dîr
, "Couldn't create completion channel\n");

386 
˛ón_devi˚
;

389 
˘x
->
ch™√l
 = 
NULL
;

391 
˘x
->
pd
 = 
	`ibv_Æloc_pd
(˘x->
c⁄ãxt
);

392 i‡(!
˘x
->
pd
) {

393 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

394 
˛ón_comp_ch™√l
;

397 
˘x
->
mr
 = 
	`ibv_ªg_mr
(˘x->
pd
, ctx->
buf
, 
size
, 
IBV_ACCESS_LOCAL_WRITE
);

398 i‡(!
˘x
->
mr
) {

399 
	`Ârötf
(
°dîr
, "Couldn'tÑegister MR\n");

400 
˛ón_pd
;

403 
˘x
->
cq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 
rx_dïth
 + 
num_qp
, 
NULL
,

404 
˘x
->
ch™√l
, 0);

405 i‡(!
˘x
->
cq
) {

406 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

407 
˛ón_mr
;

411 
ibv_§q_öô_©å
 
©å
 = {

412 .
©å
 = {

413 .
max_wr
 = 
rx_dïth
,

414 .
max_sge
 = 1

418 
˘x
->
§q
 = 
	`ibv_¸óã_§q
(˘x->
pd
, &
©å
);

419 i‡(!
˘x
->
§q
) {

420 
	`Ârötf
(
°dîr
, "Couldn't create SRQ\n");

421 
˛ón_cq
;

425 
˘x
->
qp
 = 
	`ˇŒoc
(
num_qp
, (
ibv_qp
 *));

426 i‡(!
˘x
->
qp
)

427 
˛ón_§q
;

429 
i
 = 0; i < 
num_qp
; ++i) {

430 
ibv_qp_öô_©å
 
©å
 = {

431 .
£nd_cq
 = 
˘x
->
cq
,

432 .
ªcv_cq
 = 
˘x
->
cq
,

433 .
§q
 = 
˘x
->srq,

434 .
ˇp
 = {

435 .
max_£nd_wr
 = 1,

436 .
max_£nd_sge
 = 1,

438 .
qp_ty≥
 = 
IBV_QPT_RC


441 
˘x
->
qp
[
i
] = 
	`ibv_¸óã_qp
(˘x->
pd
, &
©å
);

442 i‡(!
˘x
->
qp
[
i
]) {

443 
	`Ârötf
(
°dîr
, "Couldn'à¸óã QP[%d]\n", 
i
);

444 
˛ón_qps
;

448 
i
 = 0; i < 
num_qp
; ++i) {

449 
ibv_qp_©å
 
©å
 = {

450 .
qp_°©e
 = 
IBV_QPS_INIT
,

451 .
pkey_ödex
 = 0,

452 .
p‹t_num
 = 
p‹t
,

453 .
qp_ac˚ss_Êags
 = 0

456 i‡(
	`ibv_modify_qp
(
˘x
->
qp
[
i
], &
©å
,

457 
IBV_QP_STATE
 |

458 
IBV_QP_PKEY_INDEX
 |

459 
IBV_QP_PORT
 |

460 
IBV_QP_ACCESS_FLAGS
)) {

461 
	`Ârötf
(
°dîr
, "FaûedÅÿmodify QP[%d]ÅÿINIT\n", 
i
);

462 
˛ón_qps_fuŒ
;

466  
˘x
;

468 
˛ón_qps_fuŒ
:

469 
i
 = 
num_qp
;

471 
˛ón_qps
:

472 --
i
; i >= 0; --i)

473 
	`ibv_de°roy_qp
(
˘x
->
qp
[
i
]);

474 
	`‰ì
(
˘x
->
qp
);

476 
˛ón_§q
:

477 
	`ibv_de°roy_§q
(
˘x
->
§q
);

479 
˛ón_cq
:

480 
	`ibv_de°roy_cq
(
˘x
->
cq
);

482 
˛ón_mr
:

483 
	`ibv_dîeg_mr
(
˘x
->
mr
);

485 
˛ón_pd
:

486 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

488 
˛ón_comp_ch™√l
:

489 i‡(
˘x
->
ch™√l
)

490 
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
);

492 
˛ón_devi˚
:

493 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

495 
˛ón_buf„r
:

496 
	`‰ì
(
˘x
->
buf
);

498 
˛ón_˘x
:

499 
	`‰ì
(
˘x
);

501  
NULL
;

502 
	}
}

504 
	$µ_˛o£_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
num_qp
)

506 
i
;

508 
i
 = 0; i < 
num_qp
; ++i) {

509 i‡(
	`ibv_de°roy_qp
(
˘x
->
qp
[
i
])) {

510 
	`Ârötf
(
°dîr
, "Couldn'àde°roy QP[%d]\n", 
i
);

514 
	`‰ì
(
˘x
->
qp
);

516 i‡(
	`ibv_de°roy_§q
(
˘x
->
§q
)) {

517 
	`Ârötf
(
°dîr
, "Couldn't destroy SRQ\n");

521 i‡(
	`ibv_de°roy_cq
(
˘x
->
cq
)) {

522 
	`Ârötf
(
°dîr
, "Couldn't destroy CQ\n");

526 i‡(
	`ibv_dîeg_mr
(
˘x
->
mr
)) {

527 
	`Ârötf
(
°dîr
, "Couldn't deregister MR\n");

531 i‡(
	`ibv_dóŒoc_pd
(
˘x
->
pd
)) {

532 
	`Ârötf
(
°dîr
, "Couldn't deallocate PD\n");

536 i‡(
˘x
->
ch™√l
) {

537 i‡(
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
)) {

538 
	`Ârötf
(
°dîr
, "Couldn't destroy completion channel\n");

543 i‡(
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
)) {

544 
	`Ârötf
(
°dîr
, "Couldn'tÑelease context\n");

548 
	`‰ì
(
˘x
->
buf
);

549 
	`‰ì
(
˘x
);

552 
	}
}

554 
	$µ_po°_ªcv
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
n
)

556 
ibv_sge
 
li°
 = {

557 .
addr
 = (
uöçå_t
Ë
˘x
->
buf
,

558 .
Àngth
 = 
˘x
->
size
,

559 .
lkey
 = 
˘x
->
mr
->lkey

561 
ibv_ªcv_wr
 
wr
 = {

562 .
wr_id
 = 
PINGPONG_RECV_WRID
,

563 .
sg_li°
 = &
li°
,

564 .
num_sge
 = 1,

566 
ibv_ªcv_wr
 *
bad_wr
;

567 
i
;

569 
i
 = 0; i < 
n
; ++i)

570 i‡(
	`ibv_po°_§q_ªcv
(
˘x
->
§q
, &
wr
, &
bad_wr
))

573  
i
;

574 
	}
}

576 
	$µ_po°_£nd
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
qp_ödex
)

578 
ibv_sge
 
li°
 = {

579 .
addr
 = (
uöçå_t
Ë
˘x
->
buf
,

580 .
Àngth
 = 
˘x
->
size
,

581 .
lkey
 = 
˘x
->
mr
->lkey

583 
ibv_£nd_wr
 
wr
 = {

584 .
wr_id
 = 
PINGPONG_SEND_WRID
,

585 .
sg_li°
 = &
li°
,

586 .
num_sge
 = 1,

587 .
›code
 = 
IBV_WR_SEND
,

588 .
£nd_Êags
 = 
IBV_SEND_SIGNALED
,

590 
ibv_£nd_wr
 *
bad_wr
;

592  
	`ibv_po°_£nd
(
˘x
->
qp
[
qp_ödex
], &
wr
, &
bad_wr
);

593 
	}
}

595 
	$föd_qp
(
q≤
, 
pögp⁄g_c⁄ãxt
 *
˘x
, 
num_qp
)

597 
i
;

599 
i
 = 0; i < 
num_qp
; ++i)

600 i‡(
˘x
->
qp
[
i
]->
qp_num
 =
q≤
)

601  
i
;

604 
	}
}

606 
	$ußge
(c⁄° *
¨gv0
)

608 
	`¥ötf
("Usage:\n");

609 
	`¥ötf
(" %† sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

610 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

611 
	`¥ötf
("\n");

612 
	`¥ötf
("Options:\n");

613 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

614 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

615 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

616 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 4096)\n");

617 
	`¥ötf
(" -m, --mtu=<size>Öath MTU (default 1024)\n");

618 
	`¥ötf
(" -q, --num-qp=<num>Çumber of QPsÅo use (default 16)\n");

619 
	`¥ötf
(" -r, --rx-depth=<dep>Çumber ofÑeceivesÅoÖostátáÅime (default 500)\n");

620 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchangesÖer QP(default 1000)\n");

621 
	`¥ötf
(" -l, --sl=<sl> serviceÜevel value\n");

622 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

623 
	`¥ötf
(" -g, --gid-idx=<gid index>ÜocalÖort gid index\n");

624 
	}
}

626 
	$maö
(
¨gc
, *
¨gv
[])

628 
ibv_devi˚
 **
dev_li°
;

629 
ibv_devi˚
 *
ib_dev
;

630 
ibv_wc
 *
wc
;

631 
pögp⁄g_c⁄ãxt
 *
˘x
;

632 
pögp⁄g_de°
 *
my_de°
;

633 
pögp⁄g_de°
 *
ªm_de°
;

634 
timevÆ
 
°¨t
, 
íd
;

635 *
ib_dev«me
 = 
NULL
;

636 *
£rvî«me
 = 
NULL
;

637 
p‹t
 = 18515;

638 
ib_p‹t
 = 1;

639 
size
 = 4096;

640 
ibv_mtu
 
mtu
 = 
IBV_MTU_1024
;

641 
num_qp
 = 16;

642 
rx_dïth
 = 500;

643 
ôîs
 = 1000;

644 
u£_evít
 = 0;

645 
routs
;

646 
r˙t
, 
s˙t
;

647 
num_wc
;

648 
i
;

649 
num_cq_evíts
 = 0;

650 
¶
 = 0;

651 
gidx
 = -1;

652 
gid
[33];

653 
ªt
 = 0;

655 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

658 
c
;

660 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

661 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

662 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

663 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

664 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

665 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

666 { .
«me
 = "num-qp", .
has_¨g
 = 1, .
vÆ
 = 'q' },

667 { .
«me
 = "rx-dïth", .
has_¨g
 = 1, .
vÆ
 = 'r' },

668 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

669 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

670 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

671 { .
«me
 = "gid-idx", .
has_¨g
 = 1, .
vÆ
 = 'g' },

675 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:m:q:r:n:l:eg:",

676 
l⁄g_›ti⁄s
, 
NULL
);

677 i‡(
c
 == -1)

680 
c
) {

682 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

683 i‡(
p‹t
 < 0 ||Öort > 65535) {

684 
	`ußge
(
¨gv
[0]);

690 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

694 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

695 i‡(
ib_p‹t
 < 0) {

696 
	`ußge
(
¨gv
[0]);

702 
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

706 
mtu
 = 
	`µ_mtu_to_íum
(
	`°πﬁ
(
›èrg
, 
NULL
, 0));

707 i‡(
mtu
 < 0) {

708 
	`ußge
(
¨gv
[0]);

714 
num_qp
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

718 
rx_dïth
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

722 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

726 
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

730 ++
u£_evít
;

734 
gidx
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

738 
	`ußge
(
¨gv
[0]);

743 i‡(
›töd
 =
¨gc
 - 1)

744 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

745 i‡(
›töd
 < 
¨gc
) {

746 
	`ußge
(
¨gv
[0]);

750 i‡(
num_qp
 > 
rx_dïth
) {

751 
	`Ârötf
(
°dîr
, "rx_depth %d isÅoo small for %d QPs -- "

753 
rx_dïth
, 
num_qp
);

757 
num_wc
 = 
num_qp
 + 
rx_dïth
;

758 
wc
 = 
	`Æloˇ
(
num_wc
 *  *wc);

760 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

762 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

763 i‡(!
dev_li°
) {

764 
	`≥º‹
("FailedÅo get IB devicesÜist");

768 i‡(!
ib_dev«me
) {

769 
ib_dev
 = *
dev_li°
;

770 i‡(!
ib_dev
) {

771 
	`Ârötf
(
°dîr
, "No IB devices found\n");

772 
ªt
 = 1;

773 
out_dev_li°
;

776 
i
;

777 
i
 = 0; 
dev_li°
[i]; ++i)

778 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

780 
ib_dev
 = 
dev_li°
[
i
];

781 i‡(!
ib_dev
) {

782 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

783 
ªt
 = 1;

784 
out_dev_li°
;

788 
˘x
 = 
	`µ_öô_˘x
(
ib_dev
, 
size
, 
num_qp
, 
rx_dïth
, 
ib_p‹t
, 
u£_evít
);

789 i‡(!
˘x
) {

790 
ªt
 = 1;

791 
out_dev_li°
;

794 
routs
 = 
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
);

795 i‡(
routs
 < 
˘x
->
rx_dïth
) {

796 
	`Ârötf
(
°dîr
, "Couldn'àpo°Ñe˚ivê(%d)\n", 
routs
);

797 
ªt
 = 1;

798 
out_˘x
;

801 i‡(
u£_evít
)

802 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

803 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

804 
ªt
 = 1;

805 
out_˘x
;

808 
my_de°
 = 
	`ˇŒoc
(
˘x
->
num_qp
, (
pögp⁄g_de°
));

809 i‡(!
my_de°
) {

810 
ªt
 = 1;

811 
out_˘x
;

814 i‡(
	`µ_gë_p‹t_öfo
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, &˘x->
p‹töfo
)) {

815 
	`Ârötf
(
°dîr
, "Couldn't getÖort info\n");

816 
ªt
 = 1;

817 
out_my_de°
;

819 
i
 = 0; i < 
num_qp
; ++i) {

820 
my_de°
[
i
].
q≤
 = 
˘x
->
qp
[i]->
qp_num
;

821 
my_de°
[
i
].
p¢
 = 
	`Ã™d48
() & 0xffffff;

822 
my_de°
[
i
].
lid
 = 
˘x
->
p‹töfo
.lid;

823 i‡(
˘x
->
p‹töfo
.
lök_œyî
 !
IBV_LINK_LAYER_ETHERNET


824 && !
my_de°
[
i
].
lid
) {

825 
	`Ârötf
(
°dîr
, "Couldn't getÜocal LID\n");

826 
ªt
 = 1;

827 
out_my_de°
;

830 i‡(
gidx
 >= 0) {

831 i‡(
	`ibv_quîy_gid
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, 
gidx
,

832 &
my_de°
[
i
].
gid
)) {

833 
	`Ârötf
(
°dîr
, "CouldÇot getÜocal gid for "

834 "gid index %d\n", 
gidx
);

835 
ªt
 = 1;

836 
out_my_de°
;

839 
	`mem£t
(&
my_de°
[
i
].
gid
, 0,  my_dest[i].gid);

841 
	`öë_¡›
(
AF_INET6
, &
my_de°
[
i
].
gid
, gid,  gid);

842 
	`¥ötf
("Üocaláddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, "

843 "GID %s\n", 
my_de°
[
i
].
lid
, my_de°[i].
q≤
,

844 
my_de°
[
i
].
p¢
, 
gid
);

847 i‡(
£rvî«me
)

848 
ªm_de°
 = 
	`µ_˛õ¡_exch_de°
(
£rvî«me
, 
p‹t
, 
my_de°
, 
num_qp
);

850 
ªm_de°
 = 
	`µ_£rvî_exch_de°
(
˘x
, 
ib_p‹t
, 
mtu
, 
p‹t
, 
¶
,

851 
my_de°
, 
gidx
);

853 i‡(!
ªm_de°
) {

854 
ªt
 = 1;

855 
out_my_de°
;

858 
	`öë_¡›
(
AF_INET6
, &
ªm_de°
->
gid
, gid,  gid);

860 
i
 = 0; i < 
num_qp
; ++i) {

861 
	`öë_¡›
(
AF_INET6
, &
ªm_de°
[
i
].
gid
, gid,  gid);

862 
	`¥ötf
("Ñemoteáddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, "

863 "GID %s\n", 
ªm_de°
[
i
].
lid
,Ñem_de°[i].
q≤
,

864 
ªm_de°
[
i
].
p¢
, 
gid
);

867 i‡(
£rvî«me
)

868 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
mtu
, 
¶
, 
my_de°
, 
ªm_de°
,

869 
gidx
)) {

870 
ªt
 = 1;

871 
out_ªm_de°
;

874 
˘x
->
≥ndög
 = 
	`ˇŒoc
(˘x->
num_qp
, ());

875 i‡(!
˘x
->
≥ndög
) {

876 
ªt
 = 1;

877 
out_ªm_de°
;

880 i‡(
£rvî«me
)

881 
i
 = 0; i < 
num_qp
; ++i) {

882 i‡(
	`µ_po°_£nd
(
˘x
, 
i
)) {

883 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

884 
ªt
 = 1;

885 
out_≥ndög
;

887 
˘x
->
≥ndög
[
i
] = 
PINGPONG_SEND_WRID
 | 
PINGPONG_RECV_WRID
;

890 
i
 = 0; i < 
num_qp
; ++i)

891 
˘x
->
≥ndög
[
i
] = 
PINGPONG_RECV_WRID
;

893 i‡(
	`gëtimeofday
(&
°¨t
, 
NULL
)) {

894 
	`≥º‹
("gettimeofday");

895 
ªt
 = 1;

896 
out_≥ndög
;

899 
r˙t
 = 
s˙t
 = 0;

900 
r˙t
 < 
ôîs
 || 
s˙t
 < iters) {

901 i‡(
u£_evít
) {

902 
ibv_cq
 *
ev_cq
;

903 *
ev_˘x
;

905 i‡(
	`ibv_gë_cq_evít
(
˘x
->
ch™√l
, &
ev_cq
, &
ev_˘x
)) {

906 
	`Ârötf
(
°dîr
, "FailedÅo get cq_event\n");

907 
ªt
 = 1;

908 
out_≥ndög
;

911 ++
num_cq_evíts
;

913 i‡(
ev_cq
 !
˘x
->
cq
) {

914 
	`Ârötf
(
°dîr
, "CQÉvíàf‹ unknow¿CQ %p\n", 
ev_cq
);

915 
ªt
 = 1;

916 
out_≥ndög
;

919 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

920 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

921 
ªt
 = 1;

922 
out_≥ndög
;

927 
√
, 
qp_öd
;

930 
√
 = 
	`ibv_pﬁl_cq
(
˘x
->
cq
, 
num_wc
, 
wc
);

931 i‡(
√
 < 0) {

932 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

933 
ªt
 = 1;

934 
out_≥ndög
;

936 } !
u£_evít
 && 
√
 < 1);

938 
i
 = 0; i < 
√
; ++i) {

939 i‡(
wc
[
i
].
°©us
 !
IBV_WC_SUCCESS
) {

940 
	`Ârötf
(
°dîr
, "Failed status %s (%d) for wr_id %d\n",

941 
	`ibv_wc_°©us_°r
(
wc
[
i
].
°©us
),

942 
wc
[
i
].
°©us
, (Ëwc[i].
wr_id
);

943 
ªt
 = 1;

944 
out_≥ndög
;

947 
qp_öd
 = 
	`föd_qp
(
wc
[
i
].
qp_num
, 
˘x
, 
num_qp
);

948 i‡(
qp_öd
 < 0) {

949 
	`Ârötf
(
°dîr
, "Couldn't find QPN %06x\n",

950 
wc
[
i
].
qp_num
);

951 
ªt
 = 1;

952 
out_≥ndög
;

955 (Ë
wc
[
i
].
wr_id
) {

956 
PINGPONG_SEND_WRID
:

957 ++
s˙t
;

960 
PINGPONG_RECV_WRID
:

961 i‡(--
routs
 <
num_qp
) {

962 
routs
 +
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
 -Ñouts);

963 i‡(
routs
 < 
˘x
->
rx_dïth
) {

964 
	`Ârötf
(
°dîr
,

966 
routs
);

967 
ªt
 = 1;

968 
out_≥ndög
;

972 ++
r˙t
;

976 
	`Ârötf
(
°dîr
, "Completion for unknown wr_id %d\n",

977 (Ë
wc
[
i
].
wr_id
);

978 
ªt
 = 1;

979 
out_≥ndög
;

982 
˘x
->
≥ndög
[
qp_öd
] &~(Ë
wc
[
i
].
wr_id
;

983 i‡(
s˙t
 < 
ôîs
 && !
˘x
->
≥ndög
[
qp_öd
]) {

984 i‡(
	`µ_po°_£nd
(
˘x
, 
qp_öd
)) {

985 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

986 
ªt
 = 1;

987 
out_≥ndög
;

989 
˘x
->
≥ndög
[
qp_öd
] = 
PINGPONG_RECV_WRID
 |

990 
PINGPONG_SEND_WRID
;

997 i‡(
	`gëtimeofday
(&
íd
, 
NULL
)) {

998 
	`≥º‹
("gettimeofday");

999 
ªt
 = 1;

1000 
out_≥ndög
;

1004 
u£c
 = (
íd
.
tv_£c
 - 
°¨t
.tv_sec) * 1000000 +

1005 (
íd
.
tv_u£c
 - 
°¨t
.tv_usec);

1006 
byãs
 = (Ë
size
 * 
ôîs
 * 2;

1008 
	`¥ötf
("%lld bytes in %.2f seconds = %.2f Mbit/sec\n",

1009 
byãs
, 
u£c
 / 1000000., bytes * 8. / usec);

1010 
	`¥ötf
("%d iters in %.2f seconds = %.2f usec/iter\n",

1011 
ôîs
, 
u£c
 / 1000000., usec / iters);

1014 
	`ibv_ack_cq_evíts
(
˘x
->
cq
, 
num_cq_evíts
);

1016 
out_≥ndög
:

1017 
	`‰ì
(
˘x
->
≥ndög
);

1018 
out_ªm_de°
:

1019 
	`‰ì
(
ªm_de°
);

1020 
out_my_de°
:

1021 
	`‰ì
(
my_de°
);

1022 
out_˘x
:

1023 i‡(
	`µ_˛o£_˘x
(
˘x
, 
num_qp
))

1024 
ªt
 = 1;

1025 
out_dev_li°
:

1026 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

1027  
ªt
;

1028 
	}
}

	@libibverbs-41mlnx1/examples/task_pingpong.c

6 #i‡
HAVE_CONFIG_H


7 
	~<c⁄fig.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<sys/sockë.h
>

16 
	~<sys/time.h
>

17 
	~<√tdb.h
>

18 
	~<mÆloc.h
>

19 
	~<gë›t.h
>

20 
	~<¨∑/öë.h
>

21 
	~<time.h
>

23 
	~"cc_pögp⁄g.h
"

27 
	mPP_RECV_WRID
 = 1,

28 
	mPP_SEND_WRID
 = 2,

29 
	mPP_CQE_WAIT
 = 3,

32 *
	gwr_id_°r
[] = {

33 [
PP_RECV_WRID
] = "RECV",

34 [
PP_SEND_WRID
] = "SEND",

35 [
PP_CQE_WAIT
] = "CQE_WAIT",

38 
	g∑ge_size
;

40 
	spögp⁄g_ˇlc_˘x
 {

41 
ibv_exp_ˇlc_›
 
	m›code
;

42 
ibv_exp_ˇlc_d©a_ty≥
 
	md©a_ty≥
;

43 
ibv_exp_ˇlc_d©a_size
 
	md©a_size
;

44 *
	mg©hî_buff
;

45 
	mg©hî_li°_size
;

46 
ibv_sge
 *
	mg©hî_li°
;

49 
	spögp⁄g_c⁄ãxt
 {

50 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

51 
ibv_pd
 *
	mpd
;

52 
ibv_mr
 *
	mmr
;

53 
ibv_cq
 *
	mscq
;

54 
ibv_cq
 *
	mrcq
;

55 
ibv_qp
 *
	mqp
;

57 
ibv_qp
 *
	mmqp
;

58 
ibv_cq
 *
	mmcq
;

60 *
	mbuf
;

61 
	msize
;

62 
	mrx_dïth
;

63 
	m≥ndög
;

65 
	ms˙t
;

66 
	mr˙t
;

68 
pögp⁄g_ˇlc_˘x
 
	mˇlc_›
;

71 
	spögp⁄g_de°
 {

72 
	mlid
;

73 
	mq≤
;

74 
	mp¢
;

78 
	$µ_c⁄√˘_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
,

79 
ibv_qp
 *
qp
,

80 
p‹t
,

81 
my_p¢
,

82 
ibv_mtu
 
mtu
,

83 
¶
,

84 
pögp⁄g_de°
 *
de°
)

86 
ibv_qp_©å
 
©å
 = {

87 .
qp_°©e
 = 
IBV_QPS_RTR
,

88 .
∑th_mtu
 = 
mtu
,

89 .
de°_qp_num
 = 
de°
->
q≤
,

90 .
rq_p¢
 = 
de°
->
p¢
,

91 .
max_de°_rd_©omic
 = 1,

92 .
mö_∫r_timî
 = 12,

93 .
ah_©å
 = {

94 .
is_globÆ
 = 0,

95 .
dlid
 = 
de°
->
lid
,

96 .
¶
 = sl,

97 .
§c_∑th_bôs
 = 0,

98 .
p‹t_num
 = 
p‹t


102 i‡(
	`ibv_modify_qp
(
qp
, &
©å
,

103 
IBV_QP_STATE
 |

104 
IBV_QP_AV
 |

105 
IBV_QP_PATH_MTU
 |

106 
IBV_QP_DEST_QPN
 |

107 
IBV_QP_RQ_PSN
 |

108 
IBV_QP_MAX_DEST_RD_ATOMIC
 |

109 
IBV_QP_MIN_RNR_TIMER
)) {

110 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

114 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

115 
©å
.
timeout
 = 14;

116 
©å
.
ªåy_˙t
 = 7;

117 
©å
.
∫r_ªåy
 = 7;

118 
©å
.
sq_p¢
 = 
my_p¢
;

119 
©å
.
max_rd_©omic
 = 1;

120 i‡(
	`ibv_modify_qp
(
qp
, &
©å
,

121 
IBV_QP_STATE
 |

122 
IBV_QP_TIMEOUT
 |

123 
IBV_QP_RETRY_CNT
 |

124 
IBV_QP_RNR_RETRY
 |

125 
IBV_QP_SQ_PSN
 |

126 
IBV_QP_MAX_QP_RD_ATOMIC
)) {

127 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

132 
	}
}

134 
pögp⁄g_de°
 *
	$µ_˛õ¡_exch_de°
(c⁄° *
£rvî«me
,

135 
p‹t
,

136 c⁄° 
pögp⁄g_de°
 *
my_de°
)

138 
addröfo
 *
ªs
, *
t
;

139 
addröfo
 
höts
 = {

140 .
ai_Ámûy
 = 
AF_UNSPEC
,

141 .
ai_sockty≥
 = 
SOCK_STREAM


143 *
£rvi˚
;

144 
msg
[ "0000:000000:000000"];

145 
n
;

146 
sockfd
 = -1;

147 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

149 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

150  
NULL
;

152 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

153 i‡(
n
 < 0) {

154 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

155 
	`‰ì
(
£rvi˚
);

156  
NULL
;

159 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

160 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

161 i‡(
sockfd
 >= 0) {

162 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

164 
	`˛o£
(
sockfd
);

165 
sockfd
 = -1;

169 
	`‰ìaddröfo
(
ªs
);

170 
	`‰ì
(
£rvi˚
);

172 i‡(
sockfd
 < 0) {

173 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

174  
NULL
;

177 
	`•rötf
(
msg
, "%04x:%06x:%06x", 
my_de°
->
lid
, my_de°->
q≤
, my_de°->
p¢
);

178 i‡(
	`wrôe
(
sockfd
, 
msg
,  msg) !=  msg) {

179 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

180 
out
;

183 i‡(
	`ªad
(
sockfd
, 
msg
,  msg) !=  msg) {

184 
	`≥º‹
("clientÑead");

185 
	`Ârötf
(
°dîr
, "Couldn'tÑeadÑemoteáddress\n");

186 
out
;

189 i‡(
	`wrôe
(
sockfd
, "done",  "done") != ("done")) {

190 
	`Ârötf
(
°dîr
, "Couldn't send \"done\" msg\n");

191 
out
;

194 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

195 i‡(!
ªm_de°
)

196 
out
;

198 
	`ssˇnf
(
msg
, "%x:%x:%x", &
ªm_de°
->
lid
, &ªm_de°->
q≤
, &ªm_de°->
p¢
);

200 
out
:

201 
	`˛o£
(
sockfd
);

202  
ªm_de°
;

203 
	}
}

205 
pögp⁄g_de°
 *
	$µ_£rvî_exch_de°
(
pögp⁄g_c⁄ãxt
 *
˘x
,

206 
ib_p‹t
,

207 
ibv_mtu
 
mtu
,

208 
p‹t
,

209 
¶
,

210 c⁄° 
pögp⁄g_de°
 *
my_de°
)

212 
addröfo
 *
ªs
, *
t
;

213 
addröfo
 
höts
 = {

214 .
ai_Êags
 = 
AI_PASSIVE
,

215 .
ai_Ámûy
 = 
AF_UNSPEC
,

216 .
ai_sockty≥
 = 
SOCK_STREAM


218 *
£rvi˚
;

219 
msg
[ "0000:000000:000000"];

220 
n
;

221 
sockfd
 = -1, 
c⁄nfd
;

222 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

224 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

225  
NULL
;

227 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

229 i‡(
n
 < 0) {

230 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
p‹t
);

231 
	`‰ì
(
£rvi˚
);

232  
NULL
;

235 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

236 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

237 i‡(
sockfd
 >= 0) {

238 
n
 = 1;

240 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, Ç);

242 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

245 
	`˛o£
(
sockfd
);

246 
sockfd
 = -1;

250 
	`‰ìaddröfo
(
ªs
);

251 
	`‰ì
(
£rvi˚
);

253 i‡(
sockfd
 < 0) {

254 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

255  
NULL
;

258 
	`li°í
(
sockfd
, 1);

259 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

260 
	`˛o£
(
sockfd
);

262 i‡(
c⁄nfd
 < 0) {

263 
	`Ârötf
(
°dîr
, "accept() failed\n");

264  
NULL
;

267 
n
 = 
	`ªad
(
c⁄nfd
, 
msg
,  msg);

268 i‡(
n
 ! 
msg
) {

269 
	`≥º‹
("serverÑead");

270 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'tÑeadÑemoteáddress\n",

271 
n
, (Ë 
msg
);

272 
out
;

275 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

276 i‡(!
ªm_de°
)

277 
out
;

279 
	`ssˇnf
(
msg
, "%x:%x:%x", &
ªm_de°
->
lid
, &ªm_de°->
q≤
, &ªm_de°->
p¢
);

281 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, ctx->
qp
, 
ib_p‹t
, 
my_de°
->
p¢
, 
mtu
,

282 
¶
, 
ªm_de°
)) {

283 
	`Ârötf
(
°dîr
, "Couldn't connectÅoÑemote QP\n");

284 
	`‰ì
(
ªm_de°
);

285 
ªm_de°
 = 
NULL
;

286 
out
;

289 
	`•rötf
(
msg
, "%04x:%06x:%06x", 
my_de°
->
lid
, my_de°->
q≤
,

290 
my_de°
->
p¢
);

291 i‡(
	`wrôe
(
c⁄nfd
, 
msg
,  msg) !=  msg) {

292 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

293 
	`‰ì
(
ªm_de°
);

294 
ªm_de°
 = 
NULL
;

295 
out
;

299 i‡(
	`ªad
(
c⁄nfd
, 
msg
, (msg)) <= 0) {

300 
	`Ârötf
(
°dîr
, "Couldn'tÑead \"done\" msg\n");

301 
	`‰ì
(
ªm_de°
);

302 
ªm_de°
 = 
NULL
;

303 
out
;

306 
out
:

307 
	`˛o£
(
c⁄nfd
);

308  
ªm_de°
;

309 
	}
}

313 
	$__∑r£_ˇlc_to_g©hî
(*
›s_°r
,

314 
µ_wr_ˇlc_›
 
ˇlc_›
,

315 
µ_wr_d©a_ty≥
 
d©a_ty≥
,

316 
›_≥r_g©hî
,

317 
max_num_›î™ds
, 
uöt32_t
 
lkey
,

318 
pögp⁄g_ˇlc_˘x
 *
ˇlc_˘x
, *
buff
)

321 
i
, 
g©hî_ix
, 
num_›î™ds
;

322 
sz
;

323 *
__g©hî_tokí
, *
__îr_±r
 = 
NULL
;

324 
ibv_sge
 *
g©hî_li°
 = 
NULL
;

326 i‡(!
›s_°r
) {

327 
	`Ârötf
(
°dîr
, "You must chooseán operationÅoÖerform.\n");

331 
sz
 = 
	`µ_d©a_ty≥_to_size
(
d©a_ty≥
);

333 
i
 = 0, 
num_›î™ds
 = 1; i < 
	`°æí
(
›s_°r
); i++) {

334 i‡(
›s_°r
[
i
] == ',')

335 
num_›î™ds
++;

338 
ˇlc_˘x
->
g©hî_li°_size
 = 
num_›î™ds
;

340 
__g©hî_tokí
 = 
	`°πok
(
›s_°r
, ",");

341 i‡(!
__g©hî_tokí
)

344 
g©hî_li°
 = 
	`ˇŒoc
(
num_›î™ds
/
›_≥r_g©hî
 + (num_operands%op_per_gather ? 1 : 0),

345  *
g©hî_li°
);

346 i‡(!
g©hî_li°
)

349 
i
 = 0, 
g©hî_ix
 = 0; i < 
num_›î™ds
; i++) {

350 i‡(!(
i
 % 
›_≥r_g©hî
)) {

351 
g©hî_li°
[
g©hî_ix
].
addr
 = (
uöt64_t
)(
uöçå_t
)
buff


352 + (
sz
+8)*
i
;

353 
g©hî_li°
[
g©hî_ix
].
Àngth
 = (
sz
+8)*
›_≥r_g©hî
;

354 
g©hî_li°
[
g©hî_ix
].
lkey
 =Ükey;

356 
g©hî_ix
++;

359 
d©a_ty≥
) {

360 
PP_DATA_TYPE_INT8
:

361 
__g©hî_out
;

363 
PP_DATA_TYPE_INT16
:

364 
__g©hî_out
;

366 
PP_DATA_TYPE_INT32
:

367 
__g©hî_out
;

370 
PP_DATA_TYPE_INT64
:

371 *((
öt64_t
 *)
buff
 + 
i
*2Ë
	`°πﬁl
(
__g©hî_tokí
,

372 &
__îr_±r
, 0);

375 
PP_DATA_TYPE_FLOAT32
:

376 
__g©hî_out
;

378 
PP_DATA_TYPE_FLOAT64
:

379 
__g©hî_out
;

383 
__g©hî_out
;

386 
__g©hî_tokí
 = 
	`°πok
(
NULL
, ",");

387 i‡(!
__g©hî_tokí
)

392 
ˇlc_˘x
->
g©hî_buff
 = 
buff
;

393 
ˇlc_˘x
->
g©hî_li°
 = gather_list;

395  
num_›î™ds
;

397 
__g©hî_out
:

398 i‡(
g©hî_li°
)

399 
	`‰ì
(
g©hî_li°
);

402 
	}
}

405 
pögp⁄g_c⁄ãxt
 *
	$µ_öô_˘x
(
ibv_devi˚
 *
ib_dev
,

406 
size
, 
rx_dïth
,

407 
p‹t
,

408 
µ_wr_ˇlc_›
 
ˇlc_›
,

409 
µ_wr_d©a_ty≥
 
ˇlc_d©a_ty≥
,

410 *
ˇlc_›î™ds_°r
)

412 
pögp⁄g_c⁄ãxt
 *
˘x
;

413 
rc
;

415 
˘x
 = 
	`mÆloc
( *ctx);

416 i‡(!
˘x
)

417  
NULL
;

418 
	`mem£t
(
˘x
, 0,  *ctx);

420 
˘x
->
size
 = size;

421 
˘x
->
rx_dïth
 =Ñx_depth;

423 
˘x
->
ˇlc_›
.
›code
 = 
IBV_EXP_CALC_OP_NUMBER
;

424 
˘x
->
ˇlc_›
.
d©a_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_NUMBER
;

425 
˘x
->
ˇlc_›
.
d©a_size
 = 
IBV_EXP_CALC_DATA_SIZE_NUMBER
;

427 
˘x
->
buf
 = 
	`memÆign
(
∑ge_size
, 
size
);

428 i‡(!
˘x
->
buf
) {

429 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

430 
˛ón_˘x
;

433 
	`mem£t
(
˘x
->
buf
, 0, 
size
);

435 
˘x
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
ib_dev
);

436 i‡(!
˘x
->
c⁄ãxt
) {

437 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

438 
	`ibv_gë_devi˚_«me
(
ib_dev
));

439 
˛ón_buf„r
;

442 
˘x
->
pd
 = 
	`ibv_Æloc_pd
(˘x->
c⁄ãxt
);

443 i‡(!
˘x
->
pd
) {

444 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

445 
˛ón_devi˚
;

448 
˘x
->
mr
 = 
	`ibv_ªg_mr
(˘x->
pd
, ctx->
buf
, 
size
, 
IBV_ACCESS_LOCAL_WRITE
);

449 i‡(!
˘x
->
mr
) {

450 
	`Ârötf
(
°dîr
, "Couldn'tÑegister MR\n");

451 
˛ón_pd
;

454 i‡(
ˇlc_›
 !
PP_CALC_INVALID
) {

455 
›_≥r_g©hî
, 
max_num_›
;

457 
˘x
->
ˇlc_›
.
›code
 = 
IBV_EXP_CALC_OP_ADD
;

458 
˘x
->
ˇlc_›
.
d©a_ty≥
 = 
IBV_EXP_CALC_DATA_TYPE_INT
;

459 
˘x
->
ˇlc_›
.
d©a_size
 = 
IBV_EXP_CALC_DATA_SIZE_64_BIT
;

461 
rc
 = 
	`µ_quîy_ˇlc_ˇp
(
˘x
->
c⁄ãxt
,

462 
˘x
->
ˇlc_›
.
›code
,

463 
˘x
->
ˇlc_›
.
d©a_ty≥
,

464 
˘x
->
ˇlc_›
.
d©a_size
,

465 &
›_≥r_g©hî
, &
max_num_›
);

466 i‡(
rc
) {

467 
	`Ârötf
(
°dîr
, "-E- operationÇot supported on %s. valid opsáre:\n",

468 
	`ibv_gë_devi˚_«me
(
ib_dev
));

470 
	`µ_¥öt_dev_ˇlc_›s
(
˘x
->
c⁄ãxt
);

471 
˛ón_mr
;

474 i‡(
	`__∑r£_ˇlc_to_g©hî
(
ˇlc_›î™ds_°r
, 
ˇlc_›
, 
ˇlc_d©a_ty≥
,

475 
›_≥r_g©hî
, 
max_num_›
, 
˘x
->
mr
->
lkey
,

476 &
˘x
->
ˇlc_›
, ctx->
buf
) < 0)

477 
˛ón_mr
;

481 
ibv_exp_cq_©å
 
©å
 = {

482 .
comp_mask
 = 
IBV_EXP_CQ_ATTR_CQ_CAP_FLAGS
,

483 .
cq_ˇp_Êags
 = 
IBV_EXP_CQ_IGNORE_OVERRUN


486 
˘x
->
rcq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 
rx_dïth
, 
NULL
, NULL, 0);

487 i‡(!
˘x
->
rcq
) {

488 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

489 
˛ón_mr
;

492 i‡(
	`ibv_exp_modify_cq
(
˘x
->
rcq
, &
©å
, 
IBV_EXP_CQ_CAP_FLAGS
)) {

493 
	`Ârötf
(
°dîr
, "FailedÅo modify CQ\n");

494 
˛ón_rcq
;

499 
ibv_exp_cq_©å
 
©å
 = {

500 .
comp_mask
 = 
IBV_EXP_CQ_ATTR_CQ_CAP_FLAGS
,

501 .
cq_ˇp_Êags
 = 
IBV_EXP_CQ_IGNORE_OVERRUN


504 
˘x
->
scq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 0x10, 
NULL
, NULL, 0);

505 i‡(!
˘x
->
scq
) {

506 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

507 
˛ón_rcq
;

510 i‡(
	`ibv_exp_modify_cq
(
˘x
->
scq
, &
©å
, 
IBV_EXP_CQ_CAP_FLAGS
)) {

511 
	`Ârötf
(
°dîr
, "FailedÅo modify CQ\n");

512 
˛ón_scq
;

517 
ibv_exp_qp_öô_©å
 
©å
 = {

518 .
£nd_cq
 = 
˘x
->
scq
,

519 .
ªcv_cq
 = 
˘x
->
rcq
,

520 .
ˇp
 = {

521 .
max_£nd_wr
 = 16,

522 .
max_ªcv_wr
 = 
rx_dïth
,

523 .
max_£nd_sge
 = 16,

524 .
max_ªcv_sge
 = 16

526 .
qp_ty≥
 = 
IBV_QPT_RC
,

527 .
pd
 = 
˘x
->pd

531 
©å
.
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 | 
IBV_EXP_QP_INIT_ATTR_PD
;

532 
©å
.
exp_¸óã_Êags
 = 
IBV_EXP_QP_CREATE_CROSS_CHANNEL
 | 
IBV_EXP_QP_CREATE_MANAGED_SEND
;

533 
˘x
->
qp
 = 
	`ibv_exp_¸óã_qp
(˘x->
c⁄ãxt
, &
©å
);

535 i‡(!
˘x
->
qp
) {

536 
	`Ârötf
(
°dîr
, "Couldn't create QP\n");

537 
˛ón_scq
;

542 
ibv_qp_©å
 
©å
 = {

543 .
qp_°©e
 = 
IBV_QPS_INIT
,

544 .
pkey_ödex
 = 0,

545 .
p‹t_num
 = 
p‹t
,

546 .
qp_ac˚ss_Êags
 = 0

549 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

550 
IBV_QP_STATE
 |

551 
IBV_QP_PKEY_INDEX
 |

552 
IBV_QP_PORT
 |

553 
IBV_QP_ACCESS_FLAGS
)) {

554 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

555 
˛ón_qp
;

561 
˘x
->
mcq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 0x40, 
NULL
, NULL, 0);

562 i‡(!
˘x
->
mcq
) {

563 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

564 
˛ón_qp
;

568 
ibv_exp_qp_öô_©å
 
©å
 = {

569 .
£nd_cq
 = 
˘x
->
mcq
,

570 .
ªcv_cq
 = 
˘x
->
mcq
,

571 .
ˇp
 = {

572 .
max_£nd_wr
 = 0x40,

573 .
max_ªcv_wr
 = 0,

574 .
max_£nd_sge
 = 1,

575 .
max_ªcv_sge
 = 1

577 .
qp_ty≥
 = 
IBV_QPT_RC
,

578 .
pd
 = 
˘x
->pd

582 
©å
.
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 | 
IBV_EXP_QP_INIT_ATTR_PD
;

583 
©å
.
exp_¸óã_Êags
 = 
IBV_EXP_QP_CREATE_CROSS_CHANNEL
;

584 
˘x
->
mqp
 = 
	`ibv_exp_¸óã_qp
(˘x->
c⁄ãxt
, &
©å
);

586 i‡(!
˘x
->
mqp
) {

587 
	`Ârötf
(
°dîr
, "Couldn't create QP\n");

588 
˛ón_mcq
;

593 
ibv_qp_©å
 
©å
 = {

594 .
qp_°©e
 = 
IBV_QPS_INIT
,

595 .
pkey_ödex
 = 0,

596 .
p‹t_num
 = 
p‹t
,

597 .
qp_ac˚ss_Êags
 = 0

600 i‡(
	`ibv_modify_qp
(
˘x
->
mqp
, &
©å
,

601 
IBV_QP_STATE
 |

602 
IBV_QP_PKEY_INDEX
 |

603 
IBV_QP_PORT
 |

604 
IBV_QP_ACCESS_FLAGS
)) {

605 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

606 
˛ón_mqp
;

611 
ibv_qp_©å
 
qp_©å
 = {

612 .
qp_°©e
 = 
IBV_QPS_RTR
,

613 .
∑th_mtu
 = 1,

614 .
de°_qp_num
 = 
˘x
->
mqp
->
qp_num
,

615 .
rq_p¢
 = 0,

616 .
max_de°_rd_©omic
 = 1,

617 .
mö_∫r_timî
 = 12,

618 .
ah_©å
 = {

619 .
is_globÆ
 = 0,

620 .
dlid
 = 0,

621 .
¶
 = 0,

622 .
§c_∑th_bôs
 = 0,

623 .
p‹t_num
 = 
p‹t


626 i‡(
	`ibv_modify_qp
(
˘x
->
mqp
, &
qp_©å
,

627 
IBV_QP_STATE
 |

628 
IBV_QP_AV
 |

629 
IBV_QP_PATH_MTU
 |

630 
IBV_QP_DEST_QPN
 |

631 
IBV_QP_RQ_PSN
 |

632 
IBV_QP_MAX_DEST_RD_ATOMIC
 |

633 
IBV_QP_MIN_RNR_TIMER
)) {

634 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

635 
˛ón_mqp
;

638 
qp_©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

639 
qp_©å
.
timeout
 = 14;

640 
qp_©å
.
ªåy_˙t
 = 7;

641 
qp_©å
.
∫r_ªåy
 = 7;

642 
qp_©å
.
sq_p¢
 = 0;

643 
qp_©å
.
max_rd_©omic
 = 1;

644 i‡(
	`ibv_modify_qp
(
˘x
->
mqp
, &
qp_©å
,

645 
IBV_QP_STATE
 |

646 
IBV_QP_TIMEOUT
 |

647 
IBV_QP_RETRY_CNT
 |

648 
IBV_QP_RNR_RETRY
 |

649 
IBV_QP_SQ_PSN
 |

650 
IBV_QP_MAX_QP_RD_ATOMIC
)) {

651 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

652 
˛ón_mqp
;

656  
˘x
;

658 
˛ón_mqp
:

659 
	`ibv_de°roy_qp
(
˘x
->
mqp
);

661 
˛ón_mcq
:

662 
	`ibv_de°roy_cq
(
˘x
->
mcq
);

664 
˛ón_qp
:

665 
	`ibv_de°roy_qp
(
˘x
->
qp
);

667 
˛ón_scq
:

668 
	`ibv_de°roy_cq
(
˘x
->
scq
);

670 
˛ón_rcq
:

671 
	`ibv_de°roy_cq
(
˘x
->
rcq
);

673 
˛ón_mr
:

674 
	`ibv_dîeg_mr
(
˘x
->
mr
);

676 
˛ón_pd
:

677 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

679 
˛ón_devi˚
:

680 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

682 
˛ón_buf„r
:

683 
	`‰ì
(
˘x
->
buf
);

685 
˛ón_˘x
:

686 
	`‰ì
(
˘x
);

688  
NULL
;

689 
	}
}

692 
	$µ_˛o£_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
)

694 i‡(
	`ibv_de°roy_qp
(
˘x
->
mqp
)) {

695 
	`Ârötf
(
°dîr
, "Couldn't destroy mQP\n");

699 i‡(
	`ibv_de°roy_cq
(
˘x
->
mcq
)) {

700 
	`Ârötf
(
°dîr
, "Couldn't destroy mCQ\n");

704 i‡(
	`ibv_de°roy_qp
(
˘x
->
qp
)) {

705 
	`Ârötf
(
°dîr
, "Couldn't destroy QP\n");

709 i‡(
	`ibv_de°roy_cq
(
˘x
->
rcq
)) {

710 
	`Ârötf
(
°dîr
, "Couldn't destroyÑCQ\n");

714 i‡(
	`ibv_de°roy_cq
(
˘x
->
scq
)) {

715 
	`Ârötf
(
°dîr
, "Couldn't destroy sCQ\n");

719 i‡(
	`ibv_dîeg_mr
(
˘x
->
mr
)) {

720 
	`Ârötf
(
°dîr
, "Couldn't deregister MR\n");

724 i‡(
	`ibv_dóŒoc_pd
(
˘x
->
pd
)) {

725 
	`Ârötf
(
°dîr
, "Couldn't deallocate PD\n");

729 i‡(
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
)) {

730 
	`Ârötf
(
°dîr
, "Couldn'tÑelease context\n");

734 
	`‰ì
(
˘x
->
buf
);

735 
	`‰ì
(
˘x
);

738 
	}
}

741 
	$µ_po°_ªcv
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
n
)

743 
rc
;

745 
ibv_sge
 
li°
 = {

746 .
addr
 = (
uöçå_t
Ë
˘x
->
buf
,

747 .
Àngth
 = 
˘x
->
size
,

748 .
lkey
 = 
˘x
->
mr
->lkey

750 
ibv_ªcv_wr
 
wr
 = {

751 .
wr_id
 = 
PP_RECV_WRID
,

752 .
sg_li°
 = &
li°
,

753 .
num_sge
 = 1,

755 
ibv_ªcv_wr
 *
bad_wr
;

756 
i
;

758 
i
 = 0; i < 
n
; ++i) {

759 
rc
 = 
	`ibv_po°_ªcv
(
˘x
->
qp
, &
wr
, &
bad_wr
);

760 i‡(
rc
)

761  
rc
;

764  
i
;

765 
	}
}

767 
	$µ_po°_£nd
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
waô_ªcv
)

769 
rc
;

770 
ibv_exp_èsk
 
èsk_po°
, 
èsk_í
, 
èsk_waô
, *
èsk_p
;

771 
ibv_wc
 
mwc
;

772 
ibv_wc
 
wc
;

773 
√
;

775 
ibv_sge
 
li°
 = {

776 .
addr
 = (
uöçå_t
Ë
˘x
->
buf
,

777 .
Àngth
 = 
˘x
->
size
,

778 .
lkey
 = 
˘x
->
mr
->lkey

781 
ibv_exp_£nd_wr
 
wr
 = {

782 .
wr_id
 = 
PP_SEND_WRID
,

783 .
sg_li°
 = &
li°
,

784 .
num_sge
 = 1,

785 .
exp_›code
 = 
IBV_EXP_WR_SEND
,

786 .
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
,

789 
ibv_exp_£nd_wr
 
wr_í
 = {

790 .
wr_id
 = 
wr
.wr_id,

791 .
sg_li°
 = 
NULL
,

792 .
num_sge
 = 0,

793 .
exp_›code
 = 
IBV_EXP_WR_SEND_ENABLE
,

794 .
exp_£nd_Êags
 = (
waô_ªcv
 ? 0 : 
IBV_EXP_SEND_SIGNALED
),

797 
ibv_exp_£nd_wr
 
wr_waô
 = {

798 .
wr_id
 = 
˘x
->
s˙t
,

799 .
sg_li°
 = 
NULL
,

800 .
num_sge
 = 0,

801 .
exp_›code
 = 
IBV_EXP_WR_CQE_WAIT
,

802 .
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
,

806 i‡(
˘x
->
ˇlc_›
.
›code
 !
IBV_EXP_CALC_OP_NUMBER
) {

807 
wr
.
exp_›code
 = 
IBV_EXP_WR_SEND
;

808 
wr
.
exp_£nd_Êags
 |
IBV_EXP_SEND_WITH_CALC
;

809 
wr
.
sg_li°
 = 
˘x
->
ˇlc_›
.
g©hî_li°
;

810 
wr
.
num_sge
 = 
˘x
->
ˇlc_›
.
g©hî_li°_size
;

812 
wr
.
›
.
ˇlc
.
ˇlc_›
 = 
˘x
->ˇlc_›.
›code
;

813 
wr
.
›
.
ˇlc
.
d©a_ty≥
 = 
˘x
->
ˇlc_›
.data_type;

814 
wr
.
›
.
ˇlc
.
d©a_size
 = 
˘x
->
ˇlc_›
.data_size;

815 
wr
.
√xt
 = 
NULL
;

818 
	`mem£t
(&
èsk_po°
, 0, (task_post));

819 
èsk_po°
.
èsk_ty≥
 = 
IBV_EXP_TASK_SEND
;

820 
èsk_po°
.
ôem
.
qp
 = 
˘x
->qp;

821 
èsk_po°
.
ôem
.
£nd_wr
 = &
wr
;

823 
èsk_po°
.
√xt
 = 
NULL
;

824 
èsk_p
 = &
èsk_po°
;

828 
wr_í
.
èsk
.
wqe_íabÀ
.
qp
 = 
˘x
->qp;

829 
wr_í
.
èsk
.
wqe_íabÀ
.
wqe_cou¡
 = 0;

831 
wr_í
.
exp_£nd_Êags
 |
IBV_EXP_SEND_WAIT_EN_LAST
;

833 
	`mem£t
(&
èsk_í
, 0, (task_en));

834 
èsk_í
.
èsk_ty≥
 = 
IBV_EXP_TASK_SEND
;

835 
èsk_í
.
ôem
.
qp
 = 
˘x
->
mqp
;

836 
èsk_í
.
ôem
.
£nd_wr
 = &
wr_í
;

838 
èsk_í
.
√xt
 = 
NULL
;

839 
èsk_po°
.
√xt
 = &
èsk_í
;

843 i‡(
waô_ªcv
) {

844 
wr_waô
.
èsk
.
cqe_waô
.
cq
 = 
˘x
->
rcq
;

845 
wr_waô
.
èsk
.
cqe_waô
.
cq_cou¡
 = 1;

847 
wr_waô
.
exp_£nd_Êags
 |
IBV_EXP_SEND_WAIT_EN_LAST
;

848 
wr_waô
.
√xt
 = 
NULL
;

850 
	`mem£t
(&
èsk_waô
, 0, (task_wait));

851 
èsk_waô
.
èsk_ty≥
 = 
IBV_EXP_TASK_SEND
;

852 
èsk_waô
.
ôem
.
qp
 = 
˘x
->
mqp
;

853 
èsk_waô
.
ôem
.
£nd_wr
 = &
wr_waô
;

855 
èsk_waô
.
√xt
 = &
èsk_po°
;

856 
èsk_p
 = &
èsk_waô
;

860 
rc
 = 
	`ibv_exp_po°_èsk
(
˘x
->
c⁄ãxt
, 
èsk_p
, 
NULL
);

861 i‡(
rc
)

862  
rc
;

865 
rc
 = 
	`ibv_pﬁl_cq
(
˘x
->
mcq
, 1, &
mwc
);

866 i‡(
rc
 < 0)

868 } 
rc
 == 0);

870 i‡(
mwc
.
°©us
 !
IBV_WC_SUCCESS
)

874 
√
 = 
	`ibv_pﬁl_cq
(
˘x
->
scq
, 1, &
wc
);

875 i‡(
√
 < 0) {

876 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

879 } !
√
);

881 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

882 
	`Ârötf
(
°dîr
, "cqeÉrror status %s (%d v:%d) for count %d\n",

883 
	`ibv_wc_°©us_°r
(
wc
.
°©us
),

884 
wc
.
°©us
, wc.
víd‹_îr
,

885 
˘x
->
r˙t
);

890 
	}
}

893 
	$ußge
(c⁄° *
¨gv0
)

895 
	`¥ötf
("Usage:\n");

896 
	`¥ötf
(" %s startá serveránd wait for connection\n",

897 
¨gv0
);

898 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

899 
	`¥ötf
("\n");

900 
	`¥ötf
("Options:\n");

901 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort"

903 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> "

905 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device"

907 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange "

909 
	`¥ötf
(" -m, --mtu=<size>Öath MTU (default 1024)\n");

910 
	`¥ötf
(" -r, --rx-depth=<dep>Çumber ofÑeceivesÅoÖost"

912 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchanges"

914 
	`¥ötf
(" -l, --sl=<sl> serviceÜevel value\n");

915 
	`¥ötf
(" -e, --events sleep on CQÉvents"

917 
	`¥ötf
(" -c, --calc calc operation (supported ADD)\n");

918 
	`¥ötf
(" -t, --op_type=<type> calc operandsÅype (supported INT64)\n");

919 
	`¥ötf
(" -o, --operands=<o1,o2,...> comma separatedÜist of"

921 
	`¥ötf
(" -w, --wait_cq=cqn wait forÉntries on cq\n");

922 
	}
}

925 
	$maö
(
¨gc
, *
¨gv
[])

927 
ibv_devi˚
 **
dev_li°
;

928 
ibv_devi˚
 *
ib_dev
 = 
NULL
;

929 
pögp⁄g_c⁄ãxt
 *
˘x
;

930 
pögp⁄g_de°
 
my_de°
;

931 
pögp⁄g_de°
 *
ªm_de°
;

932 
timevÆ
 
°¨t
, 
íd
;

933 *
ib_dev«me
 = 
NULL
;

934 *
£rvî«me
 = 
NULL
;

935 
p‹t
 = 18515;

936 
ib_p‹t
 = 1;

937 
size
 = 4096;

939 
ibv_mtu
 
mtu
 = 
IBV_MTU_1024
;

940 
rx_dïth
 = 500;

941 
ôîs
 = 1000;

942 
routs
;

943 
num_cq_evíts
 = 0;

944 
¶
 = 0;

946 
µ_wr_d©a_ty≥
 
ˇlc_d©a_ty≥
 = 
PP_DATA_TYPE_INVALID
;

947 
µ_wr_ˇlc_›
 
ˇlc_›code
 = 
PP_CALC_INVALID
;

948 *
ˇlc_›î™ds_°r
 = 
NULL
;

950 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

953 
c
;

955 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

956 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

957 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

958 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

959 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

960 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

961 { .
«me
 = "rx-dïth", .
has_¨g
 = 1, .
vÆ
 = 'r' },

962 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

963 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

964 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

965 { .
«me
 = "ˇlc", .
has_¨g
 = 1, .
vÆ
 = 'c' },

966 { .
«me
 = "›_ty≥", .
has_¨g
 = 1, .
vÆ
 = 't' },

967 { .
«me
 = "›î™ds", .
has_¨g
 = 1, .
vÆ
 = 'o' },

968 { .
«me
 = "pﬁl_mqe", .
has_¨g
 = 0, .
vÆ
 = 'w' },

972 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:m:r:n:l:et:c:o:wf",

973 
l⁄g_›ti⁄s
, 
NULL
);

974 i‡(
c
 == -1)

977 
c
) {

979 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

980 i‡(
p‹t
 < 0 ||Öort > 65535) {

981 
	`ußge
(
¨gv
[0]);

987 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

991 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

992 i‡(
ib_p‹t
 < 0) {

993 
	`ußge
(
¨gv
[0]);

999 
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1000 i‡(
size
 < 16) {

1001 
	`ußge
(
¨gv
[0]);

1007 
mtu
 = 
	`µ_mtu_to_íum
(
	`°πﬁ
(
›èrg
, 
NULL
, 0));

1008 i‡(
mtu
 < 0) {

1009 
	`ußge
(
¨gv
[0]);

1015 
rx_dïth
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1019 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1023 
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1027 
ˇlc_d©a_ty≥
 = 
	`µ_°r_to_d©a_ty≥
(
›èrg
);

1028 i‡(
ˇlc_d©a_ty≥
 =
PP_DATA_TYPE_INVALID
) {

1029 
	`¥ötf
("-E- invalid dataÅypes. Valid valuesáre:\n");

1030 
	`µ_¥öt_d©a_ty≥
();

1036 
ˇlc_›î™ds_°r
 = 
	`°rdup
(
›èrg
);

1040 
ˇlc_›code
 = 
	`µ_°r_to_ˇlc_›
(
›èrg
);

1041 i‡(
ˇlc_›code
 =
PP_CALC_INVALID
) {

1042 
	`¥ötf
("-E- invalid dataÅypes. Valid valuesáre:\n");

1043 
	`µ_¥öt_ˇlc_›
();

1049 
	`ußge
(
¨gv
[0]);

1054 i‡(
›töd
 =
¨gc
 - 1)

1055 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

1056 i‡(
›töd
 < 
¨gc
) {

1057 
	`ußge
(
¨gv
[0]);

1061 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1063 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

1064 i‡(!
dev_li°
) {

1065 
	`Ârötf
(
°dîr
, "No IB devices found\n");

1069 i‡(!
ib_dev«me
) {

1070 
ib_dev
 = *
dev_li°
;

1071 i‡(!
ib_dev
) {

1072 
	`Ârötf
(
°dîr
, "No IB devices found\n");

1076 
i
;

1077 
i
 = 0; 
dev_li°
[i]; ++i)

1078 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]),

1079 
ib_dev«me
))

1081 
ib_dev
 = 
dev_li°
[
i
];

1082 i‡(!
ib_dev
) {

1083 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

1088 
˘x
 = 
	`µ_öô_˘x
(
ib_dev
, 
size
, 
rx_dïth
, 
ib_p‹t
,

1089 
ˇlc_›code
, 
ˇlc_d©a_ty≥
, 
ˇlc_›î™ds_°r
);

1090 i‡(!
˘x
)

1093 
routs
 = 
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
);

1094 i‡(
routs
 < 
˘x
->
rx_dïth
) {

1095 
	`Ârötf
(
°dîr
, "Couldn'àpo°Ñe˚ivê(%d)\n", 
routs
);

1099 
my_de°
.
lid
 = 
	`µ_gë_loˇl_lid
(
˘x
->
c⁄ãxt
, 
ib_p‹t
);

1100 
my_de°
.
q≤
 = 
˘x
->
qp
->
qp_num
;

1101 
my_de°
.
p¢
 = 
	`Ã™d48
() & 0xffffff;

1102 i‡(!
my_de°
.
lid
) {

1103 
	`Ârötf
(
°dîr
, "Couldn't getÜocal LID\n");

1107 
	`¥ötf
("Üocaláddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x\n",

1108 
my_de°
.
lid
, my_de°.
q≤
, my_de°.
p¢
);

1110 i‡(
£rvî«me
)

1111 
ªm_de°
 = 
	`µ_˛õ¡_exch_de°
(
£rvî«me
, 
p‹t
, &
my_de°
);

1113 
ªm_de°
 = 
	`µ_£rvî_exch_de°
(
˘x
, 
ib_p‹t
, 
mtu
,

1114 
p‹t
, 
¶
, &
my_de°
);

1116 i‡(!
ªm_de°
)

1119 
	`¥ötf
("Ñemoteáddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x\n",

1120 
ªm_de°
->
lid
,Ñem_de°->
q≤
,Ñem_de°->
p¢
);

1122 i‡(
£rvî«me
)

1123 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, ctx->
qp
, 
ib_p‹t
, 
my_de°
.
p¢
, 
mtu
,

1124 
¶
, 
ªm_de°
))

1127 i‡(
£rvî«me
) {

1128 i‡(
	`µ_po°_£nd
(
˘x
, 0)) {

1129 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

1133 i‡(
	`gëtimeofday
(&
°¨t
, 
NULL
)) {

1134 
	`≥º‹
("gettimeofday");

1139 
˘x
->
s˙t
 = ctx->
r˙t
 = 0;

1140 
˘x
->
r˙t
 < 
ôîs
 && ctx->
s˙t
 < iters) {

1141 
ibv_wc
 
wc
;

1142 
√
;

1145 
√
 = 
	`ibv_pﬁl_cq
(
˘x
->
rcq
, 1, &
wc
);

1146 i‡(
√
 < 0) {

1147 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

1150 } 
√
 < 1);

1152 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

1153 
	`Ârötf
(
°dîr
, "cqeÉrror status %s (%d v:%d)"

1155 
	`ibv_wc_°©us_°r
(
wc
.
°©us
),

1156 
wc
.
°©us
, wc.
víd‹_îr
,

1157 
˘x
->
r˙t
);

1161 
˘x
->
r˙t
++;

1163 i‡(
	`µ_po°_ªcv
(
˘x
, 1) < 0) {

1164 
	`Ârötf
(
°dîr
, "Couldn'tÖostÑeceive\n");

1168 i‡(
	`µ_po°_£nd
(
˘x
, 1)) {

1169 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

1175 i‡(
	`gëtimeofday
(&
íd
, 
NULL
)) {

1176 
	`≥º‹
("gettimeofday");

1181 
u£c
 = (
íd
.
tv_£c
 - 
°¨t
.tv_sec) * 1000000 +

1182 (
íd
.
tv_u£c
 - 
°¨t
.tv_usec);

1183 
byãs
 = (Ë
size
 * 
ôîs
 * 2;

1185 
	`¥ötf
("%lld bytes in %.2f seconds = %.2f Mbit/sec\n",

1186 
byãs
, 
u£c
 / 1000000., bytes * 8. / usec);

1187 
	`¥ötf
("%d iters in %.2f seconds = %.2f usec/iter\n",

1188 
ôîs
, 
u£c
 / 1000000., usec / iters);

1191 
	`ibv_ack_cq_evíts
(
˘x
->
rcq
, 
num_cq_evíts
);

1193 i‡(
	`µ_˛o£_˘x
(
˘x
))

1196 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

1197 i‡(
ˇlc_›î™ds_°r
)

1198 
	`‰ì
(
ˇlc_›î™ds_°r
);

1200 
	`‰ì
(
ªm_de°
);

1203 
	}
}

	@libibverbs-41mlnx1/examples/uc_pingpong.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/sockë.h
>

43 
	~<sys/time.h
>

44 
	~<√tdb.h
>

45 
	~<mÆloc.h
>

46 
	~<gë›t.h
>

47 
	~<¨∑/öë.h
>

48 
	~<time.h
>

50 
	~"pögp⁄g.h
"

53 
	mPINGPONG_RECV_WRID
 = 1,

54 
	mPINGPONG_SEND_WRID
 = 2,

57 
	g∑ge_size
;

59 
	spögp⁄g_c⁄ãxt
 {

60 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

61 
ibv_comp_ch™√l
 *
	mch™√l
;

62 
ibv_pd
 *
	mpd
;

63 
ibv_mr
 *
	mmr
;

64 
ibv_cq
 *
	mcq
;

65 
ibv_qp
 *
	mqp
;

66 *
	mbuf
;

67 
	msize
;

68 
	mrx_dïth
;

69 
	m≥ndög
;

70 
ibv_p‹t_©å
 
	mp‹töfo
;

73 
	spögp⁄g_de°
 {

74 
	mlid
;

75 
	mq≤
;

76 
	mp¢
;

77 
ibv_gid
 
	mgid
;

80 
	$µ_c⁄√˘_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
p‹t
, 
my_p¢
,

81 
ibv_mtu
 
mtu
, 
¶
,

82 
pögp⁄g_de°
 *
de°
, 
sgid_idx
)

84 
ibv_qp_©å
 
©å
 = {

85 .
qp_°©e
 = 
IBV_QPS_RTR
,

86 .
∑th_mtu
 = 
mtu
,

87 .
de°_qp_num
 = 
de°
->
q≤
,

88 .
rq_p¢
 = 
de°
->
p¢
,

89 .
ah_©å
 = {

90 .
is_globÆ
 = 0,

91 .
dlid
 = 
de°
->
lid
,

92 .
¶
 = sl,

93 .
§c_∑th_bôs
 = 0,

94 .
p‹t_num
 = 
p‹t


98 i‡(
de°
->
gid
.
globÆ
.
öãrÁ˚_id
) {

99 
©å
.
ah_©å
.
is_globÆ
 = 1;

100 
©å
.
ah_©å
.
grh
.
h›_limô
 = 1;

101 
©å
.
ah_©å
.
grh
.
dgid
 = 
de°
->
gid
;

102 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
sgid_idx
;

104 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

105 
IBV_QP_STATE
 |

106 
IBV_QP_AV
 |

107 
IBV_QP_PATH_MTU
 |

108 
IBV_QP_DEST_QPN
 |

109 
IBV_QP_RQ_PSN
)) {

110 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

114 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

115 
©å
.
sq_p¢
 = 
my_p¢
;

116 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

117 
IBV_QP_STATE
 |

118 
IBV_QP_SQ_PSN
)) {

119 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

124 
	}
}

126 
pögp⁄g_de°
 *
	$µ_˛õ¡_exch_de°
(c⁄° *
£rvî«me
, 
p‹t
,

127 c⁄° 
pögp⁄g_de°
 *
my_de°
)

129 
addröfo
 *
ªs
, *
t
;

130 
addröfo
 
höts
 = {

131 .
ai_Ámûy
 = 
AF_UNSPEC
,

132 .
ai_sockty≥
 = 
SOCK_STREAM


134 *
£rvi˚
;

135 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

136 
n
;

137 
sockfd
 = -1;

138 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

139 
gid
[33];

141 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

142  
NULL
;

144 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

146 i‡(
n
 < 0) {

147 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

148 
	`‰ì
(
£rvi˚
);

149  
NULL
;

152 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

153 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

154 i‡(
sockfd
 >= 0) {

155 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

157 
	`˛o£
(
sockfd
);

158 
sockfd
 = -1;

162 
	`‰ìaddröfo
(
ªs
);

163 
	`‰ì
(
£rvi˚
);

165 i‡(
sockfd
 < 0) {

166 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

167  
NULL
;

170 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

171 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
->
lid
, my_de°->
q≤
,

172 
my_de°
->
p¢
, 
gid
);

173 i‡(
	`wrôe
(
sockfd
, 
msg
,  msg) !=  msg) {

174 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

175 
out
;

178 i‡(
	`ªad
(
sockfd
, 
msg
,  msg) !=  msg) {

179 
	`≥º‹
("clientÑead");

180 
	`Ârötf
(
°dîr
, "Couldn'tÑeadÑemoteáddress\n");

181 
out
;

184 i‡(
	`wrôe
(
sockfd
, "done", ("done")) != ("done")) {

185 
	`Ârötf
(
°dîr
, "Couldn't send \"done\" msg\n");

186 
out
;

189 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

190 i‡(!
ªm_de°
)

191 
out
;

193 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
->
lid
, &ªm_de°->
q≤
,

194 &
ªm_de°
->
p¢
, 
gid
);

195 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

197 
out
:

198 
	`˛o£
(
sockfd
);

199  
ªm_de°
;

200 
	}
}

202 
pögp⁄g_de°
 *
	$µ_£rvî_exch_de°
(
pögp⁄g_c⁄ãxt
 *
˘x
,

203 
ib_p‹t
, 
ibv_mtu
 
mtu
,

204 
p‹t
, 
¶
,

205 c⁄° 
pögp⁄g_de°
 *
my_de°
,

206 
sgid_idx
)

208 
addröfo
 *
ªs
, *
t
;

209 
addröfo
 
höts
 = {

210 .
ai_Êags
 = 
AI_PASSIVE
,

211 .
ai_Ámûy
 = 
AF_UNSPEC
,

212 .
ai_sockty≥
 = 
SOCK_STREAM


214 *
£rvi˚
;

215 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

216 
n
;

217 
sockfd
 = -1, 
c⁄nfd
;

218 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

219 
gid
[33];

221 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

222  
NULL
;

224 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

226 i‡(
n
 < 0) {

227 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
p‹t
);

228 
	`‰ì
(
£rvi˚
);

229  
NULL
;

232 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

233 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

234 i‡(
sockfd
 >= 0) {

235 
n
 = 1;

237 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, Ç);

239 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

241 
	`˛o£
(
sockfd
);

242 
sockfd
 = -1;

246 
	`‰ìaddröfo
(
ªs
);

247 
	`‰ì
(
£rvi˚
);

249 i‡(
sockfd
 < 0) {

250 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

251  
NULL
;

254 
	`li°í
(
sockfd
, 1);

255 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

256 
	`˛o£
(
sockfd
);

257 i‡(
c⁄nfd
 < 0) {

258 
	`Ârötf
(
°dîr
, "accept() failed\n");

259  
NULL
;

262 
n
 = 
	`ªad
(
c⁄nfd
, 
msg
,  msg);

263 i‡(
n
 ! 
msg
) {

264 
	`≥º‹
("serverÑead");

265 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'àªadÑemŸêaddªss\n", 
n
, (Ë 
msg
);

266 
out
;

269 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

270 i‡(!
ªm_de°
)

271 
out
;

273 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
->
lid
, &ªm_de°->
q≤
,

274 &
ªm_de°
->
p¢
, 
gid
);

275 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

277 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
my_de°
->
p¢
, 
mtu
, 
¶
, 
ªm_de°
,

278 
sgid_idx
)) {

279 
	`Ârötf
(
°dîr
, "Couldn't connectÅoÑemote QP\n");

280 
	`‰ì
(
ªm_de°
);

281 
ªm_de°
 = 
NULL
;

282 
out
;

286 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

287 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
->
lid
, my_de°->
q≤
,

288 
my_de°
->
p¢
, 
gid
);

289 i‡(
	`wrôe
(
c⁄nfd
, 
msg
,  msg) !=  msg) {

290 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

291 
	`‰ì
(
ªm_de°
);

292 
ªm_de°
 = 
NULL
;

293 
out
;

297 i‡(
	`ªad
(
c⁄nfd
, 
msg
, (msg)) <= 0) {

298 
	`Ârötf
(
°dîr
, "Couldn'tÑead \"done\" msg\n");

299 
	`‰ì
(
ªm_de°
);

300 
ªm_de°
 = 
NULL
;

301 
out
;

304 
out
:

305 
	`˛o£
(
c⁄nfd
);

306  
ªm_de°
;

307 
	}
}

309 
pögp⁄g_c⁄ãxt
 *
	$µ_öô_˘x
(
ibv_devi˚
 *
ib_dev
, 
size
,

310 
rx_dïth
, 
p‹t
,

311 
u£_evít
)

313 
pögp⁄g_c⁄ãxt
 *
˘x
;

315 
˘x
 = 
	`ˇŒoc
(1,  *ctx);

316 i‡(!
˘x
)

317  
NULL
;

319 
˘x
->
size
 = size;

320 
˘x
->
rx_dïth
 =Ñx_depth;

322 
˘x
->
buf
 = 
	`memÆign
(
∑ge_size
, 
size
);

323 i‡(!
˘x
->
buf
) {

324 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

325 
˛ón_˘x
;

329 
	`mem£t
(
˘x
->
buf
, 0x7b, 
size
);

331 
˘x
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
ib_dev
);

332 i‡(!
˘x
->
c⁄ãxt
) {

333 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

334 
	`ibv_gë_devi˚_«me
(
ib_dev
));

335 
˛ón_buf„r
;

338 i‡(
u£_evít
) {

339 
˘x
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
(˘x->
c⁄ãxt
);

340 i‡(!
˘x
->
ch™√l
) {

341 
	`Ârötf
(
°dîr
, "Couldn't create completion channel\n");

342 
˛ón_devi˚
;

345 
˘x
->
ch™√l
 = 
NULL
;

347 
˘x
->
pd
 = 
	`ibv_Æloc_pd
(˘x->
c⁄ãxt
);

348 i‡(!
˘x
->
pd
) {

349 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

350 
˛ón_comp_ch™√l
;

353 
˘x
->
mr
 = 
	`ibv_ªg_mr
(˘x->
pd
, ctx->
buf
, 
size
, 
IBV_ACCESS_LOCAL_WRITE
);

354 i‡(!
˘x
->
mr
) {

355 
	`Ârötf
(
°dîr
, "Couldn'tÑegister MR\n");

356 
˛ón_pd
;

359 
˘x
->
cq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 
rx_dïth
 + 1, 
NULL
,

360 
˘x
->
ch™√l
, 0);

361 i‡(!
˘x
->
cq
) {

362 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

363 
˛ón_mr
;

367 
ibv_qp_öô_©å
 
©å
 = {

368 .
£nd_cq
 = 
˘x
->
cq
,

369 .
ªcv_cq
 = 
˘x
->
cq
,

370 .
ˇp
 = {

371 .
max_£nd_wr
 = 1,

372 .
max_ªcv_wr
 = 
rx_dïth
,

373 .
max_£nd_sge
 = 1,

374 .
max_ªcv_sge
 = 1

376 .
qp_ty≥
 = 
IBV_QPT_UC


379 
˘x
->
qp
 = 
	`ibv_¸óã_qp
(˘x->
pd
, &
©å
);

380 i‡(!
˘x
->
qp
) {

381 
	`Ârötf
(
°dîr
, "Couldn't create QP\n");

382 
˛ón_cq
;

387 
ibv_qp_©å
 
©å
 = {

388 .
qp_°©e
 = 
IBV_QPS_INIT
,

389 .
pkey_ödex
 = 0,

390 .
p‹t_num
 = 
p‹t
,

391 .
qp_ac˚ss_Êags
 = 0

394 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

395 
IBV_QP_STATE
 |

396 
IBV_QP_PKEY_INDEX
 |

397 
IBV_QP_PORT
 |

398 
IBV_QP_ACCESS_FLAGS
)) {

399 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

400 
˛ón_qp
;

404  
˘x
;

406 
˛ón_qp
:

407 
	`ibv_de°roy_qp
(
˘x
->
qp
);

409 
˛ón_cq
:

410 
	`ibv_de°roy_cq
(
˘x
->
cq
);

412 
˛ón_mr
:

413 
	`ibv_dîeg_mr
(
˘x
->
mr
);

415 
˛ón_pd
:

416 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

418 
˛ón_comp_ch™√l
:

419 i‡(
˘x
->
ch™√l
)

420 
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
);

422 
˛ón_devi˚
:

423 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

425 
˛ón_buf„r
:

426 
	`‰ì
(
˘x
->
buf
);

428 
˛ón_˘x
:

429 
	`‰ì
(
˘x
);

431  
NULL
;

432 
	}
}

434 
	$µ_˛o£_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
)

436 i‡(
	`ibv_de°roy_qp
(
˘x
->
qp
)) {

437 
	`Ârötf
(
°dîr
, "Couldn't destroy QP\n");

441 i‡(
	`ibv_de°roy_cq
(
˘x
->
cq
)) {

442 
	`Ârötf
(
°dîr
, "Couldn't destroy CQ\n");

446 i‡(
	`ibv_dîeg_mr
(
˘x
->
mr
)) {

447 
	`Ârötf
(
°dîr
, "Couldn't deregister MR\n");

451 i‡(
	`ibv_dóŒoc_pd
(
˘x
->
pd
)) {

452 
	`Ârötf
(
°dîr
, "Couldn't deallocate PD\n");

456 i‡(
˘x
->
ch™√l
) {

457 i‡(
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
)) {

458 
	`Ârötf
(
°dîr
, "Couldn't destroy completion channel\n");

463 i‡(
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
)) {

464 
	`Ârötf
(
°dîr
, "Couldn'tÑelease context\n");

468 
	`‰ì
(
˘x
->
buf
);

469 
	`‰ì
(
˘x
);

472 
	}
}

474 
	$µ_po°_ªcv
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
n
)

476 
ibv_sge
 
li°
 = {

477 .
addr
 = (
uöçå_t
Ë
˘x
->
buf
,

478 .
Àngth
 = 
˘x
->
size
,

479 .
lkey
 = 
˘x
->
mr
->lkey

481 
ibv_ªcv_wr
 
wr
 = {

482 .
wr_id
 = 
PINGPONG_RECV_WRID
,

483 .
sg_li°
 = &
li°
,

484 .
num_sge
 = 1,

486 
ibv_ªcv_wr
 *
bad_wr
;

487 
i
;

489 
i
 = 0; i < 
n
; ++i)

490 i‡(
	`ibv_po°_ªcv
(
˘x
->
qp
, &
wr
, &
bad_wr
))

493  
i
;

494 
	}
}

496 
	$µ_po°_£nd
(
pögp⁄g_c⁄ãxt
 *
˘x
)

498 
ibv_sge
 
li°
 = {

499 .
addr
 = (
uöçå_t
Ë
˘x
->
buf
,

500 .
Àngth
 = 
˘x
->
size
,

501 .
lkey
 = 
˘x
->
mr
->lkey

503 
ibv_£nd_wr
 
wr
 = {

504 .
wr_id
 = 
PINGPONG_SEND_WRID
,

505 .
sg_li°
 = &
li°
,

506 .
num_sge
 = 1,

507 .
›code
 = 
IBV_WR_SEND
,

508 .
£nd_Êags
 = 
IBV_SEND_SIGNALED
,

510 
ibv_£nd_wr
 *
bad_wr
;

512  
	`ibv_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

513 
	}
}

515 
	$ußge
(c⁄° *
¨gv0
)

517 
	`¥ötf
("Usage:\n");

518 
	`¥ötf
(" %† sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

519 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

520 
	`¥ötf
("\n");

521 
	`¥ötf
("Options:\n");

522 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

523 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

524 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

525 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 4096)\n");

526 
	`¥ötf
(" -m, --mtu=<size>Öath MTU (default 1024)\n");

527 
	`¥ötf
(" -r, --rx-depth=<dep>Çumber ofÑeceivesÅoÖostátáÅime (default 500)\n");

528 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchanges (default 1000)\n");

529 
	`¥ötf
(" -l, --sl=<sl> serviceÜevel value\n");

530 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

531 
	`¥ötf
(" -g, --gid-idx=<gid index>ÜocalÖort gid index\n");

532 
	}
}

534 
	$maö
(
¨gc
, *
¨gv
[])

536 
ibv_devi˚
 **
dev_li°
;

537 
ibv_devi˚
 *
ib_dev
;

538 
pögp⁄g_c⁄ãxt
 *
˘x
;

539 
pögp⁄g_de°
 
my_de°
;

540 
pögp⁄g_de°
 *
ªm_de°
;

541 
timevÆ
 
°¨t
, 
íd
;

542 *
ib_dev«me
 = 
NULL
;

543 *
£rvî«me
 = 
NULL
;

544 
p‹t
 = 18515;

545 
ib_p‹t
 = 1;

546 
size
 = 4096;

547 
ibv_mtu
 
mtu
 = 
IBV_MTU_1024
;

548 
rx_dïth
 = 500;

549 
ôîs
 = 1000;

550 
u£_evít
 = 0;

551 
routs
;

552 
r˙t
, 
s˙t
;

553 
num_cq_evíts
 = 0;

554 
¶
 = 0;

555 
gidx
 = -1;

556 
gid
[33];

558 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

561 
c
;

563 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

564 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

565 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

566 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

567 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

568 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

569 { .
«me
 = "rx-dïth", .
has_¨g
 = 1, .
vÆ
 = 'r' },

570 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

571 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

572 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

573 { .
«me
 = "gid-idx", .
has_¨g
 = 1, .
vÆ
 = 'g' },

577 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:m:r:n:l:eg:",

578 
l⁄g_›ti⁄s
, 
NULL
);

579 i‡(
c
 == -1)

582 
c
) {

584 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

585 i‡(
p‹t
 < 0 ||Öort > 65535) {

586 
	`ußge
(
¨gv
[0]);

592 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

596 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

597 i‡(
ib_p‹t
 < 0) {

598 
	`ußge
(
¨gv
[0]);

604 
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

608 
mtu
 = 
	`µ_mtu_to_íum
(
	`°πﬁ
(
›èrg
, 
NULL
, 0));

609 i‡(
mtu
 < 0) {

610 
	`ußge
(
¨gv
[0]);

616 
rx_dïth
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

620 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

624 
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

628 ++
u£_evít
;

632 
gidx
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

636 
	`ußge
(
¨gv
[0]);

641 i‡(
›töd
 =
¨gc
 - 1)

642 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

643 i‡(
›töd
 < 
¨gc
) {

644 
	`ußge
(
¨gv
[0]);

648 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

650 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

651 i‡(!
dev_li°
) {

652 
	`≥º‹
("FailedÅo get IB devicesÜist");

656 i‡(!
ib_dev«me
) {

657 
ib_dev
 = *
dev_li°
;

658 i‡(!
ib_dev
) {

659 
	`Ârötf
(
°dîr
, "No IB devices found\n");

663 
i
;

664 
i
 = 0; 
dev_li°
[i]; ++i)

665 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

667 
ib_dev
 = 
dev_li°
[
i
];

668 i‡(!
ib_dev
) {

669 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

674 
˘x
 = 
	`µ_öô_˘x
(
ib_dev
, 
size
, 
rx_dïth
, 
ib_p‹t
, 
u£_evít
);

675 i‡(!
˘x
)

678 
routs
 = 
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
);

679 i‡(
routs
 < 
˘x
->
rx_dïth
) {

680 
	`Ârötf
(
°dîr
, "Couldn'àpo°Ñe˚ivê(%d)\n", 
routs
);

684 i‡(
u£_evít
)

685 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

686 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

691 i‡(
	`µ_gë_p‹t_öfo
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, &˘x->
p‹töfo
)) {

692 
	`Ârötf
(
°dîr
, "Couldn't getÖort info\n");

696 
my_de°
.
lid
 = 
˘x
->
p‹töfo
.lid;

697 i‡(
˘x
->
p‹töfo
.
lök_œyî
 !
IBV_LINK_LAYER_ETHERNET
 &&

698 !
my_de°
.
lid
) {

699 
	`Ârötf
(
°dîr
, "Couldn't getÜocal LID\n");

703 i‡(
gidx
 >= 0) {

704 i‡(
	`ibv_quîy_gid
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, 
gidx
, &
my_de°
.
gid
)) {

705 
	`Ârötf
(
°dîr
, "ˇn'àªad sgid o‡ödex %d\n", 
gidx
);

709 
	`mem£t
(&
my_de°
.
gid
, 0,  my_dest.gid);

711 
my_de°
.
q≤
 = 
˘x
->
qp
->
qp_num
;

712 
my_de°
.
p¢
 = 
	`Ã™d48
() & 0xffffff;

713 
	`öë_¡›
(
AF_INET6
, &
my_de°
.
gid
, gid,  gid);

714 
	`¥ötf
("Üocaláddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, GID %s\n",

715 
my_de°
.
lid
, my_de°.
q≤
, my_de°.
p¢
, 
gid
);

718 i‡(
£rvî«me
)

719 
ªm_de°
 = 
	`µ_˛õ¡_exch_de°
(
£rvî«me
, 
p‹t
, &
my_de°
);

721 
ªm_de°
 = 
	`µ_£rvî_exch_de°
(
˘x
, 
ib_p‹t
, 
mtu
, 
p‹t
, 
¶
,

722 &
my_de°
, 
gidx
);

724 i‡(!
ªm_de°
)

727 
	`öë_¡›
(
AF_INET6
, &
ªm_de°
->
gid
, gid,  gid);

728 
	`¥ötf
("Ñemoteáddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, GID %s\n",

729 
ªm_de°
->
lid
,Ñem_de°->
q≤
,Ñem_de°->
p¢
, 
gid
);

731 i‡(
£rvî«me
)

732 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
my_de°
.
p¢
, 
mtu
, 
¶
, 
ªm_de°
,

733 
gidx
))

736 
˘x
->
≥ndög
 = 
PINGPONG_RECV_WRID
;

738 i‡(
£rvî«me
) {

739 i‡(
	`µ_po°_£nd
(
˘x
)) {

740 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

743 
˘x
->
≥ndög
 |
PINGPONG_SEND_WRID
;

746 i‡(
	`gëtimeofday
(&
°¨t
, 
NULL
)) {

747 
	`≥º‹
("gettimeofday");

751 
r˙t
 = 
s˙t
 = 0;

752 
r˙t
 < 
ôîs
 || 
s˙t
 < iters) {

753 i‡(
u£_evít
) {

754 
ibv_cq
 *
ev_cq
;

755 *
ev_˘x
;

757 i‡(
	`ibv_gë_cq_evít
(
˘x
->
ch™√l
, &
ev_cq
, &
ev_˘x
)) {

758 
	`Ârötf
(
°dîr
, "FailedÅo get cq_event\n");

762 ++
num_cq_evíts
;

764 i‡(
ev_cq
 !
˘x
->
cq
) {

765 
	`Ârötf
(
°dîr
, "CQÉvíàf‹ unknow¿CQ %p\n", 
ev_cq
);

769 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

770 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

776 
ibv_wc
 
wc
[2];

777 
√
, 
i
;

780 
√
 = 
	`ibv_pﬁl_cq
(
˘x
->
cq
, 2, 
wc
);

781 i‡(
√
 < 0) {

782 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

786 } !
u£_evít
 && 
√
 < 1);

788 
i
 = 0; i < 
√
; ++i) {

789 i‡(
wc
[
i
].
°©us
 !
IBV_WC_SUCCESS
) {

790 
	`Ârötf
(
°dîr
, "Failed status %s (%d) for wr_id %d\n",

791 
	`ibv_wc_°©us_°r
(
wc
[
i
].
°©us
),

792 
wc
[
i
].
°©us
, (Ëwc[i].
wr_id
);

796 (Ë
wc
[
i
].
wr_id
) {

797 
PINGPONG_SEND_WRID
:

798 ++
s˙t
;

801 
PINGPONG_RECV_WRID
:

802 i‡(--
routs
 <= 1) {

803 
routs
 +
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
 -Ñouts);

804 i‡(
routs
 < 
˘x
->
rx_dïth
) {

805 
	`Ârötf
(
°dîr
,

807 
routs
);

812 ++
r˙t
;

816 
	`Ârötf
(
°dîr
, "Completion for unknown wr_id %d\n",

817 (Ë
wc
[
i
].
wr_id
);

821 
˘x
->
≥ndög
 &~(Ë
wc
[
i
].
wr_id
;

822 i‡(
s˙t
 < 
ôîs
 && !
˘x
->
≥ndög
) {

823 i‡(
	`µ_po°_£nd
(
˘x
)) {

824 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

827 
˘x
->
≥ndög
 = 
PINGPONG_RECV_WRID
 |

828 
PINGPONG_SEND_WRID
;

834 i‡(
	`gëtimeofday
(&
íd
, 
NULL
)) {

835 
	`≥º‹
("gettimeofday");

840 
u£c
 = (
íd
.
tv_£c
 - 
°¨t
.tv_sec) * 1000000 +

841 (
íd
.
tv_u£c
 - 
°¨t
.tv_usec);

842 
byãs
 = (Ë
size
 * 
ôîs
 * 2;

844 
	`¥ötf
("%lld bytes in %.2f seconds = %.2f Mbit/sec\n",

845 
byãs
, 
u£c
 / 1000000., bytes * 8. / usec);

846 
	`¥ötf
("%d iters in %.2f seconds = %.2f usec/iter\n",

847 
ôîs
, 
u£c
 / 1000000., usec / iters);

850 
	`ibv_ack_cq_evíts
(
˘x
->
cq
, 
num_cq_evíts
);

852 i‡(
	`µ_˛o£_˘x
(
˘x
))

855 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

856 
	`‰ì
(
ªm_de°
);

859 
	}
}

	@libibverbs-41mlnx1/examples/ud_pingpong.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/sockë.h
>

43 
	~<sys/time.h
>

44 
	~<√tdb.h
>

45 
	~<mÆloc.h
>

46 
	~<gë›t.h
>

47 
	~<¨∑/öë.h
>

48 
	~<time.h
>

50 
	~"pögp⁄g.h
"

53 
	mPINGPONG_RECV_WRID
 = 1,

54 
	mPINGPONG_SEND_WRID
 = 2,

57 
	g∑ge_size
;

59 
	spögp⁄g_c⁄ãxt
 {

60 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

61 
ibv_comp_ch™√l
 *
	mch™√l
;

62 
ibv_pd
 *
	mpd
;

63 
ibv_mr
 *
	mmr
;

64 
ibv_cq
 *
	mcq
;

65 
ibv_qp
 *
	mqp
;

66 
ibv_ah
 *
	mah
;

67 *
	mbuf
;

68 
	msize
;

69 
	mrx_dïth
;

70 
	m≥ndög
;

71 
ibv_p‹t_©å
 
	mp‹töfo
;

74 
	spögp⁄g_de°
 {

75 
	mlid
;

76 
	mq≤
;

77 
	mp¢
;

78 
ibv_gid
 
	mgid
;

81 
	$µ_c⁄√˘_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
p‹t
, 
my_p¢
,

82 
¶
, 
pögp⁄g_de°
 *
de°
, 
sgid_idx
)

84 
ibv_ah_©å
 
ah_©å
 = {

85 .
is_globÆ
 = 0,

86 .
dlid
 = 
de°
->
lid
,

87 .
¶
 = sl,

88 .
§c_∑th_bôs
 = 0,

89 .
p‹t_num
 = 
p‹t


91 
ibv_qp_©å
 
©å
 = {

92 .
qp_°©e
 = 
IBV_QPS_RTR


95 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
, 
IBV_QP_STATE
)) {

96 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

100 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

101 
©å
.
sq_p¢
 = 
my_p¢
;

103 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

104 
IBV_QP_STATE
 |

105 
IBV_QP_SQ_PSN
)) {

106 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

110 i‡(
de°
->
gid
.
globÆ
.
öãrÁ˚_id
) {

111 
ah_©å
.
is_globÆ
 = 1;

112 
ah_©å
.
grh
.
h›_limô
 = 1;

113 
ah_©å
.
grh
.
dgid
 = 
de°
->
gid
;

114 
ah_©å
.
grh
.
sgid_ödex
 = 
sgid_idx
;

117 
˘x
->
ah
 = 
	`ibv_¸óã_ah
(˘x->
pd
, &
ah_©å
);

118 i‡(!
˘x
->
ah
) {

119 
	`Ârötf
(
°dîr
, "FailedÅo create AH\n");

124 
	}
}

126 
pögp⁄g_de°
 *
	$µ_˛õ¡_exch_de°
(c⁄° *
£rvî«me
, 
p‹t
,

127 c⁄° 
pögp⁄g_de°
 *
my_de°
)

129 
addröfo
 *
ªs
, *
t
;

130 
addröfo
 
höts
 = {

131 .
ai_Ámûy
 = 
AF_UNSPEC
,

132 .
ai_sockty≥
 = 
SOCK_STREAM


134 *
£rvi˚
;

135 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

136 
n
;

137 
sockfd
 = -1;

138 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

139 
gid
[33];

141 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

142  
NULL
;

144 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

146 i‡(
n
 < 0) {

147 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

148 
	`‰ì
(
£rvi˚
);

149  
NULL
;

152 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

153 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

154 i‡(
sockfd
 >= 0) {

155 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

157 
	`˛o£
(
sockfd
);

158 
sockfd
 = -1;

162 
	`‰ìaddröfo
(
ªs
);

163 
	`‰ì
(
£rvi˚
);

165 i‡(
sockfd
 < 0) {

166 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

167  
NULL
;

170 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

171 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
->
lid
, my_de°->
q≤
,

172 
my_de°
->
p¢
, 
gid
);

173 i‡(
	`wrôe
(
sockfd
, 
msg
,  msg) !=  msg) {

174 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

175 
out
;

178 i‡(
	`ªcv
(
sockfd
, 
msg
, (msg), 
MSG_WAITALL
) != (msg)) {

179 
	`≥º‹
("clientÑead");

180 
	`Ârötf
(
°dîr
, "Couldn'tÑeadÑemoteáddress\n");

181 
out
;

184 i‡(
	`wrôe
(
sockfd
, "done", ("done")) != ("done")) {

185 
	`Ârötf
(
°dîr
, "Couldn't send \"done\" msg\n");

186 
out
;

189 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

190 i‡(!
ªm_de°
)

191 
out
;

193 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
->
lid
, &ªm_de°->
q≤
,

194 &
ªm_de°
->
p¢
, 
gid
);

195 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

197 
out
:

198 
	`˛o£
(
sockfd
);

199  
ªm_de°
;

200 
	}
}

202 
pögp⁄g_de°
 *
	$µ_£rvî_exch_de°
(
pögp⁄g_c⁄ãxt
 *
˘x
,

203 
ib_p‹t
, 
p‹t
, 
¶
,

204 c⁄° 
pögp⁄g_de°
 *
my_de°
,

205 
sgid_idx
)

207 
addröfo
 *
ªs
, *
t
;

208 
addröfo
 
höts
 = {

209 .
ai_Êags
 = 
AI_PASSIVE
,

210 .
ai_Ámûy
 = 
AF_UNSPEC
,

211 .
ai_sockty≥
 = 
SOCK_STREAM


213 *
£rvi˚
;

214 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

215 
n
;

216 
sockfd
 = -1, 
c⁄nfd
;

217 
pögp⁄g_de°
 *
ªm_de°
 = 
NULL
;

218 
gid
[33];

220 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

221  
NULL
;

223 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

225 i‡(
n
 < 0) {

226 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
p‹t
);

227 
	`‰ì
(
£rvi˚
);

228  
NULL
;

231 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

232 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

233 i‡(
sockfd
 >= 0) {

234 
n
 = 1;

236 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, Ç);

238 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

240 
	`˛o£
(
sockfd
);

241 
sockfd
 = -1;

245 
	`‰ìaddröfo
(
ªs
);

246 
	`‰ì
(
£rvi˚
);

248 i‡(
sockfd
 < 0) {

249 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

250  
NULL
;

253 
	`li°í
(
sockfd
, 1);

254 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

255 
	`˛o£
(
sockfd
);

256 i‡(
c⁄nfd
 < 0) {

257 
	`Ârötf
(
°dîr
, "accept() failed\n");

258  
NULL
;

261 
n
 = 
	`ªcv
(
c⁄nfd
, 
msg
, (msg), 
MSG_WAITALL
);

262 i‡(
n
 ! 
msg
) {

263 
	`≥º‹
("serverÑead");

264 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'àªadÑemŸêaddªss\n", 
n
, (Ë 
msg
);

265 
out
;

268 
ªm_de°
 = 
	`mÆloc
( *rem_dest);

269 i‡(!
ªm_de°
)

270 
out
;

272 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
->
lid
, &ªm_de°->
q≤
,

273 &
ªm_de°
->
p¢
, 
gid
);

274 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

276 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
my_de°
->
p¢
, 
¶
, 
ªm_de°
,

277 
sgid_idx
)) {

278 
	`Ârötf
(
°dîr
, "Couldn't connectÅoÑemote QP\n");

279 
	`‰ì
(
ªm_de°
);

280 
ªm_de°
 = 
NULL
;

281 
out
;

284 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

285 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
->
lid
, my_de°->
q≤
,

286 
my_de°
->
p¢
, 
gid
);

287 i‡(
	`wrôe
(
c⁄nfd
, 
msg
,  msg) !=  msg) {

288 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

289 
	`‰ì
(
ªm_de°
);

290 
ªm_de°
 = 
NULL
;

291 
out
;

295 i‡(
	`ªad
(
c⁄nfd
, 
msg
, (msg)) <= 0) {

296 
	`Ârötf
(
°dîr
, "Couldn'tÑead \"done\" msg\n");

297 
	`‰ì
(
ªm_de°
);

298 
ªm_de°
 = 
NULL
;

299 
out
;

302 
out
:

303 
	`˛o£
(
c⁄nfd
);

304  
ªm_de°
;

305 
	}
}

307 
pögp⁄g_c⁄ãxt
 *
	$µ_öô_˘x
(
ibv_devi˚
 *
ib_dev
, 
size
,

308 
rx_dïth
, 
p‹t
,

309 
u£_evít
)

311 
pögp⁄g_c⁄ãxt
 *
˘x
;

313 
˘x
 = 
	`mÆloc
( *ctx);

314 i‡(!
˘x
)

315  
NULL
;

317 
˘x
->
size
 = size;

318 
˘x
->
rx_dïth
 =Ñx_depth;

320 
˘x
->
buf
 = 
	`memÆign
(
∑ge_size
, 
size
 + 40);

321 i‡(!
˘x
->
buf
) {

322 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

323 
˛ón_˘x
;

327 
	`mem£t
(
˘x
->
buf
, 0x7b, 
size
 + 40);

329 
˘x
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
ib_dev
);

330 i‡(!
˘x
->
c⁄ãxt
) {

331 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

332 
	`ibv_gë_devi˚_«me
(
ib_dev
));

333 
˛ón_buf„r
;

336 i‡(
u£_evít
) {

337 
˘x
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
(˘x->
c⁄ãxt
);

338 i‡(!
˘x
->
ch™√l
) {

339 
	`Ârötf
(
°dîr
, "Couldn't create completion channel\n");

340 
˛ón_devi˚
;

343 
˘x
->
ch™√l
 = 
NULL
;

345 
˘x
->
pd
 = 
	`ibv_Æloc_pd
(˘x->
c⁄ãxt
);

346 i‡(!
˘x
->
pd
) {

347 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

348 
˛ón_comp_ch™√l
;

351 
˘x
->
mr
 = 
	`ibv_ªg_mr
(˘x->
pd
, ctx->
buf
, 
size
 + 40, 
IBV_ACCESS_LOCAL_WRITE
);

352 i‡(!
˘x
->
mr
) {

353 
	`Ârötf
(
°dîr
, "Couldn'tÑegister MR\n");

354 
˛ón_pd
;

357 
˘x
->
cq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 
rx_dïth
 + 1, 
NULL
,

358 
˘x
->
ch™√l
, 0);

359 i‡(!
˘x
->
cq
) {

360 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

361 
˛ón_mr
;

365 
ibv_qp_öô_©å
 
©å
 = {

366 .
£nd_cq
 = 
˘x
->
cq
,

367 .
ªcv_cq
 = 
˘x
->
cq
,

368 .
ˇp
 = {

369 .
max_£nd_wr
 = 1,

370 .
max_ªcv_wr
 = 
rx_dïth
,

371 .
max_£nd_sge
 = 1,

372 .
max_ªcv_sge
 = 1

374 .
qp_ty≥
 = 
IBV_QPT_UD
,

377 
˘x
->
qp
 = 
	`ibv_¸óã_qp
(˘x->
pd
, &
©å
);

378 i‡(!
˘x
->
qp
) {

379 
	`Ârötf
(
°dîr
, "Couldn't create QP\n");

380 
˛ón_cq
;

385 
ibv_qp_©å
 
©å
 = {

386 .
qp_°©e
 = 
IBV_QPS_INIT
,

387 .
pkey_ödex
 = 0,

388 .
p‹t_num
 = 
p‹t
,

389 .
qkey
 = 0x11111111

392 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

393 
IBV_QP_STATE
 |

394 
IBV_QP_PKEY_INDEX
 |

395 
IBV_QP_PORT
 |

396 
IBV_QP_QKEY
)) {

397 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

398 
˛ón_qp
;

402  
˘x
;

404 
˛ón_qp
:

405 
	`ibv_de°roy_qp
(
˘x
->
qp
);

407 
˛ón_cq
:

408 
	`ibv_de°roy_cq
(
˘x
->
cq
);

410 
˛ón_mr
:

411 
	`ibv_dîeg_mr
(
˘x
->
mr
);

413 
˛ón_pd
:

414 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

416 
˛ón_comp_ch™√l
:

417 i‡(
˘x
->
ch™√l
)

418 
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
);

420 
˛ón_devi˚
:

421 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

423 
˛ón_buf„r
:

424 
	`‰ì
(
˘x
->
buf
);

426 
˛ón_˘x
:

427 
	`‰ì
(
˘x
);

429  
NULL
;

430 
	}
}

432 
	$µ_˛o£_˘x
(
pögp⁄g_c⁄ãxt
 *
˘x
)

434 i‡(
	`ibv_de°roy_qp
(
˘x
->
qp
)) {

435 
	`Ârötf
(
°dîr
, "Couldn't destroy QP\n");

439 i‡(
	`ibv_de°roy_cq
(
˘x
->
cq
)) {

440 
	`Ârötf
(
°dîr
, "Couldn't destroy CQ\n");

444 i‡(
	`ibv_dîeg_mr
(
˘x
->
mr
)) {

445 
	`Ârötf
(
°dîr
, "Couldn't deregister MR\n");

449 i‡(
	`ibv_de°roy_ah
(
˘x
->
ah
)) {

450 
	`Ârötf
(
°dîr
, "Couldn't destroy AH\n");

454 i‡(
	`ibv_dóŒoc_pd
(
˘x
->
pd
)) {

455 
	`Ârötf
(
°dîr
, "Couldn't deallocate PD\n");

459 i‡(
˘x
->
ch™√l
) {

460 i‡(
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
)) {

461 
	`Ârötf
(
°dîr
, "Couldn't destroy completion channel\n");

466 i‡(
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
)) {

467 
	`Ârötf
(
°dîr
, "Couldn'tÑelease context\n");

471 
	`‰ì
(
˘x
->
buf
);

472 
	`‰ì
(
˘x
);

475 
	}
}

477 
	$µ_po°_ªcv
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
n
)

479 
ibv_sge
 
li°
 = {

480 .
addr
 = (
uöçå_t
Ë
˘x
->
buf
,

481 .
Àngth
 = 
˘x
->
size
 + 40,

482 .
lkey
 = 
˘x
->
mr
->lkey

484 
ibv_ªcv_wr
 
wr
 = {

485 .
wr_id
 = 
PINGPONG_RECV_WRID
,

486 .
sg_li°
 = &
li°
,

487 .
num_sge
 = 1,

489 
ibv_ªcv_wr
 *
bad_wr
;

490 
i
;

492 
i
 = 0; i < 
n
; ++i)

493 i‡(
	`ibv_po°_ªcv
(
˘x
->
qp
, &
wr
, &
bad_wr
))

496  
i
;

497 
	}
}

499 
	$µ_po°_£nd
(
pögp⁄g_c⁄ãxt
 *
˘x
, 
uöt32_t
 
q≤
)

501 
ibv_sge
 
li°
 = {

502 .
addr
 = (
uöçå_t
Ë
˘x
->
buf
 + 40,

503 .
Àngth
 = 
˘x
->
size
,

504 .
lkey
 = 
˘x
->
mr
->lkey

506 
ibv_£nd_wr
 
wr
 = {

507 .
wr_id
 = 
PINGPONG_SEND_WRID
,

508 .
sg_li°
 = &
li°
,

509 .
num_sge
 = 1,

510 .
›code
 = 
IBV_WR_SEND
,

511 .
£nd_Êags
 = 
IBV_SEND_SIGNALED
,

512 .
wr
 = {

513 .
ud
 = {

514 .
ah
 = 
˘x
->ah,

515 .
ªmŸe_q≤
 = 
q≤
,

516 .
ªmŸe_qkey
 = 0x11111111

520 
ibv_£nd_wr
 *
bad_wr
;

522  
	`ibv_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

523 
	}
}

525 
	$ußge
(c⁄° *
¨gv0
)

527 
	`¥ötf
("Usage:\n");

528 
	`¥ötf
(" %† sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

529 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

530 
	`¥ötf
("\n");

531 
	`¥ötf
("Options:\n");

532 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

533 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

534 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

535 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 1024)\n");

536 
	`¥ötf
(" -r, --rx-depth=<dep>Çumber ofÑeceivesÅoÖostátáÅime (default 500)\n");

537 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchanges (default 1000)\n");

538 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

539 
	`¥ötf
(" -g, --gid-idx=<gid index>ÜocalÖort gid index\n");

540 
	}
}

542 
	$maö
(
¨gc
, *
¨gv
[])

544 
ibv_devi˚
 **
dev_li°
;

545 
ibv_devi˚
 *
ib_dev
;

546 
pögp⁄g_c⁄ãxt
 *
˘x
;

547 
pögp⁄g_de°
 
my_de°
;

548 
pögp⁄g_de°
 *
ªm_de°
;

549 
timevÆ
 
°¨t
, 
íd
;

550 *
ib_dev«me
 = 
NULL
;

551 *
£rvî«me
 = 
NULL
;

552 
p‹t
 = 18515;

553 
ib_p‹t
 = 1;

554 
size
 = 1024;

555 
rx_dïth
 = 500;

556 
ôîs
 = 1000;

557 
u£_evít
 = 0;

558 
routs
;

559 
r˙t
, 
s˙t
;

560 
num_cq_evíts
 = 0;

561 
¶
 = 0;

562 
gidx
 = -1;

563 
gid
[
INET6_ADDRSTRLEN
];

565 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

568 
c
;

570 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

571 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

572 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

573 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

574 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

575 { .
«me
 = "rx-dïth", .
has_¨g
 = 1, .
vÆ
 = 'r' },

576 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

577 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

578 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

579 { .
«me
 = "gid-idx", .
has_¨g
 = 1, .
vÆ
 = 'g' },

583 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:r:n:l:eg:",

584 
l⁄g_›ti⁄s
, 
NULL
);

585 i‡(
c
 == -1)

588 
c
) {

590 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

591 i‡(
p‹t
 < 0 ||Öort > 65535) {

592 
	`ußge
(
¨gv
[0]);

598 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

602 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

603 i‡(
ib_p‹t
 < 0) {

604 
	`ußge
(
¨gv
[0]);

610 
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

614 
rx_dïth
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

618 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

622 
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

626 ++
u£_evít
;

630 
gidx
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

634 
	`ußge
(
¨gv
[0]);

639 i‡(
›töd
 =
¨gc
 - 1)

640 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

641 i‡(
›töd
 < 
¨gc
) {

642 
	`ußge
(
¨gv
[0]);

646 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

648 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

649 i‡(!
dev_li°
) {

650 
	`≥º‹
("FailedÅo get IB devicesÜist");

654 i‡(!
ib_dev«me
) {

655 
ib_dev
 = *
dev_li°
;

656 i‡(!
ib_dev
) {

657 
	`Ârötf
(
°dîr
, "No IB devices found\n");

661 
i
;

662 
i
 = 0; 
dev_li°
[i]; ++i)

663 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

665 
ib_dev
 = 
dev_li°
[
i
];

666 i‡(!
ib_dev
) {

667 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

672 
˘x
 = 
	`µ_öô_˘x
(
ib_dev
, 
size
, 
rx_dïth
, 
ib_p‹t
, 
u£_evít
);

673 i‡(!
˘x
)

676 
routs
 = 
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
);

677 i‡(
routs
 < 
˘x
->
rx_dïth
) {

678 
	`Ârötf
(
°dîr
, "Couldn'àpo°Ñe˚ivê(%d)\n", 
routs
);

682 i‡(
u£_evít
)

683 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

684 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

688 i‡(
	`µ_gë_p‹t_öfo
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, &˘x->
p‹töfo
)) {

689 
	`Ârötf
(
°dîr
, "Couldn't getÖort info\n");

692 
my_de°
.
lid
 = 
˘x
->
p‹töfo
.lid;

694 
my_de°
.
q≤
 = 
˘x
->
qp
->
qp_num
;

695 
my_de°
.
p¢
 = 
	`Ã™d48
() & 0xffffff;

697 i‡(
gidx
 >= 0) {

698 i‡(
	`ibv_quîy_gid
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, 
gidx
, &
my_de°
.
gid
)) {

699 
	`Ârötf
(
°dîr
, "CouldÇot getÜocal gid for gid index "

700 "%d\n", 
gidx
);

704 
	`mem£t
(&
my_de°
.
gid
, 0,  my_dest.gid);

706 
	`öë_¡›
(
AF_INET6
, &
my_de°
.
gid
, gid,  gid);

707 
	`¥ötf
("Üocaláddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x: GID %s\n",

708 
my_de°
.
lid
, my_de°.
q≤
, my_de°.
p¢
, 
gid
);

710 i‡(
£rvî«me
)

711 
ªm_de°
 = 
	`µ_˛õ¡_exch_de°
(
£rvî«me
, 
p‹t
, &
my_de°
);

713 
ªm_de°
 = 
	`µ_£rvî_exch_de°
(
˘x
, 
ib_p‹t
, 
p‹t
, 
¶
,

714 &
my_de°
, 
gidx
);

716 i‡(!
ªm_de°
)

719 
	`öë_¡›
(
AF_INET6
, &
ªm_de°
->
gid
, gid,  gid);

720 
	`¥ötf
("Ñemoteáddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, GID %s\n",

721 
ªm_de°
->
lid
,Ñem_de°->
q≤
,Ñem_de°->
p¢
, 
gid
);

723 i‡(
£rvî«me
)

724 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
my_de°
.
p¢
, 
¶
, 
ªm_de°
,

725 
gidx
))

728 
˘x
->
≥ndög
 = 
PINGPONG_RECV_WRID
;

730 i‡(
£rvî«me
) {

731 i‡(
	`µ_po°_£nd
(
˘x
, 
ªm_de°
->
q≤
)) {

732 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

735 
˘x
->
≥ndög
 |
PINGPONG_SEND_WRID
;

738 i‡(
	`gëtimeofday
(&
°¨t
, 
NULL
)) {

739 
	`≥º‹
("gettimeofday");

743 
r˙t
 = 
s˙t
 = 0;

744 
r˙t
 < 
ôîs
 || 
s˙t
 < iters) {

745 i‡(
u£_evít
) {

746 
ibv_cq
 *
ev_cq
;

747 *
ev_˘x
;

749 i‡(
	`ibv_gë_cq_evít
(
˘x
->
ch™√l
, &
ev_cq
, &
ev_˘x
)) {

750 
	`Ârötf
(
°dîr
, "FailedÅo get cq_event\n");

754 ++
num_cq_evíts
;

756 i‡(
ev_cq
 !
˘x
->
cq
) {

757 
	`Ârötf
(
°dîr
, "CQÉvíàf‹ unknow¿CQ %p\n", 
ev_cq
);

761 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

762 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

768 
ibv_wc
 
wc
[2];

769 
√
, 
i
;

772 
√
 = 
	`ibv_pﬁl_cq
(
˘x
->
cq
, 2, 
wc
);

773 i‡(
√
 < 0) {

774 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

777 } !
u£_evít
 && 
√
 < 1);

779 
i
 = 0; i < 
√
; ++i) {

780 i‡(
wc
[
i
].
°©us
 !
IBV_WC_SUCCESS
) {

781 
	`Ârötf
(
°dîr
, "Failed status %s (%d) for wr_id %d\n",

782 
	`ibv_wc_°©us_°r
(
wc
[
i
].
°©us
),

783 
wc
[
i
].
°©us
, (Ëwc[i].
wr_id
);

787 (Ë
wc
[
i
].
wr_id
) {

788 
PINGPONG_SEND_WRID
:

789 ++
s˙t
;

792 
PINGPONG_RECV_WRID
:

793 i‡(--
routs
 <= 1) {

794 
routs
 +
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
 -Ñouts);

795 i‡(
routs
 < 
˘x
->
rx_dïth
) {

796 
	`Ârötf
(
°dîr
,

798 
routs
);

803 ++
r˙t
;

807 
	`Ârötf
(
°dîr
, "Completion for unknown wr_id %d\n",

808 (Ë
wc
[
i
].
wr_id
);

812 
˘x
->
≥ndög
 &~(Ë
wc
[
i
].
wr_id
;

813 i‡(
s˙t
 < 
ôîs
 && !
˘x
->
≥ndög
) {

814 i‡(
	`µ_po°_£nd
(
˘x
, 
ªm_de°
->
q≤
)) {

815 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

818 
˘x
->
≥ndög
 = 
PINGPONG_RECV_WRID
 |

819 
PINGPONG_SEND_WRID
;

825 i‡(
	`gëtimeofday
(&
íd
, 
NULL
)) {

826 
	`≥º‹
("gettimeofday");

831 
u£c
 = (
íd
.
tv_£c
 - 
°¨t
.tv_sec) * 1000000 +

832 (
íd
.
tv_u£c
 - 
°¨t
.tv_usec);

833 
byãs
 = (Ë
size
 * 
ôîs
 * 2;

835 
	`¥ötf
("%lld bytes in %.2f seconds = %.2f Mbit/sec\n",

836 
byãs
, 
u£c
 / 1000000., bytes * 8. / usec);

837 
	`¥ötf
("%d iters in %.2f seconds = %.2f usec/iter\n",

838 
ôîs
, 
u£c
 / 1000000., usec / iters);

841 
	`ibv_ack_cq_evíts
(
˘x
->
cq
, 
num_cq_evíts
);

843 i‡(
	`µ_˛o£_˘x
(
˘x
))

846 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

847 
	`‰ì
(
ªm_de°
);

850 
	}
}

	@libibverbs-41mlnx1/examples/umr_rc.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<sys/sockë.h
>

43 
	~<sys/time.h
>

44 
	~<√tdb.h
>

45 
	~<mÆloc.h
>

46 
	~<gë›t.h
>

47 
	~<¨∑/öë.h
>

48 
	~<time.h
>

49 
	~<as£π.h
>

51 
	~"pögp⁄g.h
"

53 #i‚de‡
mö


54 
	#mö
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

58 
	mUMR_RECV_WRID
 = 1,

59 
	mUMR_SEND_WRID
 = 2,

62 
	g∑ge_size
;

63 
	gu£_c⁄tiguous_mr
;

65 
	sumr_c⁄ãxt
 {

66 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

67 
ibv_comp_ch™√l
 *
	mch™√l
;

68 
ibv_pd
 *
	mpd
;

69 
ibv_mr
 **
	mmr_¨r
;

70 
	mnum_mrs
;

71 
ibv_mr
 *
	mumr
;

72 
ibv_exp_mkey_li°_c⁄èöî
 *
	mmkey_li°_c⁄èöî
;

73 
ibv_cq
 *
	mcq
;

74 
ibv_qp
 *
	mqp
;

75 **
	mbuf
;

76 
	msize
;

77 
	mrx_dïth
;

78 
	m≥ndög
;

79 
ibv_p‹t_©å
 
	mp‹töfo
;

80 
	möÃ_ªcv
;

83 
	sumr_de°
 {

84 
	mlid
;

85 
	mq≤
;

86 
	mp¢
;

87 
ibv_gid
 
	mgid
;

90 
	$µ_c⁄√˘_˘x
(
umr_c⁄ãxt
 *
˘x
, 
p‹t
, 
my_p¢
,

91 
ibv_mtu
 
mtu
, 
¶
,

92 
umr_de°
 *
de°
, 
sgid_idx
)

94 
ibv_qp_©å
 
©å
 = {

95 .
qp_°©e
 = 
IBV_QPS_RTR
,

96 .
∑th_mtu
 = 
mtu
,

97 .
de°_qp_num
 = 
de°
->
q≤
,

98 .
rq_p¢
 = 
de°
->
p¢
,

99 .
max_de°_rd_©omic
 = 1,

100 .
mö_∫r_timî
 = 12,

101 .
ah_©å
 = {

102 .
is_globÆ
 = 0,

103 .
dlid
 = 
de°
->
lid
,

104 .
¶
 = sl,

105 .
§c_∑th_bôs
 = 0,

106 .
p‹t_num
 = 
p‹t


110 i‡(
de°
->
gid
.
globÆ
.
öãrÁ˚_id
) {

111 
©å
.
ah_©å
.
is_globÆ
 = 1;

112 
©å
.
ah_©å
.
grh
.
h›_limô
 = 1;

113 
©å
.
ah_©å
.
grh
.
dgid
 = 
de°
->
gid
;

114 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
sgid_idx
;

116 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

117 
IBV_QP_STATE
 |

118 
IBV_QP_AV
 |

119 
IBV_QP_PATH_MTU
 |

120 
IBV_QP_DEST_QPN
 |

121 
IBV_QP_RQ_PSN
 |

122 
IBV_QP_MAX_DEST_RD_ATOMIC
 |

123 
IBV_QP_MIN_RNR_TIMER
)) {

124 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTR\n");

128 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

129 
©å
.
timeout
 = 14;

130 
©å
.
ªåy_˙t
 = 7;

131 
©å
.
∫r_ªåy
 = 7;

132 
©å
.
sq_p¢
 = 
my_p¢
;

133 
©å
.
max_rd_©omic
 = 1;

134 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

135 
IBV_QP_STATE
 |

136 
IBV_QP_TIMEOUT
 |

137 
IBV_QP_RETRY_CNT
 |

138 
IBV_QP_RNR_RETRY
 |

139 
IBV_QP_SQ_PSN
 |

140 
IBV_QP_MAX_QP_RD_ATOMIC
)) {

141 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo RTS\n");

146 
	}
}

148 
umr_de°
 *
	$µ_˛õ¡_exch_de°
(c⁄° *
£rvî«me
, 
p‹t
,

149 c⁄° 
umr_de°
 *
my_de°
)

151 
addröfo
 *
ªs
, *
t
;

152 
addröfo
 
höts
 = {

153 .
ai_Ámûy
 = 
AF_UNSPEC
,

154 .
ai_sockty≥
 = 
SOCK_STREAM


156 *
£rvi˚
;

157 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

158 
n
;

159 
sockfd
 = -1;

160 
umr_de°
 *
ªm_de°
 = 
NULL
;

161 
gid
[33];

163 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

164  
NULL
;

166 
n
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

168 i‡(
n
 < 0) {

169 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
n
), 
£rvî«me
, 
p‹t
);

170 
	`‰ì
(
£rvi˚
);

171  
NULL
;

174 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

175 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

176 i‡(
sockfd
 >= 0) {

177 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

179 
	`˛o£
(
sockfd
);

180 
sockfd
 = -1;

184 
	`‰ìaddröfo
(
ªs
);

185 
	`‰ì
(
£rvi˚
);

187 i‡(
sockfd
 < 0) {

188 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

189  
NULL
;

192 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

193 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
->
lid
, my_de°->
q≤
,

194 
my_de°
->
p¢
, 
gid
);

195 i‡(
	`wrôe
(
sockfd
, 
msg
, (msg)) != (msg)) {

196 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

197 
out
;

200 i‡(
	`ªad
(
sockfd
, 
msg
, (msg)) != (msg)) {

201 
	`≥º‹
("clientÑead");

202 
	`Ârötf
(
°dîr
, "Couldn'tÑeadÑemoteáddress\n");

203 
out
;

206 i‡(
	`wrôe
(
sockfd
, "done", ("done")) != ("done")) {

207 
	`Ârötf
(
°dîr
, "Couldn't send \"done\" msg\n");

208 
out
;

211 
ªm_de°
 = 
	`mÆloc
((*rem_dest));

212 i‡(!
ªm_de°
)

213 
out
;

215 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
->
lid
, &ªm_de°->
q≤
,

216 &
ªm_de°
->
p¢
, 
gid
);

217 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

219 
out
:

220 
	`˛o£
(
sockfd
);

221  
ªm_de°
;

222 
	}
}

224 
umr_de°
 *
	$µ_£rvî_exch_de°
(
umr_c⁄ãxt
 *
˘x
,

225 
ib_p‹t
, 
ibv_mtu
 
mtu
,

226 
p‹t
, 
¶
,

227 c⁄° 
umr_de°
 *
my_de°
,

228 
sgid_idx
)

230 
addröfo
 *
ªs
, *
t
;

231 
addröfo
 
höts
 = {

232 .
ai_Êags
 = 
AI_PASSIVE
,

233 .
ai_Ámûy
 = 
AF_UNSPEC
,

234 .
ai_sockty≥
 = 
SOCK_STREAM


236 *
£rvi˚
;

237 
msg
[ "0000:000000:000000:00000000000000000000000000000000"];

238 
n
;

239 
sockfd
 = -1, 
c⁄nfd
;

240 
umr_de°
 *
ªm_de°
 = 
NULL
;

241 
gid
[33];

243 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

244  
NULL
;

246 
n
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

248 i‡(
n
 < 0) {

249 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
n
), 
p‹t
);

250 
	`‰ì
(
£rvi˚
);

251  
NULL
;

254 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

255 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

256 i‡(
sockfd
 >= 0) {

257 
n
 = 1;

259 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, (n));

261 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

263 
	`˛o£
(
sockfd
);

264 
sockfd
 = -1;

268 
	`‰ìaddröfo
(
ªs
);

269 
	`‰ì
(
£rvi˚
);

271 i‡(
sockfd
 < 0) {

272 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

273  
NULL
;

276 
	`li°í
(
sockfd
, 1);

277 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

278 
	`˛o£
(
sockfd
);

279 i‡(
c⁄nfd
 < 0) {

280 
	`Ârötf
(
°dîr
, "accept() failed\n");

281  
NULL
;

284 
n
 = 
	`ªad
(
c⁄nfd
, 
msg
, (msg));

285 i‡(
n
 !(
msg
)) {

286 
	`≥º‹
("serverÑead");

287 
	`Ârötf
(
°dîr
, "%d/%d: Couldn'àªadÑemŸêaddªss\n", 
n
, (Ë(
msg
));

288 
out
;

291 
ªm_de°
 = 
	`mÆloc
((*rem_dest));

292 i‡(!
ªm_de°
)

293 
out
;

295 
	`ssˇnf
(
msg
, "%x:%x:%x:%s", &
ªm_de°
->
lid
, &ªm_de°->
q≤
,

296 &
ªm_de°
->
p¢
, 
gid
);

297 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

299 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
my_de°
->
p¢
, 
mtu
, 
¶
, 
ªm_de°
,

300 
sgid_idx
)) {

301 
	`Ârötf
(
°dîr
, "Couldn't connectÅoÑemote QP\n");

302 
	`‰ì
(
ªm_de°
);

303 
ªm_de°
 = 
NULL
;

304 
out
;

308 
	`gid_to_wúe_gid
(&
my_de°
->
gid
, gid);

309 
	`•rötf
(
msg
, "%04x:%06x:%06x:%s", 
my_de°
->
lid
, my_de°->
q≤
,

310 
my_de°
->
p¢
, 
gid
);

311 i‡(
	`wrôe
(
c⁄nfd
, 
msg
, (msg)) != (msg)) {

312 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

313 
	`‰ì
(
ªm_de°
);

314 
ªm_de°
 = 
NULL
;

315 
out
;

319 i‡(
	`ªad
(
c⁄nfd
, 
msg
, (msg)) <= 0) {

320 
	`Ârötf
(
°dîr
, "Couldn'tÑead \"done\" msg\n");

321 
	`‰ì
(
ªm_de°
);

322 
ªm_de°
 = 
NULL
;

323 
out
;

326 
out
:

327 
	`˛o£
(
c⁄nfd
);

328  
ªm_de°
;

329 
	}
}

331 
	$¸óã_umr
(
umr_c⁄ãxt
 *
˘x
, 
num_mrs
,

332 
u£_ª≥©_block
, 
umr_nöl_£nd
,

333 
li°_Àngth
, 
size
, 
rb_Àn
,

334 
rb_°ride
, 
rb_cou¡
)

336 
ibv_exp_¸óã_mr_ö
 
mrö
;

337 
ibv_exp_mem_ªgi⁄
 *
mem_ªg_li°
 = 
NULL
;

338 
ibv_exp_mem_ª≥©_block
 *
mem_ªp_li°
 = 
NULL
;

339 
ibv_exp_£nd_wr
 
wr
;

340 
ibv_exp_£nd_wr
 *
bad_wr
;

341 
rc
;

342 
i
, 
îr
 = 0;

343 
umr_Àn
 = 0;

344 
ibv_exp_wc
 
wc
;

345 
√
;

346 
ndim
 = 1;

347 
size_t
 *
Ωt_˙t
 = 
NULL
;

349 i‡(
u£_ª≥©_block
) {

350 
mem_ªp_li°
 = 
	`ˇŒoc
(
num_mrs
, (*mem_rep_list));

351 i‡(!
mem_ªp_li°
) {

352 
	`Ârötf
(
°dîr
, "FailedÅoállocate mkey_list\n");

356 
i
 = 0; i < 
num_mrs
; i++) {

357 
mem_ªp_li°
[
i
].
byã_cou¡
 = 
	`ˇŒoc
(
ndim
, (mem_rep_list[i].byte_count[0]));

358 i‡(!
mem_ªp_li°
[
i
].
byã_cou¡
)

359 
˛ón_mem_ªg_li°
;

361 
mem_ªp_li°
[
i
].
°ride
 = 
	`ˇŒoc
(
ndim
, (mem_rep_list[i].stride[0]));

362 i‡(!
mem_ªp_li°
[
i
].
°ride
)

363 
˛ón_mem_ªg_li°
;

366 
Ωt_˙t
 = (
size_t
 *)
	`ˇŒoc
(
ndim
, (*rpt_cnt));

367 i‡(!
Ωt_˙t
) {

368 
	`Ârötf
(
°dîr
, "FailedÅoállocateÑpt_cnt\n");

369 
îr
 = -1;

370 
˛ón_mem_ªg_li°
;

373 
i
 = 0; i < 
ndim
; i++)

374 
Ωt_˙t
[
i
] = 
rb_cou¡
;

376 
i
 = 0; i < 
num_mrs
; i++) {

377 
mem_ªp_li°
[
i
].
ba£_addr
 = (
uöt64_t
)(
uöçå_t
)
˘x
->
mr_¨r
[i]->
addr
;

378 
mem_ªp_li°
[
i
].
byã_cou¡
[0] = 
rb_Àn
;

379 
mem_ªp_li°
[
i
].
mr
 = 
˘x
->
mr_¨r
[i];

380 
mem_ªp_li°
[
i
].
°ride
[0] = 
rb_°ride
;

382 
umr_Àn
 +
rb_cou¡
 * 
mem_ªp_li°
[
i
].
byã_cou¡
[0];

385 
mem_ªg_li°
 = 
	`ˇŒoc
(
num_mrs
, (*mem_reg_list));

386 i‡(!
mem_ªg_li°
) {

387 
	`Ârötf
(
°dîr
, "FailedÅoállocate mkey_list\n");

391 
i
 = 0; i < 
num_mrs
; i++) {

392 
mem_ªg_li°
[
i
].
ba£_addr
 = (
uöt64_t
)(
uöçå_t
)
˘x
->
mr_¨r
[i]->
addr
;

393 
mem_ªg_li°
[
i
].
Àngth
 = 
˘x
->
mr_¨r
[i]->length;

394 
mem_ªg_li°
[
i
].
mr
 = 
˘x
->
mr_¨r
[i];

395 
umr_Àn
 +
mem_ªg_li°
[
i
].
Àngth
;

399 
	`mem£t
(&
mrö
, 0, (mrin));

400 
mrö
.
pd
 = 
˘x
->pd;

401 
mrö
.
©å
.
¸óã_Êags
 = 
IBV_EXP_MR_INDIRECT_KLMS
;

402 
mrö
.
©å
.
exp_ac˚ss_Êags
 = 
IBV_EXP_ACCESS_LOCAL_WRITE
;

403 
mrö
.
©å
.
max_klm_li°_size
 = 
num_mrs
;

404 
˘x
->
umr
 = 
	`ibv_exp_¸óã_mr
(&
mrö
);

405 i‡(!
˘x
->
umr
) {

406 
	`Ârötf
(
°dîr
, "FailedÅo create modified_mr\n");

407 
îr
 = -1;

408 
˛ón_Ωt_˙t
;

411 i‡(
umr_nöl_£nd
) {

412 
ibv_exp_mkey_li°_c⁄èöî_©å
 
ö
 = {

413 .
pd
 = 
˘x
->pd,

414 .
mkey_li°_ty≥
 = 
IBV_EXP_MKEY_LIST_TYPE_INDIRECT_MR
,

415 .
max_klm_li°_size
 = 
li°_Àngth


417 
˘x
->
mkey_li°_c⁄èöî
 = 
	`ibv_exp_Æloc_mkey_li°_mem‹y
(&
ö
);

418 i‡(!
˘x
->
mkey_li°_c⁄èöî
) {

419 
	`Ârötf
(
°dîr
, "FailedÅoállocateálloc_mkey_list_memory\n");

420 
îr
 = -1;

421 
˛ón_umr
;

425 
	`mem£t
(&
wr
, 0, (wr));

426 i‡(
u£_ª≥©_block
) {

427 
wr
.
ext_›
.
umr
.
umr_ty≥
 = 
IBV_EXP_UMR_REPEAT
;

428 
wr
.
ext_›
.
umr
.
mem_li°
.
rb
.
mem_ª≥©_block_li°
 = 
mem_ªp_li°
;

429 
wr
.
ext_›
.
umr
.
mem_li°
.
rb
.
°ride_dim
 = 1;

430 
wr
.
ext_›
.
umr
.
mem_li°
.
rb
.
ª≥©_cou¡
 = 
Ωt_˙t
;

432 
wr
.
ext_›
.
umr
.
umr_ty≥
 = 
IBV_EXP_UMR_MR_LIST
;

433 
wr
.
ext_›
.
umr
.
mem_li°
.
mem_ªg_li°
 = mem_reg_list;

436 i‡(
umr_nöl_£nd
)

437 
wr
.
ext_›
.
umr
.
mem‹y_obje˘s
 = 
˘x
->
mkey_li°_c⁄èöî
;

439 
wr
.
exp_£nd_Êags
 = 
IBV_EXP_SEND_INLINE
;

441 
wr
.
ext_›
.
umr
.
exp_ac˚ss
 = 
IBV_EXP_ACCESS_LOCAL_WRITE
;

442 
wr
.
ext_›
.
umr
.
modifõd_mr
 = 
˘x
->umr;

443 
wr
.
ext_›
.
umr
.
ba£_addr
 = (
uöt64_t
)(
uöçå_t
)
˘x
->
mr_¨r
[0]->
addr
;

444 
wr
.
ext_›
.
umr
.
num_mrs
 =Çum_mrs;

445 
wr
.
exp_£nd_Êags
 |
IBV_EXP_SEND_SIGNALED
;

446 
wr
.
exp_›code
 = 
IBV_EXP_WR_UMR_FILL
;

448 
rc
 = 
	`ibv_exp_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

449 i‡(
rc
) {

450 
	`Ârötf
(
°dîr
, "Failed in ibv_exp_post_send IBV_EXP_WR_UMR_FILL\n");

451 
îr
 = -1;

452 
˛ón_mkey_li°
;

455 
√
 = 0;

456 !
√
) {

457 
√
 = 
	`ibv_exp_pﬁl_cq
(
˘x
->
cq
, 1, &
wc
, (wc));

458 i‡(
√
 < 0) {

459 
	`Ârötf
(
°dîr
, "poll CQ failedáfter IBV_EXP_WR_UMR_FILL\n");

460 
övÆid©e_umr
;

464 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

465 
	`Ârötf
(
°dîr
, "com∞°©u†%d\n", 
wc
.
°©us
);

466 
övÆid©e_umr
;

469 
˘x
->
umr
->
Àngth
 = 
umr_Àn
;

470 
˘x
->
umr
->
addr
 = (*)()
wr
.
ext_›
.umr.
ba£_addr
;

472 
˛ón_Ωt_˙t
;

474 
övÆid©e_umr
:

475 
wr
.
exp_›code
 = 
IBV_EXP_WR_UMR_INVALIDATE
;

476 
	`ibv_exp_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

478 
˛ón_mkey_li°
:

479 i‡(
umr_nöl_£nd
)

480 
	`ibv_exp_dóŒoc_mkey_li°_mem‹y
(
˘x
->
mkey_li°_c⁄èöî
);

482 
˛ón_umr
:

483 
	`ibv_dîeg_mr
(
˘x
->
umr
);

485 
˛ón_Ωt_˙t
:

486 i‡(
u£_ª≥©_block
)

487 
	`‰ì
(
Ωt_˙t
);

489 
˛ón_mem_ªg_li°
:

490 i‡(
u£_ª≥©_block
) {

491 
i
 = 0; i < 
num_mrs
; i++) {

492 i‡(
mem_ªp_li°
[
i
].
°ride
)

493 
	`‰ì
(
mem_ªp_li°
[
i
].
°ride
);

494 i‡(
mem_ªp_li°
[
i
].
byã_cou¡
)

495 
	`‰ì
(
mem_ªp_li°
[
i
].
byã_cou¡
);

497 i‡(
mem_ªp_li°
)

498 
	`‰ì
(
mem_ªp_li°
);

500 i‡(
mem_ªg_li°
)

501 
	`‰ì
(
mem_ªg_li°
);

503  
îr
;

504 
	}
}

506 
umr_c⁄ãxt
 *
	$µ_öô_˘x
(
ibv_devi˚
 *
ib_dev
, 
size
,

507 
rx_dïth
, 
p‹t
,

508 
u£_evít
, 
öÃ_ªcv
,

509 
num_mrs
)

511 
umr_c⁄ãxt
 *
˘x
;

512 
ibv_exp_devi˚_©å
 
d©å
;

513 
ªt
, 
i
, 
num_Æloˇãd_bufs
 = 0;

515 
˘x
 = 
	`ˇŒoc
(1, (*ctx));

516 i‡(!
˘x
)

517  
NULL
;

519 
	`mem£t
(&
d©å
, 0, (dattr));

521 
˘x
->
num_mrs
 =Çum_mrs;

522 
˘x
->
size
 = sizê* 
num_mrs
;

523 
˘x
->
rx_dïth
 =Ñx_depth;

525 
˘x
->
buf
 = 
	`ˇŒoc
(
num_mrs
, (*));

526 i‡(!
˘x
->
buf
)

527 
˛ón_˘x
;

529 i‡(!
u£_c⁄tiguous_mr
) {

530 
i
 = 0; i < 
num_mrs
; i++) {

531 
˘x
->
buf
[
i
] = 
	`memÆign
(
∑ge_size
, 
size
);

532 i‡(!
˘x
->
buf
) {

533 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

534 
˛ón_buf„r
;

536 
num_Æloˇãd_bufs
++;

540 
˘x
->
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
ib_dev
);

541 i‡(!
˘x
->
c⁄ãxt
) {

542 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

543 
	`ibv_gë_devi˚_«me
(
ib_dev
));

544 
˛ón_buf„r
;

547 i‡(
öÃ_ªcv
)

548 
d©å
.
comp_mask
 |
IBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
;

550 
ªt
 = 
	`ibv_exp_quîy_devi˚
(
˘x
->
c⁄ãxt
, &
d©å
);

551 i‡(
öÃ_ªcv
) {

552 i‡(
ªt
) {

553 
	`¥ötf
(" Couldn't query device for inline-receive capabilities.\n");

554 } i‡(!(
d©å
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
)) {

555 
	`¥ötf
(" Inline-receiveÇot supported by driver.\n");

556 } i‡(
d©å
.
ölöe_ªcv_sz
 < 
öÃ_ªcv
) {

557 
	`¥ötf
(" Max inline-receive(%d) < Requested inline-receive(%d).\n",

558 
d©å
.
ölöe_ªcv_sz
, 
öÃ_ªcv
);

561 
˘x
->
öÃ_ªcv
 = inlr_recv;

563 
	`mem£t
(&
d©å
, 0, (dattr));

564 
d©å
.
comp_mask
 |
IBV_EXP_DEVICE_ATTR_UMR
;

565 
ªt
 = 
	`ibv_exp_quîy_devi˚
(
˘x
->
c⁄ãxt
, &
d©å
);

566 i‡(
ªt
)

567 
	`¥ötf
(" Couldn't query device for UMR capabilities.\n");

569 i‡(
u£_evít
) {

570 
˘x
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
(˘x->
c⁄ãxt
);

571 i‡(!
˘x
->
ch™√l
) {

572 
	`Ârötf
(
°dîr
, "Couldn't create completion channel\n");

573 
˛ón_devi˚
;

576 
˘x
->
ch™√l
 = 
NULL
;

579 
˘x
->
pd
 = 
	`ibv_Æloc_pd
(˘x->
c⁄ãxt
);

580 i‡(!
˘x
->
pd
) {

581 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

582 
˛ón_comp_ch™√l
;

585 
˘x
->
mr_¨r
 = 
	`ˇŒoc
(
num_mrs
, (
ibv_mr
 *));

586 
i
 = 0; i < 
num_mrs
; i++) {

587 i‡(!
u£_c⁄tiguous_mr
) {

588 
˘x
->
mr_¨r
[
i
] = 
	`ibv_ªg_mr
(˘x->
pd
, ctx->
buf
[i], 
size
,

589 
IBV_ACCESS_LOCAL_WRITE
);

591 
ibv_exp_ªg_mr_ö
 
ö
;

593 
	`mem£t
(&
ö
, 0, (in));

594 
ö
.
pd
 = 
˘x
->pd;

595 
ö
.
addr
 = 
NULL
;

596 
ö
.
Àngth
 = 
size
;

597 
ö
.
exp_ac˚ss
 = 
IBV_EXP_ACCESS_LOCAL_WRITE
 |

598 
IBV_EXP_ACCESS_ALLOCATE_MR
;

599 
ö
.
comp_mask
 = 0;

601 
˘x
->
mr_¨r
[
i
] = 
	`ibv_exp_ªg_mr
(&
ö
);

604 i‡(!
˘x
->
mr_¨r
[
i
]) {

605 
	`Ârötf
(
°dîr
, "Couldn'àªgi°î MRÇum %d\n", 
i
);

606 
˛ón_pd
;

608 i‡(
u£_c⁄tiguous_mr
)

609 
˘x
->
buf
[
i
] = ctx->
mr_¨r
[i]->
addr
;

612 
	`mem£t
(
˘x
->
buf
[
i
], i, 
size
);

615 
˘x
->
cq
 = 
	`ibv_¸óã_cq
(˘x->
c⁄ãxt
, 
rx_dïth
 + 1, 
NULL
,

616 
˘x
->
ch™√l
, 0);

617 i‡(!
˘x
->
cq
) {

618 
	`Ârötf
(
°dîr
, "Couldn't create CQ\n");

619 
˛ón_mr
;

623 
ibv_exp_qp_öô_©å
 
©å
 = {

624 .
£nd_cq
 = 
˘x
->
cq
,

625 .
ªcv_cq
 = 
˘x
->
cq
,

626 .
ˇp
 = {

627 .
max_£nd_wr
 = 200,

628 .
max_ªcv_wr
 = 
rx_dïth
,

629 .
max_£nd_sge
 = 2,

630 .
max_ªcv_sge
 = 2,

632 .
qp_ty≥
 = 
IBV_QPT_RC
,

633 .
pd
 = 
˘x
->pd,

634 .
comp_mask
 = 
IBV_EXP_QP_INIT_ATTR_PD
,

635 .
max_öl_ªcv
 = 
˘x
->
öÃ_ªcv
,

636 .
max_öl_£nd_klms
 = 
d©å
.
umr_ˇps
.
max_£nd_wqe_ölöe_klms


638 i‡(
˘x
->
öÃ_ªcv
)

639 
©å
.
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_INL_RECV
;

641 
©å
.
exp_¸óã_Êags
 |
IBV_EXP_QP_CREATE_UMR
;

642 
©å
.
comp_mask
 |
IBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 |

643 
IBV_EXP_QP_INIT_ATTR_MAX_INL_KLMS
;

644 
˘x
->
qp
 = 
	`ibv_exp_¸óã_qp
(˘x->
c⁄ãxt
, &
©å
);

646 i‡(!
˘x
->
qp
) {

647 
	`Ârötf
(
°dîr
, "Couldn'à¸óã QP,Éºnÿ%d\n", 
î∫o
);

648 
˛ón_cq
;

650 i‡(
˘x
->
öÃ_ªcv
 > 
©å
.
max_öl_ªcv
)

651 
	`¥ötf
(" Actual inline-receive(%d) <Ñequested inline-receive(%d)\n",

652 
©å
.
max_öl_ªcv
, 
˘x
->
öÃ_ªcv
);

656 
ibv_qp_©å
 
©å
 = {

657 .
qp_°©e
 = 
IBV_QPS_INIT
,

658 .
pkey_ödex
 = 0,

659 .
p‹t_num
 = 
p‹t
,

660 .
qp_ac˚ss_Êags
 = 0

663 i‡(
	`ibv_modify_qp
(
˘x
->
qp
, &
©å
,

664 
IBV_QP_STATE
 |

665 
IBV_QP_PKEY_INDEX
 |

666 
IBV_QP_PORT
 |

667 
IBV_QP_ACCESS_FLAGS
)) {

668 
	`Ârötf
(
°dîr
, "FailedÅo modify QPÅo INIT\n");

669 
˛ón_qp
;

673  
˘x
;

675 
˛ón_qp
:

676 
	`ibv_de°roy_qp
(
˘x
->
qp
);

678 
˛ón_cq
:

679 
	`ibv_de°roy_cq
(
˘x
->
cq
);

681 
˛ón_mr
:

682 
i
 = 0; i < 
num_mrs
; i++)

683 
	`ibv_dîeg_mr
(
˘x
->
mr_¨r
[
i
]);

685 
˛ón_pd
:

686 
	`ibv_dóŒoc_pd
(
˘x
->
pd
);

688 
˛ón_comp_ch™√l
:

689 i‡(
˘x
->
ch™√l
)

690 
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
);

692 
˛ón_devi˚
:

693 
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
);

695 
˛ón_buf„r
:

696 i‡(!
u£_c⁄tiguous_mr
)

697 
i
 = 0; i < 
num_Æloˇãd_bufs
; i++)

698 
	`‰ì
(
˘x
->
buf
[
i
]);

700 
	`‰ì
(
˘x
->
buf
);

702 
˛ón_˘x
:

703 
	`‰ì
(
˘x
);

705  
NULL
;

706 
	}
}

708 
	$övÆid©e_umr
(
umr_c⁄ãxt
 *
˘x
)

710 
ibv_exp_£nd_wr
 
wr
, *
bad_wr
;;

711 
ibv_exp_wc
 
wc
;

712 
rc
;

713 
√
;

715 i‡(!
˘x
->
umr
)

718 i‡(
˘x
->
umr
->
addr
) {

719 
	`mem£t
(&
wr
, 0, (wr));

720 
wr
.
exp_›code
 = 
IBV_EXP_WR_UMR_INVALIDATE
;

721 
wr
.
ext_›
.
umr
.
modifõd_mr
 = 
˘x
->umr;

722 
wr
.
exp_£nd_Êags
 = 
IBV_EXP_SEND_SIGNALED
;

723 
rc
 = 
	`ibv_exp_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

724 i‡(
rc
)

725 
	`¥ötf
("ÁûedÅÿövÆid©e_um∏(%d)\n", 
rc
);

729 
√
 = 
	`ibv_exp_pﬁl_cq
(
˘x
->
cq
, 1, &
wc
, (wc));

730 i‡(
√
 < 0) {

731 
	`Ârötf
(
°dîr
, "poll CQ failedáfter IBV_EXP_WR_UMR_FILL\n");

734 } !
√
);

736 i‡(
wc
.
°©us
 !
IBV_WC_SUCCESS
) {

737 
	`¥ötf
("com∞°©u†%d\n", 
wc
.
°©us
);

742 
	}
}

744 
	$µ_˛o£_˘x
(
umr_c⁄ãxt
 *
˘x
)

746 
i
;

748 i‡(
˘x
->
mkey_li°_c⁄èöî
) {

749 i‡(
	`ibv_exp_dóŒoc_mkey_li°_mem‹y
(
˘x
->
mkey_li°_c⁄èöî
)) {

750 
	`Ârötf
(
°dîr
, "Couldn't dealloc mkeyÜist memory\n");

755 i‡(
	`ibv_de°roy_qp
(
˘x
->
qp
)) {

756 
	`Ârötf
(
°dîr
, "Couldn't destroy QP\n");

760 i‡(
	`ibv_de°roy_cq
(
˘x
->
cq
)) {

761 
	`Ârötf
(
°dîr
, "Couldn't destroy CQ\n");

765 
i
 = 0; i < 
˘x
->
num_mrs
; i++)

766 i‡(
	`ibv_dîeg_mr
(
˘x
->
mr_¨r
[
i
])) {

767 
	`Ârötf
(
°dîr
, "Couldn't deregister MR\n");

770 
	`‰ì
(
˘x
->
mr_¨r
);

772 i‡(
	`ibv_dóŒoc_pd
(
˘x
->
pd
)) {

773 
	`Ârötf
(
°dîr
, "Couldn't deallocate PD\n");

777 i‡(
˘x
->
ch™√l
) {

778 i‡(
	`ibv_de°roy_comp_ch™√l
(
˘x
->
ch™√l
)) {

779 
	`Ârötf
(
°dîr
, "Couldn't destroy completion channel\n");

784 i‡(
	`ibv_˛o£_devi˚
(
˘x
->
c⁄ãxt
)) {

785 
	`Ârötf
(
°dîr
, "Couldn'tÑelease context\n");

789 i‡(!
u£_c⁄tiguous_mr
)

790 
i
 = 0; i < 
˘x
->
num_mrs
; i++)

791 
	`‰ì
(
˘x
->
buf
[
i
]);

793 
	`‰ì
(
˘x
->
buf
);

794 
	`‰ì
(
˘x
);

797 
	}
}

799 
	$µ_po°_ªcv
(
umr_c⁄ãxt
 *
˘x
, 
n
)

801 
ibv_sge
 
li°
 = {

802 .
addr
 = (
uöçå_t
Ë
˘x
->
umr
->addr,

803 .
Àngth
 = 
˘x
->
umr
->length,

804 .
lkey
 = 
˘x
->
umr
->lkey

806 
ibv_ªcv_wr
 
wr
 = {

807 .
wr_id
 = 
UMR_RECV_WRID
,

808 .
sg_li°
 = &
li°
,

809 .
num_sge
 = 1,

811 
ibv_ªcv_wr
 *
bad_wr
;

812 
i
;

814 
i
 = 0; i < 
n
; ++i)

815 i‡(
	`ibv_po°_ªcv
(
˘x
->
qp
, &
wr
, &
bad_wr
))

818  
i
;

819 
	}
}

821 
	$µ_po°_£nd
(
umr_c⁄ãxt
 *
˘x
)

823 
ibv_sge
 
li°
 = {

824 .
addr
 = (
uöçå_t
Ë
˘x
->
umr
->addr,

825 .
Àngth
 = 
˘x
->
umr
->length,

826 .
lkey
 = 
˘x
->
umr
->lkey

828 
ibv_£nd_wr
 
wr
 = {

829 .
wr_id
 = 
UMR_SEND_WRID
,

830 .
sg_li°
 = &
li°
,

831 .
num_sge
 = 1,

832 .
›code
 = 
IBV_WR_SEND
,

833 .
£nd_Êags
 = 
IBV_SEND_SIGNALED
,

835 
ibv_£nd_wr
 *
bad_wr
;

837  
	`ibv_po°_£nd
(
˘x
->
qp
, &
wr
, &
bad_wr
);

838 
	}
}

840 
	$ußge
(c⁄° *
¨gv0
)

842 
	`¥ötf
("Usage:\n");

843 
	`¥ötf
(" %† sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

844 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

845 
	`¥ötf
("\n");

846 
	`¥ötf
("Options:\n");

847 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

848 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

849 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

850 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 4096)\n");

851 
	`¥ötf
(" -m, --mtu=<size>Öath MTU (default 1024)\n");

852 
	`¥ötf
(" -r, --rx-depth=<dep>Çumber ofÑeceivesÅoÖostátáÅime (default 500)\n");

853 
	`¥ötf
(" -n, --iters=<iters>Çumber ofÉxchanges (default 1000)\n");

854 
	`¥ötf
(" -l, --sl=<sl> serviceÜevel value\n");

855 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

856 
	`¥ötf
(" -g, --gid-idx=<gid index>ÜocalÖort gid index\n");

857 
	`¥ötf
(" -c, --contiguous-mr use contiguous mr\n");

858 
	`¥ötf
(" -t, --inline-recv=<size> size of inline-recv\n");

859 
	`¥ötf
(" -x, --num-mrs create umr withÇum-mrs (default 3)\n");

860 
	`¥ötf
(" -u, --umr-non-inline-send use umr-non-inline send (default inline send)\n");

861 
	`¥ötf
(" -b, --repeated-block which memory block use for umr creation (default memory block)\n");

862 
	}
}

864 
	$maö
(
¨gc
, *
¨gv
[])

866 
ibv_devi˚
 **
dev_li°
;

867 
ibv_devi˚
 *
ib_dev
;

868 
umr_c⁄ãxt
 *
˘x
;

869 
umr_de°
 
my_de°
;

870 
umr_de°
 *
ªm_de°
 = 
NULL
;

871 
timevÆ
 
°¨t
, 
íd
;

872 *
ib_dev«me
 = 
NULL
;

873 *
£rvî«me
 = 
NULL
;

874 
p‹t
 = 18515;

875 
ib_p‹t
 = 1;

876 
size
 = 4096;

877 
ibv_mtu
 
mtu
 = 
IBV_MTU_1024
;

878 
rx_dïth
 = 500;

879 
ôîs
 = 1000;

880 
u£_evít
 = 0;

881 
routs
;

882 
r˙t
, 
s˙t
;

883 
num_cq_evíts
 = 0;

884 
¶
 = 0;

885 
gidx
 = -1;

886 
gid
[
INET6_ADDRSTRLEN
];

887 
öÃ_ªcv
 = 0;

888 
umr_nöl_£nd
 = 0;

889 
num_mrs
 = 3;

890 
u£_ª≥©_block
 = 0;

891 
rb_Àn
 = 50;

892 
rb_°ride
 = 100;

893 
rb_cou¡
 = 30;

894 
ibv_exp_devi˚_©å
 
d©å
;

895 
ªt
 = 0;

897 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

900 
c
;

902 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

903 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

904 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

905 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

906 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

907 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

908 { .
«me
 = "rx-dïth", .
has_¨g
 = 1, .
vÆ
 = 'r' },

909 { .
«me
 = "ôîs", .
has_¨g
 = 1, .
vÆ
 = 'n' },

910 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

911 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

912 { .
«me
 = "gid-idx", .
has_¨g
 = 1, .
vÆ
 = 'g' },

913 { .
«me
 = "c⁄tiguous-mr", .
has_¨g
 = 0, .
vÆ
 = 'c' },

914 { .
«me
 = "ölöe-ªcv", .
has_¨g
 = 1, .
vÆ
 = 't' },

915 { .
«me
 = "num-mrs", .
has_¨g
 = 1, .
vÆ
 = 'x' },

916 { .
«me
 = "umr-n⁄-ölöe-£nd", .
has_¨g
 = 0, .
vÆ
 = 'u' },

917 { .
«me
 = "ª≥©ed-block", .
has_¨g
 = 0, .
vÆ
 = 'b' },

918 { .
«me
 = "ª≥©ed-block-Àn", .
has_¨g
 = 1, .
vÆ
 = 'h' },

919 { .
«me
 = "ª≥©ed-block-°ide", .
has_¨g
 = 1, .
vÆ
 = 'k' },

920 { .
«me
 = "ª≥©ed-block-cou¡", .
has_¨g
 = 1, .
vÆ
 = 'o' },

924 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:m:r:n:l:ecg:t:x:ubh:k:o:",

925 
l⁄g_›ti⁄s
, 
NULL
);

926 i‡(
c
 == -1)

929 
c
) {

931 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

932 i‡(
p‹t
 < 0 ||Öort > 65535) {

933 
	`ußge
(
¨gv
[0]);

939 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

943 
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

944 i‡(
ib_p‹t
 < 0) {

945 
	`ußge
(
¨gv
[0]);

951 
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

955 
mtu
 = 
	`µ_mtu_to_íum
(
	`°πﬁ
(
›èrg
, 
NULL
, 0));

956 i‡(
mtu
 < 0) {

957 
	`ußge
(
¨gv
[0]);

963 
rx_dïth
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

967 
ôîs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

971 
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

975 ++
u£_evít
;

979 
gidx
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

983 ++
u£_c⁄tiguous_mr
;

987 
öÃ_ªcv
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

991 
num_mrs
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

995 ++
umr_nöl_£nd
;

999 ++
u£_ª≥©_block
;

1003 
rb_Àn
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1007 
rb_°ride
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1011 
rb_cou¡
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

1015 
	`ußge
(
¨gv
[0]);

1020 i‡(
›töd
 =
¨gc
 - 1) {

1021 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

1022 } i‡(
›töd
 < 
¨gc
) {

1023 
	`ußge
(
¨gv
[0]);

1027 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

1029 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

1030 i‡(!
dev_li°
) {

1031 
	`≥º‹
("FailedÅo get IB devicesÜist");

1035 i‡(!
ib_dev«me
) {

1036 
ib_dev
 = *
dev_li°
;

1037 i‡(!
ib_dev
) {

1038 
	`Ârötf
(
°dîr
, "No IB devices found\n");

1039 
îr
;

1042 
i
;

1043 
i
 = 0; 
dev_li°
[i]; ++i)

1044 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

1046 
ib_dev
 = 
dev_li°
[
i
];

1047 i‡(!
ib_dev
) {

1048 
	`Ârötf
(
°dîr
, "IB devi˚ %†nŸ found\n", 
ib_dev«me
);

1049 
îr
;

1053 
˘x
 = 
	`µ_öô_˘x
(
ib_dev
, 
size
, 
rx_dïth
, 
ib_p‹t
, 
u£_evít
, 
öÃ_ªcv
, 
num_mrs
);

1054 i‡(!
˘x
)

1055 
îr
;

1057 i‡(
u£_evít
)

1058 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

1059 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

1060 
˛o£_˘x
;

1063 i‡(
	`µ_gë_p‹t_öfo
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, &˘x->
p‹töfo
)) {

1064 
	`Ârötf
(
°dîr
, "Couldn't getÖort info\n");

1065 
˛o£_˘x
;

1068 
my_de°
.
lid
 = 
˘x
->
p‹töfo
.lid;

1069 i‡(
˘x
->
p‹töfo
.
lök_œyî
 !
IBV_LINK_LAYER_ETHERNET
 &&

1070 !
my_de°
.
lid
) {

1071 
	`Ârötf
(
°dîr
, "Couldn't getÜocal LID\n");

1072 
˛o£_˘x
;

1075 i‡(
gidx
 >= 0) {

1076 i‡(
	`ibv_quîy_gid
(
˘x
->
c⁄ãxt
, 
ib_p‹t
, 
gidx
, &
my_de°
.
gid
)) {

1077 
	`Ârötf
(
°dîr
, "ˇn'àªad sgid o‡ödex %d\n", 
gidx
);

1078 
˛o£_˘x
;

1081 
	`mem£t
(&
my_de°
.
gid
, 0, (my_dest.gid));

1084 
my_de°
.
q≤
 = 
˘x
->
qp
->
qp_num
;

1085 
my_de°
.
p¢
 = 
	`Ã™d48
() & 0xffffff;

1086 
	`öë_¡›
(
AF_INET6
, &
my_de°
.
gid
, gid, (gid));

1087 
	`¥ötf
("Üocaláddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, GID %s\n",

1088 
my_de°
.
lid
, my_de°.
q≤
, my_de°.
p¢
, 
gid
);

1091 i‡(
£rvî«me
)

1092 
ªm_de°
 = 
	`µ_˛õ¡_exch_de°
(
£rvî«me
, 
p‹t
, &
my_de°
);

1094 
ªm_de°
 = 
	`µ_£rvî_exch_de°
(
˘x
, 
ib_p‹t
, 
mtu
, 
p‹t
, 
¶
,

1095 &
my_de°
, 
gidx
);

1097 i‡(!
ªm_de°
)

1098 
˛o£_˘x
;

1100 
	`öë_¡›
(
AF_INET6
, &
ªm_de°
->
gid
, gid, (gid));

1101 
	`¥ötf
("Ñemoteáddress: LID 0x%04x, QPN 0x%06x, PSN 0x%06x, GID %s\n",

1102 
ªm_de°
->
lid
,Ñem_de°->
q≤
,Ñem_de°->
p¢
, 
gid
);

1104 i‡(
£rvî«me
)

1105 i‡(
	`µ_c⁄√˘_˘x
(
˘x
, 
ib_p‹t
, 
my_de°
.
p¢
, 
mtu
, 
¶
, 
ªm_de°
,

1106 
gidx
))

1107 
˛o£_˘x
;

1109 
	`mem£t
(&
d©å
, 0, (dattr));

1110 
d©å
.
comp_mask
 |
IBV_EXP_DEVICE_ATTR_UMR
;

1111 
ªt
 = 
	`ibv_exp_quîy_devi˚
(
˘x
->
c⁄ãxt
, &
d©å
);

1112 i‡(
ªt
) {

1113 
	`¥ötf
(" Couldn't query device for UMR capabilities.\n");

1114 
˛o£_˘x
;

1117 i‡(
	`¸óã_umr
(
˘x
, 
num_mrs
, 
u£_ª≥©_block
, 
umr_nöl_£nd
, 
d©å
.
umr_ˇps
.
max_klm_li°_size
,

1118 
size
, 
rb_Àn
, 
rb_°ride
, 
rb_cou¡
)) {

1119 
	`Ârötf
(
°dîr
, "FailedÅo create umr\n");

1120 
˛o£_˘x
;

1123 
routs
 = 
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
);

1124 i‡(
routs
 < 
˘x
->
rx_dïth
) {

1125 
	`Ârötf
(
°dîr
, "Couldn'àpo°Ñe˚ivê(%d)\n", 
routs
);

1126 
˛o£_umr
;

1129 
˘x
->
≥ndög
 = 
UMR_RECV_WRID
;

1131 i‡(
£rvî«me
) {

1132 i‡(
	`µ_po°_£nd
(
˘x
)) {

1133 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

1134 
˛o£_umr
;

1136 
˘x
->
≥ndög
 |
UMR_SEND_WRID
;

1139 i‡(
	`gëtimeofday
(&
°¨t
, 
NULL
)) {

1140 
	`≥º‹
("gettimeofday");

1141 
˛o£_umr
;

1144 
r˙t
 = 
s˙t
 = 0;

1145 
r˙t
 < 
ôîs
 || 
s˙t
 < iters) {

1146 i‡(
u£_evít
) {

1147 
ibv_cq
 *
ev_cq
;

1148 *
ev_˘x
;

1150 i‡(
	`ibv_gë_cq_evít
(
˘x
->
ch™√l
, &
ev_cq
, &
ev_˘x
)) {

1151 
	`Ârötf
(
°dîr
, "FailedÅo get cq_event\n");

1152 
˛o£_umr
;

1155 ++
num_cq_evíts
;

1157 i‡(
ev_cq
 !
˘x
->
cq
) {

1158 
	`Ârötf
(
°dîr
, "CQÉvíàf‹ unknow¿CQ %p\n", 
ev_cq
);

1159 
˛o£_umr
;

1162 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
->
cq
, 0)) {

1163 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

1164 
˛o£_umr
;

1169 
ibv_exp_wc
 
wc
[2];

1170 
√
, 
i
;

1173 
√
 = 
	`ibv_exp_pﬁl_cq
(
˘x
->
cq
, 2, 
wc
, (wc[0]));

1174 i‡(
√
 < 0) {

1175 
	`Ârötf
(
°dîr
, "pﬁ»CQ faûed %d\n", 
√
);

1176 
˛o£_umr
;

1178 } !
u£_evít
 && 
√
 < 1);

1180 
i
 = 0; i < 
√
; ++i) {

1181 i‡(
wc
[
i
].
°©us
 !
IBV_WC_SUCCESS
) {

1182 
	`Ârötf
(
°dîr
, "Failed status %s (%d) for wr_id %d\n",

1183 
	`ibv_wc_°©us_°r
(
wc
[
i
].
°©us
),

1184 
wc
[
i
].
°©us
, (Ëwc[i].
wr_id
);

1185 
˛o£_umr
;

1188 (Ë
wc
[
i
].
wr_id
) {

1189 
UMR_SEND_WRID
:

1190 ++
s˙t
;

1193 
UMR_RECV_WRID
:

1194 i‡(--
routs
 <= 1) {

1195 
routs
 +
	`µ_po°_ªcv
(
˘x
, ctx->
rx_dïth
 -Ñouts);

1196 i‡(
routs
 < 
˘x
->
rx_dïth
) {

1197 
	`Ârötf
(
°dîr
,

1199 
routs
);

1200 
˛o£_umr
;

1204 ++
r˙t
;

1208 
	`Ârötf
(
°dîr
, "Completion for unknown wr_id %d\n",

1209 (Ë
wc
[
i
].
wr_id
);

1210 
˛o£_umr
;

1213 
˘x
->
≥ndög
 &~(Ë
wc
[
i
].
wr_id
;

1214 i‡(
s˙t
 < 
ôîs
 && !
˘x
->
≥ndög
) {

1215 i‡(
	`µ_po°_£nd
(
˘x
)) {

1216 
	`Ârötf
(
°dîr
, "Couldn'tÖost send\n");

1217 
˛o£_umr
;

1219 
˘x
->
≥ndög
 = 
UMR_RECV_WRID
 |

1220 
UMR_SEND_WRID
;

1226 i‡(
	`gëtimeofday
(&
íd
, 
NULL
)) {

1227 
	`≥º‹
("gettimeofday");

1228 
˛o£_umr
;

1232 
u£c
 = (
íd
.
tv_£c
 - 
°¨t
.tv_sec) * 1000000 +

1233 (
íd
.
tv_u£c
 - 
°¨t
.tv_usec);

1234 
byãs
 = (Ë
size
 * 
num_mrs
 * 
ôîs
 * 2;

1236 
	`¥ötf
("%lld bytes in %.2f seconds = %.2f Mbit/sec\n",

1237 
byãs
, 
u£c
 / 1000000., bytes * 8. / usec);

1238 
	`¥ötf
("%d iters in %.2f seconds = %.2f usec/iter\n",

1239 
ôîs
, 
u£c
 / 1000000., usec / iters);

1242 
	`ibv_ack_cq_evíts
(
˘x
->
cq
, 
num_cq_evíts
);

1244 
˛o£_umr
:

1245 
	`övÆid©e_umr
(
˘x
);

1246 i‡(
	`ibv_dîeg_mr
(
˘x
->
umr
)) {

1247 
	`Ârötf
(
°dîr
, "Couldn't deregister UMR\n");

1248 
îr
;

1251 
˛o£_˘x
:

1252 i‡(!(
	`µ_˛o£_˘x
(
˘x
)))

1253 
out
;

1254 
îr
:

1255 
ªt
 = 1;

1256 
out
:

1257 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

1258 i‡(
ªm_de°
)

1259 
	`‰ì
(
ªm_de°
);

1260  
ªt
;

1261 
	}
}

	@libibverbs-41mlnx1/examples/xsrq_pingpong.c

34 #i‡
HAVE_CONFIG_H


35 
	~<c⁄fig.h
>

38 
	~<°dio.h
>

39 
	~<f˙é.h
>

40 
	~<î∫o.h
>

41 
	~<°dlib.h
>

42 
	~<uni°d.h
>

43 
	~<°rög.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/sockë.h
>

46 
	~<sys/time.h
>

47 
	~<√tdb.h
>

48 
	~<mÆloc.h
>

49 
	~<gë›t.h
>

50 
	~<¨∑/öë.h
>

51 
	~<time.h
>

53 
	~"pögp⁄g.h
"

55 
	#MSG_FORMAT
 "%04x:%06x:%06x:%06x:%04x:%32s"

	)

56 
	#MSG_SIZE
 66

	)

57 
	#MSG_SSCAN
 "%x:%x:%x:%x:%x:%s"

	)

58 
	#ADDR_FORMAT
 \

59 "%8s: LID %04x, QPN RECV %06x SEND %06x, PSN %06x, SRQN %06x, GID %32s\n"

	)

60 
	#TERMINATION_FORMAT
 "%s"

	)

61 
	#TERMINATION_MSG_SIZE
 4

	)

62 
	#TERMINATION_MSG
 "END"

	)

63 
	g∑ge_size
;

65 
	spögp⁄g_de°
 {

66 
ibv_gid
 
	mgid
;

67 
	mlid
;

68 
	mªcv_q≤
;

69 
	m£nd_q≤
;

70 
	mªcv_p¢
;

71 
	m£nd_p¢
;

72 
	m§qn
;

73 
	mµ_˙t
;

74 
	msockfd
;

77 
	spögp⁄g_c⁄ãxt
 {

78 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

79 
ibv_comp_ch™√l
 *
	mch™√l
;

80 
ibv_pd
 *
	mpd
;

81 
ibv_mr
 *
	mmr
;

82 
ibv_cq
 *
	m£nd_cq
;

83 
ibv_cq
 *
	mªcv_cq
;

84 
ibv_§q
 *
	m§q
;

85 
ibv_xrcd
 *
	mxrcd
;

86 
ibv_qp
 **
	mªcv_qp
;

87 
ibv_qp
 **
	m£nd_qp
;

88 
pögp⁄g_de°
 *
	mªm_de°
;

89 *
	mbuf
;

90 
	mlid
;

91 
	m¶
;

92 
ibv_mtu
 
	mmtu
;

93 
	mib_p‹t
;

94 
	mfd
;

95 
	msize
;

96 
	mnum_˛õ¡s
;

97 
	mnum_ã°s
;

98 
	mu£_evít
;

99 
	mgidx
;

102 
pögp⁄g_c⁄ãxt
 
	g˘x
;

105 
	$›í_devi˚
(*
ib_dev«me
)

107 
ibv_devi˚
 **
dev_li°
;

108 
i
 = 0;

110 
dev_li°
 = 
	`ibv_gë_devi˚_li°
(
NULL
);

111 i‡(!
dev_li°
) {

112 
	`Ârötf
(
°dîr
, "FailedÅo get IB devicesÜist");

116 i‡(
ib_dev«me
) {

117 ; 
dev_li°
[
i
]; ++i) {

118 i‡(!
	`°rcmp
(
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]), 
ib_dev«me
))

122 i‡(!
dev_li°
[
i
]) {

123 
	`Ârötf
(
°dîr
, "IB device %sÇot found\n",

124 
ib_dev«me
 ? ib_devname : "");

128 
˘x
.
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
dev_li°
[
i
]);

129 i‡(!
˘x
.
c⁄ãxt
) {

130 
	`Ârötf
(
°dîr
, "Couldn't get context for %s\n",

131 
	`ibv_gë_devi˚_«me
(
dev_li°
[
i
]));

135 
	`ibv_‰ì_devi˚_li°
(
dev_li°
);

137 
	}
}

139 
	$¸óã_qps
()

141 
ibv_qp_öô_©å_ex
 
öô
;

142 
ibv_qp_©å
 
mod
;

143 
i
;

145 
i
 = 0; i < 
˘x
.
num_˛õ¡s
; ++i) {

147 
	`mem£t
(&
öô
, 0,  init);

148 
öô
.
qp_ty≥
 = 
IBV_QPT_XRC_RECV
;

149 
öô
.
comp_mask
 = 
IBV_QP_INIT_ATTR_XRCD
;

150 
öô
.
xrcd
 = 
˘x
.xrcd;

152 
˘x
.
ªcv_qp
[
i
] = 
	`ibv_¸óã_qp_ex
(˘x.
c⁄ãxt
, &
öô
);

153 i‡(!
˘x
.
ªcv_qp
[
i
]) {

154 
	`Ârötf
(
°dîr
, "Couldn't createÑecv QP[%d]Érrno %d\n",

155 
i
, 
î∫o
);

159 
mod
.
qp_°©e
 = 
IBV_QPS_INIT
;

160 
mod
.
pkey_ödex
 = 0;

161 
mod
.
p‹t_num
 = 
˘x
.
ib_p‹t
;

162 
mod
.
qp_ac˚ss_Êags
 = 
IBV_ACCESS_REMOTE_WRITE
 | 
IBV_ACCESS_REMOTE_READ
;

164 i‡(
	`ibv_modify_qp
(
˘x
.
ªcv_qp
[
i
], &
mod
,

165 
IBV_QP_STATE
 | 
IBV_QP_PKEY_INDEX
 |

166 
IBV_QP_PORT
 | 
IBV_QP_ACCESS_FLAGS
)) {

167 
	`Ârötf
(
°dîr
, "FaûedÅÿmodifyÑecv QP[%d]ÅÿINIT\n", 
i
);

171 
	`mem£t
(&
öô
, 0,  init);

172 
öô
.
qp_ty≥
 = 
IBV_QPT_XRC_SEND
;

173 
öô
.
£nd_cq
 = 
˘x
.send_cq;

174 
öô
.
ˇp
.
max_£nd_wr
 = 
˘x
.
num_˛õ¡s
 * ctx.
num_ã°s
;

175 
öô
.
ˇp
.
max_£nd_sge
 = 1;

176 
öô
.
comp_mask
 = 
IBV_QP_INIT_ATTR_PD
;

177 
öô
.
pd
 = 
˘x
.pd;

179 
˘x
.
£nd_qp
[
i
] = 
	`ibv_¸óã_qp_ex
(˘x.
c⁄ãxt
, &
öô
);

180 i‡(!
˘x
.
£nd_qp
[
i
]) {

181 
	`Ârötf
(
°dîr
, "Couldn't create send QP[%d]Érrno %d\n",

182 
i
, 
î∫o
);

186 
mod
.
qp_°©e
 = 
IBV_QPS_INIT
;

187 
mod
.
pkey_ödex
 = 0;

188 
mod
.
p‹t_num
 = 
˘x
.
ib_p‹t
;

189 
mod
.
qp_ac˚ss_Êags
 = 0;

191 i‡(
	`ibv_modify_qp
(
˘x
.
£nd_qp
[
i
], &
mod
,

192 
IBV_QP_STATE
 | 
IBV_QP_PKEY_INDEX
 |

193 
IBV_QP_PORT
 | 
IBV_QP_ACCESS_FLAGS
)) {

194 
	`Ârötf
(
°dîr
, "FaûedÅÿmodify síd QP[%d]ÅÿINIT\n", 
i
);

200 
	}
}

202 
	$µ_öô_˘x
(*
ib_dev«me
)

204 
ibv_§q_öô_©å_ex
 
©å
;

205 
ibv_xrcd_öô_©å
 
xrcd_©å
;

206 
ibv_p‹t_©å
 
p‹t_©å
;

208 
˘x
.
ªcv_qp
 = 
	`ˇŒoc
(˘x.
num_˛õ¡s
,  *ctx.recv_qp);

209 
˘x
.
£nd_qp
 = 
	`ˇŒoc
(˘x.
num_˛õ¡s
,  *ctx.send_qp);

210 
˘x
.
ªm_de°
 = 
	`ˇŒoc
(˘x.
num_˛õ¡s
,  *ctx.rem_dest);

211 i‡(!
˘x
.
ªcv_qp
 || !˘x.
£nd_qp
 || !˘x.
ªm_de°
)

214 i‡(
	`›í_devi˚
(
ib_dev«me
)) {

215 
	`Ârötf
(
°dîr
, "FailedÅo open device\n");

219 i‡(
	`µ_gë_p‹t_öfo
(
˘x
.
c⁄ãxt
, ctx.
ib_p‹t
, &
p‹t_©å
)) {

220 
	`Ârötf
(
°dîr
, "FailedÅo get SLID\n");

224 
˘x
.
lid
 = 
p‹t_©å
.lid;

225 i‡(
p‹t_©å
.
lök_œyî
 !
IBV_LINK_LAYER_ETHERNET
 && !
˘x
.
lid
) {

226 
	`Ârötf
(
°dîr
, "Couldn't getÜocal LID\n");

230 
˘x
.
buf
 = 
	`memÆign
(
∑ge_size
, ctx.
size
);

231 i‡(!
˘x
.
buf
) {

232 
	`Ârötf
(
°dîr
, "Couldn'tállocate work buf.\n");

236 
	`mem£t
(
˘x
.
buf
, 0, ctx.
size
);

238 i‡(
˘x
.
u£_evít
) {

239 
˘x
.
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
(˘x.
c⁄ãxt
);

240 i‡(!
˘x
.
ch™√l
) {

241 
	`Ârötf
(
°dîr
, "Couldn't create completion channel\n");

246 
˘x
.
pd
 = 
	`ibv_Æloc_pd
(˘x.
c⁄ãxt
);

247 i‡(!
˘x
.
pd
) {

248 
	`Ârötf
(
°dîr
, "Couldn'tállocate PD\n");

252 
˘x
.
mr
 = 
	`ibv_ªg_mr
(˘x.
pd
, ctx.
buf
, ctx.
size
, 
IBV_ACCESS_LOCAL_WRITE
);

253 i‡(!
˘x
.
mr
) {

254 
	`Ârötf
(
°dîr
, "Couldn'tÑegister MR\n");

258 
˘x
.
fd
 = 
	`›í
("/tmp/xrc_domaö", 
O_RDONLY
 | 
O_CREAT
, 
S_IRUSR
 | 
S_IRGRP
);

259 i‡(
˘x
.
fd
 < 0) {

260 
	`Ârötf
(
°dîr
,

262 "buànŸ st›pög %d\n", 
î∫o
);

263 
˘x
.
fd
 = -1;

266 
	`mem£t
(&
xrcd_©å
, 0,  xrcd_attr);

267 
xrcd_©å
.
comp_mask
 = 
IBV_XRCD_INIT_ATTR_FD
 | 
IBV_XRCD_INIT_ATTR_OFLAGS
;

268 
xrcd_©å
.
fd
 = 
˘x
.fd;

269 
xrcd_©å
.
oÊags
 = 
O_CREAT
;

270 
˘x
.
xrcd
 = 
	`ibv_›í_xrcd
(˘x.
c⁄ãxt
, &
xrcd_©å
);

271 i‡(!
˘x
.
xrcd
) {

272 
	`Ârötf
(
°dîr
, "Couldn'àO≥¿thêXRC Domaö %d\n", 
î∫o
);

276 
˘x
.
ªcv_cq
 = 
	`ibv_¸óã_cq
(˘x.
c⁄ãxt
, ctx.
num_˛õ¡s
, &ctx.recv_cq,

277 
˘x
.
ch™√l
, 0);

278 i‡(!
˘x
.
ªcv_cq
) {

279 
	`Ârötf
(
°dîr
, "Couldn't createÑecv CQ\n");

283 i‡(
˘x
.
u£_evít
) {

284 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
.
ªcv_cq
, 0)) {

285 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

290 
˘x
.
£nd_cq
 = 
	`ibv_¸óã_cq
(˘x.
c⁄ãxt
, ctx.
num_˛õ¡s
, 
NULL
, NULL, 0);

291 i‡(!
˘x
.
£nd_cq
) {

292 
	`Ârötf
(
°dîr
, "Couldn't create send CQ\n");

296 
	`mem£t
(&
©å
, 0, áttr);

297 
©å
.©å.
max_wr
 = 
˘x
.
num_˛õ¡s
;

298 
©å
.©å.
max_sge
 = 1;

299 
©å
.
comp_mask
 = 
IBV_SRQ_INIT_ATTR_TYPE
 | 
IBV_SRQ_INIT_ATTR_XRCD
 |

300 
IBV_SRQ_INIT_ATTR_CQ
 | 
IBV_SRQ_INIT_ATTR_PD
;

301 
©å
.
§q_ty≥
 = 
IBV_SRQT_XRC
;

302 
©å
.
xrcd
 = 
˘x
.xrcd;

303 
©å
.
cq
 = 
˘x
.
ªcv_cq
;

304 
©å
.
pd
 = 
˘x
.pd;

306 
˘x
.
§q
 = 
	`ibv_¸óã_§q_ex
(˘x.
c⁄ãxt
, &
©å
);

307 i‡(!
˘x
.
§q
) {

308 
	`Ârötf
(
°dîr
, "Couldn't create SRQ\n");

312 i‡(
	`¸óã_qps
())

316 
	}
}

318 
	$ªcv_ãrmö©i⁄_ack
(
ödex
)

320 
msg
[
TERMINATION_MSG_SIZE
];

321 
n
 = 0, 
r
;

322 
sockfd
 = 
˘x
.
ªm_de°
[
ödex
].sockfd;

324 
n
 < 
TERMINATION_MSG_SIZE
) {

325 
r
 = 
	`ªad
(
sockfd
, 
msg
 + 
n
, 
TERMINATION_MSG_SIZE
 -Ç);

326 i‡(
r
 < 0) {

327 
	`≥º‹
("clientÑead");

328 
	`Ârötf
(
°dîr
,

330 
n
, 
TERMINATION_MSG_SIZE
);

333 
n
 +
r
;

336 i‡(
	`°rcmp
(
msg
, 
TERMINATION_MSG
)) {

337 
	`Ârötf
(
°dîr
, "InvalidÅerminationáck wasáccepted\n");

342 
	}
}

344 
	$£nd_ãrmö©i⁄_ack
(
ödex
)

346 
msg
[
TERMINATION_MSG_SIZE
];

347 
sockfd
 = 
˘x
.
ªm_de°
[
ödex
].sockfd;

349 
	`•rötf
(
msg
, 
TERMINATION_FORMAT
, 
TERMINATION_MSG
);

351 i‡(
	`wrôe
(
sockfd
, 
msg
, 
TERMINATION_MSG_SIZE
) != TERMINATION_MSG_SIZE) {

352 
	`Ârötf
(
°dîr
, "Couldn't sendÅerminationáck\n");

357 
	}
}

359 
	$µ_˛õ¡_ãrmö©i⁄
()

361 i‡(
	`£nd_ãrmö©i⁄_ack
(0))

363 i‡(
	`ªcv_ãrmö©i⁄_ack
(0))

367 
	}
}

369 
	$µ_£rvî_ãrmö©i⁄
()

371 
i
;

373 
i
 = 0; i < 
˘x
.
num_˛õ¡s
; i++) {

374 i‡(
	`ªcv_ãrmö©i⁄_ack
(
i
))

378 
i
 = 0; i < 
˘x
.
num_˛õ¡s
; i++) {

379 i‡(
	`£nd_ãrmö©i⁄_ack
(
i
))

384 
	}
}

386 
	$£nd_loˇl_de°
(
sockfd
, 
ödex
)

388 
msg
[
MSG_SIZE
];

389 
gid
[33];

390 
uöt32_t
 
§q_num
;

391 
ibv_gid
 
loˇl_gid
;

392 
˘x
.
ªm_de°
[
ödex
].
ªcv_p¢
 = 
	`Ã™d48
() & 0xffffff;

394 i‡(
˘x
.
gidx
 >= 0) {

395 i‡(
	`ibv_quîy_gid
(
˘x
.
c⁄ãxt
, ctx.
ib_p‹t
, ctx.
gidx
,

396 &
loˇl_gid
)) {

397 
	`Ârötf
(
°dîr
, "can'tÑead sgid of index %d\n",

398 
˘x
.
gidx
);

402 
	`mem£t
(&
loˇl_gid
, 0, (local_gid));

405 i‡(
	`ibv_gë_§q_num
(
˘x
.
§q
, &
§q_num
)) {

406 
	`Ârötf
(
°dîr
, "Couldn't get SRQÇum\n");

410 
	`gid_to_wúe_gid
(&
loˇl_gid
, 
gid
);

411 
	`¥ötf
(
ADDR_FORMAT
, "loˇl", 
˘x
.
lid
, ctx.
ªcv_qp
[
ödex
]->
qp_num
,

412 
˘x
.
£nd_qp
[
ödex
]->
qp_num
, ctx.
ªm_de°
[ödex].
ªcv_p¢
,

413 
§q_num
, 
gid
);

415 
	`•rötf
(
msg
, 
MSG_FORMAT
, 
˘x
.
lid
, ctx.
ªcv_qp
[
ödex
]->
qp_num
,

416 
˘x
.
£nd_qp
[
ödex
]->
qp_num
, ctx.
ªm_de°
[ödex].
ªcv_p¢
,

417 
§q_num
, 
gid
);

419 i‡(
	`wrôe
(
sockfd
, 
msg
, 
MSG_SIZE
) != MSG_SIZE) {

420 
	`Ârötf
(
°dîr
, "Couldn't sendÜocaláddress\n");

425 
	}
}

427 
	$ªcv_ªmŸe_de°
(
sockfd
, 
ödex
)

429 
msg
[
MSG_SIZE
];

430 
gid
[33];

431 
pögp⁄g_de°
 *
ªm_de°
;

432 
n
 = 0, 
r
;

434 
n
 < 
MSG_SIZE
) {

435 
r
 = 
	`ªad
(
sockfd
, 
msg
 + 
n
, 
MSG_SIZE
 -Ç);

436 i‡(
r
 < 0) {

437 
	`≥º‹
("clientÑead");

438 
	`Ârötf
(
°dîr
,

440 
n
, 
MSG_SIZE
, 
ödex
);

443 
n
 +
r
;

446 
ªm_de°
 = &
˘x
.ªm_de°[
ödex
];

447 
	`ssˇnf
(
msg
, 
MSG_SSCAN
, &
ªm_de°
->
lid
, &ªm_de°->
ªcv_q≤
,

448 &
ªm_de°
->
£nd_q≤
, &ªm_de°->
£nd_p¢
, &ªm_de°->
§qn
, 
gid
);

450 
	`wúe_gid_to_gid
(
gid
, &
ªm_de°
->gid);

451 
	`¥ötf
(
ADDR_FORMAT
, "ªmŸe", 
ªm_de°
->
lid
,Ñem_de°->
ªcv_q≤
,

452 
ªm_de°
->
£nd_q≤
,Ñem_de°->
£nd_p¢
,Ñem_de°->
§qn
, 
gid
);

454 
ªm_de°
->
sockfd
 = sockfd;

456 
	}
}

458 
	$c⁄√˘_qps
(
ödex
)

460 
ibv_qp_©å
 
©å
;

462 
	`mem£t
(&
©å
, 0, áttr);

463 
©å
.
qp_°©e
 = 
IBV_QPS_RTR
;

464 
©å
.
de°_qp_num
 = 
˘x
.
ªm_de°
[
ödex
].
£nd_q≤
;

465 
©å
.
∑th_mtu
 = 
˘x
.
mtu
;

466 
©å
.
rq_p¢
 = 
˘x
.
ªm_de°
[
ödex
].
£nd_p¢
;

467 
©å
.
mö_∫r_timî
 = 12;

468 
©å
.
ah_©å
.
dlid
 = 
˘x
.
ªm_de°
[
ödex
].
lid
;

469 
©å
.
ah_©å
.
¶
 = 
˘x
.sl;

470 
©å
.
ah_©å
.
p‹t_num
 = 
˘x
.
ib_p‹t
;

472 i‡(
˘x
.
ªm_de°
[
ödex
].
gid
.
globÆ
.
öãrÁ˚_id
) {

473 
©å
.
ah_©å
.
is_globÆ
 = 1;

474 
©å
.
ah_©å
.
grh
.
h›_limô
 = 5;

475 
©å
.
ah_©å
.
grh
.
dgid
 = 
˘x
.
ªm_de°
[
ödex
].
gid
;

476 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
˘x
.
gidx
;

479 i‡(
	`ibv_modify_qp
(
˘x
.
ªcv_qp
[
ödex
], &
©å
,

480 
IBV_QP_STATE
 | 
IBV_QP_AV
 | 
IBV_QP_PATH_MTU
 |

481 
IBV_QP_DEST_QPN
 | 
IBV_QP_RQ_PSN
 |

482 
IBV_QP_MAX_DEST_RD_ATOMIC
 | 
IBV_QP_MIN_RNR_TIMER
)) {

483 
	`Ârötf
(
°dîr
, "FaûedÅÿmodifyÑecv QP[%d]ÅÿRTR\n", 
ödex
);

487 
	`mem£t
(&
©å
, 0, áttr);

488 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

489 
©å
.
timeout
 = 14;

490 
©å
.
sq_p¢
 = 
˘x
.
ªm_de°
[
ödex
].
ªcv_p¢
;

492 i‡(
	`ibv_modify_qp
(
˘x
.
ªcv_qp
[
ödex
], &
©å
,

493 
IBV_QP_STATE
 | 
IBV_QP_TIMEOUT
 | 
IBV_QP_SQ_PSN
)) {

494 
	`Ârötf
(
°dîr
, "FaûedÅÿmodifyÑecv QP[%d]ÅÿRTS\n", 
ödex
);

498 
	`mem£t
(&
©å
, 0, áttr);

499 
©å
.
qp_°©e
 = 
IBV_QPS_RTR
;

500 
©å
.
de°_qp_num
 = 
˘x
.
ªm_de°
[
ödex
].
ªcv_q≤
;

501 
©å
.
∑th_mtu
 = 
˘x
.
mtu
;

502 
©å
.
rq_p¢
 = 
˘x
.
ªm_de°
[
ödex
].
£nd_p¢
;

503 
©å
.
ah_©å
.
dlid
 = 
˘x
.
ªm_de°
[
ödex
].
lid
;

504 
©å
.
ah_©å
.
¶
 = 
˘x
.sl;

505 
©å
.
ah_©å
.
p‹t_num
 = 
˘x
.
ib_p‹t
;

507 i‡(
˘x
.
ªm_de°
[
ödex
].
gid
.
globÆ
.
öãrÁ˚_id
) {

508 
©å
.
ah_©å
.
is_globÆ
 = 1;

509 
©å
.
ah_©å
.
grh
.
h›_limô
 = 5;

510 
©å
.
ah_©å
.
grh
.
dgid
 = 
˘x
.
ªm_de°
[
ödex
].
gid
;

511 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
˘x
.
gidx
;

514 i‡(
	`ibv_modify_qp
(
˘x
.
£nd_qp
[
ödex
], &
©å
,

515 
IBV_QP_STATE
 | 
IBV_QP_AV
 |

516 
IBV_QP_PATH_MTU
 | 
IBV_QP_DEST_QPN
 |

517 
IBV_QP_RQ_PSN
)) {

518 
	`Ârötf
(
°dîr
, "FaûedÅÿmodify síd QP[%d]ÅÿRTR\n", 
ödex
);

522 
	`mem£t
(&
©å
, 0, áttr);

523 
©å
.
qp_°©e
 = 
IBV_QPS_RTS
;

524 
©å
.
timeout
 = 14;

525 
©å
.
ªåy_˙t
 = 7;

526 
©å
.
∫r_ªåy
 = 7;

527 
©å
.
sq_p¢
 = 
˘x
.
ªm_de°
[
ödex
].
ªcv_p¢
;

529 i‡(
˘x
.
ªm_de°
[
ödex
].
gid
.
globÆ
.
öãrÁ˚_id
) {

530 
©å
.
ah_©å
.
is_globÆ
 = 1;

531 
©å
.
ah_©å
.
grh
.
h›_limô
 = 5;

532 
©å
.
ah_©å
.
grh
.
dgid
 = 
˘x
.
ªm_de°
[
ödex
].
gid
;

533 
©å
.
ah_©å
.
grh
.
sgid_ödex
 = 
˘x
.
gidx
;

536 i‡(
	`ibv_modify_qp
(
˘x
.
£nd_qp
[
ödex
], &
©å
,

537 
IBV_QP_STATE
 | 
IBV_QP_TIMEOUT
 | 
IBV_QP_SQ_PSN
 |

538 
IBV_QP_RETRY_CNT
 | 
IBV_QP_RNR_RETRY
 | 
IBV_QP_MAX_QP_RD_ATOMIC
)) {

539 
	`Ârötf
(
°dîr
, "FaûedÅÿmodify síd QP[%d]ÅÿRTS\n", 
ödex
);

544 
	}
}

546 
	$µ_˛õ¡_c⁄√˘
(c⁄° *
£rvî«me
, 
p‹t
)

548 
addröfo
 *
ªs
, *
t
;

549 *
£rvi˚
;

550 
ªt
;

551 
sockfd
 = -1;

552 
addröfo
 
höts
 = {

553 .
ai_Ámûy
 = 
AF_UNSPEC
,

554 .
ai_sockty≥
 = 
SOCK_STREAM


557 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

560 
ªt
 = 
	`gëaddröfo
(
£rvî«me
, 
£rvi˚
, &
höts
, &
ªs
);

561 i‡(
ªt
 < 0) {

562 
	`Ârötf
(
°dîr
, "%†f‹ %s:%d\n", 
	`gai_°ªº‹
(
ªt
), 
£rvî«me
, 
p‹t
);

563 
	`‰ì
(
£rvi˚
);

567 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

568 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

569 i‡(
sockfd
 >= 0) {

570 i‡(!
	`c⁄√˘
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

572 
	`˛o£
(
sockfd
);

573 
sockfd
 = -1;

577 
	`‰ìaddröfo
(
ªs
);

578 
	`‰ì
(
£rvi˚
);

580 i‡(
sockfd
 < 0) {

581 
	`Ârötf
(
°dîr
, "Couldn'àc⁄√˘Åÿ%s:%d\n", 
£rvî«me
, 
p‹t
);

585 i‡(
	`£nd_loˇl_de°
(
sockfd
, 0))

588 i‡(
	`ªcv_ªmŸe_de°
(
sockfd
, 0))

591 i‡(
	`c⁄√˘_qps
(0))

595 
	}
}

597 
	$µ_£rvî_c⁄√˘
(
p‹t
)

599 
addröfo
 *
ªs
, *
t
;

600 *
£rvi˚
;

601 
ªt
, 
i
, 
n
;

602 
sockfd
 = -1, 
c⁄nfd
;

603 
addröfo
 
höts
 = {

604 .
ai_Êags
 = 
AI_PASSIVE
,

605 .
ai_Ámûy
 = 
AF_UNSPEC
,

606 .
ai_sockty≥
 = 
SOCK_STREAM


609 i‡(
	`a•rötf
(&
£rvi˚
, "%d", 
p‹t
) < 0)

612 
ªt
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªs
);

613 i‡(
ªt
 < 0) {

614 
	`Ârötf
(
°dîr
, "%†f‹Ö‹à%d\n", 
	`gai_°ªº‹
(
ªt
), 
p‹t
);

615 
	`‰ì
(
£rvi˚
);

619 
t
 = 
ªs
;Å;Å =Å->
ai_√xt
) {

620 
sockfd
 = 
	`sockë
(
t
->
ai_Ámûy
,Å->
ai_sockty≥
,Å->
ai_¥Ÿocﬁ
);

621 i‡(
sockfd
 >= 0) {

622 
n
 = 1;

623 
	`£tsock›t
(
sockfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, Ç);

624 i‡(!
	`böd
(
sockfd
, 
t
->
ai_addr
,Å->
ai_addæí
))

626 
	`˛o£
(
sockfd
);

627 
sockfd
 = -1;

631 
	`‰ìaddröfo
(
ªs
);

632 
	`‰ì
(
£rvi˚
);

634 i‡(
sockfd
 < 0) {

635 
	`Ârötf
(
°dîr
, "Couldn'àli°íÅÿp‹à%d\n", 
p‹t
);

639 
	`li°í
(
sockfd
, 
˘x
.
num_˛õ¡s
);

641 
i
 = 0; i < 
˘x
.
num_˛õ¡s
; i++) {

642 
c⁄nfd
 = 
	`ac˚±
(
sockfd
, 
NULL
, 0);

643 i‡(
c⁄nfd
 < 0) {

644 
	`Ârötf
(
°dîr
, "ac˚±(ËÁûed f‹ clõ¡ %d\n", 
i
);

648 i‡(
	`ªcv_ªmŸe_de°
(
c⁄nfd
, 
i
))

651 i‡(
	`£nd_loˇl_de°
(
c⁄nfd
, 
i
))

654 i‡(
	`c⁄√˘_qps
(
i
))

658 
	`˛o£
(
sockfd
);

660 
	}
}

663 
	$µ_˛o£_˘x
()

665 
i
;

667 
i
 = 0; i < 
˘x
.
num_˛õ¡s
; ++i) {

669 i‡(
	`ibv_de°roy_qp
(
˘x
.
£nd_qp
[
i
])) {

670 
	`Ârötf
(
°dîr
, "Couldn'àde°roy INI QP[%d]\n", 
i
);

674 i‡(
	`ibv_de°roy_qp
(
˘x
.
ªcv_qp
[
i
])) {

675 
	`Ârötf
(
°dîr
, "Couldn'àde°roy TGT QP[%d]\n", 
i
);

679 i‡(
˘x
.
ªm_de°
[
i
].
sockfd
)

680 
	`˛o£
(
˘x
.
ªm_de°
[
i
].
sockfd
);

683 i‡(
	`ibv_de°roy_§q
(
˘x
.
§q
)) {

684 
	`Ârötf
(
°dîr
, "Couldn't destroy SRQ\n");

688 i‡(
˘x
.
xrcd
 && 
	`ibv_˛o£_xrcd
(ctx.xrcd)) {

689 
	`Ârötf
(
°dîr
, "Couldn't closeÅhe XRC Domain\n");

692 i‡(
˘x
.
fd
 >0 && 
	`˛o£
(ctx.fd)) {

693 
	`Ârötf
(
°dîr
, "Couldn't closeÅhe file forÅhe XRC Domain\n");

697 i‡(
	`ibv_de°roy_cq
(
˘x
.
£nd_cq
)) {

698 
	`Ârötf
(
°dîr
, "Couldn't destroy send CQ\n");

702 i‡(
	`ibv_de°roy_cq
(
˘x
.
ªcv_cq
)) {

703 
	`Ârötf
(
°dîr
, "Couldn't destroyÑecv CQ\n");

707 i‡(
	`ibv_dîeg_mr
(
˘x
.
mr
)) {

708 
	`Ârötf
(
°dîr
, "Couldn't deregister MR\n");

712 i‡(
	`ibv_dóŒoc_pd
(
˘x
.
pd
)) {

713 
	`Ârötf
(
°dîr
, "Couldn't deallocate PD\n");

717 i‡(
˘x
.
ch™√l
) {

718 i‡(
	`ibv_de°roy_comp_ch™√l
(
˘x
.
ch™√l
)) {

719 
	`Ârötf
(
°dîr
,

725 i‡(
	`ibv_˛o£_devi˚
(
˘x
.
c⁄ãxt
)) {

726 
	`Ârötf
(
°dîr
, "Couldn'tÑelease context\n");

730 
	`‰ì
(
˘x
.
buf
);

731 
	`‰ì
(
˘x
.
ªm_de°
);

732 
	`‰ì
(
˘x
.
£nd_qp
);

733 
	`‰ì
(
˘x
.
ªcv_qp
);

735 
	}
}

737 
	$µ_po°_ªcv
(
˙t
)

739 
ibv_sge
 
sge
;

740 
ibv_ªcv_wr
 
wr
, *
bad_wr
;

742 
sge
.
addr
 = (
uöçå_t
Ë
˘x
.
buf
;

743 
sge
.
Àngth
 = 
˘x
.
size
;

744 
sge
.
lkey
 = 
˘x
.
mr
->lkey;

746 
wr
.
√xt
 = 
NULL
;

747 
wr
.
wr_id
 = (
uöçå_t
Ë&
˘x
;

748 
wr
.
sg_li°
 = &
sge
;

749 
wr
.
num_sge
 = 1;

751 
˙t
--) {

752 i‡(
	`ibv_po°_§q_ªcv
(
˘x
.
§q
, &
wr
, &
bad_wr
)) {

753 
	`Ârötf
(
°dîr
, "FailedÅoÖostÑeceiveÅo SRQ\n");

758 
	}
}

764 
	$µ_po°_£nd
(
ödex
)

766 
ibv_sge
 
sge
;

767 
ibv_£nd_wr
 
wr
, *
bad_wr
;

768 
qpi
;

770 
sge
.
addr
 = (
uöçå_t
Ë
˘x
.
buf
;

771 
sge
.
Àngth
 = 
˘x
.
size
;

772 
sge
.
lkey
 = 
˘x
.
mr
->lkey;

774 
wr
.
wr_id
 = (
uöçå_t
Ë
ödex
;

775 
wr
.
√xt
 = 
NULL
;

776 
wr
.
sg_li°
 = &
sge
;

777 
wr
.
num_sge
 = 1;

778 
wr
.
›code
 = 
IBV_WR_SEND
;

779 
wr
.
qp_ty≥
.
xrc
.
ªmŸe_§qn
 = 
˘x
.
ªm_de°
[
ödex
].
§qn
;

781 
qpi
 = (
ödex
 + 
˘x
.
ªm_de°
[ödex].
µ_˙t
Ë% ctx.
num_˛õ¡s
;

782 
wr
.
£nd_Êags
 = (++
˘x
.
ªm_de°
[
ödex
].
µ_˙t
 >˘x.
num_ã°s
) ?

783 
IBV_SEND_SIGNALED
 : 0;

785  
	`ibv_po°_£nd
(
˘x
.
£nd_qp
[
qpi
], &
wr
, &
bad_wr
);

786 
	}
}

788 
	$föd_qp
(
q≤
)

790 
i
;

792 i‡(
˘x
.
num_˛õ¡s
 == 1)

795 
i
 = 0; i < 
˘x
.
num_˛õ¡s
; ++i)

796 i‡(
˘x
.
ªcv_qp
[
i
]->
qp_num
 =
q≤
)

797  
i
;

799 
	`Ârötf
(
°dîr
, "U«bÀÅÿföd q∞%x\n", 
q≤
);

801 
	}
}

803 
	$gë_cq_evít
()

805 
ibv_cq
 *
ev_cq
;

806 *
ev_˘x
;

808 i‡(
	`ibv_gë_cq_evít
(
˘x
.
ch™√l
, &
ev_cq
, &
ev_˘x
)) {

809 
	`Ârötf
(
°dîr
, "FailedÅo get cq_event\n");

813 i‡(
ev_cq
 !
˘x
.
ªcv_cq
) {

814 
	`Ârötf
(
°dîr
, "CQÉvíàf‹ unknow¿CQ %p\n", 
ev_cq
);

818 i‡(
	`ibv_ªq_nŸify_cq
(
˘x
.
ªcv_cq
, 0)) {

819 
	`Ârötf
(
°dîr
, "Couldn'tÑequest CQÇotification\n");

824 
	}
}

826 
	$öô
()

828 
	`§™d48
(
	`gëpid
(Ë* 
	`time
(
NULL
));

830 
˘x
.
size
 = 4096;

831 
˘x
.
ib_p‹t
 = 1;

832 
˘x
.
num_˛õ¡s
 = 1;

833 
˘x
.
num_ã°s
 = 5;

834 
˘x
.
mtu
 = 
IBV_MTU_1024
;

835 
˘x
.
¶
 = 0;

836 
˘x
.
gidx
 = -1;

837 
	}
}

839 
	$ußge
(c⁄° *
¨gv0
)

841 
	`¥ötf
("Usage:\n");

842 
	`¥ötf
(" %† sèπá sîvîánd waô f‹ c⁄√˘i⁄\n", 
¨gv0
);

843 
	`¥ötf
(" %†<ho°> c⁄√˘Åÿ£rvîáà<ho°>\n", 
¨gv0
);

844 
	`¥ötf
("\n");

845 
	`¥ötf
("Options:\n");

846 
	`¥ötf
(" -p, --port=<port>Üisten on/connectÅoÖort <port> (default 18515)\n");

847 
	`¥ötf
(" -d, --ib-dev=<dev> use IB device <dev> (default first device found)\n");

848 
	`¥ötf
(" -i, --ib-port=<port> useÖort <port> of IB device (default 1)\n");

849 
	`¥ötf
(" -s, --size=<size> size of messageÅoÉxchange (default 4096)\n");

850 
	`¥ötf
(" -m, --mtu=<size>Öath MTU (default 1024)\n");

851 
	`¥ötf
(" -c, --clients=<n>Çumber of clients (on server only, default 1)\n");

852 
	`¥ötf
(" -n, --num_tests=<n>Çumber ofÅestsÖer client (default 5)\n");

853 
	`¥ötf
(" -l, --sl=<sl> serviceÜevel value\n");

854 
	`¥ötf
(" -e, --events sleep on CQÉvents (defaultÖoll)\n");

855 
	`¥ötf
(" -g, --gid-idx=<gid index>ÜocalÖort gid index\n");

856 
	}
}

858 
	$maö
(
¨gc
, *
¨gv
[])

860 *
ib_dev«me
 = 
NULL
;

861 *
£rvî«me
 = 
NULL
;

862 
p‹t
 = 18515;

863 
i
, 
tŸÆ
, 
˙t
 = 0;

864 
√
, 
qpi
, 
num_cq_evíts
 = 0;

865 
ibv_wc
 
wc
;

867 
	`öô
();

869 
c
;

871 
›ti⁄
 
l⁄g_›ti⁄s
[] = {

872 { .
«me
 = "p‹t", .
has_¨g
 = 1, .
vÆ
 = 'p' },

873 { .
«me
 = "ib-dev", .
has_¨g
 = 1, .
vÆ
 = 'd' },

874 { .
«me
 = "ib-p‹t", .
has_¨g
 = 1, .
vÆ
 = 'i' },

875 { .
«me
 = "size", .
has_¨g
 = 1, .
vÆ
 = 's' },

876 { .
«me
 = "mtu", .
has_¨g
 = 1, .
vÆ
 = 'm' },

877 { .
«me
 = "˛õ¡s", .
has_¨g
 = 1, .
vÆ
 = 'c' },

878 { .
«me
 = "num_ã°s", .
has_¨g
 = 1, .
vÆ
 = 'n' },

879 { .
«me
 = "¶", .
has_¨g
 = 1, .
vÆ
 = 'l' },

880 { .
«me
 = "evíts", .
has_¨g
 = 0, .
vÆ
 = 'e' },

881 { .
«me
 = "gid-idx", .
has_¨g
 = 1, .
vÆ
 = 'g' },

885 
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "p:d:i:s:m:c:n:l:eg:", 
l⁄g_›ti⁄s
,

886 
NULL
);

887 i‡(
c
 == -1)

890 
c
) {

892 
p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

893 i‡(
p‹t
 < 0 ||Öort > 65535) {

894 
	`ußge
(
¨gv
[0]);

899 
ib_dev«me
 = 
	`°rdu∑
(
›èrg
);

902 
˘x
.
ib_p‹t
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

903 i‡(
˘x
.
ib_p‹t
 < 0) {

904 
	`ußge
(
¨gv
[0]);

909 
˘x
.
size
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

912 
˘x
.
mtu
 = 
	`µ_mtu_to_íum
(
	`°πﬁ
(
›èrg
, 
NULL
, 0));

913 i‡(
˘x
.
mtu
 < 0) {

914 
	`ußge
(
¨gv
[0]);

919 
˘x
.
num_˛õ¡s
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

922 
˘x
.
num_ã°s
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

925 
˘x
.
¶
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

928 
˘x
.
gidx
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

931 
˘x
.
u£_evít
 = 1;

934 
	`ußge
(
¨gv
[0]);

939 i‡(
›töd
 =
¨gc
 - 1) {

940 
£rvî«me
 = 
	`°rdu∑
(
¨gv
[
›töd
]);

941 
˘x
.
num_˛õ¡s
 = 1;

942 } i‡(
›töd
 < 
¨gc
) {

943 
	`ußge
(
¨gv
[0]);

947 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

949 i‡(
	`µ_öô_˘x
(
ib_dev«me
))

952 i‡(
	`µ_po°_ªcv
(
˘x
.
num_˛õ¡s
)) {

953 
	`Ârötf
(
°dîr
, "Couldn'tÖostÑeceives\n");

957 i‡(
£rvî«me
) {

958 i‡(
	`µ_˛õ¡_c⁄√˘
(
£rvî«me
, 
p‹t
))

961 i‡(
	`µ_£rvî_c⁄√˘
(
p‹t
))

964 
i
 = 0; i < 
˘x
.
num_˛õ¡s
; i++)

965 
	`µ_po°_£nd
(
i
);

968 
tŸÆ
 = 
˘x
.
num_˛õ¡s
 * ctx.
num_ã°s
;

969 
˙t
 < 
tŸÆ
) {

970 i‡(
˘x
.
u£_evít
) {

971 i‡(
	`gë_cq_evít
())

974 ++
num_cq_evíts
;

978 
√
 = 
	`ibv_pﬁl_cq
(
˘x
.
ªcv_cq
, 1, &
wc
);

979 i‡(
√
 < 0) {

980 
	`Ârötf
(
°dîr
, "Eº‹Öﬁlög cq %d\n", 
√
);

982 } i‡(
√
 == 0) {

986 i‡(
wc
.
°©us
) {

987 
	`Ârötf
(
°dîr
, "W‹k com∂ëi⁄Éº‹ %d\n", 
wc
.
°©us
);

991 
	`µ_po°_ªcv
(
√
);

992 
qpi
 = 
	`föd_qp
(
wc
.
qp_num
);

993 i‡(
˘x
.
ªm_de°
[
qpi
].
µ_˙t
 < ctx.
num_ã°s
)

994 
	`µ_po°_£nd
(
qpi
);

995 
˙t
 +
√
;

996 } 
√
 > 0);

999 
˙t
 = 0; c¡ < 
˘x
.
num_˛õ¡s
; c¡ +
√
) {

1000 
√
 = 
	`ibv_pﬁl_cq
(
˘x
.
£nd_cq
, 1, &
wc
);

1001 i‡(
√
 < 0) {

1002 
	`Ârötf
(
°dîr
, "Eº‹Öﬁlög cq %d\n", 
√
);

1007 i‡(
˘x
.
u£_evít
)

1008 
	`ibv_ack_cq_evíts
(
˘x
.
ªcv_cq
, 
num_cq_evíts
);

1016 i‡(
£rvî«me
) {

1017 i‡(
	`µ_˛õ¡_ãrmö©i⁄
())

1019 } i‡(
	`µ_£rvî_ãrmö©i⁄
()) {

1023 i‡(
	`µ_˛o£_˘x
())

1026 
	`¥ötf
("success\n");

1028 
	}
}

	@libibverbs-41mlnx1/include/infiniband/arch.h

33 #i‚de‡
INFINIBAND_ARCH_H


34 
	#INFINIBAND_ARCH_H


	)

36 
	~<°döt.h
>

37 
	~<ídün.h
>

38 
	~<byãsw≠.h
>

40 #ifde‡
ht⁄Œ


41 #unde‡
ht⁄Œ


44 #ifde‡
¡ohŒ


45 #unde‡
¡ohŒ


48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
ölöe
 
uöt64_t
 
	$ht⁄Œ
(
uöt64_t
 
x
Ë{  
	`bsw≠_64
(x); 
	}
}

50 
ölöe
 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
Ë{  
	`bsw≠_64
(x); 
	}
}

51 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


52 
ölöe
 
uöt64_t
 
	$ht⁄Œ
(
uöt64_t
 
x
Ë{  x; 
	}
}

53 
ölöe
 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
Ë{  x; 
	}
}

55 #îr‹ 
__BYTE_ORDER
 
is
 
√ôhî
 
__LITTLE_ENDIAN
 
n‹
 
__BIG_ENDIAN


58 #i‚de‡
htobe64


59 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


60 
	#htobe64
(
x
Ë
	`bsw≠_64
(x)

	)

61 
	#be64toh
(
x
Ë
	`bsw≠_64
(x)

	)

63 
	#htobe64
(
x
Ë((
uöt64_t
)x)

	)

64 
	#be64toh
(
x
Ë((
uöt64_t
)x)

	)

83 #i‡
deföed
(
__i386__
)

85 
	#mb
(Ë
asm
 vﬁ©ûe("lock;ádd»$0,0(%%e•Ë" ::: "mem‹y")

	)

86 
	#rmb
(Ë
	`mb
()

	)

87 
	#wmb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

88 
	#wc_wmb
(Ë
	`mb
()

	)

89 
	#nc_wmb
(Ë
	`wmb
()

	)

91 #ñi‡
deföed
(
__x86_64__
)

93 
	#mb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

94 
	#rmb
(Ë
	`mb
()

	)

95 
	#wmb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

96 
	#wc_wmb
(Ë
asm
 vﬁ©ûe("s„n˚" ::: "mem‹y")

	)

97 
	#nc_wmb
(Ë
	`wmb
()

	)

98 
	#WC_AUTO_EVICT_SIZE
 64

	)

100 #ñi‡
deföed
(
__PPC64__
)

102 
	#mb
(Ë
asm
 vﬁ©ûe("sync" ::: "mem‹y")

	)

103 
	#rmb
(Ë
asm
 vﬁ©ûe("lwsync" ::: "mem‹y")

	)

104 
	#wmb
(Ë
	`mb
()

	)

105 
	#wc_wmb
(Ë
	`mb
()

	)

106 
	#nc_wmb
(Ë
	`mb
()

	)

107 
	#WC_AUTO_EVICT_SIZE
 64

	)

109 #ñi‡
deföed
(
__ü64__
)

111 
	#mb
(Ë
asm
 vﬁ©ûe("mf" ::: "mem‹y")

	)

112 
	#rmb
(Ë
	`mb
()

	)

113 
	#wmb
(Ë
	`mb
()

	)

114 
	#wc_wmb
(Ë
asm
 vﬁ©ûe("fwb" ::: "mem‹y")

	)

115 
	#nc_wmb
(Ë
	`wmb
()

	)

117 #ñi‡
deföed
(
__PPC__
)

119 
	#mb
(Ë
asm
 vﬁ©ûe("sync" ::: "mem‹y")

	)

120 
	#rmb
(Ë
	`mb
()

	)

121 
	#wmb
(Ë
	`mb
()

	)

122 
	#wc_wmb
(Ë
	`wmb
()

	)

123 
	#nc_wmb
(Ë
	`wmb
()

	)

125 #ñi‡
deföed
(
__•¨c_v9__
)

127 
	#mb
(Ë
asm
 vﬁ©ûe("memb¨ #LﬂdLﬂd | #LﬂdSt‹ê| #St‹eSt‹ê| #St‹eLﬂd" ::: "mem‹y")

	)

128 
	#rmb
(Ë
asm
 vﬁ©ûe("memb¨ #LﬂdLﬂd" ::: "mem‹y")

	)

129 
	#wmb
(Ë
asm
 vﬁ©ûe("memb¨ #St‹eSt‹e" ::: "mem‹y")

	)

130 
	#wc_wmb
(Ë
	`wmb
()

	)

131 
	#nc_wmb
(Ë
	`wmb
()

	)

133 #ñi‡
deföed
(
__•¨c__
)

135 
	#mb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

136 
	#rmb
(Ë
	`mb
()

	)

137 
	#wmb
(Ë
	`mb
()

	)

138 
	#wc_wmb
(Ë
	`wmb
()

	)

139 
	#nc_wmb
(Ë
	`wmb
()

	)

141 #ñi‡
deföed
(
__Ørch64__
)

144 
	#mb
(Ë
asm
 vﬁ©ûe("dsb sy" ::: "mem‹y")

	)

145 
	#rmb
(Ë
asm
 vﬁ©ûe("dsbÜd" ::: "mem‹y")

	)

146 
	#wmb
(Ë
asm
 vﬁ©ûe("dsb st" ::: "mem‹y")

	)

147 
	#wc_wmb
(Ë
	`wmb
()

	)

148 
	#nc_wmb
(Ë
	`wmb
()

	)

150 #ñi‡
deföed
(
__s390x__
)

152 
	#mb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

153 
	#rmb
(Ë
	`mb
()

	)

154 
	#wmb
(Ë
	`mb
()

	)

155 
	#wc_wmb
(Ë
	`wmb
()

	)

156 
	#nc_wmb
(Ë
	`wmb
()

	)

160 #îr‹ 
No
 
¨chôe˘uª
 
•ecific
 
mem‹y
 
b¨rõr
 
deföes
 
found
!

164 #i‡
deföed
(
__x86_64__
Ë|| deföed(
__i386__
)

165 
ölöe
 
	$˝u_ªœx
()

167 
__asm__
 
	`__vﬁ©ûe__
("rep;nop":::"memory");

168 
	}
}

169 #ñi‡
deföed
(
__PPC64__
)

170 
ölöe
 
	$˝u_ªœx
()

172 
__asm__
 
	`__vﬁ©ûe__
("or 1,1,1 #ÜowÖriority");

173 
__asm__
 
	`__vﬁ©ûe__
("or 2,2,2 # mediumÖriority");

174 
	`mb
();

175 
	}
}

176 #ñi‡
deföed
(
__PPC__
)

177 
ölöe
 
	$˝u_ªœx
()

179 
	`mb
();

180 
	}
}

182 
ölöe
 
	$˝u_ªœx
()

184 
	}
}

187 #ifde‡
WC_AUTO_EVICT_SIZE


188 
ölöe
 
	$wc_auto_evi˘_size
(Ë{  
WC_AUTO_EVICT_SIZE
; 
	}
};

190 
ölöe
 
	$wc_auto_evi˘_size
(Ë{  0; 
	}
};

	@libibverbs-41mlnx1/include/infiniband/driver.h

35 #i‚de‡
INFINIBAND_DRIVER_H


36 
	#INFINIBAND_DRIVER_H


	)

38 
	~<öföib™d/vîbs.h
>

39 
	~<öföib™d/kîn-abi.h
>

41 #ifde‡
__˝lu•lus


42 
	#BEGIN_C_DECLS
 "C" {

	)

43 
	#END_C_DECLS
 }

	)

45 
	#BEGIN_C_DECLS


	)

46 
	#END_C_DECLS


	)

54 
	#IBV_DEVICE_LIBRARY_EXTENSION
 
rdmav2


	)

56 
	evîbs_xrcd_mask
 {

57 
VERBS_XRCD_HANDLE
 = 1 << 0,

58 
VERBS_XRCD_RESERVED
 = 1 << 1

61 
	svîbs_xrcd
 {

62 
ibv_xrcd
 
	mxrcd
;

63 
uöt32_t
 
	mcomp_mask
;

64 
uöt32_t
 
	mh™dÀ
;

67 
	evîbs_§q_mask
 {

68 
	mVERBS_SRQ_TYPE
 = 1 << 0,

69 
	mVERBS_SRQ_XRCD
 = 1 << 1,

70 
	mVERBS_SRQ_CQ
 = 1 << 2,

71 
	mVERBS_SRQ_NUM
 = 1 << 3,

72 
	mVERBS_SRQ_RESERVED
 = 1 << 4

75 
	svîbs_§q
 {

76 
ibv_§q
 
	m§q
;

77 
uöt32_t
 
	mcomp_mask
;

78 
ibv_§q_ty≥
 
	m§q_ty≥
;

79 
vîbs_xrcd
 *
	mxrcd
;

80 
ibv_cq
 *
	mcq
;

81 
uöt32_t
 
	m§q_num
;

84 
	evîbs_qp_mask
 {

85 
	mVERBS_QP_XRCD
 = 1 << 0,

86 
	mVERBS_QP_RESERVED
 = 1 << 1

89 
	svîbs_qp
 {

90 
ibv_qp
 
	mqp
;

91 
uöt32_t
 
	mcomp_mask
;

92 
vîbs_xrcd
 *
	mxrcd
;

94 
	gibv_devi˚
 *(*
	tibv_drivî_öô_func
)(c⁄° *
	tuvîbs_sys_∑th
,

95 
	tabi_vîsi⁄
);

96 
	gvîbs_devi˚
 *(*
	tvîbs_drivî_öô_func
)(c⁄° *
	tuvîbs_sys_∑th
,

97 
	tabi_vîsi⁄
);

99 
ibv_ªgi°î_drivî
(c⁄° *
«me
, 
ibv_drivî_öô_func
 
öô_func
);

100 
vîbs_ªgi°î_drivî
(c⁄° *
«me
, 
vîbs_drivî_öô_func
 
öô_func
);

101 
ibv_cmd_gë_c⁄ãxt
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_gë_c⁄ãxt
 *
cmd
,

102 
size_t
 
cmd_size
, 
ibv_gë_c⁄ãxt_ª•
 *
ª•
,

103 
size_t
 
ª•_size
);

104 
ibv_cmd_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

105 
ibv_devi˚_©å
 *
devi˚_©å
,

106 
uöt64_t
 *
øw_fw_vî
,

107 
ibv_quîy_devi˚
 *
cmd
, 
size_t
 
cmd_size
);

108 
ibv_cmd_quîy_devi˚_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

109 c⁄° 
ibv_quîy_devi˚_ex_öput
 *
öput
,

110 
ibv_devi˚_©å_ex
 *
©å
, 
size_t
 
©å_size
,

111 
uöt64_t
 *
øw_fw_vî
,

112 
ibv_quîy_devi˚_ex
 *
cmd
,

113 
size_t
 
cmd_c‹e_size
,

114 
size_t
 
cmd_size
,

115 
ibv_quîy_devi˚_ª•_ex
 *
ª•
,

116 
size_t
 
ª•_c‹e_size
,

117 
size_t
 
ª•_size
);

118 
ibv_cmd_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

119 
ibv_p‹t_©å
 *
p‹t_©å
,

120 
ibv_quîy_p‹t
 *
cmd
, 
size_t
 
cmd_size
);

121 
ibv_cmd_quîy_gid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

122 
ödex
, 
ibv_gid
 *
gid
);

123 
ibv_cmd_quîy_pkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

124 
ödex
, 
uöt16_t
 *
pkey
);

125 
ibv_cmd_Æloc_pd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_pd
 *
pd
,

126 
ibv_Æloc_pd
 *
cmd
, 
size_t
 
cmd_size
,

127 
ibv_Æloc_pd_ª•
 *
ª•
, 
size_t
 
ª•_size
);

128 
ibv_cmd_dóŒoc_pd
(
ibv_pd
 *
pd
);

129 
ibv_cmd_›í_xrcd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
vîbs_xrcd
 *
xrcd
,

130 
vxrcd_size
,

131 
ibv_xrcd_öô_©å
 *
©å
,

132 
ibv_›í_xrcd
 *
cmd
, 
size_t
 
cmd_size
,

133 
ibv_›í_xrcd_ª•
 *
ª•
,

134 
size_t
 
ª•_size
);

135 
ibv_cmd_˛o£_xrcd
(
vîbs_xrcd
 *
xrcd
);

136 
	#IBV_CMD_REG_MR_HAS_RESP_PARAMS


	)

137 
ibv_cmd_ªg_mr
(
ibv_pd
 *
pd
, *
addr
, 
size_t
 
Àngth
,

138 
uöt64_t
 
hˇ_va
, 
ac˚ss
,

139 
ibv_mr
 *
mr
, 
ibv_ªg_mr
 *
cmd
,

140 
size_t
 
cmd_size
,

141 
ibv_ªg_mr_ª•
 *
ª•
, 
size_t
 
ª•_size
);

142 
ibv_cmd_ªªg_mr
(
ibv_mr
 *
mr
, 
uöt32_t
 
Êags
, *
addr
,

143 
size_t
 
Àngth
, 
uöt64_t
 
hˇ_va
, 
ac˚ss
,

144 
ibv_pd
 *
pd
, 
ibv_ªªg_mr
 *
cmd
,

145 
size_t
 
cmd_sz
, 
ibv_ªªg_mr_ª•
 *
ª•
,

146 
size_t
 
ª•_sz
);

147 
ibv_cmd_dîeg_mr
(
ibv_mr
 *
mr
);

148 
ibv_cmd_Æloc_mw
(
ibv_pd
 *
pd
, 
ibv_mw_ty≥
 
ty≥
,

149 
ibv_mw
 *
mw
, 
ibv_Æloc_mw
 *
cmd
,

150 
size_t
 
cmd_size
,

151 
ibv_Æloc_mw_ª•
 *
ª•
, 
size_t
 
ª•_size
);

152 
ibv_cmd_dóŒoc_mw
(
ibv_mw
 *
mw
,

153 
ibv_dóŒoc_mw
 *
cmd
, 
size_t
 
cmd_size
);

154 
ibv_cmd_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

155 
ibv_comp_ch™√l
 *
ch™√l
,

156 
comp_ve˘‹
, 
ibv_cq
 *
cq
,

157 
ibv_¸óã_cq
 *
cmd
, 
size_t
 
cmd_size
,

158 
ibv_¸óã_cq_ª•
 *
ª•
, 
size_t
 
ª•_size
);

159 
ibv_cmd_pﬁl_cq
(
ibv_cq
 *
cq
, 
√
, 
ibv_wc
 *
wc
);

160 
ibv_cmd_ªq_nŸify_cq
(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
);

161 
	#IBV_CMD_RESIZE_CQ_HAS_RESP_PARAMS


	)

162 
ibv_cmd_ªsize_cq
(
ibv_cq
 *
cq
, 
cqe
,

163 
ibv_ªsize_cq
 *
cmd
, 
size_t
 
cmd_size
,

164 
ibv_ªsize_cq_ª•
 *
ª•
, 
size_t
 
ª•_size
);

165 
ibv_cmd_de°roy_cq
(
ibv_cq
 *
cq
);

167 
ibv_cmd_¸óã_§q
(
ibv_pd
 *
pd
,

168 
ibv_§q
 *
§q
, 
ibv_§q_öô_©å
 *
©å
,

169 
ibv_¸óã_§q
 *
cmd
, 
size_t
 
cmd_size
,

170 
ibv_¸óã_§q_ª•
 *
ª•
, 
size_t
 
ª•_size
);

171 
ibv_cmd_¸óã_§q_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

172 
vîbs_§q
 *
§q
, 
v§q_sz
,

173 
ibv_§q_öô_©å_ex
 *
©å_ex
,

174 
ibv_¸óã_x§q
 *
cmd
, 
size_t
 
cmd_size
,

175 
ibv_¸óã_§q_ª•
 *
ª•
, 
size_t
 
ª•_size
);

176 
ibv_cmd_modify_§q
(
ibv_§q
 *
§q
,

177 
ibv_§q_©å
 *
§q_©å
,

178 
§q_©å_mask
,

179 
ibv_modify_§q
 *
cmd
, 
size_t
 
cmd_size
);

180 
ibv_cmd_quîy_§q
(
ibv_§q
 *
§q
,

181 
ibv_§q_©å
 *
§q_©å
,

182 
ibv_quîy_§q
 *
cmd
, 
size_t
 
cmd_size
);

183 
ibv_cmd_de°roy_§q
(
ibv_§q
 *
§q
);

185 
ibv_cmd_¸óã_qp
(
ibv_pd
 *
pd
,

186 
ibv_qp
 *
qp
, 
ibv_qp_öô_©å
 *
©å
,

187 
ibv_¸óã_qp
 *
cmd
, 
size_t
 
cmd_size
,

188 
ibv_¸óã_qp_ª•
 *
ª•
, 
size_t
 
ª•_size
);

189 
ibv_cmd_›í_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

190 
vîbs_qp
 *
qp
, 
vqp_sz
,

191 
ibv_qp_›í_©å
 *
©å
,

192 
ibv_›í_qp
 *
cmd
, 
size_t
 
cmd_size
,

193 
ibv_¸óã_qp_ª•
 *
ª•
, 
size_t
 
ª•_size
);

194 
ibv_cmd_quîy_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
qp_©å
,

195 
©å_mask
,

196 
ibv_qp_öô_©å
 *
qp_öô_©å
,

197 
ibv_quîy_qp
 *
cmd
, 
size_t
 
cmd_size
);

198 
ibv_cmd_modify_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

199 
©å_mask
,

200 
ibv_modify_qp
 *
cmd
, 
size_t
 
cmd_size
);

201 
ibv_cmd_de°roy_qp
(
ibv_qp
 *
qp
);

202 
ibv_cmd_po°_£nd
(
ibv_qp
 *
ibqp
, 
ibv_£nd_wr
 *
wr
,

203 
ibv_£nd_wr
 **
bad_wr
);

204 
ibv_cmd_po°_ªcv
(
ibv_qp
 *
ibqp
, 
ibv_ªcv_wr
 *
wr
,

205 
ibv_ªcv_wr
 **
bad_wr
);

206 
ibv_cmd_po°_§q_ªcv
(
ibv_§q
 *
§q
, 
ibv_ªcv_wr
 *
wr
,

207 
ibv_ªcv_wr
 **
bad_wr
);

208 
ibv_cmd_¸óã_ah
(
ibv_pd
 *
pd
, 
ibv_ah
 *
ah
,

209 
ibv_ah_©å
 *
©å
,

210 
ibv_¸óã_ah_ª•
 *
ª•
,

211 
size_t
 
ª•_size
);

212 
ibv_cmd_de°roy_ah
(
ibv_ah
 *
ah
);

213 
ibv_cmd_©èch_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

214 
ibv_cmd_dëach_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

216 
ibv_exp_Êow
 *
ibv_exp_cmd_¸óã_Êow
(
ibv_qp
 *
qp
,

217 
ibv_exp_Êow_©å
 *
Êow_©å
);

218 
ibv_exp_cmd_de°roy_Êow
(
ibv_exp_Êow
 *
Êow_id
);

219 
ibv_Êow
 *
ibv_cmd_¸óã_Êow
(
ibv_qp
 *
qp
,

220 
ibv_Êow_©å
 *
Êow_©å
);

221 
ibv_cmd_de°roy_Êow
(
ibv_Êow
 *
Êow_id
);

223 
ibv_d⁄tf‹k_ønge
(*
ba£
, 
size_t
 
size
);

224 
ibv_dof‹k_ønge
(*
ba£
, 
size_t
 
size
);

226 
c›y_quîy_dev_fõlds
(
ibv_devi˚_©å
 *
devi˚_©å
,

227 
ibv_quîy_devi˚_ª•
 *
ª•
,

228 
uöt64_t
 *
øw_fw_vî
);

232 c⁄° *
ibv_gë_sysfs_∑th
();

234 
ibv_ªad_sysfs_fûe
(c⁄° *
dú
, c⁄° *
fûe
,

235 *
buf
, 
size_t
 
size
);

237 
ölöe
 
	$vîbs_gë_§q_num
(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
)

239 
vîbs_§q
 *
v§q
 = 
	`c⁄èöî_of
(
§q
, verbs_srq, srq);

240 i‡(
v§q
->
comp_mask
 & 
VERBS_SRQ_NUM
) {

241 *
§q_num
 = 
v§q
->srq_num;

244  
ENOSYS
;

245 
	}
}

	@libibverbs-41mlnx1/include/infiniband/driver_exp.h

35 #i‚de‡
INFINIBAND_DRIVER_EXP_H


36 
	#INFINIBAND_DRIVER_EXP_H


	)

38 
	~<öföib™d/vîbs_exp.h
>

39 
	~<öföib™d/drivî.h
>

40 
	~<öföib™d/kîn-abi_exp.h
>

42 
ibv_exp_cmd_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

43 
ibv_exp_devi˚_©å
 *
devi˚_©å
,

44 
uöt64_t
 *
øw_fw_vî
,

45 
ibv_exp_quîy_devi˚
 *
cmd
, 
size_t
 
cmd_size
);

46 
ibv_exp_cmd_¸óã_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

47 
vîbs_qp
 *
qp
, 
vqp_sz
,

48 
ibv_exp_qp_öô_©å
 *
©å_exp
,

49 *
cmd_buf
, 
size_t
 
lib_cmd_size
, size_à
drv_cmd_size
,

50 *
ª•_buf
, 
size_t
 
lib_ª•_size
, size_à
drv_ª•_size
,

51 
f‹˚_exp
);

52 
ibv_exp_cmd_¸óã_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

53 
ibv_exp_d˘
 *
d˘
,

54 
ibv_exp_d˘_öô_©å
 *
©å
,

55 
ibv_exp_¸óã_d˘
 *
cmd
,

56 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

57 
ibv_exp_¸óã_d˘_ª•
 *
ª•
,

58 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

59 
ibv_exp_cmd_de°roy_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

60 
ibv_exp_d˘
 *
d˘
,

61 
ibv_exp_de°roy_d˘
 *
cmd
,

62 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

63 
ibv_exp_de°roy_d˘_ª•
 *
ª•
,

64 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

65 
ibv_exp_cmd_quîy_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

66 
ibv_exp_quîy_d˘
 *
cmd
,

67 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

68 
ibv_exp_quîy_d˘_ª•
 *
ª•
,

69 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
,

70 
ibv_exp_d˘_©å
 *
©å
);

71 
ibv_exp_cmd_¨m_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

72 
ibv_exp_¨m_©å
 *
©å
,

73 
ibv_exp_¨m_d˘
 *
cmd
,

74 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

75 
ibv_exp_¨m_d˘_ª•
 *
ª•
,

76 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

77 
ibv_exp_cmd_modify_cq
(
ibv_cq
 *
cq
,

78 
ibv_exp_cq_©å
 *
©å
,

79 
©å_mask
,

80 
ibv_exp_modify_cq
 *
cmd
, 
size_t
 
cmd_size
);

81 
ibv_exp_cmd_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

82 
ibv_comp_ch™√l
 *
ch™√l
,

83 
comp_ve˘‹
, 
ibv_cq
 *
cq
,

84 
ibv_exp_¸óã_cq
 *
cmd
, 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

85 
ibv_¸óã_cq_ª•
 *
ª•
, 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
,

86 
ibv_exp_cq_öô_©å
 *
©å
);

87 
ibv_exp_cmd_modify_qp
(
ibv_qp
 *
qp
, 
ibv_exp_qp_©å
 *
©å
,

88 
uöt64_t
 
©å_mask
, 
ibv_exp_modify_qp
 *
cmd
,

89 
size_t
 
cmd_size
);

90 
ibv_exp_cmd_¸óã_mr
(
ibv_exp_¸óã_mr_ö
 *
ö
, 
ibv_mr
 *
mr
,

91 
ibv_exp_¸óã_mr
 *
cmd
, 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

92 
ibv_exp_¸óã_mr_ª•
 *
ª•
, 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

93 
ibv_exp_cmd_quîy_mkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

94 
ibv_mr
 *
mr
,

95 
ibv_exp_mkey_©å
 *
mkey_©å
,

96 
ibv_exp_quîy_mkey
 *
cmd
, 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

97 
ibv_exp_quîy_mkey_ª•
 *
ª•
, 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

98 
ibv_cmd_exp_ªg_mr
(c⁄° 
ibv_exp_ªg_mr_ö
 *
mr_öô_©å
,

99 
uöt64_t
 
hˇ_va
, 
ibv_mr
 *
mr
,

100 
ibv_exp_ªg_mr
 *
cmd
,

101 
size_t
 
cmd_size
,

102 
ibv_exp_ªg_mr_ª•
 *
ª•
,

103 
size_t
 
ª•_size
);

104 
ibv_cmd_exp_¥e„tch_mr
(
ibv_mr
 *
mr
,

105 
ibv_exp_¥e„tch_©å
 *
©å
);

106 
ibv_exp_cmd_¸óã_wq
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

107 
ibv_exp_wq_öô_©å
 *
wq_öô_©å
,

108 
ibv_exp_wq
 *
wq
,

109 
ibv_exp_¸óã_wq
 *
cmd
,

110 
size_t
 
cmd_c‹e_size
,

111 
size_t
 
cmd_size
,

112 
ibv_exp_¸óã_wq_ª•
 *
ª•
,

113 
size_t
 
ª•_c‹e_size
,

114 
size_t
 
ª•_size
);

115 
ibv_exp_cmd_de°roy_wq
(
ibv_exp_wq
 *
wq
);

116 
ibv_exp_cmd_modify_wq
(
ibv_exp_wq
 *
wq
, 
ibv_exp_wq_©å
 *
©å
,

117 
ib_exp_modify_wq
 *
cmd
, 
size_t
 
cmd_size
);

118 
ibv_exp_cmd_¸óã_rwq_öd_èbÀ
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

119 
ibv_exp_rwq_öd_èbÀ_öô_©å
 *
öô_©å
,

120 
ibv_exp_rwq_öd_èbÀ
 *
rwq_öd_èbÀ
,

121 
ibv_exp_¸óã_rwq_öd_èbÀ
 *
cmd
,

122 
size_t
 
cmd_c‹e_size
,

123 
size_t
 
cmd_size
,

124 
ibv_exp_¸óã_rwq_öd_èbÀ_ª•
 *
ª•
,

125 
size_t
 
ª•_c‹e_size
,

126 
size_t
 
ª•_size
);

127 
ibv_exp_cmd_de°roy_rwq_öd_èbÀ
(
ibv_exp_rwq_öd_èbÀ
 *
rwq_öd_èbÀ
);

128 
ibv_exp_cmd_¸óã_§q
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
vîbs_§q
 *
§q
,

129 
ibv_exp_¸óã_§q_©å
 *
©å
,

130 
ibv_exp_¸óã_§q
 *
cmd
,

131 
size_t
 
cmd_c‹e_size
, size_à
cmd_size
,

132 
ibv_exp_¸óã_§q_ª•
 *
ª•
,

133 
size_t
 
ª•_c‹e_size
, size_à
ª•_size
);

146 
ibv_exp_cmd_gëív
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

147 c⁄° *
«me
, *
vÆue
, 
size_t
 
n
);

149 
ibv_exp_cmd_£t_c⁄ãxt_©å
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

150 
ibv_exp_›í_devi˚_©å
 *
©å
,

151 
ibv_exp_cmd_£t_c⁄ãxt_©å
 *
cmd
,

152 
size_t
 
cmd_size
);

153 
ibv_exp_cmd_Æloc_dm
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

154 
ibv_exp_Æloc_dm_©å
 *
©å
,

155 
ibv_exp_dm
 *
dm
, *
°¨t_addr
,

156 
ibv_exp_Æloc_dm
 *
cmd
,

157 
size_t
 
cmd_c‹e_size
,

158 
size_t
 
cmd_size
,

159 
ibv_exp_Æloc_dm_ª•
 *
ª•
,

160 
size_t
 
ª•_c‹e_size
,

161 
size_t
 
ª•_size
);

162 
ibv_exp_cmd_‰ì_dm
(
ibv_exp_dm
 *
dm
);

	@libibverbs-41mlnx1/include/infiniband/kern-abi.h

35 #i‚de‡
KERN_ABI_H


36 
	#KERN_ABI_H


	)

38 
	~<löux/ty≥s.h
>

48 
	#IB_USER_VERBS_MIN_ABI_VERSION
 3

	)

49 
	#IB_USER_VERBS_MAX_ABI_VERSION
 6

	)

51 
	#IB_USER_VERBS_CMD_THRESHOLD
 50

	)

54 
	mIB_USER_VERBS_CMD_GET_CONTEXT
,

55 
	mIB_USER_VERBS_CMD_QUERY_DEVICE
,

56 
	mIB_USER_VERBS_CMD_QUERY_PORT
,

57 
	mIB_USER_VERBS_CMD_ALLOC_PD
,

58 
	mIB_USER_VERBS_CMD_DEALLOC_PD
,

59 
	mIB_USER_VERBS_CMD_CREATE_AH
,

60 
	mIB_USER_VERBS_CMD_MODIFY_AH
,

61 
	mIB_USER_VERBS_CMD_QUERY_AH
,

62 
	mIB_USER_VERBS_CMD_DESTROY_AH
,

63 
	mIB_USER_VERBS_CMD_REG_MR
,

64 
	mIB_USER_VERBS_CMD_REG_SMR
,

65 
	mIB_USER_VERBS_CMD_REREG_MR
,

66 
	mIB_USER_VERBS_CMD_QUERY_MR
,

67 
	mIB_USER_VERBS_CMD_DEREG_MR
,

68 
	mIB_USER_VERBS_CMD_ALLOC_MW
,

69 
	mIB_USER_VERBS_CMD_BIND_MW
,

70 
	mIB_USER_VERBS_CMD_DEALLOC_MW
,

71 
	mIB_USER_VERBS_CMD_CREATE_COMP_CHANNEL
,

72 
	mIB_USER_VERBS_CMD_CREATE_CQ
,

73 
	mIB_USER_VERBS_CMD_RESIZE_CQ
,

74 
	mIB_USER_VERBS_CMD_DESTROY_CQ
,

75 
	mIB_USER_VERBS_CMD_POLL_CQ
,

76 
	mIB_USER_VERBS_CMD_PEEK_CQ
,

77 
	mIB_USER_VERBS_CMD_REQ_NOTIFY_CQ
,

78 
	mIB_USER_VERBS_CMD_CREATE_QP
,

79 
	mIB_USER_VERBS_CMD_QUERY_QP
,

80 
	mIB_USER_VERBS_CMD_MODIFY_QP
,

81 
	mIB_USER_VERBS_CMD_DESTROY_QP
,

82 
	mIB_USER_VERBS_CMD_POST_SEND
,

83 
	mIB_USER_VERBS_CMD_POST_RECV
,

84 
	mIB_USER_VERBS_CMD_ATTACH_MCAST
,

85 
	mIB_USER_VERBS_CMD_DETACH_MCAST
,

86 
	mIB_USER_VERBS_CMD_CREATE_SRQ
,

87 
	mIB_USER_VERBS_CMD_MODIFY_SRQ
,

88 
	mIB_USER_VERBS_CMD_QUERY_SRQ
,

89 
	mIB_USER_VERBS_CMD_DESTROY_SRQ
,

90 
	mIB_USER_VERBS_CMD_POST_SRQ_RECV
,

91 
	mIB_USER_VERBS_CMD_OPEN_XRCD
,

92 
	mIB_USER_VERBS_CMD_CLOSE_XRCD
,

93 
	mIB_USER_VERBS_CMD_CREATE_XSRQ
,

94 
	mIB_USER_VERBS_CMD_OPEN_QP
,

98 
	#IB_USER_VERBS_CMD_COMMAND_MASK
 0xff

	)

99 
	#IB_USER_VERBS_CMD_FLAGS_MASK
 0xff000000u

	)

100 
	#IB_USER_VERBS_CMD_FLAGS_SHIFT
 24

	)

103 
	#IB_USER_VERBS_CMD_FLAG_EXTENDED
 0x80ul

	)

106 
	#IB_USER_VERBS_CMD_EXTENDED_MASK
 \

107 (
IB_USER_VERBS_CMD_FLAG_EXTENDED
 << \

108 
IB_USER_VERBS_CMD_FLAGS_SHIFT
)

	)

112 
	mIB_USER_VERBS_CMD_QUERY_DEVICE_EX
 = 
IB_USER_VERBS_CMD_EXTENDED_MASK
 |

113 
IB_USER_VERBS_CMD_QUERY_DEVICE
,

114 
	mIB_USER_VERBS_CMD_CREATE_FLOW
 = 
IB_USER_VERBS_CMD_EXTENDED_MASK
 +

115 
IB_USER_VERBS_CMD_THRESHOLD
,

116 
	mIB_USER_VERBS_CMD_DESTROY_FLOW


130 
	shdr
 {

131 
__u32
 
	mcomm™d
;

132 
__u16
 
	mö_w‹ds
;

133 
__u16
 
	mout_w‹ds
;

136 
	sª•⁄£_hdr
 {

137 
__u64
 
	mª•⁄£
;

140 
	sex_hdr
 {

142 
__u32
 
	mcomm™d
;

143 
__u16
 
	mö_w‹ds
;

144 
__u16
 
	mout_w‹ds
;

147 
__u64
 
	mª•⁄£
;

150 
__u16
 
	m¥ovidî_ö_w‹ds
;

151 
__u16
 
	m¥ovidî_out_w‹ds
;

152 
__u32
 
	mª£rved
;

156 
	sibv_kîn_async_evít
 {

157 
__u64
 
	mñemít
;

158 
__u32
 
	mevít_ty≥
;

159 
__u32
 
	mª£rved
;

162 
	sibv_comp_evít
 {

163 
__u64
 
	mcq_h™dÀ
;

174 
	#IBV_RESP_TO_VERBS_RESP_EX_RAW
(
ex_±r
, 
ex_ty≥
, 
ibv_ty≥
, 
fõld
) \

175 ((
ibv_ty≥
 *)((*)(
ex_±r
Ë+ 
	`off£tof
(
ex_ty≥
, \

176 
fõld
Ë+ ((
ex_±r
)->fõld)))

	)

178 
	#IBV_RESP_TO_VERBS_RESP_EX
(
ex_±r
, 
ex_ty≥
, 
ibv_ty≥
) \

179 
	`IBV_RESP_TO_VERBS_RESP_EX_RAW
(
ex_±r
, 
ex_ty≥
, 
ibv_ty≥
, 
comp_mask
)

	)

181 
	sibv_quîy_∑øms
 {

182 
__u32
 
	mcomm™d
;

183 
__u16
 
	mö_w‹ds
;

184 
__u16
 
	mout_w‹ds
;

185 
__u64
 
	mª•⁄£
;

188 
	sibv_quîy_∑øms_ª•
 {

189 
__u32
 
	mnum_cq_evíts
;

192 
	sibv_gë_c⁄ãxt
 {

193 
__u32
 
	mcomm™d
;

194 
__u16
 
	mö_w‹ds
;

195 
__u16
 
	mout_w‹ds
;

196 
__u64
 
	mª•⁄£
;

197 
__u64
 
	mdrivî_d©a
[0];

200 
	sibv_gë_c⁄ãxt_ª•
 {

201 
__u32
 
	masync_fd
;

202 
__u32
 
	mnum_comp_ve˘‹s
;

205 
	sibv_quîy_devi˚
 {

206 
__u32
 
	mcomm™d
;

207 
__u16
 
	mö_w‹ds
;

208 
__u16
 
	mout_w‹ds
;

209 
__u64
 
	mª•⁄£
;

210 
__u64
 
	mdrivî_d©a
[0];

213 
	sibv_quîy_devi˚_ª•
 {

214 
__u64
 
	mfw_vî
;

215 
__u64
 
	mnode_guid
;

216 
__u64
 
	msys_image_guid
;

217 
__u64
 
	mmax_mr_size
;

218 
__u64
 
	m∑ge_size_ˇp
;

219 
__u32
 
	mvíd‹_id
;

220 
__u32
 
	mvíd‹_∑π_id
;

221 
__u32
 
	mhw_vî
;

222 
__u32
 
	mmax_qp
;

223 
__u32
 
	mmax_qp_wr
;

224 
__u32
 
	mdevi˚_ˇp_Êags
;

225 
__u32
 
	mmax_sge
;

226 
__u32
 
	mmax_sge_rd
;

227 
__u32
 
	mmax_cq
;

228 
__u32
 
	mmax_cqe
;

229 
__u32
 
	mmax_mr
;

230 
__u32
 
	mmax_pd
;

231 
__u32
 
	mmax_qp_rd_©om
;

232 
__u32
 
	mmax_ì_rd_©om
;

233 
__u32
 
	mmax_ªs_rd_©om
;

234 
__u32
 
	mmax_qp_öô_rd_©om
;

235 
__u32
 
	mmax_ì_öô_rd_©om
;

236 
__u32
 
	m©omic_ˇp
;

237 
__u32
 
	mmax_ì
;

238 
__u32
 
	mmax_rdd
;

239 
__u32
 
	mmax_mw
;

240 
__u32
 
	mmax_øw_ùv6_qp
;

241 
__u32
 
	mmax_øw_ëhy_qp
;

242 
__u32
 
	mmax_mˇ°_gΩ
;

243 
__u32
 
	mmax_mˇ°_qp_©èch
;

244 
__u32
 
	mmax_tŸÆ_mˇ°_qp_©èch
;

245 
__u32
 
	mmax_ah
;

246 
__u32
 
	mmax_fmr
;

247 
__u32
 
	mmax_m≠_≥r_fmr
;

248 
__u32
 
	mmax_§q
;

249 
__u32
 
	mmax_§q_wr
;

250 
__u32
 
	mmax_§q_sge
;

251 
__u16
 
	mmax_pkeys
;

252 
__u8
 
	mloˇl_ˇ_ack_dñay
;

253 
__u8
 
	mphys_p‹t_˙t
;

254 
__u8
 
	mª£rved
[4];

257 
	sibv_quîy_devi˚_ex
 {

258 
ex_hdr
 
	mhdr
;

259 
__u32
 
	mcomp_mask
;

260 
__u32
 
	mª£rved
;

263 
	sibv_odp_ˇps_ª•
 {

264 
__u64
 
	mgíîÆ_ˇps
;

266 
__u32
 
	mrc_odp_ˇps
;

267 
__u32
 
	muc_odp_ˇps
;

268 
__u32
 
	mud_odp_ˇps
;

269 } 
	m≥r_å™•‹t_ˇps
;

270 
__u32
 
	mª£rved
;

273 
	sibv_quîy_devi˚_ª•_ex
 {

274 
ibv_quîy_devi˚_ª•
 
	mba£
;

275 
__u32
 
	mcomp_mask
;

276 
__u32
 
	mª•⁄£_Àngth
;

277 
ibv_odp_ˇps_ª•
 
	modp_ˇps
;

280 
	sibv_quîy_p‹t
 {

281 
__u32
 
	mcomm™d
;

282 
__u16
 
	mö_w‹ds
;

283 
__u16
 
	mout_w‹ds
;

284 
__u64
 
	mª•⁄£
;

285 
__u8
 
	mp‹t_num
;

286 
__u8
 
	mª£rved
[7];

287 
__u64
 
	mdrivî_d©a
[0];

290 
	sibv_quîy_p‹t_ª•
 {

291 
__u32
 
	mp‹t_ˇp_Êags
;

292 
__u32
 
	mmax_msg_sz
;

293 
__u32
 
	mbad_pkey_˙å
;

294 
__u32
 
	mqkey_viﬁ_˙å
;

295 
__u32
 
	mgid_tbl_Àn
;

296 
__u16
 
	mpkey_tbl_Àn
;

297 
__u16
 
	mlid
;

298 
__u16
 
	msm_lid
;

299 
__u8
 
	m°©e
;

300 
__u8
 
	mmax_mtu
;

301 
__u8
 
	ma˘ive_mtu
;

302 
__u8
 
	mlmc
;

303 
__u8
 
	mmax_vl_num
;

304 
__u8
 
	msm_¶
;

305 
__u8
 
	msub√t_timeout
;

306 
__u8
 
	möô_ty≥_ª∂y
;

307 
__u8
 
	ma˘ive_width
;

308 
__u8
 
	ma˘ive_•ìd
;

309 
__u8
 
	mphys_°©e
;

310 
__u8
 
	mlök_œyî
;

311 
__u8
 
	mª£rved
[2];

314 
	sibv_Æloc_pd
 {

315 
__u32
 
	mcomm™d
;

316 
__u16
 
	mö_w‹ds
;

317 
__u16
 
	mout_w‹ds
;

318 
__u64
 
	mª•⁄£
;

319 
__u64
 
	mdrivî_d©a
[0];

322 
	sibv_Æloc_pd_ª•
 {

323 
__u32
 
	mpd_h™dÀ
;

326 
	sibv_dóŒoc_pd
 {

327 
__u32
 
	mcomm™d
;

328 
__u16
 
	mö_w‹ds
;

329 
__u16
 
	mout_w‹ds
;

330 
__u32
 
	mpd_h™dÀ
;

333 
	sibv_›í_xrcd
 {

334 
__u32
 
	mcomm™d
;

335 
__u16
 
	mö_w‹ds
;

336 
__u16
 
	mout_w‹ds
;

337 
__u64
 
	mª•⁄£
;

338 
__u32
 
	mfd
;

339 
__u32
 
	moÊags
;

340 
__u64
 
	mdrivî_d©a
[0];

343 
	sibv_›í_xrcd_ª•
 {

344 
__u32
 
	mxrcd_h™dÀ
;

347 
	sibv_˛o£_xrcd
 {

348 
__u32
 
	mcomm™d
;

349 
__u16
 
	mö_w‹ds
;

350 
__u16
 
	mout_w‹ds
;

351 
__u32
 
	mxrcd_h™dÀ
;

354 
	sibv_ªg_mr
 {

355 
__u32
 
	mcomm™d
;

356 
__u16
 
	mö_w‹ds
;

357 
__u16
 
	mout_w‹ds
;

358 
__u64
 
	mª•⁄£
;

359 
__u64
 
	m°¨t
;

360 
__u64
 
	mÀngth
;

361 
__u64
 
	mhˇ_va
;

362 
__u32
 
	mpd_h™dÀ
;

363 
__u32
 
	mac˚ss_Êags
;

364 
__u64
 
	mdrivî_d©a
[0];

367 
	sibv_ªg_mr_ª•
 {

368 
__u32
 
	mmr_h™dÀ
;

369 
__u32
 
	mlkey
;

370 
__u32
 
	mrkey
;

373 
	sibv_ªªg_mr
 {

374 
__u32
 
	mcomm™d
;

375 
__u16
 
	mö_w‹ds
;

376 
__u16
 
	mout_w‹ds
;

377 
__u64
 
	mª•⁄£
;

378 
__u32
 
	mmr_h™dÀ
;

379 
__u32
 
	mÊags
;

380 
__u64
 
	m°¨t
;

381 
__u64
 
	mÀngth
;

382 
__u64
 
	mhˇ_va
;

383 
__u32
 
	mpd_h™dÀ
;

384 
__u32
 
	mac˚ss_Êags
;

385 
__u64
 
	mdrivî_d©a
[0];

388 
	sibv_ªªg_mr_ª•
 {

389 
__u32
 
	mlkey
;

390 
__u32
 
	mrkey
;

393 
	sibv_dîeg_mr
 {

394 
__u32
 
	mcomm™d
;

395 
__u16
 
	mö_w‹ds
;

396 
__u16
 
	mout_w‹ds
;

397 
__u32
 
	mmr_h™dÀ
;

400 
	sibv_Æloc_mw
 {

401 
__u32
 
	mcomm™d
;

402 
__u16
 
	mö_w‹ds
;

403 
__u16
 
	mout_w‹ds
;

404 
__u64
 
	mª•⁄£
;

405 
__u32
 
	mpd_h™dÀ
;

406 
__u8
 
	mmw_ty≥
;

407 
__u8
 
	mª£rved
[3];

410 
	sibv_Æloc_mw_ª•
 {

411 
__u32
 
	mmw_h™dÀ
;

412 
__u32
 
	mrkey
;

415 
	sibv_dóŒoc_mw
 {

416 
__u32
 
	mcomm™d
;

417 
__u16
 
	mö_w‹ds
;

418 
__u16
 
	mout_w‹ds
;

419 
__u32
 
	mmw_h™dÀ
;

420 
__u32
 
	mª£rved
;

423 
	sibv_¸óã_comp_ch™√l
 {

424 
__u32
 
	mcomm™d
;

425 
__u16
 
	mö_w‹ds
;

426 
__u16
 
	mout_w‹ds
;

427 
__u64
 
	mª•⁄£
;

430 
	sibv_¸óã_comp_ch™√l_ª•
 {

431 
__u32
 
	mfd
;

434 
	sibv_¸óã_cq
 {

435 
__u32
 
	mcomm™d
;

436 
__u16
 
	mö_w‹ds
;

437 
__u16
 
	mout_w‹ds
;

438 
__u64
 
	mª•⁄£
;

439 
__u64
 
	mu£r_h™dÀ
;

440 
__u32
 
	mcqe
;

441 
__u32
 
	mcomp_ve˘‹
;

442 
__s32
 
	mcomp_ch™√l
;

443 
__u32
 
	mª£rved
;

444 
__u64
 
	mdrivî_d©a
[0];

447 
	sibv_¸óã_cq_ª•
 {

448 
__u32
 
	mcq_h™dÀ
;

449 
__u32
 
	mcqe
;

452 
	sibv_kîn_wc
 {

453 
__u64
 
	mwr_id
;

454 
__u32
 
	m°©us
;

455 
__u32
 
	m›code
;

456 
__u32
 
	mvíd‹_îr
;

457 
__u32
 
	mbyã_Àn
;

458 
__u32
 
	mimm_d©a
;

459 
__u32
 
	mqp_num
;

460 
__u32
 
	m§c_qp
;

461 
__u32
 
	mwc_Êags
;

462 
__u16
 
	mpkey_ödex
;

463 
__u16
 
	m¶id
;

464 
__u8
 
	m¶
;

465 
__u8
 
	mdlid_∑th_bôs
;

466 
__u8
 
	mp‹t_num
;

467 
__u8
 
	mª£rved
;

470 
	sibv_pﬁl_cq
 {

471 
__u32
 
	mcomm™d
;

472 
__u16
 
	mö_w‹ds
;

473 
__u16
 
	mout_w‹ds
;

474 
__u64
 
	mª•⁄£
;

475 
__u32
 
	mcq_h™dÀ
;

476 
__u32
 
	m√
;

479 
	sibv_pﬁl_cq_ª•
 {

480 
__u32
 
	mcou¡
;

481 
__u32
 
	mª£rved
;

482 
ibv_kîn_wc
 
	mwc
[0];

485 
	sibv_ªq_nŸify_cq
 {

486 
__u32
 
	mcomm™d
;

487 
__u16
 
	mö_w‹ds
;

488 
__u16
 
	mout_w‹ds
;

489 
__u32
 
	mcq_h™dÀ
;

490 
__u32
 
	msﬁicôed
;

493 
	sibv_ªsize_cq
 {

494 
__u32
 
	mcomm™d
;

495 
__u16
 
	mö_w‹ds
;

496 
__u16
 
	mout_w‹ds
;

497 
__u64
 
	mª•⁄£
;

498 
__u32
 
	mcq_h™dÀ
;

499 
__u32
 
	mcqe
;

500 
__u64
 
	mdrivî_d©a
[0];

503 
	sibv_ªsize_cq_ª•
 {

504 
__u32
 
	mcqe
;

505 
__u32
 
	mª£rved
;

506 
__u64
 
	mdrivî_d©a
[0];

509 
	sibv_de°roy_cq
 {

510 
__u32
 
	mcomm™d
;

511 
__u16
 
	mö_w‹ds
;

512 
__u16
 
	mout_w‹ds
;

513 
__u64
 
	mª•⁄£
;

514 
__u32
 
	mcq_h™dÀ
;

515 
__u32
 
	mª£rved
;

518 
	sibv_de°roy_cq_ª•
 {

519 
__u32
 
	mcomp_evíts_ªp‹ãd
;

520 
__u32
 
	masync_evíts_ªp‹ãd
;

523 
	sibv_kîn_globÆ_rouã
 {

524 
__u8
 
	mdgid
[16];

525 
__u32
 
	mÊow_œbñ
;

526 
__u8
 
	msgid_ödex
;

527 
__u8
 
	mh›_limô
;

528 
__u8
 
	måaffic_˛ass
;

529 
__u8
 
	mª£rved
;

532 
	sibv_kîn_ah_©å
 {

533 
ibv_kîn_globÆ_rouã
 
	mgrh
;

534 
__u16
 
	mdlid
;

535 
__u8
 
	m¶
;

536 
__u8
 
	m§c_∑th_bôs
;

537 
__u8
 
	m°©ic_øã
;

538 
__u8
 
	mis_globÆ
;

539 
__u8
 
	mp‹t_num
;

540 
__u8
 
	mª£rved
;

543 
	sibv_kîn_qp_©å
 {

544 
__u32
 
	mqp_©å_mask
;

545 
__u32
 
	mqp_°©e
;

546 
__u32
 
	mcur_qp_°©e
;

547 
__u32
 
	m∑th_mtu
;

548 
__u32
 
	m∑th_mig_°©e
;

549 
__u32
 
	mqkey
;

550 
__u32
 
	mrq_p¢
;

551 
__u32
 
	msq_p¢
;

552 
__u32
 
	mde°_qp_num
;

553 
__u32
 
	mqp_ac˚ss_Êags
;

555 
ibv_kîn_ah_©å
 
	mah_©å
;

556 
ibv_kîn_ah_©å
 
	mÆt_ah_©å
;

559 
__u32
 
	mmax_£nd_wr
;

560 
__u32
 
	mmax_ªcv_wr
;

561 
__u32
 
	mmax_£nd_sge
;

562 
__u32
 
	mmax_ªcv_sge
;

563 
__u32
 
	mmax_ölöe_d©a
;

565 
__u16
 
	mpkey_ödex
;

566 
__u16
 
	mÆt_pkey_ödex
;

567 
__u8
 
	mí_sqd_async_nŸify
;

568 
__u8
 
	msq_døöög
;

569 
__u8
 
	mmax_rd_©omic
;

570 
__u8
 
	mmax_de°_rd_©omic
;

571 
__u8
 
	mmö_∫r_timî
;

572 
__u8
 
	mp‹t_num
;

573 
__u8
 
	mtimeout
;

574 
__u8
 
	mªåy_˙t
;

575 
__u8
 
	m∫r_ªåy
;

576 
__u8
 
	mÆt_p‹t_num
;

577 
__u8
 
	mÆt_timeout
;

578 
__u8
 
	mª£rved
[5];

581 
	sibv_¸óã_qp
 {

582 
__u32
 
	mcomm™d
;

583 
__u16
 
	mö_w‹ds
;

584 
__u16
 
	mout_w‹ds
;

585 
__u64
 
	mª•⁄£
;

586 
__u64
 
	mu£r_h™dÀ
;

587 
__u32
 
	mpd_h™dÀ
;

588 
__u32
 
	m£nd_cq_h™dÀ
;

589 
__u32
 
	mªcv_cq_h™dÀ
;

590 
__u32
 
	m§q_h™dÀ
;

591 
__u32
 
	mmax_£nd_wr
;

592 
__u32
 
	mmax_ªcv_wr
;

593 
__u32
 
	mmax_£nd_sge
;

594 
__u32
 
	mmax_ªcv_sge
;

595 
__u32
 
	mmax_ölöe_d©a
;

596 
__u8
 
	msq_sig_Æl
;

597 
__u8
 
	mqp_ty≥
;

598 
__u8
 
	mis_§q
;

599 
__u8
 
	mª£rved
;

600 
__u64
 
	mdrivî_d©a
[0];

603 
	sibv_›í_qp
 {

604 
__u32
 
	mcomm™d
;

605 
__u16
 
	mö_w‹ds
;

606 
__u16
 
	mout_w‹ds
;

607 
__u64
 
	mª•⁄£
;

608 
__u64
 
	mu£r_h™dÀ
;

609 
__u32
 
	mpd_h™dÀ
;

610 
__u32
 
	mq≤
;

611 
__u8
 
	mqp_ty≥
;

612 
__u8
 
	mª£rved
[7];

613 
__u64
 
	mdrivî_d©a
[0];

617 
	sibv_¸óã_qp_ª•
 {

618 
__u32
 
	mqp_h™dÀ
;

619 
__u32
 
	mq≤
;

620 
__u32
 
	mmax_£nd_wr
;

621 
__u32
 
	mmax_ªcv_wr
;

622 
__u32
 
	mmax_£nd_sge
;

623 
__u32
 
	mmax_ªcv_sge
;

624 
__u32
 
	mmax_ölöe_d©a
;

625 
__u32
 
	mª£rved
;

628 
	eibv_¸óã_qp_ex_comp_mask
 {

629 
	mIBV_CREATE_QP_EX_CAP_FLAGS
 = (1ULL << 0)

632 
	sibv_¸óã_qp_ex
 {

633 
__u32
 
	mcomm™d
;

634 
__u16
 
	mö_w‹ds
;

635 
__u16
 
	mout_w‹ds
;

636 
__u16
 
	m¥ovidî_ö_w‹ds
;

637 
__u16
 
	m¥ovidî_out_w‹ds
;

638 
__u32
 
	mcmd_hdr_ª£rved
;

639 
__u64
 
	mcomp_mask
;

640 
__u64
 
	mª•⁄£
;

641 
__u64
 
	mu£r_h™dÀ
;

642 
__u32
 
	mpd_h™dÀ
;

643 
__u32
 
	m£nd_cq_h™dÀ
;

644 
__u32
 
	mªcv_cq_h™dÀ
;

645 
__u32
 
	m§q_h™dÀ
;

646 
__u32
 
	mmax_£nd_wr
;

647 
__u32
 
	mmax_ªcv_wr
;

648 
__u32
 
	mmax_£nd_sge
;

649 
__u32
 
	mmax_ªcv_sge
;

650 
__u32
 
	mmax_ölöe_d©a
;

651 
__u8
 
	msq_sig_Æl
;

652 
__u8
 
	mqp_ty≥
;

653 
__u8
 
	mis_§q
;

654 
__u8
 
	mª£rved
;

655 
__u64
 
	mqp_ˇp_Êags
;

656 
__u64
 
	mdrivî_d©a
[0];

659 
	sibv_¸óã_qp_ª•_ex
 {

660 
__u64
 
	mcomp_mask
;

661 
__u32
 
	mqp_h™dÀ
;

662 
__u32
 
	mq≤
;

663 
__u32
 
	mmax_£nd_wr
;

664 
__u32
 
	mmax_ªcv_wr
;

665 
__u32
 
	mmax_£nd_sge
;

666 
__u32
 
	mmax_ªcv_sge
;

667 
__u32
 
	mmax_ölöe_d©a
;

668 
__u32
 
	mª£rved
;

671 
	sibv_qp_de°
 {

672 
__u8
 
	mdgid
[16];

673 
__u32
 
	mÊow_œbñ
;

674 
__u16
 
	mdlid
;

675 
__u16
 
	mª£rved
;

676 
__u8
 
	msgid_ödex
;

677 
__u8
 
	mh›_limô
;

678 
__u8
 
	måaffic_˛ass
;

679 
__u8
 
	m¶
;

680 
__u8
 
	m§c_∑th_bôs
;

681 
__u8
 
	m°©ic_øã
;

682 
__u8
 
	mis_globÆ
;

683 
__u8
 
	mp‹t_num
;

686 
	sibv_quîy_qp
 {

687 
__u32
 
	mcomm™d
;

688 
__u16
 
	mö_w‹ds
;

689 
__u16
 
	mout_w‹ds
;

690 
__u64
 
	mª•⁄£
;

691 
__u32
 
	mqp_h™dÀ
;

692 
__u32
 
	m©å_mask
;

693 
__u64
 
	mdrivî_d©a
[0];

696 
	sibv_quîy_qp_ª•
 {

697 
ibv_qp_de°
 
	mde°
;

698 
ibv_qp_de°
 
	mÆt_de°
;

699 
__u32
 
	mmax_£nd_wr
;

700 
__u32
 
	mmax_ªcv_wr
;

701 
__u32
 
	mmax_£nd_sge
;

702 
__u32
 
	mmax_ªcv_sge
;

703 
__u32
 
	mmax_ölöe_d©a
;

704 
__u32
 
	mqkey
;

705 
__u32
 
	mrq_p¢
;

706 
__u32
 
	msq_p¢
;

707 
__u32
 
	mde°_qp_num
;

708 
__u32
 
	mqp_ac˚ss_Êags
;

709 
__u16
 
	mpkey_ödex
;

710 
__u16
 
	mÆt_pkey_ödex
;

711 
__u8
 
	mqp_°©e
;

712 
__u8
 
	mcur_qp_°©e
;

713 
__u8
 
	m∑th_mtu
;

714 
__u8
 
	m∑th_mig_°©e
;

715 
__u8
 
	msq_døöög
;

716 
__u8
 
	mmax_rd_©omic
;

717 
__u8
 
	mmax_de°_rd_©omic
;

718 
__u8
 
	mmö_∫r_timî
;

719 
__u8
 
	mp‹t_num
;

720 
__u8
 
	mtimeout
;

721 
__u8
 
	mªåy_˙t
;

722 
__u8
 
	m∫r_ªåy
;

723 
__u8
 
	mÆt_p‹t_num
;

724 
__u8
 
	mÆt_timeout
;

725 
__u8
 
	msq_sig_Æl
;

726 
__u8
 
	mª£rved
[5];

727 
__u64
 
	mdrivî_d©a
[0];

730 
	sibv_modify_qp
 {

731 
__u32
 
	mcomm™d
;

732 
__u16
 
	mö_w‹ds
;

733 
__u16
 
	mout_w‹ds
;

734 
ibv_qp_de°
 
	mde°
;

735 
ibv_qp_de°
 
	mÆt_de°
;

736 
__u32
 
	mqp_h™dÀ
;

737 
__u32
 
	m©å_mask
;

738 
__u32
 
	mqkey
;

739 
__u32
 
	mrq_p¢
;

740 
__u32
 
	msq_p¢
;

741 
__u32
 
	mde°_qp_num
;

742 
__u32
 
	mqp_ac˚ss_Êags
;

743 
__u16
 
	mpkey_ödex
;

744 
__u16
 
	mÆt_pkey_ödex
;

745 
__u8
 
	mqp_°©e
;

746 
__u8
 
	mcur_qp_°©e
;

747 
__u8
 
	m∑th_mtu
;

748 
__u8
 
	m∑th_mig_°©e
;

749 
__u8
 
	mí_sqd_async_nŸify
;

750 
__u8
 
	mmax_rd_©omic
;

751 
__u8
 
	mmax_de°_rd_©omic
;

752 
__u8
 
	mmö_∫r_timî
;

753 
__u8
 
	mp‹t_num
;

754 
__u8
 
	mtimeout
;

755 
__u8
 
	mªåy_˙t
;

756 
__u8
 
	m∫r_ªåy
;

757 
__u8
 
	mÆt_p‹t_num
;

758 
__u8
 
	mÆt_timeout
;

759 
__u8
 
	mª£rved
[2];

760 
__u64
 
	mdrivî_d©a
[0];

763 
	sibv_de°roy_qp
 {

764 
__u32
 
	mcomm™d
;

765 
__u16
 
	mö_w‹ds
;

766 
__u16
 
	mout_w‹ds
;

767 
__u64
 
	mª•⁄£
;

768 
__u32
 
	mqp_h™dÀ
;

769 
__u32
 
	mª£rved
;

772 
	sibv_de°roy_qp_ª•
 {

773 
__u32
 
	mevíts_ªp‹ãd
;

776 
	sibv_kîn_£nd_wr
 {

777 
__u64
 
	mwr_id
;

778 
__u32
 
	mnum_sge
;

779 
__u32
 
	m›code
;

780 
__u32
 
	m£nd_Êags
;

781 
__u32
 
	mimm_d©a
;

784 
__u64
 
	mªmŸe_addr
;

785 
__u32
 
	mrkey
;

786 
__u32
 
	mª£rved
;

787 } 
	mrdma
;

789 
__u64
 
	mªmŸe_addr
;

790 
__u64
 
	mcom∑ª_add
;

791 
__u64
 
	msw≠
;

792 
__u32
 
	mrkey
;

793 
__u32
 
	mª£rved
;

794 } 
	m©omic
;

796 
__u32
 
	mah
;

797 
__u32
 
	mªmŸe_q≤
;

798 
__u32
 
	mªmŸe_qkey
;

799 
__u32
 
	mª£rved
;

800 } 
	mud
;

801 } 
	mwr
;

804 
__u32
 
	mªmŸe_§qn
;

805 } 
	mxrc
;

806 } 
	mqp_ty≥
;

809 
	sibv_kîn_ëh_fûãr
 {

810 
__u8
 
	md°_mac
[6];

811 
__u8
 
	m§c_mac
[6];

812 
__u16
 
	mëhî_ty≥
;

813 
__u16
 
	mvœn_èg
;

816 
	sibv_kîn_•ec_ëh
 {

817 
__u32
 
	mty≥
;

818 
__u16
 
	msize
;

819 
__u16
 
	mª£rved
;

820 
ibv_kîn_ëh_fûãr
 
	mvÆ
;

821 
ibv_kîn_ëh_fûãr
 
	mmask
;

824 
	sibv_kîn_ib_fûãr
 {

825 
__u32
 
	mq≤
;

826 
__u8
 
	md°_gid
[16];

829 
	sibv_kîn_•ec_ib
 {

830 
__u32
 
	mty≥
;

831 
__u16
 
	msize
;

832 
__u16
 
	mª£rved
;

833 
ibv_kîn_ib_fûãr
 
	mvÆ
;

834 
ibv_kîn_ib_fûãr
 
	mmask
;

837 
	sibv_kîn_ùv4_fûãr
 {

838 
__u32
 
	m§c_ù
;

839 
__u32
 
	md°_ù
;

842 
	sibv_kîn_•ec_ùv4
 {

843 
__u32
 
	mty≥
;

844 
__u16
 
	msize
;

845 
__u16
 
	mª£rved
;

846 
ibv_kîn_ùv4_fûãr
 
	mvÆ
;

847 
ibv_kîn_ùv4_fûãr
 
	mmask
;

850 
	sibv_kîn_t˝_udp_fûãr
 {

851 
__u16
 
	md°_p‹t
;

852 
__u16
 
	m§c_p‹t
;

855 
	sibv_kîn_•ec_t˝_udp
 {

856 
__u32
 
	mty≥
;

857 
__u16
 
	msize
;

858 
__u16
 
	mª£rved
;

859 
ibv_kîn_t˝_udp_fûãr
 
	mvÆ
;

860 
ibv_kîn_t˝_udp_fûãr
 
	mmask
;

864 
	sibv_kîn_•ec
 {

867 
__u32
 
	mty≥
;

868 
__u16
 
	msize
;

869 
__u16
 
	mª£rved
;

870 } 
	mhdr
;

871 
ibv_kîn_•ec_ib
 
	mib
;

872 
ibv_kîn_•ec_ëh
 
	mëh
;

873 
ibv_kîn_•ec_ùv4
 
	mùv4
;

874 
ibv_kîn_•ec_t˝_udp
 
	mt˝_udp
;

879 
	sibv_kîn_Êow_©å
 {

880 
__u32
 
	mty≥
;

881 
__u16
 
	msize
;

882 
__u16
 
	m¥i‹ôy
;

883 
__u8
 
	mnum_of_•ecs
;

884 
__u8
 
	mª£rved
[2];

885 
__u8
 
	mp‹t
;

886 
__u32
 
	mÊags
;

893 
	sibv_po°_£nd
 {

894 
__u32
 
	mcomm™d
;

895 
__u16
 
	mö_w‹ds
;

896 
__u16
 
	mout_w‹ds
;

897 
__u64
 
	mª•⁄£
;

898 
__u32
 
	mqp_h™dÀ
;

899 
__u32
 
	mwr_cou¡
;

900 
__u32
 
	msge_cou¡
;

901 
__u32
 
	mwqe_size
;

902 
ibv_kîn_£nd_wr
 
	m£nd_wr
[0];

905 
	sibv_po°_£nd_ª•
 {

906 
__u32
 
	mbad_wr
;

909 
	sibv_kîn_ªcv_wr
 {

910 
__u64
 
	mwr_id
;

911 
__u32
 
	mnum_sge
;

912 
__u32
 
	mª£rved
;

915 
	sibv_po°_ªcv
 {

916 
__u32
 
	mcomm™d
;

917 
__u16
 
	mö_w‹ds
;

918 
__u16
 
	mout_w‹ds
;

919 
__u64
 
	mª•⁄£
;

920 
__u32
 
	mqp_h™dÀ
;

921 
__u32
 
	mwr_cou¡
;

922 
__u32
 
	msge_cou¡
;

923 
__u32
 
	mwqe_size
;

924 
ibv_kîn_ªcv_wr
 
	mªcv_wr
[0];

927 
	sibv_po°_ªcv_ª•
 {

928 
__u32
 
	mbad_wr
;

931 
	sibv_po°_§q_ªcv
 {

932 
__u32
 
	mcomm™d
;

933 
__u16
 
	mö_w‹ds
;

934 
__u16
 
	mout_w‹ds
;

935 
__u64
 
	mª•⁄£
;

936 
__u32
 
	m§q_h™dÀ
;

937 
__u32
 
	mwr_cou¡
;

938 
__u32
 
	msge_cou¡
;

939 
__u32
 
	mwqe_size
;

940 
ibv_kîn_ªcv_wr
 
	mªcv_wr
[0];

943 
	sibv_po°_§q_ªcv_ª•
 {

944 
__u32
 
	mbad_wr
;

947 
	sibv_¸óã_ah
 {

948 
__u32
 
	mcomm™d
;

949 
__u16
 
	mö_w‹ds
;

950 
__u16
 
	mout_w‹ds
;

951 
__u64
 
	mª•⁄£
;

952 
__u64
 
	mu£r_h™dÀ
;

953 
__u32
 
	mpd_h™dÀ
;

954 
__u32
 
	mª£rved
;

955 
ibv_kîn_ah_©å
 
	m©å
;

958 
	sibv_¸óã_ah_ª•
 {

959 
__u32
 
	mh™dÀ
;

962 
	sibv_de°roy_ah
 {

963 
__u32
 
	mcomm™d
;

964 
__u16
 
	mö_w‹ds
;

965 
__u16
 
	mout_w‹ds
;

966 
__u32
 
	mah_h™dÀ
;

969 
	sibv_©èch_mˇ°
 {

970 
__u32
 
	mcomm™d
;

971 
__u16
 
	mö_w‹ds
;

972 
__u16
 
	mout_w‹ds
;

973 
__u8
 
	mgid
[16];

974 
__u32
 
	mqp_h™dÀ
;

975 
__u16
 
	mmlid
;

976 
__u16
 
	mª£rved
;

977 
__u64
 
	mdrivî_d©a
[0];

980 
	sibv_dëach_mˇ°
 {

981 
__u32
 
	mcomm™d
;

982 
__u16
 
	mö_w‹ds
;

983 
__u16
 
	mout_w‹ds
;

984 
__u8
 
	mgid
[16];

985 
__u32
 
	mqp_h™dÀ
;

986 
__u16
 
	mmlid
;

987 
__u16
 
	mª£rved
;

988 
__u64
 
	mdrivî_d©a
[0];

991 
	sibv_¸óã_Êow
 {

992 
ex_hdr
 
	mhdr
;

993 
__u32
 
	mcomp_mask
;

994 
__u32
 
	mqp_h™dÀ
;

995 
ibv_kîn_Êow_©å
 
	mÊow_©å
;

998 
	sibv_¸óã_Êow_ª•
 {

999 
__u32
 
	mcomp_mask
;

1000 
__u32
 
	mÊow_h™dÀ
;

1003 
	sibv_de°roy_Êow
 {

1004 
ex_hdr
 
	mhdr
;

1005 
__u32
 
	mcomp_mask
;

1006 
__u32
 
	mÊow_h™dÀ
;

1009 
	sibv_¸óã_§q
 {

1010 
__u32
 
	mcomm™d
;

1011 
__u16
 
	mö_w‹ds
;

1012 
__u16
 
	mout_w‹ds
;

1013 
__u64
 
	mª•⁄£
;

1014 
__u64
 
	mu£r_h™dÀ
;

1015 
__u32
 
	mpd_h™dÀ
;

1016 
__u32
 
	mmax_wr
;

1017 
__u32
 
	mmax_sge
;

1018 
__u32
 
	m§q_limô
;

1019 
__u64
 
	mdrivî_d©a
[0];

1022 
	sibv_¸óã_x§q
 {

1023 
__u32
 
	mcomm™d
;

1024 
__u16
 
	mö_w‹ds
;

1025 
__u16
 
	mout_w‹ds
;

1026 
__u64
 
	mª•⁄£
;

1027 
__u64
 
	mu£r_h™dÀ
;

1028 
__u32
 
	m§q_ty≥
;

1029 
__u32
 
	mpd_h™dÀ
;

1030 
__u32
 
	mmax_wr
;

1031 
__u32
 
	mmax_sge
;

1032 
__u32
 
	m§q_limô
;

1033 
__u32
 
	mª£rved
;

1034 
__u32
 
	mxrcd_h™dÀ
;

1035 
__u32
 
	mcq_h™dÀ
;

1036 
__u64
 
	mdrivî_d©a
[0];

1039 
	sibv_¸óã_§q_ª•
 {

1040 
__u32
 
	m§q_h™dÀ
;

1041 
__u32
 
	mmax_wr
;

1042 
__u32
 
	mmax_sge
;

1043 
__u32
 
	m§qn
;

1046 
	sibv_modify_§q
 {

1047 
__u32
 
	mcomm™d
;

1048 
__u16
 
	mö_w‹ds
;

1049 
__u16
 
	mout_w‹ds
;

1050 
__u32
 
	m§q_h™dÀ
;

1051 
__u32
 
	m©å_mask
;

1052 
__u32
 
	mmax_wr
;

1053 
__u32
 
	m§q_limô
;

1054 
__u64
 
	mdrivî_d©a
[0];

1057 
	sibv_quîy_§q
 {

1058 
__u32
 
	mcomm™d
;

1059 
__u16
 
	mö_w‹ds
;

1060 
__u16
 
	mout_w‹ds
;

1061 
__u64
 
	mª•⁄£
;

1062 
__u32
 
	m§q_h™dÀ
;

1063 
__u32
 
	mª£rved
;

1064 
__u64
 
	mdrivî_d©a
[0];

1067 
	sibv_quîy_§q_ª•
 {

1068 
__u32
 
	mmax_wr
;

1069 
__u32
 
	mmax_sge
;

1070 
__u32
 
	m§q_limô
;

1071 
__u32
 
	mª£rved
;

1074 
	sibv_de°roy_§q
 {

1075 
__u32
 
	mcomm™d
;

1076 
__u16
 
	mö_w‹ds
;

1077 
__u16
 
	mout_w‹ds
;

1078 
__u64
 
	mª•⁄£
;

1079 
__u32
 
	m§q_h™dÀ
;

1080 
__u32
 
	mª£rved
;

1083 
	sibv_de°roy_§q_ª•
 {

1084 
__u32
 
	mevíts_ªp‹ãd
;

1092 
	mIB_USER_VERBS_CMD_QUERY_PARAMS_V2
,

1093 
	mIB_USER_VERBS_CMD_GET_CONTEXT_V2
,

1094 
	mIB_USER_VERBS_CMD_QUERY_DEVICE_V2
,

1095 
	mIB_USER_VERBS_CMD_QUERY_PORT_V2
,

1096 
	mIB_USER_VERBS_CMD_QUERY_GID_V2
,

1097 
	mIB_USER_VERBS_CMD_QUERY_PKEY_V2
,

1098 
	mIB_USER_VERBS_CMD_ALLOC_PD_V2
,

1099 
	mIB_USER_VERBS_CMD_DEALLOC_PD_V2
,

1100 
	mIB_USER_VERBS_CMD_CREATE_AH_V2
,

1101 
	mIB_USER_VERBS_CMD_MODIFY_AH_V2
,

1102 
	mIB_USER_VERBS_CMD_QUERY_AH_V2
,

1103 
	mIB_USER_VERBS_CMD_DESTROY_AH_V2
,

1104 
	mIB_USER_VERBS_CMD_REG_MR_V2
,

1105 
	mIB_USER_VERBS_CMD_REG_SMR_V2
,

1106 
	mIB_USER_VERBS_CMD_REREG_MR_V2
,

1107 
	mIB_USER_VERBS_CMD_QUERY_MR_V2
,

1108 
	mIB_USER_VERBS_CMD_DEREG_MR_V2
,

1109 
	mIB_USER_VERBS_CMD_ALLOC_MW_V2
,

1110 
	mIB_USER_VERBS_CMD_BIND_MW_V2
,

1111 
	mIB_USER_VERBS_CMD_DEALLOC_MW_V2
,

1112 
	mIB_USER_VERBS_CMD_CREATE_CQ_V2
,

1113 
	mIB_USER_VERBS_CMD_RESIZE_CQ_V2
,

1114 
	mIB_USER_VERBS_CMD_DESTROY_CQ_V2
,

1115 
	mIB_USER_VERBS_CMD_POLL_CQ_V2
,

1116 
	mIB_USER_VERBS_CMD_PEEK_CQ_V2
,

1117 
	mIB_USER_VERBS_CMD_REQ_NOTIFY_CQ_V2
,

1118 
	mIB_USER_VERBS_CMD_CREATE_QP_V2
,

1119 
	mIB_USER_VERBS_CMD_QUERY_QP_V2
,

1120 
	mIB_USER_VERBS_CMD_MODIFY_QP_V2
,

1121 
	mIB_USER_VERBS_CMD_DESTROY_QP_V2
,

1122 
	mIB_USER_VERBS_CMD_POST_SEND_V2
,

1123 
	mIB_USER_VERBS_CMD_POST_RECV_V2
,

1124 
	mIB_USER_VERBS_CMD_ATTACH_MCAST_V2
,

1125 
	mIB_USER_VERBS_CMD_DETACH_MCAST_V2
,

1126 
	mIB_USER_VERBS_CMD_CREATE_SRQ_V2
,

1127 
	mIB_USER_VERBS_CMD_MODIFY_SRQ_V2
,

1128 
	mIB_USER_VERBS_CMD_QUERY_SRQ_V2
,

1129 
	mIB_USER_VERBS_CMD_DESTROY_SRQ_V2
,

1130 
	mIB_USER_VERBS_CMD_POST_SRQ_RECV_V2
,

1135 
	mIB_USER_VERBS_CMD_CREATE_COMP_CHANNEL_V2
 = -1,

1136 
	mIB_USER_VERBS_CMD_CREATE_QP_EX_V2
 = -1,

1137 
	mIB_USER_VERBS_CMD_MODIFY_CQ_EX_V2
 = -1,

1138 
	mIB_USER_VERBS_CMD_CREATE_FLOW_V2
 = -1,

1139 
	mIB_USER_VERBS_CMD_DESTROY_FLOW_V2
 = -1,

1140 
	mIB_USER_VERBS_CMD_OPEN_XRCD_V2
 = -1,

1141 
	mIB_USER_VERBS_CMD_CLOSE_XRCD_V2
 = -1,

1142 
	mIB_USER_VERBS_CMD_CREATE_XSRQ_V2
 = -1,

1143 
	mIB_USER_VERBS_CMD_OPEN_QP_V2
 = -1,

1144 
	mIB_USER_VERBS_CMD_MODIFY_QP_EX_V2
 = -1,

1145 
	mIB_USER_VERBS_CMD_CREATE_CQ_EX_V2
 = -1,

1146 
	mIB_USER_VERBS_CMD_QUERY_DEVICE_EX_V2
 = -1,

1147 
	mIB_USER_VERBS_CMD_CREATE_DCT_V2
 = -1,

1148 
	mIB_USER_VERBS_CMD_DESTROY_DCT_V2
 = -1,

1149 
	mIB_USER_VERBS_CMD_QUERY_DCT_V2
 = -1,

1150 
	mIB_USER_VERBS_CMD_EXP_REG_MR_V2
 = -1,

1151 
	mIB_USER_VERBS_CMD_EXP_PREFETCH_MR_V2
 = -1,

1154 
	sibv_modify_§q_v3
 {

1155 
__u32
 
	mcomm™d
;

1156 
__u16
 
	mö_w‹ds
;

1157 
__u16
 
	mout_w‹ds
;

1158 
__u32
 
	m§q_h™dÀ
;

1159 
__u32
 
	m©å_mask
;

1160 
__u32
 
	mmax_wr
;

1161 
__u32
 
	mmax_sge
;

1162 
__u32
 
	m§q_limô
;

1163 
__u32
 
	mª£rved
;

1164 
__u64
 
	mdrivî_d©a
[0];

1167 
	sibv_¸óã_qp_ª•_v3
 {

1168 
__u32
 
	mqp_h™dÀ
;

1169 
__u32
 
	mq≤
;

1172 
	sibv_¸óã_qp_ª•_v4
 {

1173 
__u32
 
	mqp_h™dÀ
;

1174 
__u32
 
	mq≤
;

1175 
__u32
 
	mmax_£nd_wr
;

1176 
__u32
 
	mmax_ªcv_wr
;

1177 
__u32
 
	mmax_£nd_sge
;

1178 
__u32
 
	mmax_ªcv_sge
;

1179 
__u32
 
	mmax_ölöe_d©a
;

1182 
	sibv_¸óã_§q_ª•_v5
 {

1183 
__u32
 
	m§q_h™dÀ
;

	@libibverbs-41mlnx1/include/infiniband/kern-abi_exp.h

35 #i‚de‡
KERN_ABI_EXP_H


36 
	#KERN_ABI_EXP_H


	)

38 
	~<öföib™d/kîn-abi.h
>

46 
	mIB_USER_VERBS_EXP_CMD_FIRST
 = 64

50 
	mIB_USER_VERBS_EXP_CMD_CREATE_QP
,

51 
	mIB_USER_VERBS_EXP_CMD_MODIFY_CQ
,

52 
	mIB_USER_VERBS_EXP_CMD_MODIFY_QP
,

53 
	mIB_USER_VERBS_EXP_CMD_CREATE_CQ
,

54 
	mIB_USER_VERBS_EXP_CMD_QUERY_DEVICE
,

55 
	mIB_USER_VERBS_EXP_CMD_CREATE_DCT
,

56 
	mIB_USER_VERBS_EXP_CMD_DESTROY_DCT
,

57 
	mIB_USER_VERBS_EXP_CMD_QUERY_DCT
,

58 
	mIB_USER_VERBS_EXP_CMD_ARM_DCT
,

59 
	mIB_USER_VERBS_EXP_CMD_CREATE_MR
,

60 
	mIB_USER_VERBS_EXP_CMD_QUERY_MKEY
,

61 
	mIB_USER_VERBS_EXP_CMD_REG_MR
,

62 
	mIB_USER_VERBS_EXP_CMD_PREFETCH_MR
,

63 
	mIB_USER_VERBS_EXP_CMD_REREG_MR
,

64 
	mIB_USER_VERBS_EXP_CMD_CREATE_WQ
,

65 
	mIB_USER_VERBS_EXP_CMD_MODIFY_WQ
,

66 
	mIB_USER_VERBS_EXP_CMD_DESTROY_WQ
,

67 
	mIB_USER_VERBS_EXP_CMD_CREATE_RWQ_IND_TBL
,

68 
	mIB_USER_VERBS_EXP_CMD_DESTROY_RWQ_IND_TBL
,

69 
	mIB_USER_VERBS_EXP_CMD_CREATE_FLOW
,

70 
	mIB_USER_VERBS_EXP_CMD_SET_CTX_ATTR
,

71 
	mIB_USER_VERBS_EXP_CMD_CREATE_SRQ
,

72 
	mIB_USER_VERBS_EXP_CMD_ALLOC_DM
,

73 
	mIB_USER_VERBS_EXP_CMD_FREE_DM
,

77 
	mIB_USER_VERBS_CMD_EXP_CREATE_WQ
 =

78 
IB_USER_VERBS_EXP_CMD_CREATE_WQ
 +

79 
IB_USER_VERBS_EXP_CMD_FIRST
,

80 
	mIB_USER_VERBS_CMD_EXP_MODIFY_WQ
 =

81 
IB_USER_VERBS_EXP_CMD_MODIFY_WQ
 +

82 
IB_USER_VERBS_EXP_CMD_FIRST
,

83 
	mIB_USER_VERBS_CMD_EXP_DESTROY_WQ
 =

84 
IB_USER_VERBS_EXP_CMD_DESTROY_WQ
 +

85 
IB_USER_VERBS_EXP_CMD_FIRST
,

86 
	mIB_USER_VERBS_CMD_EXP_CREATE_RWQ_IND_TBL
 =

87 
IB_USER_VERBS_EXP_CMD_CREATE_RWQ_IND_TBL
 +

88 
IB_USER_VERBS_EXP_CMD_FIRST
,

89 
	mIB_USER_VERBS_CMD_EXP_DESTROY_RWQ_IND_TBL
 =

90 
IB_USER_VERBS_EXP_CMD_DESTROY_RWQ_IND_TBL
 +

91 
IB_USER_VERBS_EXP_CMD_FIRST
,

92 
	mIB_USER_VERBS_CMD_EXP_SET_CTX_ATTR
 =

93 
IB_USER_VERBS_EXP_CMD_SET_CTX_ATTR
 +

94 
IB_USER_VERBS_EXP_CMD_FIRST
,

95 
	mIB_USER_VERBS_CMD_EXP_CREATE_SRQ
 =

96 
IB_USER_VERBS_EXP_CMD_CREATE_SRQ
 +

97 
IB_USER_VERBS_EXP_CMD_FIRST
,

98 
	mIB_USER_VERBS_CMD_EXP_ALLOC_DM
 =

99 
IB_USER_VERBS_EXP_CMD_ALLOC_DM
 +

100 
IB_USER_VERBS_EXP_CMD_FIRST
,

101 
	mIB_USER_VERBS_CMD_EXP_FREE_DM
 =

102 
IB_USER_VERBS_EXP_CMD_FREE_DM
 +

103 
IB_USER_VERBS_EXP_CMD_FIRST
,

108 
	mIB_USER_VERBS_CMD_EXP_CREATE_WQ_V2
 = -1,

109 
	mIB_USER_VERBS_CMD_EXP_MODIFY_WQ_V2
 = -1,

110 
	mIB_USER_VERBS_CMD_EXP_DESTROY_WQ_V2
 = -1,

111 
	mIB_USER_VERBS_CMD_EXP_CREATE_RWQ_IND_TBL_V2
 = -1,

112 
	mIB_USER_VERBS_CMD_EXP_DESTROY_RWQ_IND_TBL_V2
 = -1,

113 
	mIB_USER_VERBS_CMD_EXP_SET_CTX_ATTR_V2
 = -1,

114 
	mIB_USER_VERBS_CMD_EXP_CREATE_SRQ_V2
 = -1,

115 
	mIB_USER_VERBS_CMD_EXP_ALLOC_DM_V2
 = -1,

116 
	mIB_USER_VERBS_CMD_EXP_FREE_DM_V2
 = -1,

119 
	eibv_exp_¸óã_qp_comp_mask
 {

120 
	mIBV_EXP_CREATE_QP_CAP_FLAGS
 = (1ULL << 0),

121 
	mIBV_EXP_CREATE_QP_INL_RECV
 = (1ULL << 1),

122 
	mIBV_EXP_CREATE_QP_QPG
 = (1ULL << 2),

123 
	mIBV_EXP_CREATE_QP_MAX_INL_KLMS
 = (1ULL << 3)

126 
	sibv_¸óã_qpg_öô_©åib
 {

127 
__u32
 
	mtss_chûd_cou¡
;

128 
__u32
 
	mrss_chûd_cou¡
;

131 
	sibv_¸óã_qpg
 {

132 
__u32
 
	mqpg_ty≥
;

135 
__u32
 
	m∑ª¡_h™dÀ
;

136 
__u32
 
	mª£rved
;

138 
ibv_¸óã_qpg_öô_©åib
 
	m∑ª¡_©åib
;

140 
__u32
 
	mª£rved2
;

143 
	eibv_exp_¸óã_qp_kî√l_Êags
 {

144 
	mIBV_EXP_CREATE_QP_KERNEL_FLAGS
 = 
IBV_EXP_QP_CREATE_CROSS_CHANNEL
 |

145 
IBV_EXP_QP_CREATE_MANAGED_SEND
 |

146 
IBV_EXP_QP_CREATE_MANAGED_RECV
 |

147 
IBV_EXP_QP_CREATE_ATOMIC_BE_REPLY
 |

148 
IBV_EXP_QP_CREATE_RX_END_PADDING
 |

149 
IBV_EXP_QP_CREATE_SCATTER_FCS
 |

150 
IBV_EXP_QP_CREATE_TUNNEL_OFFLOADS
 |

151 
IBV_EXP_QP_CREATE_PACKET_BASED_CREDIT_MODE


154 
	sibv_exp_¸óã_qp
 {

155 
ex_hdr
 
	mhdr
;

156 
__u64
 
	mcomp_mask
;

157 
__u64
 
	mu£r_h™dÀ
;

158 
__u32
 
	mpd_h™dÀ
;

159 
__u32
 
	m£nd_cq_h™dÀ
;

160 
__u32
 
	mªcv_cq_h™dÀ
;

161 
__u32
 
	m§q_h™dÀ
;

162 
__u32
 
	mmax_£nd_wr
;

163 
__u32
 
	mmax_ªcv_wr
;

164 
__u32
 
	mmax_£nd_sge
;

165 
__u32
 
	mmax_ªcv_sge
;

166 
__u32
 
	mmax_ölöe_d©a
;

167 
__u8
 
	msq_sig_Æl
;

168 
__u8
 
	mqp_ty≥
;

169 
__u8
 
	mis_§q
;

170 
__u8
 
	mª£rved
;

171 
__u64
 
	mqp_ˇp_Êags
;

172 
__u32
 
	mmax_öl_ªcv
;

173 
__u32
 
	mª£rved1
;

174 
ibv_¸óã_qpg
 
	mqpg
;

175 
__u64
 
	mmax_öl_£nd_klms
;

177 
__u64
 
	mrx_hash_fõlds_mask
;

178 
__u32
 
	mrwq_öd_tbl_h™dÀ
;

179 
__u8
 
	mrx_hash_fun˘i⁄
;

180 
__u8
 
	mrx_hash_key_Àn
;

181 
__u8
 
	mrx_hash_key
[128];

182 
__u16
 
	mª£rved
;

183 } 
	mrx_hash_öfo
;

184 
__u8
 
	mp‹t_num
;

185 
__u8
 
	mª£rved_2
[7];

186 
__u64
 
	mdrivî_d©a
[0];

189 
	eibv_exp_¸óã_qp_ª•_comp_mask
 {

190 
	mIBV_EXP_CREATE_QP_RESP_INL_RECV
 = (1ULL << 0),

193 
	sibv_exp_¸óã_qp_ª•
 {

194 
__u64
 
	mcomp_mask
;

195 
__u32
 
	mqp_h™dÀ
;

196 
__u32
 
	mq≤
;

197 
__u32
 
	mmax_£nd_wr
;

198 
__u32
 
	mmax_ªcv_wr
;

199 
__u32
 
	mmax_£nd_sge
;

200 
__u32
 
	mmax_ªcv_sge
;

201 
__u32
 
	mmax_ölöe_d©a
;

202 
__u32
 
	mmax_öl_ªcv
;

205 
	sibv_exp_umr_ˇps_ª•
 {

206 
__u32
 
	mmax_klm_li°_size
;

207 
__u32
 
	mmax_£nd_wqe_ölöe_klms
;

208 
__u32
 
	mmax_umr_ªcursi⁄_dïth
;

209 
__u32
 
	mmax_umr_°ride_dimísi⁄
;

212 
	sibv_exp_odp_ˇps_ª•
 {

213 
__u64
 
	mgíîÆ_odp_ˇps
;

215 
__u32
 
	mrc_odp_ˇps
;

216 
__u32
 
	muc_odp_ˇps
;

217 
__u32
 
	mud_odp_ˇps
;

218 
__u32
 
	mdc_odp_ˇps
;

219 
__u32
 
	mxrc_odp_ˇps
;

220 
__u32
 
	møw_ëh_odp_ˇps
;

221 } 
	m≥r_å™•‹t_ˇps
;

224 
	sibv_exp_quîy_devi˚
 {

225 
ex_hdr
 
	mhdr
;

226 
__u64
 
	mcomp_mask
;

227 
__u64
 
	mdrivî_d©a
[0];

230 
	sibv_exp_rx_hash_ˇps_ª•
 {

231 
__u32
 
	mmax_rwq_ödúe˘i⁄_èbÀs
;

232 
__u32
 
	mmax_rwq_ödúe˘i⁄_èbÀ_size
;

233 
__u64
 
	msuµ‹ãd_∑ckë_fõlds
;

234 
__u32
 
	msuµ‹ãd_qps
;

235 
__u8
 
	msuµ‹ãd_hash_fun˘i⁄s
;

236 
__u8
 
	mª£rved
[3];

239 
	sibv_exp_mp_rq_ˇps_ª•
 {

240 
__u32
 
	msuµ‹ãd_qps
;

241 
__u32
 
	mÆlowed_shi·s
;

242 
__u8
 
	mmö_sögÀ_wqe_log_num_of_°rides
;

243 
__u8
 
	mmax_sögÀ_wqe_log_num_of_°rides
;

244 
__u8
 
	mmö_sögÀ_°ride_log_num_of_byãs
;

245 
__u8
 
	mmax_sögÀ_°ride_log_num_of_byãs
;

246 
__u32
 
	mª£rved
;

249 
	sibv_exp_ec_ˇps_ª•
 {

250 
__u32
 
	mmax_ec_d©a_ve˘‹_cou¡
;

251 
__u32
 
	mmax_ec_ˇlc_öÊight_ˇlcs
;

254 
	sibv_exp_masked_©omic_ˇps
 {

255 
__u32
 
	mmax_Á_bô_bound¨y
;

256 
__u32
 
	mlog_max_©omic_ölöe
;

257 
__u64
 
	mmasked_log_©omic_¨g_sizes
;

258 
__u64
 
	mmasked_log_©omic_¨g_sizes_√tw‹k_ídü¬ess
;

261 
	sibv_exp_lso_ˇps_ª•
 {

262 
__u32
 
	mmax_tso
;

263 
__u32
 
	msuµ‹ãd_q±s
;

266 
	sibv_exp_∑ckë_∑cög_ˇps_ª•
 {

267 
__u32
 
	mqp_øã_limô_mö
;

268 
__u32
 
	mqp_øã_limô_max
;

269 
__u32
 
	msuµ‹ãd_q±s
;

270 
__u8
 
	mˇp_Êags
;

271 
__u8
 
	mª£rved
[3];

274 
	sibv_exp_ooo_ˇps_ª•
 {

275 
__u32
 
	mrc_ˇps
;

276 
__u32
 
	mxrc_ˇps
;

277 
__u32
 
	mdc_ˇps
;

278 
__u32
 
	mud_ˇps
;

281 
	sibv_exp_sw_∑rsög_ˇps_ª•
 {

282 
__u32
 
	msw_∑rsög_ofÊﬂds
;

283 
__u32
 
	msuµ‹ãd_q±s
;

286 
	sibv_exp_tm_ˇps_ª•
 {

287 
__u32
 
	mmax_∫dv_hdr_size
;

288 
__u32
 
	mmax_num_ègs
;

289 
__u32
 
	mˇ∑bûôy_Êags
;

290 
__u32
 
	mmax_›s
;

291 
__u32
 
	mmax_sge
;

292 
__u32
 
	mª£rved
;

295 
	sibv_exp_umr_fixed_size_ˇps_ª•
 {

296 
__u64
 
	mmax_ítôy_size
;

299 
	sibv_exp_pci_©omic_ˇps_ª•
 {

300 
__u16
 
	m„tch_add
;

301 
__u16
 
	msw≠
;

302 
__u16
 
	mcom∑ª_sw≠
;

303 
__u16
 
	mª£rved
;

306 
	sibv_exp_quîy_devi˚_ª•
 {

307 
__u64
 
	mcomp_mask
;

308 
__u64
 
	mfw_vî
;

309 
__u64
 
	mnode_guid
;

310 
__u64
 
	msys_image_guid
;

311 
__u64
 
	mmax_mr_size
;

312 
__u64
 
	m∑ge_size_ˇp
;

313 
__u32
 
	mvíd‹_id
;

314 
__u32
 
	mvíd‹_∑π_id
;

315 
__u32
 
	mhw_vî
;

316 
__u32
 
	mmax_qp
;

317 
__u32
 
	mmax_qp_wr
;

318 
__u32
 
	mdevi˚_ˇp_Êags
;

319 
__u32
 
	mmax_sge
;

320 
__u32
 
	mmax_sge_rd
;

321 
__u32
 
	mmax_cq
;

322 
__u32
 
	mmax_cqe
;

323 
__u32
 
	mmax_mr
;

324 
__u32
 
	mmax_pd
;

325 
__u32
 
	mmax_qp_rd_©om
;

326 
__u32
 
	mmax_ì_rd_©om
;

327 
__u32
 
	mmax_ªs_rd_©om
;

328 
__u32
 
	mmax_qp_öô_rd_©om
;

329 
__u32
 
	mmax_ì_öô_rd_©om
;

330 
__u32
 
	mexp_©omic_ˇp
;

331 
__u32
 
	mmax_ì
;

332 
__u32
 
	mmax_rdd
;

333 
__u32
 
	mmax_mw
;

334 
__u32
 
	mmax_øw_ùv6_qp
;

335 
__u32
 
	mmax_øw_ëhy_qp
;

336 
__u32
 
	mmax_mˇ°_gΩ
;

337 
__u32
 
	mmax_mˇ°_qp_©èch
;

338 
__u32
 
	mmax_tŸÆ_mˇ°_qp_©èch
;

339 
__u32
 
	mmax_ah
;

340 
__u32
 
	mmax_fmr
;

341 
__u32
 
	mmax_m≠_≥r_fmr
;

342 
__u32
 
	mmax_§q
;

343 
__u32
 
	mmax_§q_wr
;

344 
__u32
 
	mmax_§q_sge
;

345 
__u16
 
	mmax_pkeys
;

346 
__u8
 
	mloˇl_ˇ_ack_dñay
;

347 
__u8
 
	mphys_p‹t_˙t
;

348 
__u8
 
	mª£rved
[4];

349 
__u64
 
	mtime°amp_mask
;

350 
__u64
 
	mhˇ_c‹e_˛ock
;

351 
__u64
 
	mdevi˚_ˇp_Êags2
;

352 
__u32
 
	mdc_rd_ªq
;

353 
__u32
 
	mdc_rd_ªs
;

354 
__u32
 
	mölöe_ªcv_sz
;

355 
__u32
 
	mmax_rss_tbl_sz
;

356 
__u64
 
	mlog_©omic_¨g_sizes
;

357 
__u32
 
	mmax_Á_bô_bound¨y
;

358 
__u32
 
	mlog_max_©omic_ölöe
;

359 
ibv_exp_umr_ˇps_ª•
 
	mumr_ˇps
;

360 
ibv_exp_odp_ˇps_ª•
 
	modp_ˇps
;

361 
__u32
 
	mmax_d˘
;

362 
__u32
 
	mmax_˘x_ªs_domaö
;

363 
ibv_exp_rx_hash_ˇps_ª•
 
	mrx_hash
;

364 
__u32
 
	mmax_wq_ty≥_rq
;

365 
__u32
 
	mmax_devi˚_˘x
;

366 
ibv_exp_mp_rq_ˇps_ª•
 
	mmp_rq_ˇps
;

367 
__u16
 
	mwq_vœn_ofÊﬂds_ˇp
;

368 
__u8
 
	mª£rved1
[2];

369 
__u32
 
	mec_w_mask
;

370 
ibv_exp_ec_ˇps_ª•
 
	mec_ˇps
;

371 
ibv_exp_masked_©omic_ˇps
 
	mmasked_©omic_ˇps
;

372 
__u16
 
	mrx_∑d_íd_addr_Æign
;

373 
__u8
 
	mª£rved2
[6];

374 
ibv_exp_lso_ˇps_ª•
 
	mtso_ˇps
;

375 
ibv_exp_∑ckë_∑cög_ˇps_ª•
 
	m∑ckë_∑cög_ˇps
;

376 
ibv_exp_ooo_ˇps_ª•
 
	mooo_ˇps
;

377 
ibv_exp_sw_∑rsög_ˇps_ª•
 
	msw_∑rsög_ˇps
;

378 
__u64
 
	modp_mr_max_size
;

379 
ibv_exp_tm_ˇps_ª•
 
	mtm_ˇps
;

380 
__u32
 
	mtu¬ñ_ofÊﬂds_ˇps
;

381 
__u32
 
	mtu¬ñed_©omic_ˇps
;

382 
__u64
 
	mmax_dm_size
;

383 
__u64
 
	mcomp_mask_2
;

384 
ibv_exp_umr_fixed_size_ˇps_ª•
 
	mumr_fixed_size_ˇps
;

385 
ibv_exp_pci_©omic_ˇps_ª•
 
	mpci_©omic_ˇps
;

388 
	sibv_exp_¸óã_d˘
 {

389 
ex_hdr
 
	mhdr
;

390 
__u64
 
	mcomp_mask
;

391 
__u64
 
	mu£r_h™dÀ
;

392 
__u32
 
	mpd_h™dÀ
;

393 
__u32
 
	mcq_h™dÀ
;

394 
__u32
 
	m§q_h™dÀ
;

395 
__u32
 
	mac˚ss_Êags
;

396 
__u64
 
	mdc_key
;

397 
__u32
 
	mÊow_œbñ
;

398 
__u8
 
	mmö_∫r_timî
;

399 
__u8
 
	mt˛ass
;

400 
__u8
 
	mp‹t
;

401 
__u8
 
	mpkey_ödex
;

402 
__u8
 
	mgid_ödex
;

403 
__u8
 
	mh›_limô
;

404 
__u8
 
	mmtu
;

405 
__u8
 
	mrsvd0
;

406 
__u32
 
	m¸óã_Êags
;

407 
__u32
 
	mölöe_size
;

408 
__u32
 
	mrsvd1
;

409 
__u64
 
	mdrivî_d©a
[0];

412 
	sibv_exp_¸óã_d˘_ª•
 {

413 
__u32
 
	md˘_h™dÀ
;

414 
__u32
 
	md˘_num
;

415 
__u32
 
	mölöe_size
;

416 
__u32
 
	mrsvd
;

419 
	sibv_exp_de°roy_d˘
 {

420 
ex_hdr
 
	mhdr
;

421 
__u64
 
	mcomp_mask
;

422 
__u32
 
	md˘_h™dÀ
;

423 
__u32
 
	mrsvd
;

424 
__u64
 
	mdrivî_d©a
[0];

427 
	sibv_exp_de°roy_d˘_ª•
 {

428 
__u32
 
	mevíts_ªp‹ãd
;

429 
__u32
 
	mª£rved
;

432 
	sibv_exp_quîy_d˘
 {

433 
ex_hdr
 
	mhdr
;

434 
__u64
 
	mcomp_mask
;

435 
__u32
 
	md˘_h™dÀ
;

436 
__u32
 
	mª£rved
;

437 
__u64
 
	mdrivî_d©a
[0];

440 
	sibv_exp_quîy_d˘_ª•
 {

441 
__u64
 
	mdc_key
;

442 
__u32
 
	mac˚ss_Êags
;

443 
__u32
 
	mÊow_œbñ
;

444 
__u32
 
	mkey_viﬁ©i⁄s
;

445 
__u8
 
	mp‹t
;

446 
__u8
 
	mmö_∫r_timî
;

447 
__u8
 
	mt˛ass
;

448 
__u8
 
	mmtu
;

449 
__u8
 
	mpkey_ödex
;

450 
__u8
 
	mgid_ödex
;

451 
__u8
 
	mh›_limô
;

452 
__u8
 
	m°©e
;

453 
__u32
 
	mrsvd
;

454 
__u64
 
	mdrivî_d©a
[0];

457 
	sibv_exp_¨m_d˘
 {

458 
ex_hdr
 
	mhdr
;

459 
__u64
 
	mcomp_mask
;

460 
__u32
 
	md˘_h™dÀ
;

461 
__u32
 
	mª£rved
;

462 
__u64
 
	mdrivî_d©a
[0];

465 
	sibv_exp_¨m_d˘_ª•
 {

466 
__u64
 
	mª£rved
;

469 
	sibv_exp_cmd_£t_c⁄ãxt_©å
 {

470 
ex_hdr
 
	mhdr
;

471 
__u64
 
	m≥î_id
;

472 
__u8
 
	m≥î_«me
[64];

473 
__u32
 
	mcomp_mask
;

474 
__u32
 
	mª£rved
;

477 
	sibv_exp_modify_cq
 {

478 
ex_hdr
 
	mhdr
;

479 
__u32
 
	mcq_h™dÀ
;

480 
__u32
 
	m©å_mask
;

481 
__u16
 
	mcq_cou¡
;

482 
__u16
 
	mcq_≥riod
;

483 
__u32
 
	mcq_ˇp_Êags
;

484 
__u32
 
	mcomp_mask
;

485 
__u32
 
	mrsvd
;

488 
	sibv_exp_modify_qp
 {

489 
ex_hdr
 
	mhdr
;

490 
__u32
 
	mcomp_mask
;

491 
ibv_qp_de°
 
	mde°
;

492 
ibv_qp_de°
 
	mÆt_de°
;

493 
__u32
 
	mqp_h™dÀ
;

494 
__u32
 
	m©å_mask
;

495 
__u32
 
	mqkey
;

496 
__u32
 
	mrq_p¢
;

497 
__u32
 
	msq_p¢
;

498 
__u32
 
	mde°_qp_num
;

499 
__u32
 
	mqp_ac˚ss_Êags
;

500 
__u16
 
	mpkey_ödex
;

501 
__u16
 
	mÆt_pkey_ödex
;

502 
__u8
 
	mqp_°©e
;

503 
__u8
 
	mcur_qp_°©e
;

504 
__u8
 
	m∑th_mtu
;

505 
__u8
 
	m∑th_mig_°©e
;

506 
__u8
 
	mí_sqd_async_nŸify
;

507 
__u8
 
	mmax_rd_©omic
;

508 
__u8
 
	mmax_de°_rd_©omic
;

509 
__u8
 
	mmö_∫r_timî
;

510 
__u8
 
	mp‹t_num
;

511 
__u8
 
	mtimeout
;

512 
__u8
 
	mªåy_˙t
;

513 
__u8
 
	m∫r_ªåy
;

514 
__u8
 
	mÆt_p‹t_num
;

515 
__u8
 
	mÆt_timeout
;

516 
__u8
 
	mª£rved
[6];

517 
__u64
 
	md˘_key
;

518 
__u32
 
	mexp_©å_mask
;

519 
__u32
 
	mÊow_íå›y
;

520 
__u32
 
	møã_limô
;

522 
__u32
 
	mmax_bur°_sz
;

523 
__u16
 
	mtypiˇl_pkt_sz
;

524 
__u16
 
	mª£rved
;

525 } 
	mbur°_öfo
;

526 
__u32
 
	mª£rved1
;

527 
__u64
 
	mdrivî_d©a
[0];

530 
	eibv_exp_¸óã_cq_comp_mask
 {

531 
	mIBV_EXP_CREATE_CQ_CAP_FLAGS
 = (
uöt64_t
)1 << 0,

534 
	sibv_exp_¸óã_cq
 {

535 
ex_hdr
 
	mhdr
;

536 
__u64
 
	mcomp_mask
;

537 
__u64
 
	mu£r_h™dÀ
;

538 
__u32
 
	mcqe
;

539 
__u32
 
	mcomp_ve˘‹
;

540 
__s32
 
	mcomp_ch™√l
;

541 
__u32
 
	mª£rved
;

542 
__u64
 
	m¸óã_Êags
;

543 
__u64
 
	mdrivî_d©a
[0];

546 
	sibv_exp_¸óã_mr
 {

547 
ex_hdr
 
	mhdr
;

548 
__u64
 
	mcomp_mask
;

549 
__u32
 
	mpd_h™dÀ
;

550 
__u32
 
	mmax_klm_li°_size
;

551 
__u64
 
	mexp_ac˚ss_Êags
;

552 
__u32
 
	m¸óã_Êags
;

553 
__u32
 
	mª£rved
;

554 
__u64
 
	mdrivî_d©a
[0];

557 
	sibv_exp_¸óã_mr_ª•
 {

558 
__u64
 
	mcomp_mask
;

559 
__u32
 
	mh™dÀ
;

560 
__u32
 
	mlkey
;

561 
__u32
 
	mrkey
;

562 
__u32
 
	mª£rved
;

563 
__u64
 
	mdrivî_d©a
[0];

566 
	sibv_exp_quîy_mkey
 {

567 
ex_hdr
 
	mhdr
;

568 
__u64
 
	mcomp_mask
;

569 
__u32
 
	mh™dÀ
;

570 
__u32
 
	mlkey
;

571 
__u32
 
	mrkey
;

572 
__u32
 
	mª£rved
;

573 
__u64
 
	mdrivî_d©a
[0];

576 
	sibv_exp_quîy_mkey_ª•
 {

577 
__u64
 
	mcomp_mask
;

578 
__u32
 
	mmax_klm_li°_size
;

579 
__u32
 
	mª£rved
;

580 
__u64
 
	mdrivî_d©a
[0];

583 
	eibv_exp_ªg_mr_comp_mask
 {

584 
	mIBV_EXP_REG_MR_EXP_ACCESS_FLAGS
 = 1ULL << 0,

585 
	mIBV_EXP_REG_MR_DM_HANDLE
 = 1ULL << 1,

588 
	sibv_exp_ªg_mr
 {

589 
ex_hdr
 
	mhdr
;

590 
__u64
 
	m°¨t
;

591 
__u64
 
	mÀngth
;

592 
__u64
 
	mhˇ_va
;

593 
__u32
 
	mpd_h™dÀ
;

594 
__u32
 
	mª£rved
;

595 
__u64
 
	mexp_ac˚ss_Êags
;

596 
__u64
 
	mcomp_mask
;

597 
__u32
 
	mdm_h™dÀ
;

598 
__u32
 
	mª£rved1
;

601 
	sibv_exp_¥e„tch_mr
 {

602 
ex_hdr
 
	mhdr
;

603 
__u64
 
	mcomp_mask
;

604 
__u32
 
	mmr_h™dÀ
;

605 
__u32
 
	mÊags
;

606 
__u64
 
	m°¨t
;

607 
__u64
 
	mÀngth
;

610 
	sibv_exp_ªg_mr_ª•
 {

611 
__u32
 
	mmr_h™dÀ
;

612 
__u32
 
	mlkey
;

613 
__u32
 
	mrkey
;

614 
__u32
 
	mª£rved
;

615 
__u64
 
	mcomp_mask
;

618 
	sibv_exp_ªªg_mr
 {

619 
ex_hdr
 
	mhdr
;

620 
__u32
 
	mcomp_mask
;

621 
__u32
 
	mmr_h™dÀ
;

622 
__u32
 
	mÊags
;

623 
__u32
 
	mª£rved
;

624 
__u64
 
	m°¨t
;

625 
__u64
 
	mÀngth
;

626 
__u64
 
	mhˇ_va
;

627 
__u32
 
	mpd_h™dÀ
;

628 
__u32
 
	mac˚ss_Êags
;

631 
	sibv_exp_ªªg_mr_ª•
 {

632 
__u32
 
	mcomp_mask
;

633 
__u32
 
	mlkey
;

634 
__u32
 
	mrkey
;

635 
__u32
 
	mª£rved
;

638 
	sibv_exp_cmd_wq_mp_rq
 {

639 
__u32
 
	mu£_shi·
;

640 
__u8
 
	msögÀ_wqe_log_num_of_°rides
;

641 
__u8
 
	msögÀ_°ride_log_num_of_byãs
;

642 
__u16
 
	mª£rved
;

645 
	eibv_exp_cmd_¸óã_wq_comp_mask
 {

646 
	mIBV_EXP_CMD_CREATE_WQ_MP_RQ
 = 1 << 0,

647 
	mIBV_EXP_CMD_CREATE_WQ_VLAN_OFFLOADS
 = 1 << 1,

648 
	mIBV_EXP_CMD_CREATE_WQ_FLAGS
 = 1 << 2,

651 
	sibv_exp_¸óã_wq
 {

652 
ex_hdr
 
	mhdr
;

653 
__u32
 
	mcomp_mask
;

654 
__u32
 
	mwq_ty≥
;

655 
__u64
 
	mu£r_h™dÀ
;

656 
__u32
 
	mpd_h™dÀ
;

657 
__u32
 
	mcq_h™dÀ
;

658 
__u32
 
	mmax_ªcv_wr
;

659 
__u32
 
	mmax_ªcv_sge
;

662 
	sibv_exp_¸óã_wq_ª•
 {

663 
__u32
 
	mcomp_mask
;

664 
__u32
 
	mª•⁄£_Àngth
;

665 
__u32
 
	mwq_h™dÀ
;

666 
__u32
 
	mmax_ªcv_wr
;

667 
__u32
 
	mmax_ªcv_sge
;

668 
__u32
 
	mwqn
;

671 
	sib_exp_de°roy_wq
 {

672 
ex_hdr
 
	mhdr
;

673 
__u32
 
	mcomp_mask
;

674 
__u32
 
	mwq_h™dÀ
;

677 
	sibv_de°roy_wq_ª•
 {

678 
__u32
 
	mcomp_mask
;

679 
__u32
 
	mª•⁄£_Àngth
;

680 
__u32
 
	mevíts_ªp‹ãd
;

681 
__u32
 
	mª£rved
;

684 
	sib_exp_modify_wq
 {

685 
ex_hdr
 
	mhdr
;

686 
__u32
 
	mcomp_mask
;

687 
__u32
 
	mwq_h™dÀ
;

688 
__u32
 
	mwq_°©e
;

689 
__u32
 
	mcuº_wq_°©e
;

692 
	sibv_exp_¸óã_§q
 {

693 
ex_hdr
 
	mhdr
;

694 
__u64
 
	mcomp_mask
;

695 
__u64
 
	mu£r_h™dÀ
;

696 
__u32
 
	m§q_ty≥
;

697 
__u32
 
	mpd_h™dÀ
;

698 
__u32
 
	mmax_wr
;

699 
__u32
 
	mmax_sge
;

700 
__u32
 
	m§q_limô
;

701 
__u32
 
	mcq_h™dÀ
;

702 
__u32
 
	mxrcd_h™dÀ
;

703 
__u32
 
	mª£rved
;

704 
__u64
 
	mdrivî_d©a
[0];

707 
	sibv_exp_¸óã_§q_ª•
 {

708 
ibv_¸óã_§q_ª•
 
	mba£
;

709 
__u32
 
	mcomp_mask
;

710 
__u32
 
	mª•⁄£_Àngth
;

713 
	sibv_exp_¸óã_rwq_öd_èbÀ
 {

714 
ex_hdr
 
	mhdr
;

715 
__u32
 
	mcomp_mask
;

716 
__u32
 
	mlog_öd_tbl_size
;

723 
	sibv_exp_¸óã_rwq_öd_èbÀ_ª•
 {

724 
__u32
 
	mcomp_mask
;

725 
__u32
 
	mª•⁄£_Àngth
;

726 
__u32
 
	möd_tbl_h™dÀ
;

727 
__u32
 
	möd_tbl_num
;

730 
	sibv_exp_de°roy_rwq_öd_èbÀ
 {

731 
ex_hdr
 
	mhdr
;

732 
__u32
 
	mcomp_mask
;

733 
__u32
 
	möd_tbl_h™dÀ
;

736 
	sibv_exp_kîn_ùv6_fûãr
 {

737 
__u8
 
	m§c_ù
[16];

738 
__u8
 
	md°_ù
[16];

741 
	sibv_exp_kîn_•ec_ùv6
 {

742 
__u32
 
	mty≥
;

743 
__u16
 
	msize
;

744 
__u16
 
	mª£rved
;

745 
ibv_exp_kîn_ùv6_fûãr
 
	mvÆ
;

746 
ibv_exp_kîn_ùv6_fûãr
 
	mmask
;

749 
	sibv_exp_kîn_ùv6_ext_fûãr
 {

750 
__u8
 
	m§c_ù
[16];

751 
__u8
 
	md°_ù
[16];

752 
__u32
 
	mÊow_œbñ
;

753 
__u8
 
	m√xt_hdr
;

754 
__u8
 
	måaffic_˛ass
;

755 
__u8
 
	mh›_limô
;

756 
__u8
 
	mª£rved
;

759 
	sibv_exp_kîn_•ec_ùv6_ext
 {

760 
__u32
 
	mty≥
;

761 
__u16
 
	msize
;

762 
__u16
 
	mª£rved
;

763 
ibv_exp_kîn_ùv6_ext_fûãr
 
	mvÆ
;

764 
ibv_exp_kîn_ùv6_ext_fûãr
 
	mmask
;

767 
	sibv_exp_kîn_ùv4_ext_fûãr
 {

768 
__u32
 
	m§c_ù
;

769 
__u32
 
	md°_ù
;

770 
__u8
 
	m¥Ÿo
;

771 
__u8
 
	mtos
;

772 
__u8
 
	mâl
;

773 
__u8
 
	mÊags
;

776 
	sibv_exp_kîn_•ec_ùv4_ext
 {

777 
__u32
 
	mty≥
;

778 
__u16
 
	msize
;

779 
__u16
 
	mª£rved
;

780 
ibv_exp_kîn_ùv4_ext_fûãr
 
	mvÆ
;

781 
ibv_exp_kîn_ùv4_ext_fûãr
 
	mmask
;

784 
	sibv_exp_kîn_tu¬ñ_fûãr
 {

785 
__u32
 
	mtu¬ñ_id
;

788 
	sibv_exp_kîn_•ec_tu¬ñ
 {

789 
__u32
 
	mty≥
;

790 
__u16
 
	msize
;

791 
__u16
 
	mª£rved
;

792 
ibv_exp_kîn_tu¬ñ_fûãr
 
	mvÆ
;

793 
ibv_exp_kîn_tu¬ñ_fûãr
 
	mmask
;

796 
	sibv_exp_kîn_•ec_a˘i⁄_èg
 {

797 
__u32
 
	mty≥
;

798 
__u16
 
	msize
;

799 
__u16
 
	mª£rved
;

800 
__u32
 
	mèg_id
;

801 
__u32
 
	mª£rved1
;

804 
	sibv_exp_kîn_•ec_a˘i⁄_dr›
 {

805 
__u32
 
	mty≥
;

806 
__u16
 
	msize
;

807 
__u16
 
	mª£rved
;

810 
	sibv_exp_kîn_•ec
 {

813 
__u32
 
	mty≥
;

814 
__u16
 
	msize
;

815 
__u16
 
	mª£rved
;

816 } 
	mhdr
;

817 
ibv_kîn_•ec_ib
 
	mib
;

818 
ibv_kîn_•ec_ëh
 
	mëh
;

819 
ibv_kîn_•ec_ùv4
 
	mùv4
;

820 
ibv_exp_kîn_•ec_ùv4_ext
 
	mùv4_ext
;

821 
ibv_kîn_•ec_t˝_udp
 
	mt˝_udp
;

822 
ibv_exp_kîn_•ec_ùv6
 
	mùv6
;

823 
ibv_exp_kîn_•ec_ùv6_ext
 
	mùv6_ext
;

824 
ibv_exp_kîn_•ec_tu¬ñ
 
	mtu¬ñ
;

825 
ibv_exp_kîn_•ec_a˘i⁄_èg
 
	mÊow_èg
;

826 
ibv_exp_kîn_•ec_a˘i⁄_dr›
 
	mdr›
;

830 
	sibv_exp_Æloc_dm
 {

831 
ex_hdr
 
	mhdr
;

832 
__u32
 
	mcomp_mask
;

833 
__u32
 
	mª£rved
;

834 
__u64
 
	muaddr
;

835 
__u64
 
	mÀngth
;

836 
__u64
 
	mdrivî_d©a
[0];

839 
	sibv_exp_Æloc_dm_ª•
 {

840 
__u32
 
	mcomp_mask
;

841 
__u32
 
	mª•⁄£_Àngth
;

842 
__u32
 
	mdm_h™dÀ
;

843 
__u32
 
	mª£rved
;

844 
__u64
 
	m°¨t_off£t
;

847 
	sibv_exp_‰ì_dm
 {

848 
ex_hdr
 
	mhdr
;

849 
__u32
 
	mdm_h™dÀ
;

850 
__u32
 
	mª£rved
;

	@libibverbs-41mlnx1/include/infiniband/marshall.h

33 #i‚de‡
INFINIBAND_MARSHALL_H


34 
	#INFINIBAND_MARSHALL_H


	)

36 
	~<öföib™d/vîbs.h
>

37 
	~<öföib™d/ß.h
>

38 
	~<öföib™d/kîn-abi.h
>

39 
	~<öföib™d/ß-kîn-abi.h
>

41 #ifde‡
__˝lu•lus


42 
	#BEGIN_C_DECLS
 "C" {

	)

43 
	#END_C_DECLS
 }

	)

45 
	#BEGIN_C_DECLS


	)

46 
	#END_C_DECLS


	)

49 
BEGIN_C_DECLS


51 
ibv_c›y_qp_©å_‰om_kîn
(
ibv_qp_©å
 *
d°
,

52 
ibv_kîn_qp_©å
 *
§c
);

54 
ibv_c›y_ah_©å_‰om_kîn
(
ibv_ah_©å
 *
d°
,

55 
ibv_kîn_ah_©å
 *
§c
);

57 
ibv_c›y_∑th_ªc_‰om_kîn
(
ibv_ß_∑th_ªc
 *
d°
,

58 
ibv_kîn_∑th_ªc
 *
§c
);

60 
ibv_c›y_∑th_ªc_to_kîn
(
ibv_kîn_∑th_ªc
 *
d°
,

61 
ibv_ß_∑th_ªc
 *
§c
);

63 
	gEND_C_DECLS


	@libibverbs-41mlnx1/include/infiniband/ofa_verbs.h

1 #i‚de‡
INFINIBAND_OFA_VERBS_H


2 
	#INFINIBAND_OFA_VERBS_H


	)

4 
	gibv_§q_öô_©å
;

5 
	gibv_cq
;

6 
	gibv_pd
;

7 
	gibv_qp_öô_©å
;

8 
	gibv_qp_©å
;

11 #ifde‡
__GNUC__


12 
	#DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

14 
	#DEPRECATED


	)

18 
	#LEGACY_XRC_SRQ_HANDLE
 0xffffffff

	)

20 
	sibv_xrc_domaö
 {

21 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

22 
uöt32_t
 
	mh™dÀ
;

25 
	sibv_§q_Àgacy
 {

26 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

27 *
	m§q_c⁄ãxt
;

28 
ibv_pd
 *
	mpd
;

29 
uöt32_t
 
	mh™dÀ
;

31 
uöt32_t
 
	mevíts_com∂ëed
;

33 
uöt32_t
 
	mxrc_§q_num_bö_com∑t
;

34 
ibv_xrc_domaö
 *
	mxrc_domaö_bö_com∑t
;

35 
ibv_cq
 *
	mxrc_cq_bö_com∑t
;

37 
±hªad_muãx_t
 
	mmuãx
;

38 
±hªad_c⁄d_t
 
	mc⁄d
;

40 *
	mibv_§q
;

44 
uöt32_t
 
	mxrc_§q_num
;

45 
ibv_xrc_domaö
 *
	mxrc_domaö
;

46 
ibv_cq
 *
	mxrc_cq
;

72 
ibv_xrc_domaö
 *
	$ibv_›í_xrc_domaö
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

73 
fd
, 
oÊag
Ë
DEPRECATED
;

89 
ibv_§q
 *
	$ibv_¸óã_xrc_§q
(
ibv_pd
 *
pd
,

90 
ibv_xrc_domaö
 *
xrc_domaö
,

91 
ibv_cq
 *
xrc_cq
,

92 
ibv_§q_öô_©å
 *
§q_öô_©å
Ë
DEPRECATED
;

102 
	$ibv_˛o£_xrc_domaö
(
ibv_xrc_domaö
 *
d
Ë
DEPRECATED
;

126 
	$ibv_¸óã_xrc_rcv_qp
(
ibv_qp_öô_©å
 *
öô_©å
,

127 
uöt32_t
 *
xrc_rcv_q≤
Ë
DEPRECATED
;

152 
	$ibv_modify_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

153 
uöt32_t
 
xrc_qp_num
,

154 
ibv_qp_©å
 *
©å
, 
©å_mask
Ë
DEPRECATED
;

168 
	$ibv_quîy_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
, 
uöt32_t
 
xrc_qp_num
,

169 
ibv_qp_©å
 *
©å
, 
©å_mask
,

170 
ibv_qp_öô_©å
 *
öô_©å
Ë
DEPRECATED
;

185 
	$ibv_ªg_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

186 
uöt32_t
 
xrc_qp_num
Ë
DEPRECATED
;

204 
	$ibv_uƒeg_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

205 
uöt32_t
 
xrc_qp_num
Ë
DEPRECATED
;

	@libibverbs-41mlnx1/include/infiniband/opcode.h

33 #i‚de‡
INFINIBAND_OPCODE_H


34 
	#INFINIBAND_OPCODE_H


	)

45 
	#IBV_OPCODE
(
å™•‹t
, 
›
) \

46 
IBV_OPCODE_
 ## 
å™•‹t
 ## 
_
 ## 
›
 = \

47 
IBV_OPCODE_
 ## 
å™•‹t
 + IBV_OPCODE_ ## 
›


	)

51 
	mIBV_OPCODE_RC
 = 0x00,

52 
	mIBV_OPCODE_UC
 = 0x20,

53 
	mIBV_OPCODE_RD
 = 0x40,

54 
	mIBV_OPCODE_UD
 = 0x60,

57 
	mIBV_OPCODE_SEND_FIRST
 = 0x00,

58 
	mIBV_OPCODE_SEND_MIDDLE
 = 0x01,

59 
	mIBV_OPCODE_SEND_LAST
 = 0x02,

60 
	mIBV_OPCODE_SEND_LAST_WITH_IMMEDIATE
 = 0x03,

61 
	mIBV_OPCODE_SEND_ONLY
 = 0x04,

62 
	mIBV_OPCODE_SEND_ONLY_WITH_IMMEDIATE
 = 0x05,

63 
	mIBV_OPCODE_RDMA_WRITE_FIRST
 = 0x06,

64 
	mIBV_OPCODE_RDMA_WRITE_MIDDLE
 = 0x07,

65 
	mIBV_OPCODE_RDMA_WRITE_LAST
 = 0x08,

66 
	mIBV_OPCODE_RDMA_WRITE_LAST_WITH_IMMEDIATE
 = 0x09,

67 
	mIBV_OPCODE_RDMA_WRITE_ONLY
 = 0x0a,

68 
	mIBV_OPCODE_RDMA_WRITE_ONLY_WITH_IMMEDIATE
 = 0x0b,

69 
	mIBV_OPCODE_RDMA_READ_REQUEST
 = 0x0c,

70 
	mIBV_OPCODE_RDMA_READ_RESPONSE_FIRST
 = 0x0d,

71 
	mIBV_OPCODE_RDMA_READ_RESPONSE_MIDDLE
 = 0x0e,

72 
	mIBV_OPCODE_RDMA_READ_RESPONSE_LAST
 = 0x0f,

73 
	mIBV_OPCODE_RDMA_READ_RESPONSE_ONLY
 = 0x10,

74 
	mIBV_OPCODE_ACKNOWLEDGE
 = 0x11,

75 
	mIBV_OPCODE_ATOMIC_ACKNOWLEDGE
 = 0x12,

76 
	mIBV_OPCODE_COMPARE_SWAP
 = 0x13,

77 
	mIBV_OPCODE_FETCH_ADD
 = 0x14,

83 
IBV_OPCODE
(
RC
, 
SEND_FIRST
),

84 
IBV_OPCODE
(
RC
, 
SEND_MIDDLE
),

85 
IBV_OPCODE
(
RC
, 
SEND_LAST
),

86 
IBV_OPCODE
(
RC
, 
SEND_LAST_WITH_IMMEDIATE
),

87 
IBV_OPCODE
(
RC
, 
SEND_ONLY
),

88 
IBV_OPCODE
(
RC
, 
SEND_ONLY_WITH_IMMEDIATE
),

89 
IBV_OPCODE
(
RC
, 
RDMA_WRITE_FIRST
),

90 
IBV_OPCODE
(
RC
, 
RDMA_WRITE_MIDDLE
),

91 
IBV_OPCODE
(
RC
, 
RDMA_WRITE_LAST
),

92 
IBV_OPCODE
(
RC
, 
RDMA_WRITE_LAST_WITH_IMMEDIATE
),

93 
IBV_OPCODE
(
RC
, 
RDMA_WRITE_ONLY
),

94 
IBV_OPCODE
(
RC
, 
RDMA_WRITE_ONLY_WITH_IMMEDIATE
),

95 
IBV_OPCODE
(
RC
, 
RDMA_READ_REQUEST
),

96 
IBV_OPCODE
(
RC
, 
RDMA_READ_RESPONSE_FIRST
),

97 
IBV_OPCODE
(
RC
, 
RDMA_READ_RESPONSE_MIDDLE
),

98 
IBV_OPCODE
(
RC
, 
RDMA_READ_RESPONSE_LAST
),

99 
IBV_OPCODE
(
RC
, 
RDMA_READ_RESPONSE_ONLY
),

100 
IBV_OPCODE
(
RC
, 
ACKNOWLEDGE
),

101 
IBV_OPCODE
(
RC
, 
ATOMIC_ACKNOWLEDGE
),

102 
IBV_OPCODE
(
RC
, 
COMPARE_SWAP
),

103 
IBV_OPCODE
(
RC
, 
FETCH_ADD
),

106 
IBV_OPCODE
(
UC
, 
SEND_FIRST
),

107 
IBV_OPCODE
(
UC
, 
SEND_MIDDLE
),

108 
IBV_OPCODE
(
UC
, 
SEND_LAST
),

109 
IBV_OPCODE
(
UC
, 
SEND_LAST_WITH_IMMEDIATE
),

110 
IBV_OPCODE
(
UC
, 
SEND_ONLY
),

111 
IBV_OPCODE
(
UC
, 
SEND_ONLY_WITH_IMMEDIATE
),

112 
IBV_OPCODE
(
UC
, 
RDMA_WRITE_FIRST
),

113 
IBV_OPCODE
(
UC
, 
RDMA_WRITE_MIDDLE
),

114 
IBV_OPCODE
(
UC
, 
RDMA_WRITE_LAST
),

115 
IBV_OPCODE
(
UC
, 
RDMA_WRITE_LAST_WITH_IMMEDIATE
),

116 
IBV_OPCODE
(
UC
, 
RDMA_WRITE_ONLY
),

117 
IBV_OPCODE
(
UC
, 
RDMA_WRITE_ONLY_WITH_IMMEDIATE
),

120 
IBV_OPCODE
(
RD
, 
SEND_FIRST
),

121 
IBV_OPCODE
(
RD
, 
SEND_MIDDLE
),

122 
IBV_OPCODE
(
RD
, 
SEND_LAST
),

123 
IBV_OPCODE
(
RD
, 
SEND_LAST_WITH_IMMEDIATE
),

124 
IBV_OPCODE
(
RD
, 
SEND_ONLY
),

125 
IBV_OPCODE
(
RD
, 
SEND_ONLY_WITH_IMMEDIATE
),

126 
IBV_OPCODE
(
RD
, 
RDMA_WRITE_FIRST
),

127 
IBV_OPCODE
(
RD
, 
RDMA_WRITE_MIDDLE
),

128 
IBV_OPCODE
(
RD
, 
RDMA_WRITE_LAST
),

129 
IBV_OPCODE
(
RD
, 
RDMA_WRITE_LAST_WITH_IMMEDIATE
),

130 
IBV_OPCODE
(
RD
, 
RDMA_WRITE_ONLY
),

131 
IBV_OPCODE
(
RD
, 
RDMA_WRITE_ONLY_WITH_IMMEDIATE
),

132 
IBV_OPCODE
(
RD
, 
RDMA_READ_REQUEST
),

133 
IBV_OPCODE
(
RD
, 
RDMA_READ_RESPONSE_FIRST
),

134 
IBV_OPCODE
(
RD
, 
RDMA_READ_RESPONSE_MIDDLE
),

135 
IBV_OPCODE
(
RD
, 
RDMA_READ_RESPONSE_LAST
),

136 
IBV_OPCODE
(
RD
, 
RDMA_READ_RESPONSE_ONLY
),

137 
IBV_OPCODE
(
RD
, 
ACKNOWLEDGE
),

138 
IBV_OPCODE
(
RD
, 
ATOMIC_ACKNOWLEDGE
),

139 
IBV_OPCODE
(
RD
, 
COMPARE_SWAP
),

140 
IBV_OPCODE
(
RD
, 
FETCH_ADD
),

143 
IBV_OPCODE
(
UD
, 
SEND_ONLY
),

144 
IBV_OPCODE
(
UD
, 
SEND_ONLY_WITH_IMMEDIATE
)

	@libibverbs-41mlnx1/include/infiniband/peer_ops.h

33 #i‚de‡
PEER_OPS_H


34 
	#PEER_OPS_H


	)

36 
	~<î∫o.h
>

37 
	~<°ddef.h
>

38 
	~<°döt.h
>

39 
	~<öföib™d/vîbs.h
>

41 
BEGIN_C_DECLS


43 
	eibv_exp_≥î_›
 {

44 
	mIBV_EXP_PEER_OP_RESERVED1
 = 1,

46 
	mIBV_EXP_PEER_OP_FENCE
 = 0,

48 
	mIBV_EXP_PEER_OP_STORE_DWORD
 = 4,

49 
	mIBV_EXP_PEER_OP_STORE_QWORD
 = 2,

50 
	mIBV_EXP_PEER_OP_COPY_BLOCK
 = 3,

52 
	mIBV_EXP_PEER_OP_POLL_AND_DWORD
 = 12,

53 
	mIBV_EXP_PEER_OP_POLL_NOR_DWORD
 = 13,

54 
	mIBV_EXP_PEER_OP_POLL_GEQ_DWORD
 = 14,

57 
	eibv_exp_≥î_›_ˇps
 {

58 
	mIBV_EXP_PEER_OP_FENCE_CAP
 = (1 << 
IBV_EXP_PEER_OP_FENCE
),

59 
	mIBV_EXP_PEER_OP_STORE_DWORD_CAP
 = (1 << 
IBV_EXP_PEER_OP_STORE_DWORD
),

60 
	mIBV_EXP_PEER_OP_STORE_QWORD_CAP
 = (1 << 
IBV_EXP_PEER_OP_STORE_QWORD
),

61 
	mIBV_EXP_PEER_OP_COPY_BLOCK_CAP
 = (1 << 
IBV_EXP_PEER_OP_COPY_BLOCK
),

62 
	mIBV_EXP_PEER_OP_POLL_AND_DWORD_CAP


63 (1 << 
IBV_EXP_PEER_OP_POLL_AND_DWORD
),

64 
	mIBV_EXP_PEER_OP_POLL_NOR_DWORD_CAP


65 (1 << 
IBV_EXP_PEER_OP_POLL_NOR_DWORD
),

66 
	mIBV_EXP_PEER_OP_POLL_GEQ_DWORD_CAP


67 (1 << 
IBV_EXP_PEER_OP_POLL_GEQ_DWORD
),

70 
	eibv_exp_≥î_„n˚
 {

71 
	mIBV_EXP_PEER_FENCE_OP_READ
 = (1 << 0),

72 
	mIBV_EXP_PEER_FENCE_OP_WRITE
 = (1 << 1),

73 
	mIBV_EXP_PEER_FENCE_FROM_CPU
 = (1 << 2),

74 
	mIBV_EXP_PEER_FENCE_FROM_HCA
 = (1 << 3),

75 
	mIBV_EXP_PEER_FENCE_MEM_SYS
 = (1 << 4),

76 
	mIBV_EXP_PEER_FENCE_MEM_PEER
 = (1 << 5),

83 
	eibv_exp_≥î_dúe˘i⁄
 {

84 
	mIBV_EXP_PEER_DIRECTION_FROM_CPU
 = (1 << 0),

85 
	mIBV_EXP_PEER_DIRECTION_FROM_HCA
 = (1 << 1),

86 
	mIBV_EXP_PEER_DIRECTION_FROM_PEER
 = (1 << 2),

87 
	mIBV_EXP_PEER_DIRECTION_TO_CPU
 = (1 << 3),

88 
	mIBV_EXP_PEER_DIRECTION_TO_HCA
 = (1 << 4),

89 
	mIBV_EXP_PEER_DIRECTION_TO_PEER
 = (1 << 5),

92 
	sibv_exp_≥î_buf_Æloc_©å
 {

93 
size_t
 
	mÀngth
;

95 
uöt32_t
 
	mdú
;

99 
uöt64_t
 
	m≥î_id
;

101 
uöt32_t
 
	mÆignmít
;

103 
uöt32_t
 
	mcomp_mask
;

106 
	sibv_exp_≥î_buf
 {

107 *
	maddr
;

108 
size_t
 
	mÀngth
;

110 
uöt32_t
 
	mcomp_mask
;

113 
	eibv_exp_≥î_dúe˘_©å_mask
 {

114 
	mIBV_EXP_PEER_DIRECT_VERSION
 = (1 << 0)

117 
	#IBV_EXP_PEER_IOMEMORY
 ((
ibv_exp_≥î_buf
 *)-1UL)

	)

119 
	sibv_exp_≥î_dúe˘_©å
 {

123 
uöt64_t
 
	m≥î_id
;

135 
	mibv_exp_≥î_buf
 *(*
	mbuf_Æloc
)(
ibv_exp_≥î_buf_Æloc_©å
 *
	m©å
);

144 (*
	mbuf_ªÀa£
)(
ibv_exp_≥î_buf
 *
	mpb
);

157 
uöt64_t
 (*
ªgi°î_va
)(*
	m°¨t
, 
size_t
 
	mÀngth
, uöt64_à
	m≥î_id
,

158 
ibv_exp_≥î_buf
 *
	mpb
);

166 (*
	muƒegi°î_va
)(
uöt64_t
 
	mèrgë_id
, uöt64_à
	m≥î_id
);

168 
uöt64_t
 
	mˇps
;

170 
size_t
 
	m≥î_dma_›_m≠_Àn
;

172 
uöt32_t
 
	mcomp_mask
;

174 
uöt32_t
 
	mvîsi⁄
;

182 
	s≥î_›_wr
 {

183 
≥î_›_wr
 *
	m√xt
;

184 
ibv_exp_≥î_›
 
	mty≥
;

187 
uöt64_t
 
	m„n˚_Êags
;

188 } 
	m„n˚
;

191 
uöt32_t
 
	md©a
;

192 
uöt64_t
 
	mèrgë_id
;

193 
size_t
 
	moff£t
;

194 } 
	mdw‹d_va
;

197 
uöt64_t
 
	md©a
;

198 
uöt64_t
 
	mèrgë_id
;

199 
size_t
 
	moff£t
;

200 } 
	mqw‹d_va
;

203 *
	m§c
;

204 
uöt64_t
 
	mèrgë_id
;

205 
size_t
 
	moff£t
;

206 
size_t
 
	mÀn
;

207 } 
	mc›y_›
;

208 } 
	mwr
;

209 
uöt32_t
 
	mcomp_mask
;

212 
	sibv_exp_≥î_commô
 {

214 
≥î_›_wr
 *
	m°‹age
;

216 
uöt32_t
 
	míåõs
;

218 
uöt64_t
 
	mrﬁlback_id
;

219 
uöt32_t
 
	mcomp_mask
;

238 
ölöe
 
	$ibv_exp_≥î_commô_qp
(
ibv_qp
 *
qp
,

239 
ibv_exp_≥î_commô
 *
≥î
)

241 
vîbs_c⁄ãxt_exp
 *
v˘x
;

243 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
, 
exp_≥î_commô_qp
);

244 i‡(!
v˘x
)

245  
ENOSYS
;

247  
v˘x
->
	`exp_≥î_commô_qp
(
qp
, 
≥î
);

248 
	}
}

250 
	eibv_exp_rﬁlback_Êags
 {

253 
	mIBV_EXP_ROLLBACK_ABORT_UNCOMMITED
 = (1 << 0),

256 
	mIBV_EXP_ROLLBACK_ABORT_LATE
 = (1 << 1),

259 
	sibv_exp_rﬁlback_˘x
 {

260 
uöt64_t
 
	mrﬁlback_id
;

261 
uöt32_t
 
	mÊags
;

262 
uöt32_t
 
	mcomp_mask
;

271 
ölöe
 
	$ibv_exp_rﬁlback_qp
(
ibv_qp
 *
qp
,

272 
ibv_exp_rﬁlback_˘x
 *
rﬁlback
)

274 
vîbs_c⁄ãxt_exp
 *
v˘x
;

276 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
, 
exp_rﬁlback_£nd
);

277 i‡(!
v˘x
)

278  
ENOSYS
;

280  
v˘x
->
	`exp_rﬁlback_£nd
(
qp
, 
rﬁlback
);

281 
	}
}

288 
	mIBV_EXP_PEER_PEEK_ABSOLUTE
,

289 
	mIBV_EXP_PEER_PEEK_RELATIVE


292 
	sibv_exp_≥î_≥ek
 {

294 
≥î_›_wr
 *
	m°‹age
;

296 
uöt32_t
 
	míåõs
;

305 
uöt32_t
 
	mwhí˚
;

306 
uöt32_t
 
	moff£t
;

308 
uöt64_t
 
	m≥ek_id
;

309 
uöt32_t
 
	mcomp_mask
;

332 
ölöe
 
	$ibv_exp_≥î_≥ek_cq
(
ibv_cq
 *
cq
,

333 
ibv_exp_≥î_≥ek
 *
≥ek_˘x
)

335 
vîbs_c⁄ãxt_exp
 *
v˘x
;

337 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
cq
->
c⁄ãxt
, 
exp_≥î_≥ek_cq
);

338 i‡(!
v˘x
)

339  
ENOSYS
;

341  
v˘x
->
	`exp_≥î_≥ek_cq
(
cq
, 
≥ek_˘x
);

342 
	}
}

344 
	sibv_exp_≥î_ab‹t_≥ek
 {

345 
uöt64_t
 
	m≥ek_id
;

346 
uöt32_t
 
	mcomp_mask
;

356 
ölöe
 
	$ibv_exp_≥î_ab‹t_≥ek_cq
(
ibv_cq
 *
cq
,

357 
ibv_exp_≥î_ab‹t_≥ek
 *
ab‹t_˘x
)

359 
vîbs_c⁄ãxt_exp
 *
v˘x
;

361 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
cq
->
c⁄ãxt
, 
exp_≥î_ab‹t_≥ek_cq
);

362 i‡(!
v˘x
)

363  
ENOSYS
;

365  
v˘x
->
	`exp_≥î_ab‹t_≥ek_cq
(
cq
, 
ab‹t_˘x
);

366 
	}
}

368 
	gEND_C_DECLS


	@libibverbs-41mlnx1/include/infiniband/sa-kern-abi.h

33 #i‚de‡
INFINIBAND_SA_KERN_ABI_H


34 
	#INFINIBAND_SA_KERN_ABI_H


	)

36 
	~<löux/ty≥s.h
>

41 
	#ib_kîn_∑th_ªc
 
ibv_kîn_∑th_ªc


	)

43 
	sibv_kîn_∑th_ªc
 {

44 
__u8
 
	mdgid
[16];

45 
__u8
 
	msgid
[16];

46 
__u16
 
	mdlid
;

47 
__u16
 
	m¶id
;

48 
__u32
 
	møw_åaffic
;

49 
__u32
 
	mÊow_œbñ
;

50 
__u32
 
	mªvîsibÀ
;

51 
__u32
 
	mmtu
;

52 
__u16
 
	mpkey
;

53 
__u8
 
	mh›_limô
;

54 
__u8
 
	måaffic_˛ass
;

55 
__u8
 
	mnumb_∑th
;

56 
__u8
 
	m¶
;

57 
__u8
 
	mmtu_£À˘‹
;

58 
__u8
 
	møã_£À˘‹
;

59 
__u8
 
	møã
;

60 
__u8
 
	m∑ckë_li„_time_£À˘‹
;

61 
__u8
 
	m∑ckë_li„_time
;

62 
__u8
 
	m¥e„ªn˚
;

	@libibverbs-41mlnx1/include/infiniband/sa.h

34 #i‚de‡
INFINIBAND_SA_H


35 
	#INFINIBAND_SA_H


	)

37 
	~<öföib™d/vîbs.h
>

39 
	sibv_ß_∑th_ªc
 {

42 
ibv_gid
 
	mdgid
;

43 
ibv_gid
 
	msgid
;

44 
uöt16_t
 
	mdlid
;

45 
uöt16_t
 
	m¶id
;

46 
	møw_åaffic
;

48 
uöt32_t
 
	mÊow_œbñ
;

49 
uöt8_t
 
	mh›_limô
;

50 
uöt8_t
 
	måaffic_˛ass
;

51 
	mªvîsibÀ
;

52 
uöt8_t
 
	mnumb_∑th
;

53 
uöt16_t
 
	mpkey
;

55 
uöt8_t
 
	m¶
;

56 
uöt8_t
 
	mmtu_£À˘‹
;

57 
uöt8_t
 
	mmtu
;

58 
uöt8_t
 
	møã_£À˘‹
;

59 
uöt8_t
 
	møã
;

60 
uöt8_t
 
	m∑ckë_li„_time_£À˘‹
;

61 
uöt8_t
 
	m∑ckë_li„_time
;

62 
uöt8_t
 
	m¥e„ªn˚
;

65 
	sibv_ß_mcmembî_ªc
 {

66 
ibv_gid
 
	mmgid
;

67 
ibv_gid
 
	mp‹t_gid
;

68 
uöt32_t
 
	mqkey
;

69 
uöt16_t
 
	mmlid
;

70 
uöt8_t
 
	mmtu_£À˘‹
;

71 
uöt8_t
 
	mmtu
;

72 
uöt8_t
 
	måaffic_˛ass
;

73 
uöt16_t
 
	mpkey
;

74 
uöt8_t
 
	møã_£À˘‹
;

75 
uöt8_t
 
	møã
;

76 
uöt8_t
 
	m∑ckë_li„_time_£À˘‹
;

77 
uöt8_t
 
	m∑ckë_li„_time
;

78 
uöt8_t
 
	m¶
;

79 
uöt32_t
 
	mÊow_œbñ
;

80 
uöt8_t
 
	mh›_limô
;

81 
uöt8_t
 
	msc›e
;

82 
uöt8_t
 
	mjoö_°©e
;

83 
	m¥oxy_joö
;

86 
	sibv_ß_£rvi˚_ªc
 {

87 
uöt64_t
 
	mid
;

88 
ibv_gid
 
	mgid
;

89 
uöt16_t
 
	mpkey
;

91 
uöt32_t
 
	mÀa£
;

92 
uöt8_t
 
	mkey
[16];

93 
uöt8_t
 
	m«me
[64];

94 
uöt8_t
 
	md©a8
[16];

95 
uöt16_t
 
	md©a16
[8];

96 
uöt32_t
 
	md©a32
[4];

97 
uöt64_t
 
	md©a64
[2];

100 
	#IBV_PATH_RECORD_REVERSIBLE
 0x80

	)

102 
	sibv_∑th_ªc‹d
 {

103 
uöt64_t
 
	m£rvi˚_id
;

104 
ibv_gid
 
	mdgid
;

105 
ibv_gid
 
	msgid
;

106 
uöt16_t
 
	mdlid
;

107 
uöt16_t
 
	m¶id
;

108 
uöt32_t
 
	mÊowœbñ_h›limô
;

109 
uöt8_t
 
	mt˛ass
;

110 
uöt8_t
 
	mªvîsibÀ_num∑th
;

111 
uöt16_t
 
	mpkey
;

112 
uöt16_t
 
	mqos˛ass_¶
;

113 
uöt8_t
 
	mmtu
;

114 
uöt8_t
 
	møã
;

115 
uöt8_t
 
	m∑ckëli„time
;

116 
uöt8_t
 
	m¥e„ªn˚
;

117 
uöt8_t
 
	mª£rved
[6];

120 
	#IBV_PATH_FLAG_GMP
 (1<<0)

	)

121 
	#IBV_PATH_FLAG_PRIMARY
 (1<<1)

	)

122 
	#IBV_PATH_FLAG_ALTERNATE
 (1<<2)

	)

123 
	#IBV_PATH_FLAG_OUTBOUND
 (1<<3)

	)

124 
	#IBV_PATH_FLAG_INBOUND
 (1<<4)

	)

125 
	#IBV_PATH_FLAG_INBOUND_REVERSE
 (1<<5)

	)

126 
	#IBV_PATH_FLAG_BIDIRECTIONAL
 (
IBV_PATH_FLAG_OUTBOUND
 | \

127 
IBV_PATH_FLAG_INBOUND_REVERSE
)

	)

129 
	sibv_∑th_d©a
 {

130 
uöt32_t
 
	mÊags
;

131 
uöt32_t
 
	mª£rved
;

132 
ibv_∑th_ªc‹d
 
	m∑th
;

	@libibverbs-41mlnx1/include/infiniband/verbs.h

36 #i‚de‡
INFINIBAND_VERBS_H


37 
	#INFINIBAND_VERBS_H


	)

39 
	~<°döt.h
>

40 
	~<±hªad.h
>

41 
	~<°ddef.h
>

42 
	~<î∫o.h
>

43 
	~<öföib™d/oÁ_vîbs.h
>

44 
	~<°rög.h
>

46 #ifde‡
__˝lu•lus


47 
	#BEGIN_C_DECLS
 "C" {

	)

48 
	#END_C_DECLS
 }

	)

50 
	#BEGIN_C_DECLS


	)

51 
	#END_C_DECLS


	)

54 #i‡
__GNUC__
 >= 3

55 
	#__©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

57 
	#__©åibuã_c⁄°


	)

60 
BEGIN_C_DECLS


62 
	uibv_gid
 {

63 
uöt8_t
 
øw
[16];

65 
uöt64_t
 
sub√t_¥efix
;

66 
uöt64_t
 
öãrÁ˚_id
;

67 } 
globÆ
;

70 #i‚de‡
c⁄èöî_of


78 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

79 ((
ty≥
 *Ë((
uöt8_t
 *)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

82 
	#vext_fõld_avaû
(
ty≥
, 
Êd
, 
sz
Ë(
	`off£tof
—y≥, fldË< (sz))

	)

84 *
	g__VERBS_ABI_IS_EXTENDED
 = ((
uöt8_t
 *)
NULL
) - 1;

86 
	eibv_node_ty≥
 {

87 
	mIBV_NODE_UNKNOWN
 = -1,

88 
	mIBV_NODE_CA
 = 1,

89 
	mIBV_NODE_SWITCH
,

90 
	mIBV_NODE_ROUTER
,

91 
	mIBV_NODE_RNIC
,

96 
	mIBV_EXP_NODE_TYPE_START
 = 32,

97 
	mIBV_EXP_NODE_MIC
 = 
IBV_EXP_NODE_TYPE_START


100 
	eibv_å™•‹t_ty≥
 {

101 
	mIBV_TRANSPORT_UNKNOWN
 = -1,

102 
	mIBV_TRANSPORT_IB
 = 0,

103 
	mIBV_TRANSPORT_IWARP
,

108 
	mIBV_EXP_TRANSPORT_TYPE_START
 = 32,

109 
	mIBV_EXP_TRANSPORT_SCIF
 = 
IBV_EXP_TRANSPORT_TYPE_START


112 
	eibv_devi˚_ˇp_Êags
 {

113 
	mIBV_DEVICE_RESIZE_MAX_WR
 = 1,

114 
	mIBV_DEVICE_BAD_PKEY_CNTR
 = 1 << 1,

115 
	mIBV_DEVICE_BAD_QKEY_CNTR
 = 1 << 2,

116 
	mIBV_DEVICE_RAW_MULTI
 = 1 << 3,

117 
	mIBV_DEVICE_AUTO_PATH_MIG
 = 1 << 4,

118 
	mIBV_DEVICE_CHANGE_PHY_PORT
 = 1 << 5,

119 
	mIBV_DEVICE_UD_AV_PORT_ENFORCE
 = 1 << 6,

120 
	mIBV_DEVICE_CURR_QP_STATE_MOD
 = 1 << 7,

121 
	mIBV_DEVICE_SHUTDOWN_PORT
 = 1 << 8,

122 
	mIBV_DEVICE_INIT_TYPE
 = 1 << 9,

123 
	mIBV_DEVICE_PORT_ACTIVE_EVENT
 = 1 << 10,

124 
	mIBV_DEVICE_SYS_IMAGE_GUID
 = 1 << 11,

125 
	mIBV_DEVICE_RC_RNR_NAK_GEN
 = 1 << 12,

126 
	mIBV_DEVICE_SRQ_RESIZE
 = 1 << 13,

127 
	mIBV_DEVICE_N_NOTIFY_CQ
 = 1 << 14,

128 
	mIBV_DEVICE_MEM_WINDOW
 = 1 << 17,

129 
	mIBV_DEVICE_XRC
 = 1 << 20,

130 
	mIBV_DEVICE_MEM_MGT_EXTENSIONS
 = 1 << 21,

131 
	mIBV_DEVICE_MEM_WINDOW_TYPE_2A
 = 1 << 23,

132 
	mIBV_DEVICE_MEM_WINDOW_TYPE_2B
 = 1 << 24,

133 
	mIBV_DEVICE_MANAGED_FLOW_STEERING
 = 1 << 29

136 
	eibv_©omic_ˇp
 {

137 
	mIBV_ATOMIC_NONE
,

138 
	mIBV_ATOMIC_HCA
,

139 
	mIBV_ATOMIC_GLOB


142 
	sibv_devi˚_©å
 {

143 
	mfw_vî
[64];

144 
uöt64_t
 
	mnode_guid
;

145 
uöt64_t
 
	msys_image_guid
;

146 
uöt64_t
 
	mmax_mr_size
;

147 
uöt64_t
 
	m∑ge_size_ˇp
;

148 
uöt32_t
 
	mvíd‹_id
;

149 
uöt32_t
 
	mvíd‹_∑π_id
;

150 
uöt32_t
 
	mhw_vî
;

151 
	mmax_qp
;

152 
	mmax_qp_wr
;

153 
uöt32_t
 
	mdevi˚_ˇp_Êags
;

154 
	mmax_sge
;

155 
	mmax_sge_rd
;

156 
	mmax_cq
;

157 
	mmax_cqe
;

158 
	mmax_mr
;

159 
	mmax_pd
;

160 
	mmax_qp_rd_©om
;

161 
	mmax_ì_rd_©om
;

162 
	mmax_ªs_rd_©om
;

163 
	mmax_qp_öô_rd_©om
;

164 
	mmax_ì_öô_rd_©om
;

165 
ibv_©omic_ˇp
 
	m©omic_ˇp
;

166 
	mmax_ì
;

167 
	mmax_rdd
;

168 
	mmax_mw
;

169 
	mmax_øw_ùv6_qp
;

170 
	mmax_øw_ëhy_qp
;

171 
	mmax_mˇ°_gΩ
;

172 
	mmax_mˇ°_qp_©èch
;

173 
	mmax_tŸÆ_mˇ°_qp_©èch
;

174 
	mmax_ah
;

175 
	mmax_fmr
;

176 
	mmax_m≠_≥r_fmr
;

177 
	mmax_§q
;

178 
	mmax_§q_wr
;

179 
	mmax_§q_sge
;

180 
uöt16_t
 
	mmax_pkeys
;

181 
uöt8_t
 
	mloˇl_ˇ_ack_dñay
;

182 
uöt8_t
 
	mphys_p‹t_˙t
;

187 
	sibv_quîy_devi˚_ex_öput
 {

188 
uöt32_t
 
	mcomp_mask
;

191 
	eibv_odp_å™•‹t_ˇp_bôs
 {

192 
	mIBV_ODP_SUPPORT_SEND
 = 1 << 0,

193 
	mIBV_ODP_SUPPORT_RECV
 = 1 << 1,

194 
	mIBV_ODP_SUPPORT_WRITE
 = 1 << 2,

195 
	mIBV_ODP_SUPPORT_READ
 = 1 << 3,

196 
	mIBV_ODP_SUPPORT_ATOMIC
 = 1 << 4,

199 
	sibv_odp_ˇps
 {

200 
uöt64_t
 
	mgíîÆ_ˇps
;

202 
uöt32_t
 
	mrc_odp_ˇps
;

203 
uöt32_t
 
	muc_odp_ˇps
;

204 
uöt32_t
 
	mud_odp_ˇps
;

205 } 
	m≥r_å™•‹t_ˇps
;

208 
	eibv_odp_gíîÆ_ˇps
 {

209 
	mIBV_ODP_SUPPORT
 = 1 << 0,

212 
	sibv_devi˚_©å_ex
 {

213 
ibv_devi˚_©å
 
	m‹ig_©å
;

214 
uöt32_t
 
	mcomp_mask
;

215 
ibv_odp_ˇps
 
	modp_ˇps
;

218 
	eibv_mtu
 {

219 
	mIBV_MTU_256
 = 1,

220 
	mIBV_MTU_512
 = 2,

221 
	mIBV_MTU_1024
 = 3,

222 
	mIBV_MTU_2048
 = 4,

223 
	mIBV_MTU_4096
 = 5

226 
	eibv_p‹t_°©e
 {

227 
	mIBV_PORT_NOP
 = 0,

228 
	mIBV_PORT_DOWN
 = 1,

229 
	mIBV_PORT_INIT
 = 2,

230 
	mIBV_PORT_ARMED
 = 3,

231 
	mIBV_PORT_ACTIVE
 = 4,

232 
	mIBV_PORT_ACTIVE_DEFER
 = 5

236 
	mIBV_LINK_LAYER_UNSPECIFIED
,

237 
	mIBV_LINK_LAYER_INFINIBAND
,

238 
	mIBV_LINK_LAYER_ETHERNET
,

243 
	mIBV_EXP_LINK_LAYER_START
 = 32,

244 
	mIBV_EXP_LINK_LAYER_SCIF
 = 
IBV_EXP_LINK_LAYER_START


247 
	eibv_p‹t_ˇp_Êags
 {

248 
	mIBV_PORT_SM
 = 1 << 1,

249 
	mIBV_PORT_NOTICE_SUP
 = 1 << 2,

250 
	mIBV_PORT_TRAP_SUP
 = 1 << 3,

251 
	mIBV_PORT_OPT_IPD_SUP
 = 1 << 4,

252 
	mIBV_PORT_AUTO_MIGR_SUP
 = 1 << 5,

253 
	mIBV_PORT_SL_MAP_SUP
 = 1 << 6,

254 
	mIBV_PORT_MKEY_NVRAM
 = 1 << 7,

255 
	mIBV_PORT_PKEY_NVRAM
 = 1 << 8,

256 
	mIBV_PORT_LED_INFO_SUP
 = 1 << 9,

257 
	mIBV_PORT_SYS_IMAGE_GUID_SUP
 = 1 << 11,

258 
	mIBV_PORT_PKEY_SW_EXT_PORT_TRAP_SUP
 = 1 << 12,

259 
	mIBV_PORT_EXTENDED_SPEEDS_SUP
 = 1 << 14,

260 
	mIBV_PORT_CM_SUP
 = 1 << 16,

261 
	mIBV_PORT_SNMP_TUNNEL_SUP
 = 1 << 17,

262 
	mIBV_PORT_REINIT_SUP
 = 1 << 18,

263 
	mIBV_PORT_DEVICE_MGMT_SUP
 = 1 << 19,

264 
	mIBV_PORT_VENDOR_CLASS
 = 1 << 24,

265 
	mIBV_PORT_CLIENT_REG_SUP
 = 1 << 25,

266 
	mIBV_PORT_IP_BASED_GIDS
 = 1 << 26,

269 
	sibv_p‹t_©å
 {

270 
ibv_p‹t_°©e
 
	m°©e
;

271 
ibv_mtu
 
	mmax_mtu
;

272 
ibv_mtu
 
	ma˘ive_mtu
;

273 
	mgid_tbl_Àn
;

274 
uöt32_t
 
	mp‹t_ˇp_Êags
;

275 
uöt32_t
 
	mmax_msg_sz
;

276 
uöt32_t
 
	mbad_pkey_˙å
;

277 
uöt32_t
 
	mqkey_viﬁ_˙å
;

278 
uöt16_t
 
	mpkey_tbl_Àn
;

279 
uöt16_t
 
	mlid
;

280 
uöt16_t
 
	msm_lid
;

281 
uöt8_t
 
	mlmc
;

282 
uöt8_t
 
	mmax_vl_num
;

283 
uöt8_t
 
	msm_¶
;

284 
uöt8_t
 
	msub√t_timeout
;

285 
uöt8_t
 
	möô_ty≥_ª∂y
;

286 
uöt8_t
 
	ma˘ive_width
;

287 
uöt8_t
 
	ma˘ive_•ìd
;

288 
uöt8_t
 
	mphys_°©e
;

289 
uöt8_t
 
	mlök_œyî
;

290 
uöt8_t
 
	mª£rved
;

293 
	eibv_evít_ty≥
 {

294 
	mIBV_EVENT_CQ_ERR
,

295 
	mIBV_EVENT_QP_FATAL
,

296 
	mIBV_EVENT_QP_REQ_ERR
,

297 
	mIBV_EVENT_QP_ACCESS_ERR
,

298 
	mIBV_EVENT_COMM_EST
,

299 
	mIBV_EVENT_SQ_DRAINED
,

300 
	mIBV_EVENT_PATH_MIG
,

301 
	mIBV_EVENT_PATH_MIG_ERR
,

302 
	mIBV_EVENT_DEVICE_FATAL
,

303 
	mIBV_EVENT_PORT_ACTIVE
,

304 
	mIBV_EVENT_PORT_ERR
,

305 
	mIBV_EVENT_LID_CHANGE
,

306 
	mIBV_EVENT_PKEY_CHANGE
,

307 
	mIBV_EVENT_SM_CHANGE
,

308 
	mIBV_EVENT_SRQ_ERR
,

309 
	mIBV_EVENT_SRQ_LIMIT_REACHED
,

310 
	mIBV_EVENT_QP_LAST_WQE_REACHED
,

311 
	mIBV_EVENT_CLIENT_REREGISTER
,

312 
	mIBV_EVENT_GID_CHANGE
,

317 
	mIBV_EXP_EVENT_DCT_KEY_VIOLATION
 = 32,

318 
	mIBV_EXP_EVENT_DCT_ACCESS_ERR
,

319 
	mIBV_EXP_EVENT_DCT_REQ_ERR
,

322 
	sibv_async_evít
 {

324 
ibv_cq
 *
	mcq
;

325 
ibv_qp
 *
	mqp
;

326 
ibv_§q
 *
	m§q
;

327 
ibv_exp_d˘
 *
	md˘
;

328 
	mp‹t_num
;

330 
uöt32_t
 
	mxrc_qp_num
;

331 } 
	mñemít
;

332 
ibv_evít_ty≥
 
	mevít_ty≥
;

335 
	eibv_wc_°©us
 {

336 
	mIBV_WC_SUCCESS
,

337 
	mIBV_WC_LOC_LEN_ERR
,

338 
	mIBV_WC_LOC_QP_OP_ERR
,

339 
	mIBV_WC_LOC_EEC_OP_ERR
,

340 
	mIBV_WC_LOC_PROT_ERR
,

341 
	mIBV_WC_WR_FLUSH_ERR
,

342 
	mIBV_WC_MW_BIND_ERR
,

343 
	mIBV_WC_BAD_RESP_ERR
,

344 
	mIBV_WC_LOC_ACCESS_ERR
,

345 
	mIBV_WC_REM_INV_REQ_ERR
,

346 
	mIBV_WC_REM_ACCESS_ERR
,

347 
	mIBV_WC_REM_OP_ERR
,

348 
	mIBV_WC_RETRY_EXC_ERR
,

349 
	mIBV_WC_RNR_RETRY_EXC_ERR
,

350 
	mIBV_WC_LOC_RDD_VIOL_ERR
,

351 
	mIBV_WC_REM_INV_RD_REQ_ERR
,

352 
	mIBV_WC_REM_ABORT_ERR
,

353 
	mIBV_WC_INV_EECN_ERR
,

354 
	mIBV_WC_INV_EEC_STATE_ERR
,

355 
	mIBV_WC_FATAL_ERR
,

356 
	mIBV_WC_RESP_TIMEOUT_ERR
,

357 
	mIBV_WC_GENERAL_ERR


359 c⁄° *
ibv_wc_°©us_°r
(
ibv_wc_°©us
 
°©us
);

361 
	eibv_wc_›code
 {

362 
	mIBV_WC_SEND
,

363 
	mIBV_WC_RDMA_WRITE
,

364 
	mIBV_WC_RDMA_READ
,

365 
	mIBV_WC_COMP_SWAP
,

366 
	mIBV_WC_FETCH_ADD
,

367 
	mIBV_WC_BIND_MW
,

368 
	mIBV_WC_LOCAL_INV
,

373 
	mIBV_WC_RECV
 = 1 << 7,

374 
	mIBV_WC_RECV_RDMA_WITH_IMM


377 
	eibv_wc_Êags
 {

378 
	mIBV_WC_GRH
 = 1 << 0,

379 
	mIBV_WC_WITH_IMM
 = 1 << 1,

380 
	mIBV_WC_WITH_INV
 = 1 << 3

383 
	sibv_wc
 {

384 
uöt64_t
 
	mwr_id
;

385 
ibv_wc_°©us
 
	m°©us
;

386 
ibv_wc_›code
 
	m›code
;

387 
uöt32_t
 
	mvíd‹_îr
;

388 
uöt32_t
 
	mbyã_Àn
;

392 
uöt32_t
 
	mimm_d©a
;

393 
uöt32_t
 
	mqp_num
;

394 
uöt32_t
 
	m§c_qp
;

395 
	mwc_Êags
;

396 
uöt16_t
 
	mpkey_ödex
;

397 
uöt16_t
 
	m¶id
;

398 
uöt8_t
 
	m¶
;

399 
uöt8_t
 
	mdlid_∑th_bôs
;

402 
	eibv_ac˚ss_Êags
 {

403 
	mIBV_ACCESS_LOCAL_WRITE
 = 1,

404 
	mIBV_ACCESS_REMOTE_WRITE
 = (1<<1),

405 
	mIBV_ACCESS_REMOTE_READ
 = (1<<2),

406 
	mIBV_ACCESS_REMOTE_ATOMIC
 = (1<<3),

407 
	mIBV_ACCESS_MW_BIND
 = (1<<4),

408 
	mIBV_ACCESS_ZERO_BASED
 = (1<<5),

409 
	mIBV_ACCESS_ON_DEMAND
 = (1<<6),

412 
	sibv_mw_böd_öfo
 {

413 
ibv_mr
 *
	mmr
;

414 
uöt64_t
 
	maddr
;

415 
uöt64_t
 
	mÀngth
;

416 
	mmw_ac˚ss_Êags
;

419 
	sibv_pd
 {

420 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

421 
uöt32_t
 
	mh™dÀ
;

424 
	eibv_xrcd_öô_©å_mask
 {

425 
	mIBV_XRCD_INIT_ATTR_FD
 = 1 << 0,

426 
	mIBV_XRCD_INIT_ATTR_OFLAGS
 = 1 << 1,

427 
	mIBV_XRCD_INIT_ATTR_RESERVED
 = 1 << 2

430 
	sibv_xrcd_öô_©å
 {

431 
uöt32_t
 
	mcomp_mask
;

432 
	mfd
;

433 
	moÊags
;

436 
	sibv_xrcd
 {

437 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

440 
	eibv_ªªg_mr_Êags
 {

441 
	mIBV_REREG_MR_CHANGE_TRANSLATION
 = (1 << 0),

442 
	mIBV_REREG_MR_CHANGE_PD
 = (1 << 1),

443 
	mIBV_REREG_MR_CHANGE_ACCESS
 = (1 << 2),

444 
	mIBV_REREG_MR_KEEP_VALID
 = (1 << 3),

445 
	mIBV_REREG_MR_FLAGS_SUPPORTED
 = ((
IBV_REREG_MR_KEEP_VALID
 << 1) - 1)

448 
	sibv_mr
 {

449 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

450 
ibv_pd
 *
	mpd
;

451 *
	maddr
;

452 
size_t
 
	mÀngth
;

453 
uöt32_t
 
	mh™dÀ
;

454 
uöt32_t
 
	mlkey
;

455 
uöt32_t
 
	mrkey
;

458 
	eibv_mw_ty≥
 {

459 
	mIBV_MW_TYPE_1
 = 1,

460 
	mIBV_MW_TYPE_2
 = 2

463 
	sibv_mw
 {

464 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

465 
ibv_pd
 *
	mpd
;

466 
uöt32_t
 
	mrkey
;

467 
uöt32_t
 
	mh™dÀ
;

468 
ibv_mw_ty≥
 
	mty≥
;

471 
	sibv_globÆ_rouã
 {

472 
ibv_gid
 
	mdgid
;

473 
uöt32_t
 
	mÊow_œbñ
;

474 
uöt8_t
 
	msgid_ödex
;

475 
uöt8_t
 
	mh›_limô
;

476 
uöt8_t
 
	måaffic_˛ass
;

479 
	sibv_grh
 {

480 
uöt32_t
 
	mvîsi⁄_t˛ass_Êow
;

481 
uöt16_t
 
	m∑yÀn
;

482 
uöt8_t
 
	m√xt_hdr
;

483 
uöt8_t
 
	mh›_limô
;

484 
ibv_gid
 
	msgid
;

485 
ibv_gid
 
	mdgid
;

488 
	eibv_øã
 {

489 
	mIBV_RATE_MAX
 = 0,

490 
	mIBV_RATE_2_5_GBPS
 = 2,

491 
	mIBV_RATE_5_GBPS
 = 5,

492 
	mIBV_RATE_10_GBPS
 = 3,

493 
	mIBV_RATE_20_GBPS
 = 6,

494 
	mIBV_RATE_30_GBPS
 = 4,

495 
	mIBV_RATE_40_GBPS
 = 7,

496 
	mIBV_RATE_60_GBPS
 = 8,

497 
	mIBV_RATE_80_GBPS
 = 9,

498 
	mIBV_RATE_120_GBPS
 = 10,

499 
	mIBV_RATE_14_GBPS
 = 11,

500 
	mIBV_RATE_56_GBPS
 = 12,

501 
	mIBV_RATE_112_GBPS
 = 13,

502 
	mIBV_RATE_168_GBPS
 = 14,

503 
	mIBV_RATE_25_GBPS
 = 15,

504 
	mIBV_RATE_100_GBPS
 = 16,

505 
	mIBV_RATE_200_GBPS
 = 17,

506 
	mIBV_RATE_300_GBPS
 = 18

515 
	$ibv_øã_to_mu…
(
ibv_øã
 
øã
Ë
__©åibuã_c⁄°
;

521 
ibv_øã
 
	$mu…_to_ibv_øã
(
mu…
Ë
__©åibuã_c⁄°
;

528 
	$ibv_øã_to_mbps
(
ibv_øã
 
øã
Ë
__©åibuã_c⁄°
;

534 
ibv_øã
 
	$mbps_to_ibv_øã
(
mbps
Ë
__©åibuã_c⁄°
;

536 
	sibv_ah_©å
 {

537 
ibv_globÆ_rouã
 
grh
;

538 
uöt16_t
 
dlid
;

539 
uöt8_t
 
¶
;

540 
uöt8_t
 
§c_∑th_bôs
;

541 
uöt8_t
 
°©ic_øã
;

542 
uöt8_t
 
is_globÆ
;

543 
uöt8_t
 
p‹t_num
;

546 
	eibv_§q_©å_mask
 {

547 
IBV_SRQ_MAX_WR
 = 1 << 0,

548 
IBV_SRQ_LIMIT
 = 1 << 1

551 
	sibv_§q_©å
 {

552 
uöt32_t
 
max_wr
;

553 
uöt32_t
 
max_sge
;

554 
uöt32_t
 
§q_limô
;

557 
	sibv_§q_öô_©å
 {

558 *
§q_c⁄ãxt
;

559 
ibv_§q_©å
 
©å
;

562 
	eibv_§q_ty≥
 {

563 
IBV_SRQT_BASIC
,

564 
IBV_SRQT_XRC


567 
	eibv_§q_öô_©å_mask
 {

568 
IBV_SRQ_INIT_ATTR_TYPE
 = 1 << 0,

569 
IBV_SRQ_INIT_ATTR_PD
 = 1 << 1,

570 
IBV_SRQ_INIT_ATTR_XRCD
 = 1 << 2,

571 
IBV_SRQ_INIT_ATTR_CQ
 = 1 << 3,

572 
IBV_SRQ_INIT_ATTR_RESERVED
 = 1 << 4

575 
	sibv_§q_öô_©å_ex
 {

576 *
§q_c⁄ãxt
;

577 
ibv_§q_©å
 
©å
;

579 
uöt32_t
 
comp_mask
;

580 
ibv_§q_ty≥
 
§q_ty≥
;

581 
ibv_pd
 *
pd
;

582 
ibv_xrcd
 *
xrcd
;

583 
ibv_cq
 *
cq
;

586 
	eibv_qp_ty≥
 {

587 
IBV_QPT_RC
 = 2,

588 
IBV_QPT_UC
,

589 
IBV_QPT_UD
,

591 
IBV_QPT_XRC
,

592 
IBV_QPT_RAW_PACKET
 = 8,

593 
IBV_QPT_RAW_ETH
 = 8,

594 
IBV_QPT_XRC_SEND
 = 9,

595 
IBV_QPT_XRC_RECV
,

600 
IBV_EXP_QP_TYPE_START
 = 32,

601 
IBV_EXP_QPT_DC_INI
 = 
IBV_EXP_QP_TYPE_START


604 
	sibv_qp_ˇp
 {

605 
uöt32_t
 
max_£nd_wr
;

606 
uöt32_t
 
max_ªcv_wr
;

607 
uöt32_t
 
max_£nd_sge
;

608 
uöt32_t
 
max_ªcv_sge
;

609 
uöt32_t
 
max_ölöe_d©a
;

612 
	sibv_qp_öô_©å
 {

613 *
qp_c⁄ãxt
;

614 
ibv_cq
 *
£nd_cq
;

615 
ibv_cq
 *
ªcv_cq
;

616 
ibv_§q
 *
§q
;

617 
ibv_qp_ˇp
 
ˇp
;

618 
ibv_qp_ty≥
 
qp_ty≥
;

619 
sq_sig_Æl
;

621 
ibv_xrc_domaö
 *
xrc_domaö
;

624 
	eibv_qp_öô_©å_mask
 {

625 
IBV_QP_INIT_ATTR_PD
 = 1 << 0,

626 
IBV_QP_INIT_ATTR_XRCD
 = 1 << 1,

627 
IBV_QP_INIT_ATTR_RESERVED
 = 1 << 2

630 
	sibv_qp_öô_©å_ex
 {

631 *
qp_c⁄ãxt
;

632 
ibv_cq
 *
£nd_cq
;

633 
ibv_cq
 *
ªcv_cq
;

634 
ibv_§q
 *
§q
;

635 
ibv_qp_ˇp
 
ˇp
;

636 
ibv_qp_ty≥
 
qp_ty≥
;

637 
sq_sig_Æl
;

639 
uöt32_t
 
comp_mask
;

640 
ibv_pd
 *
pd
;

641 
ibv_xrcd
 *
xrcd
;

644 
	eibv_qp_›í_©å_mask
 {

645 
IBV_QP_OPEN_ATTR_NUM
 = 1 << 0,

646 
IBV_QP_OPEN_ATTR_XRCD
 = 1 << 1,

647 
IBV_QP_OPEN_ATTR_CONTEXT
 = 1 << 2,

648 
IBV_QP_OPEN_ATTR_TYPE
 = 1 << 3,

649 
IBV_QP_OPEN_ATTR_RESERVED
 = 1 << 4

652 
	sibv_qp_›í_©å
 {

653 
uöt32_t
 
comp_mask
;

654 
uöt32_t
 
qp_num
;

655 
ibv_xrcd
 *
xrcd
;

656 *
qp_c⁄ãxt
;

657 
ibv_qp_ty≥
 
qp_ty≥
;

660 
	eibv_qp_©å_mask
 {

661 
IBV_QP_STATE
 = 1 << 0,

662 
IBV_QP_CUR_STATE
 = 1 << 1,

663 
IBV_QP_EN_SQD_ASYNC_NOTIFY
 = 1 << 2,

664 
IBV_QP_ACCESS_FLAGS
 = 1 << 3,

665 
IBV_QP_PKEY_INDEX
 = 1 << 4,

666 
IBV_QP_PORT
 = 1 << 5,

667 
IBV_QP_QKEY
 = 1 << 6,

668 
IBV_QP_AV
 = 1 << 7,

669 
IBV_QP_PATH_MTU
 = 1 << 8,

670 
IBV_QP_TIMEOUT
 = 1 << 9,

671 
IBV_QP_RETRY_CNT
 = 1 << 10,

672 
IBV_QP_RNR_RETRY
 = 1 << 11,

673 
IBV_QP_RQ_PSN
 = 1 << 12,

674 
IBV_QP_MAX_QP_RD_ATOMIC
 = 1 << 13,

675 
IBV_QP_ALT_PATH
 = 1 << 14,

676 
IBV_QP_MIN_RNR_TIMER
 = 1 << 15,

677 
IBV_QP_SQ_PSN
 = 1 << 16,

678 
IBV_QP_MAX_DEST_RD_ATOMIC
 = 1 << 17,

679 
IBV_QP_PATH_MIG_STATE
 = 1 << 18,

680 
IBV_QP_CAP
 = 1 << 19,

681 
IBV_QP_DEST_QPN
 = 1 << 20

684 
	eibv_qp_°©e
 {

685 
IBV_QPS_RESET
,

686 
IBV_QPS_INIT
,

687 
IBV_QPS_RTR
,

688 
IBV_QPS_RTS
,

689 
IBV_QPS_SQD
,

690 
IBV_QPS_SQE
,

691 
IBV_QPS_ERR
,

692 
IBV_QPS_UNKNOWN


695 
	eibv_mig_°©e
 {

696 
IBV_MIG_MIGRATED
,

697 
IBV_MIG_REARM
,

698 
IBV_MIG_ARMED


701 
	sibv_qp_©å
 {

702 
ibv_qp_°©e
 
qp_°©e
;

703 
ibv_qp_°©e
 
cur_qp_°©e
;

704 
ibv_mtu
 
∑th_mtu
;

705 
ibv_mig_°©e
 
∑th_mig_°©e
;

706 
uöt32_t
 
qkey
;

707 
uöt32_t
 
rq_p¢
;

708 
uöt32_t
 
sq_p¢
;

709 
uöt32_t
 
de°_qp_num
;

710 
qp_ac˚ss_Êags
;

711 
ibv_qp_ˇp
 
ˇp
;

712 
ibv_ah_©å
 
ah_©å
;

713 
ibv_ah_©å
 
Æt_ah_©å
;

714 
uöt16_t
 
pkey_ödex
;

715 
uöt16_t
 
Æt_pkey_ödex
;

716 
uöt8_t
 
í_sqd_async_nŸify
;

717 
uöt8_t
 
sq_døöög
;

718 
uöt8_t
 
max_rd_©omic
;

719 
uöt8_t
 
max_de°_rd_©omic
;

720 
uöt8_t
 
mö_∫r_timî
;

721 
uöt8_t
 
p‹t_num
;

722 
uöt8_t
 
timeout
;

723 
uöt8_t
 
ªåy_˙t
;

724 
uöt8_t
 
∫r_ªåy
;

725 
uöt8_t
 
Æt_p‹t_num
;

726 
uöt8_t
 
Æt_timeout
;

729 
	eibv_wr_›code
 {

730 
IBV_WR_RDMA_WRITE
,

731 
IBV_WR_RDMA_WRITE_WITH_IMM
,

732 
IBV_WR_SEND
,

733 
IBV_WR_SEND_WITH_IMM
,

734 
IBV_WR_RDMA_READ
,

735 
IBV_WR_ATOMIC_CMP_AND_SWP
,

736 
IBV_WR_ATOMIC_FETCH_AND_ADD
,

737 
IBV_WR_LOCAL_INV
,

738 
IBV_WR_BIND_MW
,

739 
IBV_WR_SEND_WITH_INV
,

742 
	eibv_£nd_Êags
 {

743 
IBV_SEND_FENCE
 = 1 << 0,

744 
IBV_SEND_SIGNALED
 = 1 << 1,

745 
IBV_SEND_SOLICITED
 = 1 << 2,

746 
IBV_SEND_INLINE
 = 1 << 3

749 
	sibv_sge
 {

750 
uöt64_t
 
addr
;

751 
uöt32_t
 
Àngth
;

752 
uöt32_t
 
lkey
;

755 
	sibv_£nd_wr
 {

756 
uöt64_t
 
wr_id
;

757 
ibv_£nd_wr
 *
√xt
;

758 
ibv_sge
 *
sg_li°
;

759 
num_sge
;

760 
ibv_wr_›code
 
›code
;

761 
£nd_Êags
;

762 
uöt32_t
 
imm_d©a
;

765 
uöt64_t
 
ªmŸe_addr
;

766 
uöt32_t
 
rkey
;

767 } 
rdma
;

769 
uöt64_t
 
ªmŸe_addr
;

770 
uöt64_t
 
com∑ª_add
;

771 
uöt64_t
 
sw≠
;

772 
uöt32_t
 
rkey
;

773 } 
©omic
;

775 
ibv_ah
 *
ah
;

776 
uöt32_t
 
ªmŸe_q≤
;

777 
uöt32_t
 
ªmŸe_qkey
;

778 } 
ud
;

779 } 
wr
;

783 
uöt32_t
 
ªmŸe_§qn
;

784 } 
xrc
;

785 } 
qp_ty≥
;

787 
uöt32_t
 
xrc_ªmŸe_§q_num
;

790 
ibv_mw
 *
mw
;

791 
uöt32_t
 
rkey
;

792 
ibv_mw_böd_öfo
 
böd_öfo
;

793 } 
böd_mw
;

796 
	sibv_ªcv_wr
 {

797 
uöt64_t
 
wr_id
;

798 
ibv_ªcv_wr
 *
√xt
;

799 
ibv_sge
 *
sg_li°
;

800 
num_sge
;

803 
	sibv_mw_böd
 {

804 
uöt64_t
 
wr_id
;

805 
£nd_Êags
;

806 
ibv_mw_böd_öfo
 
böd_öfo
;

809 
	sibv_§q
 {

810 
ibv_c⁄ãxt
 *
c⁄ãxt
;

811 *
§q_c⁄ãxt
;

812 
ibv_pd
 *
pd
;

813 
uöt32_t
 
h™dÀ
;

815 
±hªad_muãx_t
 
muãx
;

816 
±hªad_c⁄d_t
 
c⁄d
;

817 
uöt32_t
 
evíts_com∂ëed
;

822 
uöt32_t
 
xrc_§q_num_bö_com∑t_∑ddög
;

823 
ibv_xrc_domaö
 *
xrc_domaö_bö_com∑t_∑ddög
;

824 
ibv_cq
 *
xrc_cq_bö_com∑t_∑ddög
;

825 *
ibv_§q_∑ddög
;

828 
uöt32_t
 
xrc_§q_num
;

829 
ibv_xrc_domaö
 *
xrc_domaö
;

830 
ibv_cq
 *
xrc_cq
;

834 
	eibv_evít_Êags
 {

835 
IBV_XRC_QP_EVENT_FLAG
 = 0x80000000,

840 
	sibv_qp
 {

841 
ibv_c⁄ãxt
 *
c⁄ãxt
;

842 *
qp_c⁄ãxt
;

843 
ibv_pd
 *
pd
;

844 
ibv_cq
 *
£nd_cq
;

845 
ibv_cq
 *
ªcv_cq
;

846 
ibv_§q
 *
§q
;

847 
uöt32_t
 
h™dÀ
;

848 
uöt32_t
 
qp_num
;

849 
ibv_qp_°©e
 
°©e
;

850 
ibv_qp_ty≥
 
qp_ty≥
;

852 
±hªad_muãx_t
 
muãx
;

853 
±hªad_c⁄d_t
 
c⁄d
;

854 
uöt32_t
 
evíts_com∂ëed
;

857 
	sibv_comp_ch™√l
 {

858 
ibv_c⁄ãxt
 *
c⁄ãxt
;

859 
fd
;

860 
ªf˙t
;

863 
	sibv_cq
 {

864 
ibv_c⁄ãxt
 *
c⁄ãxt
;

865 
ibv_comp_ch™√l
 *
ch™√l
;

866 *
cq_c⁄ãxt
;

867 
uöt32_t
 
h™dÀ
;

868 
cqe
;

870 
±hªad_muãx_t
 
muãx
;

871 
±hªad_c⁄d_t
 
c⁄d
;

872 
uöt32_t
 
comp_evíts_com∂ëed
;

873 
uöt32_t
 
async_evíts_com∂ëed
;

876 
	sibv_ah
 {

877 
ibv_c⁄ãxt
 *
c⁄ãxt
;

878 
ibv_pd
 *
pd
;

879 
uöt32_t
 
h™dÀ
;

882 
	eibv_Êow_Êags
 {

883 
IBV_FLOW_ATTR_FLAGS_ALLOW_LOOP_BACK
 = 1,

884 
IBV_FLOW_ATTR_FLAGS_DONT_TRAP
 = 1 << 1,

887 
	eibv_Êow_©å_ty≥
 {

889 
IBV_FLOW_ATTR_NORMAL
 = 0x0,

893 
IBV_FLOW_ATTR_ALL_DEFAULT
 = 0x1,

897 
IBV_FLOW_ATTR_MC_DEFAULT
 = 0x2,

900 
	eibv_Êow_•ec_ty≥
 {

901 
IBV_FLOW_SPEC_ETH
 = 0x20,

902 
IBV_FLOW_SPEC_IPV4
 = 0x30,

903 
IBV_FLOW_SPEC_TCP
 = 0x40,

904 
IBV_FLOW_SPEC_UDP
 = 0x41,

907 
	sibv_Êow_ëh_fûãr
 {

908 
uöt8_t
 
d°_mac
[6];

909 
uöt8_t
 
§c_mac
[6];

910 
uöt16_t
 
ëhî_ty≥
;

914 
uöt16_t
 
vœn_èg
;

917 
	sibv_Êow_•ec_ëh
 {

918 
ibv_Êow_•ec_ty≥
 
ty≥
;

919 
uöt16_t
 
size
;

920 
ibv_Êow_ëh_fûãr
 
vÆ
;

921 
ibv_Êow_ëh_fûãr
 
mask
;

924 
	sibv_Êow_ùv4_fûãr
 {

925 
uöt32_t
 
§c_ù
;

926 
uöt32_t
 
d°_ù
;

929 
	sibv_Êow_•ec_ùv4
 {

930 
ibv_Êow_•ec_ty≥
 
ty≥
;

931 
uöt16_t
 
size
;

932 
ibv_Êow_ùv4_fûãr
 
vÆ
;

933 
ibv_Êow_ùv4_fûãr
 
mask
;

936 
	sibv_Êow_t˝_udp_fûãr
 {

937 
uöt16_t
 
d°_p‹t
;

938 
uöt16_t
 
§c_p‹t
;

941 
	sibv_Êow_•ec_t˝_udp
 {

942 
ibv_Êow_•ec_ty≥
 
ty≥
;

943 
uöt16_t
 
size
;

944 
ibv_Êow_t˝_udp_fûãr
 
vÆ
;

945 
ibv_Êow_t˝_udp_fûãr
 
mask
;

948 
	sibv_Êow_•ec
 {

951 
ibv_Êow_•ec_ty≥
 
ty≥
;

952 
uöt16_t
 
size
;

953 } 
hdr
;

954 
ibv_Êow_•ec_ëh
 
ëh
;

955 
ibv_Êow_•ec_ùv4
 
ùv4
;

956 
ibv_Êow_•ec_t˝_udp
 
t˝_udp
;

960 
	sibv_Êow_©å
 {

961 
uöt32_t
 
comp_mask
;

962 
ibv_Êow_©å_ty≥
 
ty≥
;

963 
uöt16_t
 
size
;

964 
uöt16_t
 
¥i‹ôy
;

965 
uöt8_t
 
num_of_•ecs
;

966 
uöt8_t
 
p‹t
;

967 
uöt32_t
 
Êags
;

974 
	sibv_Êow
 {

975 
uöt32_t
 
comp_mask
;

976 
ibv_c⁄ãxt
 *
c⁄ãxt
;

977 
uöt32_t
 
h™dÀ
;

980 
ibv_devi˚
;

981 
ibv_c⁄ãxt
;

983 
	sibv_devi˚_›s
 {

984 
ibv_c⁄ãxt
 * (*
Æloc_c⁄ãxt
)(
ibv_devi˚
 *
devi˚
, 
cmd_fd
);

985 (*
‰ì_c⁄ãxt
)(
ibv_c⁄ãxt
 *
c⁄ãxt
);

989 
IBV_SYSFS_NAME_MAX
 = 64,

990 
IBV_SYSFS_PATH_MAX
 = 256

993 
	sibv_devi˚
 {

994 
ibv_devi˚_›s
 
›s
;

995 
ibv_node_ty≥
 
node_ty≥
;

996 
ibv_å™•‹t_ty≥
 
å™•‹t_ty≥
;

998 
«me
[
IBV_SYSFS_NAME_MAX
];

1000 
dev_«me
[
IBV_SYSFS_NAME_MAX
];

1002 
dev_∑th
[
IBV_SYSFS_PATH_MAX
];

1004 
ibdev_∑th
[
IBV_SYSFS_PATH_MAX
];

1007 
	svîbs_devi˚
 {

1008 
ibv_devi˚
 
devi˚
;

1009 
size_t
 
sz
;

1010 
size_t
 
size_of_c⁄ãxt
;

1011 (*
öô_c⁄ãxt
)(
vîbs_devi˚
 *
devi˚
,

1012 
ibv_c⁄ãxt
 *
˘x
, 
cmd_fd
);

1013 (*
unöô_c⁄ãxt
)(
vîbs_devi˚
 *
devi˚
,

1014 
ibv_c⁄ãxt
 *
˘x
);

1016 
ªfcou¡
;

1017 
±hªad_muãx_t
 
ªÊock
;

1018 (*
vîbs_unöô_func
)(
vîbs_devi˚
 *
devi˚
);

1021 
	sibv_c⁄ãxt_›s
 {

1022 (*
quîy_devi˚
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1023 
ibv_devi˚_©å
 *
devi˚_©å
);

1024 (*
quîy_p‹t
)(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1025 
ibv_p‹t_©å
 *
p‹t_©å
);

1026 
ibv_pd
 * (*
Æloc_pd
)(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1027 (*
dóŒoc_pd
)(
ibv_pd
 *
pd
);

1028 
ibv_mr
 * (*
ªg_mr
)(
ibv_pd
 *
pd
, *
addr
, 
size_t
 
Àngth
,

1029 
ac˚ss
);

1030 (*
ªªg_mr
)(
ibv_mr
 *
mr
,

1031 
Êags
,

1032 
ibv_pd
 *
pd
, *
addr
,

1033 
size_t
 
Àngth
,

1034 
ac˚ss
);

1035 (*
dîeg_mr
)(
ibv_mr
 *
mr
);

1036 
ibv_mw
 * (*
Æloc_mw
)(
ibv_pd
 *
pd
, 
ibv_mw_ty≥
 
ty≥
);

1037 (*
böd_mw
)(
ibv_qp
 *
qp
, 
ibv_mw
 *
mw
,

1038 
ibv_mw_böd
 *
mw_böd
);

1039 (*
dóŒoc_mw
)(
ibv_mw
 *
mw
);

1040 
ibv_cq
 * (*
¸óã_cq
)(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

1041 
ibv_comp_ch™√l
 *
ch™√l
,

1042 
comp_ve˘‹
);

1043 (*
pﬁl_cq
)(
ibv_cq
 *
cq
, 
num_íåõs
, 
ibv_wc
 *
wc
);

1044 (*
ªq_nŸify_cq
)(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
);

1045 (*
cq_evít
)(
ibv_cq
 *
cq
);

1046 (*
ªsize_cq
)(
ibv_cq
 *
cq
, 
cqe
);

1047 (*
de°roy_cq
)(
ibv_cq
 *
cq
);

1048 
ibv_§q
 * (*
¸óã_§q
)(
ibv_pd
 *
pd
,

1049 
ibv_§q_öô_©å
 *
§q_öô_©å
);

1050 (*
modify_§q
)(
ibv_§q
 *
§q
,

1051 
ibv_§q_©å
 *
§q_©å
,

1052 
§q_©å_mask
);

1053 (*
quîy_§q
)(
ibv_§q
 *
§q
,

1054 
ibv_§q_©å
 *
§q_©å
);

1055 (*
de°roy_§q
)(
ibv_§q
 *
§q
);

1056 (*
po°_§q_ªcv
)(
ibv_§q
 *
§q
,

1057 
ibv_ªcv_wr
 *
ªcv_wr
,

1058 
ibv_ªcv_wr
 **
bad_ªcv_wr
);

1059 
ibv_qp
 * (*
¸óã_qp
)(
ibv_pd
 *
pd
, 
ibv_qp_öô_©å
 *
©å
);

1060 (*
quîy_qp
)(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1061 
©å_mask
,

1062 
ibv_qp_öô_©å
 *
öô_©å
);

1063 (*
modify_qp
)(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1064 
©å_mask
);

1065 (*
de°roy_qp
)(
ibv_qp
 *
qp
);

1066 (*
po°_£nd
)(
ibv_qp
 *
qp
, 
ibv_£nd_wr
 *
wr
,

1067 
ibv_£nd_wr
 **
bad_wr
);

1068 (*
po°_ªcv
)(
ibv_qp
 *
qp
, 
ibv_ªcv_wr
 *
wr
,

1069 
ibv_ªcv_wr
 **
bad_wr
);

1070 
ibv_ah
 * (*
¸óã_ah
)(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
);

1071 (*
de°roy_ah
)(
ibv_ah
 *
ah
);

1072 (*
©èch_mˇ°
)(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
,

1073 
uöt16_t
 
lid
);

1074 (*
dëach_mˇ°
)(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
,

1075 
uöt16_t
 
lid
);

1076 (*
async_evít
)(
ibv_async_evít
 *
evít
);

1079 
	sibv_c⁄ãxt
 {

1080 
ibv_devi˚
 *
devi˚
;

1081 
ibv_c⁄ãxt_›s
 
›s
;

1082 
cmd_fd
;

1083 
async_fd
;

1084 
num_comp_ve˘‹s
;

1085 
±hªad_muãx_t
 
muãx
;

1086 *
abi_com∑t
;

1089 
	evîbs_c⁄ãxt_mask
 {

1090 
VERBS_CONTEXT_XRCD
 = (
uöt64_t
)1 << 0,

1091 
VERBS_CONTEXT_SRQ
 = (
uöt64_t
)1 << 1,

1092 
VERBS_CONTEXT_QP
 = (
uöt64_t
)1 << 2,

1093 
VERBS_CONTEXT_RESERVED
 = (
uöt64_t
)1 << 3,

1094 
VERBS_CONTEXT_EXP
 = (
uöt64_t
)1 << 62

1097 
	svîbs_c⁄ãxt
 {

1098 (*
quîy_devi˚_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1099 c⁄° 
ibv_quîy_devi˚_ex_öput
 *
öput
,

1100 
ibv_devi˚_©å_ex
 *
©å
,

1101 
size_t
 
©å_size
);

1103 (*
_ª£rved_2
) ();

1104 (*
de°roy_Êow
Ë(
ibv_Êow
 *
Êow
);

1105 (*
_ª£rved_1
) ();

1106 
ibv_Êow
 * (*
¸óã_Êow
Ë(
ibv_qp
 *
qp
,

1107 
ibv_Êow_©å
 *
Êow_©å
);

1108 
ibv_qp
 * (*
›í_qp
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1109 
ibv_qp_›í_©å
 *
©å
);

1110 
ibv_qp
 * (*
¸óã_qp_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1111 
ibv_qp_öô_©å_ex
 *
qp_öô_©å_ex
);

1112 (*
gë_§q_num
)(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
);

1113 
ibv_§q
 * (*
¸óã_§q_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1114 
ibv_§q_öô_©å_ex
 *
§q_öô_©å_ex
);

1115 
ibv_xrcd
 * (*
›í_xrcd
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1116 
ibv_xrcd_öô_©å
 *
xrcd_öô_©å
);

1117 (*
˛o£_xrcd
)(
ibv_xrcd
 *
xrcd
);

1118 
uöt64_t
 
has_comp_mask
;

1119 
size_t
 
sz
;

1120 
ibv_c⁄ãxt
 
c⁄ãxt
;

1123 
ölöe
 
vîbs_c⁄ãxt
 *
	$vîbs_gë_˘x
(
ibv_c⁄ãxt
 *
˘x
)

1125  (!
˘x
 || (˘x->
abi_com∑t
 !
__VERBS_ABI_IS_EXTENDED
)) ?

1126 
NULL
 : 
	`c⁄èöî_of
(
˘x
, 
vîbs_c⁄ãxt
, 
c⁄ãxt
);

1127 
	}
}

1129 
	#vîbs_gë_˘x_›
(
˘x
, 
›
) ({ \

1130 
vîbs_c⁄ãxt
 *
_v˘x
 = 
	`vîbs_gë_˘x
(
˘x
); \

1131 (!
_v˘x
 || (_v˘x->
sz
 < (*_v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt
, 
›
)) || \

1132 !
_v˘x
->
›
Ë? 
NULL
 : _v˘x; })

	)

1134 
	#vîbs_£t_˘x_›
(
_v˘x
, 
›
, 
±r
) ({ \

1135 
vîbs_c⁄ãxt
 *
v˘x
 = 
_v˘x
; \

1136 i‡(
v˘x
 && (v˘x->
sz
 >(*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt
, 
›
))) \

1137 
v˘x
->
›
 = 
±r
; })

	)

1139 
ölöe
 
vîbs_devi˚
 *
	$vîbs_gë_devi˚
(
ibv_devi˚
 *
dev
)

1141  (
dev
->
›s
.
Æloc_c⁄ãxt
) ?

1142 
NULL
 : 
	`c⁄èöî_of
(
dev
, 
vîbs_devi˚
, 
devi˚
);

1143 
	}
}

1153 
ibv_devi˚
 **
ibv_gë_devi˚_li°
(*
num_devi˚s
);

1163 
ibv_‰ì_devi˚_li°
(
ibv_devi˚
 **
li°
);

1168 c⁄° *
ibv_gë_devi˚_«me
(
ibv_devi˚
 *
devi˚
);

1173 
uöt64_t
 
ibv_gë_devi˚_guid
(
ibv_devi˚
 *
devi˚
);

1178 
ibv_c⁄ãxt
 *
ibv_›í_devi˚
(
ibv_devi˚
 *
devi˚
);

1183 
ibv_˛o£_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1192 
ibv_gë_async_evít
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1193 
ibv_async_evít
 *
evít
);

1205 
ibv_ack_async_evít
(
ibv_async_evít
 *
evít
);

1210 
ibv_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1211 
ibv_devi˚_©å
 *
devi˚_©å
);

1216 
ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1217 
ibv_p‹t_©å
 *
p‹t_©å
);

1219 
ölöe
 
	$___ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1220 
uöt8_t
 
p‹t_num
,

1221 
ibv_p‹t_©å
 *
p‹t_©å
)

1224 
p‹t_©å
->
lök_œyî
 = 
IBV_LINK_LAYER_UNSPECIFIED
;

1225 
p‹t_©å
->
ª£rved
 = 0;

1227  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
);

1228 
	}
}

1230 
	#ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
) \

1231 
	`___ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
)

	)

1236 
ibv_quîy_gid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1237 
ödex
, 
ibv_gid
 *
gid
);

1242 
ibv_quîy_pkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1243 
ödex
, 
uöt16_t
 *
pkey
);

1248 
ibv_pd
 *
ibv_Æloc_pd
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1253 
ibv_dóŒoc_pd
(
ibv_pd
 *
pd
);

1255 
ölöe
 
ibv_Êow
 *
	$ibv_¸óã_Êow
(
ibv_qp
 *
qp
,

1256 
ibv_Êow_©å
 *
Êow
)

1258 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
qp
->
c⁄ãxt
,

1259 
¸óã_Êow
);

1260 i‡(!
v˘x
)

1261  
NULL
;

1263  
v˘x
->
	`¸óã_Êow
(
qp
, 
Êow
);

1264 
	}
}

1266 
ölöe
 
	$ibv_de°roy_Êow
(
ibv_Êow
 *
Êow_id
)

1268 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
Êow_id
->
c⁄ãxt
,

1269 
de°roy_Êow
);

1270 i‡(!
v˘x
)

1271  -
ENOSYS
;

1272  
v˘x
->
	`de°roy_Êow
(
Êow_id
);

1273 
	}
}

1278 
ölöe
 
ibv_xrcd
 *

1279 
	$ibv_›í_xrcd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_xrcd_öô_©å
 *
xrcd_öô_©å
)

1281 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
›í_xrcd
);

1282 i‡(!
v˘x
) {

1283 
î∫o
 = 
ENOSYS
;

1284  
NULL
;

1286  
v˘x
->
	`›í_xrcd
(
c⁄ãxt
, 
xrcd_öô_©å
);

1287 
	}
}

1292 
ölöe
 
	$ibv_˛o£_xrcd
(
ibv_xrcd
 *
xrcd
)

1294 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x
(
xrcd
->
c⁄ãxt
);

1295  
v˘x
->
	`˛o£_xrcd
(
xrcd
);

1296 
	}
}

1301 
ibv_mr
 *
ibv_ªg_mr
(
ibv_pd
 *
pd
, *
addr
,

1302 
size_t
 
Àngth
, 
ac˚ss
);

1305 
	eibv_ªªg_mr_îr_code
 {

1307 
	mIBV_REREG_MR_ERR_INPUT
 = -1,

1309 
	mIBV_REREG_MR_ERR_DONT_FORK_NEW
 = -2,

1311 
	mIBV_REREG_MR_ERR_DO_FORK_OLD
 = -3,

1313 
	mIBV_REREG_MR_ERR_CMD
 = -4,

1315 
	mIBV_REREG_MR_ERR_CMD_AND_DO_FORK_NEW
 = -5,

1321 
ibv_ªªg_mr
(
ibv_mr
 *
mr
, 
Êags
,

1322 
ibv_pd
 *
pd
, *
addr
,

1323 
size_t
 
Àngth
, 
ac˚ss
);

1327 
ibv_dîeg_mr
(
ibv_mr
 *
mr
);

1332 
ölöe
 
ibv_mw
 *
	$ibv_Æloc_mw
(
ibv_pd
 *
pd
,

1333 
ibv_mw_ty≥
 
ty≥
)

1335 
ibv_mw
 *
mw
;

1337 i‡(!
pd
->
c⁄ãxt
->
›s
.
Æloc_mw
) {

1338 
î∫o
 = 
ENOSYS
;

1339  
NULL
;

1342 
mw
 = 
pd
->
c⁄ãxt
->
›s
.
	`Æloc_mw
’d, 
ty≥
);

1343  
mw
;

1344 
	}
}

1349 
ölöe
 
	$ibv_dóŒoc_mw
(
ibv_mw
 *
mw
)

1351  
mw
->
c⁄ãxt
->
›s
.
	`dóŒoc_mw
(mw);

1352 
	}
}

1357 
ölöe
 
uöt32_t
 
	$ibv_öc_rkey
(
uöt32_t
 
rkey
)

1359 c⁄° 
uöt32_t
 
mask
 = 0x000000ff;

1360 
uöt8_t
 
√wèg
 = (uöt8_t)((
rkey
 + 1Ë& 
mask
);

1362  (
rkey
 & ~
mask
Ë| 
√wèg
;

1363 
	}
}

1368 
ölöe
 
	$ibv_böd_mw
(
ibv_qp
 *
qp
, 
ibv_mw
 *
mw
,

1369 
ibv_mw_böd
 *
mw_böd
)

1371 i‡(
mw
->
ty≥
 !
IBV_MW_TYPE_1
)

1372  
EINVAL
;

1374  
mw
->
c⁄ãxt
->
›s
.
	`böd_mw
(
qp
, mw, 
mw_böd
);

1375 
	}
}

1380 
ibv_comp_ch™√l
 *
ibv_¸óã_comp_ch™√l
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1385 
ibv_de°roy_comp_ch™√l
(
ibv_comp_ch™√l
 *
ch™√l
);

1397 
ibv_cq
 *
ibv_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

1398 *
cq_c⁄ãxt
,

1399 
ibv_comp_ch™√l
 *
ch™√l
,

1400 
comp_ve˘‹
);

1409 
ibv_ªsize_cq
(
ibv_cq
 *
cq
, 
cqe
);

1414 
ibv_de°roy_cq
(
ibv_cq
 *
cq
);

1425 
ibv_gë_cq_evít
(
ibv_comp_ch™√l
 *
ch™√l
,

1426 
ibv_cq
 **
cq
, **
cq_c⁄ãxt
);

1441 
ibv_ack_cq_evíts
(
ibv_cq
 *
cq
, 
√víts
);

1456 
ölöe
 
	$ibv_pﬁl_cq
(
ibv_cq
 *
cq
, 
num_íåõs
, 
ibv_wc
 *
wc
)

1458  
cq
->
c⁄ãxt
->
›s
.
	`pﬁl_cq
(cq, 
num_íåõs
, 
wc
);

1459 
	}
}

1470 
ölöe
 
	$ibv_ªq_nŸify_cq
(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
)

1472  
cq
->
c⁄ãxt
->
›s
.
	`ªq_nŸify_cq
(cq, 
sﬁicôed_⁄ly
);

1473 
	}
}

1486 
ibv_§q
 *
ibv_¸óã_§q
(
ibv_pd
 *
pd
,

1487 
ibv_§q_öô_©å
 *
§q_öô_©å
);

1489 
ölöe
 
ibv_§q
 *

1490 
	$ibv_¸óã_§q_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1491 
ibv_§q_öô_©å_ex
 *
§q_öô_©å_ex
)

1493 
vîbs_c⁄ãxt
 *
v˘x
;

1494 
uöt32_t
 
mask
 = 
§q_öô_©å_ex
->
comp_mask
;

1496 i‡(!(
mask
 & ~(
IBV_SRQ_INIT_ATTR_PD
 | 
IBV_SRQ_INIT_ATTR_TYPE
)) &&

1497 (
mask
 & 
IBV_SRQ_INIT_ATTR_PD
) &&

1498 (!(
mask
 & 
IBV_SRQ_INIT_ATTR_TYPE
) ||

1499 (
§q_öô_©å_ex
->
§q_ty≥
 =
IBV_SRQT_BASIC
)))

1500  
	`ibv_¸óã_§q
(
§q_öô_©å_ex
->
pd
,

1501 (
ibv_§q_öô_©å
 *Ë
§q_öô_©å_ex
);

1503 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
¸óã_§q_ex
);

1504 i‡(!
v˘x
) {

1505 
î∫o
 = 
ENOSYS
;

1506  
NULL
;

1508  
v˘x
->
	`¸óã_§q_ex
(
c⁄ãxt
, 
§q_öô_©å_ex
);

1509 
	}
}

1523 
ibv_modify_§q
(
ibv_§q
 *
§q
,

1524 
ibv_§q_©å
 *
§q_©å
,

1525 
§q_©å_mask
);

1533 
ibv_quîy_§q
(
ibv_§q
 *
§q
, 
ibv_§q_©å
 *
§q_©å
);

1535 
ölöe
 
	$ibv_gë_§q_num
(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
)

1537 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
§q
->
c⁄ãxt
, 
gë_§q_num
);

1539 i‡(!
v˘x
)

1540  
ENOSYS
;

1542  
v˘x
->
	`gë_§q_num
(
§q
, 
§q_num
);

1543 
	}
}

1549 
ibv_de°roy_§q
(
ibv_§q
 *
§q
);

1558 
ölöe
 
	$ibv_po°_§q_ªcv
(
ibv_§q
 *
§q
,

1559 
ibv_ªcv_wr
 *
ªcv_wr
,

1560 
ibv_ªcv_wr
 **
bad_ªcv_wr
)

1562  
§q
->
c⁄ãxt
->
›s
.
	`po°_§q_ªcv
(§q, 
ªcv_wr
, 
bad_ªcv_wr
);

1563 
	}
}

1568 
ibv_qp
 *
ibv_¸óã_qp
(
ibv_pd
 *
pd
,

1569 
ibv_qp_öô_©å
 *
qp_öô_©å
);

1571 
ölöe
 
ibv_qp
 *

1572 
	$ibv_¸óã_qp_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_qp_öô_©å_ex
 *
qp_öô_©å_ex
)

1574 
vîbs_c⁄ãxt
 *
v˘x
;

1575 
uöt32_t
 
mask
 = 
qp_öô_©å_ex
->
comp_mask
;

1577 i‡(
mask
 =
IBV_QP_INIT_ATTR_PD
)

1578  
	`ibv_¸óã_qp
(
qp_öô_©å_ex
->
pd
,

1579 (
ibv_qp_öô_©å
 *Ë
qp_öô_©å_ex
);

1581 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
¸óã_qp_ex
);

1582 i‡(!
v˘x
) {

1583 
î∫o
 = 
ENOSYS
;

1584  
NULL
;

1586  
v˘x
->
	`¸óã_qp_ex
(
c⁄ãxt
, 
qp_öô_©å_ex
);

1587 
	}
}

1592 
ölöe
 

1593 
	$ibv_quîy_devi˚_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1594 c⁄° 
ibv_quîy_devi˚_ex_öput
 *
öput
,

1595 
ibv_devi˚_©å_ex
 *
©å
)

1597 
vîbs_c⁄ãxt
 *
v˘x
;

1598 
ªt
;

1600 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
quîy_devi˚_ex
);

1601 i‡(!
v˘x
)

1602 
Àgacy
;

1604 
ªt
 = 
v˘x
->
	`quîy_devi˚_ex
(
c⁄ãxt
, 
öput
, 
©å
, (*attr));

1605 i‡(
ªt
 =
ENOSYS
)

1606 
Àgacy
;

1608  
ªt
;

1610 
Àgacy
:

1611 
	`mem£t
(
©å
, 0, (*attr));

1612 
ªt
 = 
	`ibv_quîy_devi˚
(
c⁄ãxt
, &
©å
->
‹ig_©å
);

1613  
ªt
;

1614 
	}
}

1619 
ölöe
 
ibv_qp
 *

1620 
	$ibv_›í_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_qp_›í_©å
 *
qp_›í_©å
)

1622 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
›í_qp
);

1623 i‡(!
v˘x
) {

1624 
î∫o
 = 
ENOSYS
;

1625  
NULL
;

1627  
v˘x
->
	`›í_qp
(
c⁄ãxt
, 
qp_›í_©å
);

1628 
	}
}

1633 
ibv_modify_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1634 
©å_mask
);

1647 
ibv_quîy_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1648 
©å_mask
,

1649 
ibv_qp_öô_©å
 *
öô_©å
);

1654 
ibv_de°roy_qp
(
ibv_qp
 *
qp
);

1662 
ölöe
 
	$ibv_po°_£nd
(
ibv_qp
 *
qp
, 
ibv_£nd_wr
 *
wr
,

1663 
ibv_£nd_wr
 **
bad_wr
)

1665  
qp
->
c⁄ãxt
->
›s
.
	`po°_£nd
(qp, 
wr
, 
bad_wr
);

1666 
	}
}

1671 
ölöe
 
	$ibv_po°_ªcv
(
ibv_qp
 *
qp
, 
ibv_ªcv_wr
 *
wr
,

1672 
ibv_ªcv_wr
 **
bad_wr
)

1674  
qp
->
c⁄ãxt
->
›s
.
	`po°_ªcv
(qp, 
wr
, 
bad_wr
);

1675 
	}
}

1680 
ibv_ah
 *
ibv_¸óã_ah
(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
);

1693 
ibv_öô_ah_‰om_wc
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1694 
ibv_wc
 *
wc
, 
ibv_grh
 *
grh
,

1695 
ibv_ah_©å
 *
ah_©å
);

1709 
ibv_ah
 *
ibv_¸óã_ah_‰om_wc
(
ibv_pd
 *
pd
, 
ibv_wc
 *
wc
,

1710 
ibv_grh
 *
grh
, 
uöt8_t
 
p‹t_num
);

1715 
ibv_de°roy_ah
(
ibv_ah
 *
ah
);

1728 
ibv_©èch_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

1736 
ibv_dëach_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

1744 
ibv_f‹k_öô
();

1749 c⁄° *
ibv_node_ty≥_°r
(
ibv_node_ty≥
 
node_ty≥
);

1754 c⁄° *
ibv_p‹t_°©e_°r
(
ibv_p‹t_°©e
 
p‹t_°©e
);

1759 c⁄° *
ibv_evít_ty≥_°r
(
ibv_evít_ty≥
 
evít
);

1761 
	gEND_C_DECLS


1763 #unde‡
__©åibuã_c⁄°


1765 
	~<öföib™d/vîbs_exp.h
>

	@libibverbs-41mlnx1/include/infiniband/verbs_exp.h

48 #i‚de‡
INFINIBAND_VERBS_EXP_H


49 
	#INFINIBAND_VERBS_EXP_H


	)

51 
	~<öföib™d/vîbs.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 #i‡
__GNUC__
 >= 3

56 
	#__©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

58 
	#__©åibuã_c⁄°


	)

61 
	gBEGIN_C_DECLS


63 
	#IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
ªt
) \

64 i‡((
vÆ
Ë> (
vÆid_mask
)) { \

65 
__vÆ
 = 
vÆ
, 
__vÆid_mask
 = 
vÆid_mask
; \

66 
	`Ârötf
(
°dîr
, "%s: invalid comp_mask !!! (comp_mask = 0x%llx valid_mask = 0x%llx)\n", \

67 
__FUNCTION__
, 
__vÆ
, 
__vÆid_mask
); \

68 
î∫o
 = 
EINVAL
; \

69  
ªt
; \

70 }

	)

72 
	#IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
) \

73 
	`IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
NULL
)

	)

75 
	#IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
) \

76 
	`IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
EINVAL
)

	)

78 
	#IBV_EXP_RET_ZERO_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
) \

79 
	`IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 0)

	)

81 
	#IBV_EXP_IMPLICIT_MR_SIZE
 (~((
size_t
)0))

	)

83 
	eibv_exp_func_«me
 {

84 
	mIBV_EXP_POST_SEND_FUNC
,

85 
	mIBV_EXP_POLL_CQ_FUNC
,

86 
	mIBV_POST_SEND_FUNC
,

87 
	mIBV_POLL_CQ_FUNC
,

88 
	mIBV_POST_RECV_FUNC


91 
	eibv_exp_°¨t_vÆues
 {

92 
	mIBV_EXP_START_ENUM
 = 0x40,

93 
	mIBV_EXP_START_FLAG_LOC
 = 0x20,

94 
	mIBV_EXP_START_FLAG
 = (1ULL << 
IBV_EXP_START_FLAG_LOC
),

100 
	eibv_exp_©omic_ˇp
 {

101 
	mIBV_EXP_ATOMIC_NONE
 = 
IBV_ATOMIC_NONE
,

102 
	mIBV_EXP_ATOMIC_HCA
 = 
IBV_ATOMIC_HCA
,

103 
	mIBV_EXP_ATOMIC_GLOB
 = 
IBV_ATOMIC_GLOB
,

105 
	mIBV_EXP_ATOMIC_HCA_REPLY_BE
 = 
IBV_EXP_START_ENUM


111 
	eibv_exp_devi˚_ˇp_Êags
 {

112 
	mIBV_EXP_DEVICE_RESIZE_MAX_WR
 = 
IBV_DEVICE_RESIZE_MAX_WR
,

113 
	mIBV_EXP_DEVICE_BAD_PKEY_CNTR
 = 
IBV_DEVICE_BAD_PKEY_CNTR
,

114 
	mIBV_EXP_DEVICE_BAD_QKEY_CNTR
 = 
IBV_DEVICE_BAD_QKEY_CNTR
,

115 
	mIBV_EXP_DEVICE_RAW_MULTI
 = 
IBV_DEVICE_RAW_MULTI
,

116 
	mIBV_EXP_DEVICE_AUTO_PATH_MIG
 = 
IBV_DEVICE_AUTO_PATH_MIG
,

117 
	mIBV_EXP_DEVICE_CHANGE_PHY_PORT
 = 
IBV_DEVICE_CHANGE_PHY_PORT
,

118 
	mIBV_EXP_DEVICE_UD_AV_PORT_ENFORCE
 = 
IBV_DEVICE_UD_AV_PORT_ENFORCE
,

119 
	mIBV_EXP_DEVICE_CURR_QP_STATE_MOD
 = 
IBV_DEVICE_CURR_QP_STATE_MOD
,

120 
	mIBV_EXP_DEVICE_SHUTDOWN_PORT
 = 
IBV_DEVICE_SHUTDOWN_PORT
,

121 
	mIBV_EXP_DEVICE_INIT_TYPE
 = 
IBV_DEVICE_INIT_TYPE
,

122 
	mIBV_EXP_DEVICE_PORT_ACTIVE_EVENT
 = 
IBV_DEVICE_PORT_ACTIVE_EVENT
,

123 
	mIBV_EXP_DEVICE_SYS_IMAGE_GUID
 = 
IBV_DEVICE_SYS_IMAGE_GUID
,

124 
	mIBV_EXP_DEVICE_RC_RNR_NAK_GEN
 = 
IBV_DEVICE_RC_RNR_NAK_GEN
,

125 
	mIBV_EXP_DEVICE_SRQ_RESIZE
 = 
IBV_DEVICE_SRQ_RESIZE
,

126 
	mIBV_EXP_DEVICE_N_NOTIFY_CQ
 = 
IBV_DEVICE_N_NOTIFY_CQ
,

127 
	mIBV_EXP_DEVICE_XRC
 = 
IBV_DEVICE_XRC
,

129 
	mIBV_EXP_DEVICE_DC_TRANSPORT
 = (
IBV_EXP_START_FLAG
 << 0),

130 
	mIBV_EXP_DEVICE_QPG
 = (
IBV_EXP_START_FLAG
 << 1),

131 
	mIBV_EXP_DEVICE_UD_RSS
 = (
IBV_EXP_START_FLAG
 << 2),

132 
	mIBV_EXP_DEVICE_UD_TSS
 = (
IBV_EXP_START_FLAG
 << 3),

133 
	mIBV_EXP_DEVICE_EXT_ATOMICS
 = (
IBV_EXP_START_FLAG
 << 4),

134 
	mIBV_EXP_DEVICE_NOP
 = (
IBV_EXP_START_FLAG
 << 5),

135 
	mIBV_EXP_DEVICE_UMR
 = (
IBV_EXP_START_FLAG
 << 6),

136 
	mIBV_EXP_DEVICE_ODP
 = (
IBV_EXP_START_FLAG
 << 7),

137 
	mIBV_EXP_DEVICE_VXLAN_SUPPORT
 = (
IBV_EXP_START_FLAG
 << 10),

138 
	mIBV_EXP_DEVICE_RX_CSUM_TCP_UDP_PKT
 = (
IBV_EXP_START_FLAG
 << 11),

139 
	mIBV_EXP_DEVICE_RX_CSUM_IP_PKT
 = (
IBV_EXP_START_FLAG
 << 12),

140 
	mIBV_EXP_DEVICE_EC_OFFLOAD
 = (
IBV_EXP_START_FLAG
 << 13),

141 
	mIBV_EXP_DEVICE_EXT_MASKED_ATOMICS
 = (
IBV_EXP_START_FLAG
 << 14),

142 
	mIBV_EXP_DEVICE_RX_TCP_UDP_PKT_TYPE
 = (
IBV_EXP_START_FLAG
 << 15),

143 
	mIBV_EXP_DEVICE_SCATTER_FCS
 = (
IBV_EXP_START_FLAG
 << 16),

144 
	mIBV_EXP_DEVICE_MEM_WINDOW
 = (
IBV_EXP_START_FLAG
 << 17),

145 
	mIBV_EXP_DEVICE_WQ_DELAY_DROP
 = (
IBV_EXP_START_FLAG
 << 18),

146 
	mIBV_EXP_DEVICE_PHYSICAL_RANGE_MR
 = (
IBV_EXP_START_FLAG
 << 19),

147 
	mIBV_EXP_DEVICE_CAPI
 = (
IBV_EXP_START_FLAG
 << 20),

148 
	mIBV_EXP_DEVICE_MEM_MGT_EXTENSIONS
 = (
IBV_EXP_START_FLAG
 << 21),

149 
	mIBV_EXP_DEVICE_DC_INFO
 = (
IBV_EXP_START_FLAG
 << 22),

151 
	mIBV_EXP_DEVICE_MW_TYPE_2A
 = (
IBV_EXP_START_FLAG
 << 23),

152 
	mIBV_EXP_DEVICE_MW_TYPE_2B
 = (
IBV_EXP_START_FLAG
 << 24),

153 
	mIBV_EXP_DEVICE_UMR_FIXED_SIZE
 = (
IBV_EXP_START_FLAG
 << 25),

154 
	mIBV_EXP_DEVICE_PACKET_BASED_CREDIT_MODE
 = (
IBV_EXP_START_FLAG
 << 26),

155 
	mIBV_EXP_DEVICE_CROSS_CHANNEL
 = (
IBV_EXP_START_FLAG
 << 28),

156 
	mIBV_EXP_DEVICE_MANAGED_FLOW_STEERING
 = (
IBV_EXP_START_FLAG
 << 29),

157 
	mIBV_EXP_DEVICE_MR_ALLOCATE
 = (
IBV_EXP_START_FLAG
 << 30),

158 
	mIBV_EXP_DEVICE_SHARED_MR
 = (
IBV_EXP_START_FLAG
 << 31),

164 
	eibv_exp_devi˚_©å_comp_mask
 {

165 
	mIBV_EXP_DEVICE_ATTR_CALC_CAP
 = (1 << 0),

166 
	mIBV_EXP_DEVICE_ATTR_WITH_TIMESTAMP_MASK
 = (1 << 1),

167 
	mIBV_EXP_DEVICE_ATTR_WITH_HCA_CORE_CLOCK
 = (1 << 2),

168 
	mIBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
 = (1 << 3),

169 
	mIBV_EXP_DEVICE_DC_RD_REQ
 = (1 << 4),

170 
	mIBV_EXP_DEVICE_DC_RD_RES
 = (1 << 5),

171 
	mIBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
 = (1 << 6),

172 
	mIBV_EXP_DEVICE_ATTR_RSS_TBL_SZ
 = (1 << 7),

173 
	mIBV_EXP_DEVICE_ATTR_EXT_ATOMIC_ARGS
 = (1 << 8),

174 
	mIBV_EXP_DEVICE_ATTR_UMR
 = (1 << 9),

175 
	mIBV_EXP_DEVICE_ATTR_ODP
 = (1 << 10),

176 
	mIBV_EXP_DEVICE_ATTR_MAX_DCT
 = (1 << 11),

177 
	mIBV_EXP_DEVICE_ATTR_MAX_CTX_RES_DOMAIN
 = (1 << 12),

178 
	mIBV_EXP_DEVICE_ATTR_RX_HASH
 = (1 << 13),

179 
	mIBV_EXP_DEVICE_ATTR_MAX_WQ_TYPE_RQ
 = (1 << 14),

180 
	mIBV_EXP_DEVICE_ATTR_MAX_DEVICE_CTX
 = (1 << 15),

181 
	mIBV_EXP_DEVICE_ATTR_MP_RQ
 = (1 << 16),

182 
	mIBV_EXP_DEVICE_ATTR_VLAN_OFFLOADS
 = (1 << 17),

183 
	mIBV_EXP_DEVICE_ATTR_EC_CAPS
 = (1 << 18),

184 
	mIBV_EXP_DEVICE_ATTR_MASKED_ATOMICS
 = (1 << 19),

185 
	mIBV_EXP_DEVICE_ATTR_RX_PAD_END_ALIGN
 = (1 << 20),

186 
	mIBV_EXP_DEVICE_ATTR_TSO_CAPS
 = (1 << 21),

187 
	mIBV_EXP_DEVICE_ATTR_PACKET_PACING_CAPS
 = (1 << 22),

188 
	mIBV_EXP_DEVICE_ATTR_EC_GF_BASE
 = (1 << 23),

189 
	mIBV_EXP_DEVICE_ATTR_OOO_CAPS
 = (1 << 24),

190 
	mIBV_EXP_DEVICE_ATTR_SW_PARSING_CAPS
 = (1 << 25),

191 
	mIBV_EXP_DEVICE_ATTR_ODP_MAX_SIZE
 = (1 << 26),

192 
	mIBV_EXP_DEVICE_ATTR_TM_CAPS
 = (1 << 27),

193 
	mIBV_EXP_DEVICE_ATTR_TUNNEL_OFFLOADS_CAPS
 = (1 << 28),

194 
	mIBV_EXP_DEVICE_ATTR_MAX_DM_SIZE
 = (1 << 29),

195 
	mIBV_EXP_DEVICE_ATTR_TUNNELED_ATOMIC
 = (1 << 30),

196 
	mIBV_EXP_DEVICE_ATTR_COMP_MASK_2
 = (1 << 31)

201 
	#IBV_EXP_DEVICE_ATTR_RESERVED
 (1ULL << 32)

	)

203 
	eibv_exp_devi˚_©å_comp_mask_2
 {

204 
	mIBV_EXP_DEVICE_ATTR_UMR_FIXED_SIZE_CAPS
 = (1 << 0),

205 
	mIBV_EXP_DEVICE_ATTR_PCI_ATOMIC_CAPS
 = (1 << 1),

207 
	mIBV_EXP_DEVICE_ATTR_RESERVED_2
 = (1 << 2),

210 
	eibv_exp_tu¬ñ_ofÊﬂds_ˇps
 {

211 
	mIBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_VXLAN
 = 1 << 0,

212 
	mIBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_GRE
 = 1 << 1,

213 
	mIBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_GENEVE
 = 1 << 2

216 
	eibv_exp_tu¬ñed_©omic_ˇps
 {

217 
	mIBV_EXP_TUNNELED_ATOMIC_SUPPORTED
 = 1 << 0,

220 
	eibv_exp_dm_mem˝y_dú
 {

221 
	mIBV_EXP_DM_CPY_TO_DEVICE
,

222 
	mIBV_EXP_DM_CPY_TO_HOST


225 
	eibv_exp_dm_©å_comp_mask
 {

226 
	mIBV_EXP_ALLOC_DM_ATTR_RESERVED
 = (1 << 0),

229 
	sibv_exp_Æloc_dm_©å
 {

230 
size_t
 
	mÀngth
;

231 
uöt32_t
 
	mcomp_mask
;

234 
	eibv_exp_dm_comp_mask
 {

235 
	mIBV_EXP_DM_COMP_MASK_RESERVED
 = (1 << 0),

238 
	sibv_exp_dm
 {

239 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

240 
uöt32_t
 
	mh™dÀ
;

241 
uöt32_t
 
	mcomp_mask
;

244 
	eibv_exp_dm_˝y_comp_mask
 {

245 
	mIBV_EXP_DM_CPY_COMP_MASK_RESERVED
 = (1 << 0),

248 
	sibv_exp_mem˝y_dm_©å
 {

249 
ibv_exp_dm_mem˝y_dú
 
	mmem˝y_dú
;

250 *
	mho°_addr
;

251 
uöt64_t
 
	mdm_off£t
;

252 
size_t
 
	mÀngth
;

253 
uöt32_t
 
	mcomp_mask
;

256 
	sibv_exp_devi˚_ˇlc_ˇp
 {

257 
uöt64_t
 
	md©a_ty≥s
;

258 
uöt64_t
 
	md©a_sizes
;

259 
uöt64_t
 
	möt_›s
;

260 
uöt64_t
 
	muöt_›s
;

261 
uöt64_t
 
	mÂ_›s
;

264 
	sibv_exp_ext_©omics_∑øms
 {

268 
uöt64_t
 
	mlog_©omic_¨g_sizes
;

269 
uöt32_t
 
	mmax_Á_bô_bound¨y
;

270 
uöt32_t
 
	mlog_max_©omic_ölöe
;

273 
	sibv_exp_masked_©omic_∑øms
 {

274 
uöt32_t
 
	mmax_Á_bô_bound¨y
;

275 
uöt32_t
 
	mlog_max_©omic_ölöe
;

276 
uöt64_t
 
	mmasked_log_©omic_¨g_sizes
;

277 
uöt64_t
 
	mmasked_log_©omic_¨g_sizes_√tw‹k_ídü¬ess
;

280 
	eibv_odp_gíîÆ_ˇp_bôs
 {

281 
	mIBV_EXP_ODP_SUPPORT
 = 1 << 0,

282 
	mIBV_EXP_ODP_SUPPORT_IMPLICIT
 = 1 << 1,

285 
	eibv_exp_odp_å™•‹t_ˇp_bôs
 {

286 
	mIBV_EXP_ODP_SUPPORT_SEND
 = 1 << 0,

287 
	mIBV_EXP_ODP_SUPPORT_RECV
 = 1 << 1,

288 
	mIBV_EXP_ODP_SUPPORT_WRITE
 = 1 << 2,

289 
	mIBV_EXP_ODP_SUPPORT_READ
 = 1 << 3,

290 
	mIBV_EXP_ODP_SUPPORT_ATOMIC
 = 1 << 4,

291 
	mIBV_EXP_ODP_SUPPORT_SRQ_RECV
 = 1 << 5,

294 
	sibv_exp_umr_ˇps
 {

295 
uöt32_t
 
	mmax_klm_li°_size
;

296 
uöt32_t
 
	mmax_£nd_wqe_ölöe_klms
;

297 
uöt32_t
 
	mmax_umr_ªcursi⁄_dïth
;

298 
uöt32_t
 
	mmax_umr_°ride_dimísi⁄
;

301 
	sibv_exp_odp_ˇps
 {

302 
uöt64_t
 
	mgíîÆ_odp_ˇps
;

304 
uöt32_t
 
	mrc_odp_ˇps
;

305 
uöt32_t
 
	muc_odp_ˇps
;

306 
uöt32_t
 
	mud_odp_ˇps
;

307 
uöt32_t
 
	mdc_odp_ˇps
;

308 
uöt32_t
 
	mxrc_odp_ˇps
;

309 
uöt32_t
 
	møw_ëh_odp_ˇps
;

310 } 
	m≥r_å™•‹t_ˇps
;

313 
	eibv_exp_suµ‹ãd_qp_ty≥s
 {

314 
	mIBV_EXP_QPT_RC
 = 1ULL << 0,

315 
	mIBV_EXP_QPT_UC
 = 1ULL << 1,

316 
	mIBV_EXP_QPT_UD
 = 1ULL << 2,

317 
	mIBV_EXP_QPT_XRC_INIT
 = 1ULL << 3,

318 
	mIBV_EXP_QPT_XRC_TGT
 = 1ULL << 4,

319 
	mIBV_EXP_QPT_RAW_PACKET
 = 1ULL << 5,

320 
	mIBV_EXP_QPT_RESERVED
 = 1ULL << 6

323 
	sibv_exp_rx_hash_ˇps
 {

324 
uöt32_t
 
	mmax_rwq_ödúe˘i⁄_èbÀs
;

325 
uöt32_t
 
	mmax_rwq_ödúe˘i⁄_èbÀ_size
;

326 
uöt8_t
 
	msuµ‹ãd_hash_fun˘i⁄s
;

327 
uöt64_t
 
	msuµ‹ãd_∑ckë_fõlds
;

328 
uöt32_t
 
	msuµ‹ãd_qps
;

331 
	eibv_exp_mp_rq_shi·s
 {

332 
	mIBV_EXP_MP_RQ_NO_SHIFT
 = 0,

333 
	mIBV_EXP_MP_RQ_2BYTES_SHIFT
 = 1 << 0

336 
	sibv_exp_›í_devi˚_©å
 {

337 
uöt32_t
 
	mcomp_mask
;

339 
uöt64_t
 
	m≥î_id
;

340 *
	m≥î_«me
;

341 } 
	m≥î_öfo
;

344 
	eibv_exp_£t_c⁄ãxt_©å
 {

345 
	mIBV_EXP_SET_ATTR_PEER_INFO
 = (1 << 0),

346 
	mIBV_EXP_SET_CONTEXT_ATTR_RESERVED
 = (1 << 1),

349 
	eibv_exp_mp_rq_sup_ty≥s
 {

350 
	mIBV_EXP_MP_RQ_SUP_TYPE_SRQ_TM
 = 1 << 0,

355 
	mIBV_EXP_MP_RQ_SUP_TYPE_WQ_RQ
 = 1 << 5,

358 
	sibv_exp_mp_rq_ˇps
 {

359 
uöt32_t
 
	msuµ‹ãd_qps
;

360 
uöt32_t
 
	mÆlowed_shi·s
;

361 
uöt8_t
 
	mmö_sögÀ_wqe_log_num_of_°rides
;

362 
uöt8_t
 
	mmax_sögÀ_wqe_log_num_of_°rides
;

363 
uöt8_t
 
	mmö_sögÀ_°ride_log_num_of_byãs
;

364 
uöt8_t
 
	mmax_sögÀ_°ride_log_num_of_byãs
;

367 
	sibv_exp_ec_ˇps
 {

368 
uöt32_t
 
	mmax_ec_d©a_ve˘‹_cou¡
;

369 
uöt32_t
 
	mmax_ec_ˇlc_öÊight_ˇlcs
;

372 
	#ibv_is_q±_suµ‹ãd
(
ˇps
, 
q±
Ë((ˇpsË& (1 << (q±)))

	)

374 
	sibv_exp_tso_ˇps
 {

375 
uöt32_t
 
	mmax_tso
;

376 
uöt32_t
 
	msuµ‹ãd_q±s
;

379 
	eibv_exp_∑ckë_∑cög_ˇp_Êags
 {

380 
	mIBV_EXP_QP_SUPPORT_BURST
 = 1 << 0,

383 
	sibv_exp_∑ckë_∑cög_ˇps
 {

384 
uöt32_t
 
	mqp_øã_limô_mö
;

385 
uöt32_t
 
	mqp_øã_limô_max
;

386 
uöt32_t
 
	msuµ‹ãd_q±s
;

387 
uöt8_t
 
	mˇp_Êags
;

388 
uöt8_t
 
	mª£rved
[3];

391 
	eibv_exp_ooo_å™•‹t_ˇp_bôs
 {

392 
	mIBV_EXP_OOO_SUPPORT_RW_DATA_PLACEMENT
 = (1 << 0),

395 
	sibv_exp_ooo_ˇps
 {

396 
uöt32_t
 
	mrc_ˇps
;

397 
uöt32_t
 
	mxrc_ˇps
;

398 
uöt32_t
 
	mdc_ˇps
;

399 
uöt32_t
 
	mud_ˇps
;

402 
	eibv_exp_sw_∑rsög_ofÊﬂds
 {

403 
	mIBV_EXP_SW_PARSING
 = (1 << 0),

404 
	mIBV_EXP_SW_PARSING_CSUM
 = (1 << 1),

405 
	mIBV_EXP_SW_PARSING_LSO
 = (1 << 2),

408 
	sibv_exp_sw_∑rsög_ˇps
 {

409 
uöt32_t
 
	msw_∑rsög_ofÊﬂds
;

410 
uöt32_t
 
	msuµ‹ãd_q±s
;

413 
	eibv_exp_tm_ˇp_Êags
 {

414 
	mIBV_EXP_TM_CAP_RC
 = 1 << 0,

415 
	mIBV_EXP_TM_CAP_DC
 = 1 << 1

418 
	sibv_exp_tm_ˇps
 {

420 
uöt32_t
 
	mmax_∫dv_hdr_size
;

422 
uöt32_t
 
	mmax_num_ègs
;

424 
uöt32_t
 
	mˇ∑bûôy_Êags
;

426 
uöt32_t
 
	mmax_›s
;

428 
uöt32_t
 
	mmax_sge
;

431 
	sibv_exp_umr_fixed_size_ˇps
 {

432 
uöt64_t
 
	mmax_ítôy_size
;

435 
	sibv_exp_pci_©omic_ˇps
 {

436 
uöt16_t
 
	m„tch_add
;

437 
uöt16_t
 
	msw≠
;

438 
uöt16_t
 
	mcom∑ª_sw≠
;

441 
	eibv_exp_pci_©omic_ˇp_›s_suµ‹ãd_sizes
 {

442 
	mIBV_EXP_PCI_ATOMIC_OP_SIZE_SUP_4_BYTES
 = (1ULL << 0),

443 
	mIBV_EXP_PCI_ATOMIC_OP_SIZE_SUP_8_BYTES
 = (1ULL << 1),

444 
	mIBV_EXP_PCI_ATOMIC_OP_SIZE_SUP_16_BYTES
 = (1ULL << 2),

447 
	sibv_exp_devi˚_©å
 {

448 
	mfw_vî
[64];

449 
uöt64_t
 
	mnode_guid
;

450 
uöt64_t
 
	msys_image_guid
;

451 
uöt64_t
 
	mmax_mr_size
;

452 
uöt64_t
 
	m∑ge_size_ˇp
;

453 
uöt32_t
 
	mvíd‹_id
;

454 
uöt32_t
 
	mvíd‹_∑π_id
;

455 
uöt32_t
 
	mhw_vî
;

456 
	mmax_qp
;

457 
	mmax_qp_wr
;

458 
	mª£rved
;

459 
	mmax_sge
;

460 
	mmax_sge_rd
;

461 
	mmax_cq
;

462 
	mmax_cqe
;

463 
	mmax_mr
;

464 
	mmax_pd
;

465 
	mmax_qp_rd_©om
;

466 
	mmax_ì_rd_©om
;

467 
	mmax_ªs_rd_©om
;

468 
	mmax_qp_öô_rd_©om
;

469 
	mmax_ì_öô_rd_©om
;

470 
ibv_exp_©omic_ˇp
 
	mexp_©omic_ˇp
;

471 
	mmax_ì
;

472 
	mmax_rdd
;

473 
	mmax_mw
;

474 
	mmax_øw_ùv6_qp
;

475 
	mmax_øw_ëhy_qp
;

476 
	mmax_mˇ°_gΩ
;

477 
	mmax_mˇ°_qp_©èch
;

478 
	mmax_tŸÆ_mˇ°_qp_©èch
;

479 
	mmax_ah
;

480 
	mmax_fmr
;

481 
	mmax_m≠_≥r_fmr
;

482 
	mmax_§q
;

483 
	mmax_§q_wr
;

484 
	mmax_§q_sge
;

485 
uöt16_t
 
	mmax_pkeys
;

486 
uöt8_t
 
	mloˇl_ˇ_ack_dñay
;

487 
uöt8_t
 
	mphys_p‹t_˙t
;

488 
uöt32_t
 
	mcomp_mask
;

489 
ibv_exp_devi˚_ˇlc_ˇp
 
	mˇlc_ˇp
;

490 
uöt64_t
 
	mtime°amp_mask
;

491 
uöt64_t
 
	mhˇ_c‹e_˛ock
;

492 
uöt64_t
 
	mexp_devi˚_ˇp_Êags
;

493 
	mmax_dc_ªq_rd_©om
;

494 
	mmax_dc_ªs_rd_©om
;

495 
	mölöe_ªcv_sz
;

496 
uöt32_t
 
	mmax_rss_tbl_sz
;

497 
ibv_exp_ext_©omics_∑øms
 
	mext_©om
;

498 
ibv_exp_umr_ˇps
 
	mumr_ˇps
;

499 
ibv_exp_odp_ˇps
 
	modp_ˇps
;

500 
	mmax_d˘
;

501 
	mmax_˘x_ªs_domaö
;

502 
ibv_exp_rx_hash_ˇps
 
	mrx_hash_ˇps
;

503 
uöt32_t
 
	mmax_wq_ty≥_rq
;

504 
	mmax_devi˚_˘x
;

505 
ibv_exp_mp_rq_ˇps
 
	mmp_rq_ˇps
;

506 
uöt16_t
 
	mwq_vœn_ofÊﬂds_ˇp
;

507 
ibv_exp_ec_ˇps
 
	mec_ˇps
;

508 
ibv_exp_masked_©omic_∑øms
 
	mmasked_©omic
;

517 
	mrx_∑d_íd_addr_Æign
;

518 
ibv_exp_tso_ˇps
 
	mtso_ˇps
;

519 
ibv_exp_∑ckë_∑cög_ˇps
 
	m∑ckë_∑cög_ˇps
;

520 
uöt32_t
 
	mec_w_mask
;

521 
ibv_exp_ooo_ˇps
 
	mooo_ˇps
;

522 
ibv_exp_sw_∑rsög_ˇps
 
	msw_∑rsög_ˇps
;

523 
uöt64_t
 
	modp_mr_max_size
;

524 
ibv_exp_tm_ˇps
 
	mtm_ˇps
;

525 
uöt32_t
 
	mtu¬ñ_ofÊﬂds_ˇps
;

526 
uöt64_t
 
	mmax_dm_size
;

527 
uöt32_t
 
	mtu¬ñed_©omic_ˇps
;

528 
uöt64_t
 
	mcomp_mask_2
;

529 
ibv_exp_umr_fixed_size_ˇps
 
	mumr_fixed_size_ˇps
;

530 
ibv_exp_pci_©omic_ˇps
 
	mpci_©omic_ˇps
;

534 
	mIBV_EXP_ACCESS_FLAGS_SHIFT
 = 0x0F

537 
	eibv_exp_ac˚ss_Êags
 {

538 
	mIBV_EXP_ACCESS_LOCAL_WRITE
 = 
IBV_ACCESS_LOCAL_WRITE
,

539 
	mIBV_EXP_ACCESS_REMOTE_WRITE
 = 
IBV_ACCESS_REMOTE_WRITE
,

540 
	mIBV_EXP_ACCESS_REMOTE_READ
 = 
IBV_ACCESS_REMOTE_READ
,

541 
	mIBV_EXP_ACCESS_REMOTE_ATOMIC
 = 
IBV_ACCESS_REMOTE_ATOMIC
,

542 
	mIBV_EXP_ACCESS_MW_BIND
 = 
IBV_ACCESS_MW_BIND
,

544 
	mIBV_EXP_ACCESS_ALLOCATE_MR
 = (
IBV_EXP_START_FLAG
 << 5),

545 
	mIBV_EXP_ACCESS_SHARED_MR_USER_READ
 = (
IBV_EXP_START_FLAG
 << 6),

546 
	mIBV_EXP_ACCESS_SHARED_MR_USER_WRITE
 = (
IBV_EXP_START_FLAG
 << 7),

547 
	mIBV_EXP_ACCESS_SHARED_MR_GROUP_READ
 = (
IBV_EXP_START_FLAG
 << 8),

548 
	mIBV_EXP_ACCESS_SHARED_MR_GROUP_WRITE
 = (
IBV_EXP_START_FLAG
 << 9),

549 
	mIBV_EXP_ACCESS_SHARED_MR_OTHER_READ
 = (
IBV_EXP_START_FLAG
 << 10),

550 
	mIBV_EXP_ACCESS_SHARED_MR_OTHER_WRITE
 = (
IBV_EXP_START_FLAG
 << 11),

551 
	mIBV_EXP_ACCESS_NO_RDMA
 = (
IBV_EXP_START_FLAG
 << 12),

552 
	mIBV_EXP_ACCESS_MW_ZERO_BASED
 = (
IBV_EXP_START_FLAG
 << 13),

553 
	mIBV_EXP_ACCESS_ON_DEMAND
 = (
IBV_EXP_START_FLAG
 << 14),

554 
	mIBV_EXP_ACCESS_RELAXED
 = (
IBV_EXP_START_FLAG
 << 15),

555 
	mIBV_EXP_ACCESS_PHYSICAL_ADDR
 = (
IBV_EXP_START_FLAG
 << 16),

556 
	mIBV_EXP_ACCESS_TUNNELED_ATOMIC
 = (
IBV_EXP_START_FLAG
 << 17),

558 
	mIBV_EXP_ACCESS_RESERVED
 = (
IBV_EXP_START_FLAG
 << 18)

562 
	sibv_exp_mw_böd_öfo
 {

563 
ibv_mr
 *
	mmr
;

564 
uöt64_t
 
	maddr
;

565 
uöt64_t
 
	mÀngth
;

566 
uöt64_t
 
	mexp_mw_ac˚ss_Êags
;

572 
	eibv_exp_böd_mw_comp_mask
 {

573 
	mIBV_EXP_BIND_MW_RESERVED
 = (1 << 0)

577 
	sibv_exp_mw_böd
 {

578 
ibv_qp
 *
	mqp
;

579 
ibv_mw
 *
	mmw
;

580 
uöt64_t
 
	mwr_id
;

581 
uöt64_t
 
	mexp_£nd_Êags
;

582 
ibv_exp_mw_böd_öfo
 
	mböd_öfo
;

583 
uöt32_t
 
	mcomp_mask
;

586 
	eibv_exp_ˇlc_›
 {

587 
	mIBV_EXP_CALC_OP_ADD
 = 0,

588 
	mIBV_EXP_CALC_OP_MAXLOC
,

589 
	mIBV_EXP_CALC_OP_BAND
,

590 
	mIBV_EXP_CALC_OP_BXOR
,

591 
	mIBV_EXP_CALC_OP_BOR
,

592 
	mIBV_EXP_CALC_OP_NUMBER


595 
	eibv_exp_ˇlc_d©a_ty≥
 {

596 
	mIBV_EXP_CALC_DATA_TYPE_INT
 = 0,

597 
	mIBV_EXP_CALC_DATA_TYPE_UINT
,

598 
	mIBV_EXP_CALC_DATA_TYPE_FLOAT
,

599 
	mIBV_EXP_CALC_DATA_TYPE_NUMBER


602 
	eibv_exp_ˇlc_d©a_size
 {

603 
	mIBV_EXP_CALC_DATA_SIZE_64_BIT
 = 0,

604 
	mIBV_EXP_CALC_DATA_SIZE_NUMBER


607 
	eibv_exp_wr_›code
 {

608 
	mIBV_EXP_WR_RDMA_WRITE
 = 
IBV_WR_RDMA_WRITE
,

609 
	mIBV_EXP_WR_RDMA_WRITE_WITH_IMM
 = 
IBV_WR_RDMA_WRITE_WITH_IMM
,

610 
	mIBV_EXP_WR_SEND
 = 
IBV_WR_SEND
,

611 
	mIBV_EXP_WR_SEND_WITH_IMM
 = 
IBV_WR_SEND_WITH_IMM
,

612 
	mIBV_EXP_WR_RDMA_READ
 = 
IBV_WR_RDMA_READ
,

613 
	mIBV_EXP_WR_ATOMIC_CMP_AND_SWP
 = 
IBV_WR_ATOMIC_CMP_AND_SWP
,

614 
	mIBV_EXP_WR_ATOMIC_FETCH_AND_ADD
 = 
IBV_WR_ATOMIC_FETCH_AND_ADD
,

615 
	mIBV_EXP_WR_LOCAL_INV
 = 
IBV_WR_LOCAL_INV
,

616 
	mIBV_EXP_WR_BIND_MW
 = 
IBV_WR_BIND_MW
,

617 
	mIBV_EXP_WR_SEND_WITH_INV
 = 
IBV_WR_SEND_WITH_INV
,

619 
	mIBV_EXP_WR_TSO
 = 15 + 
IBV_EXP_START_ENUM
,

620 
	mIBV_EXP_WR_SEND_ENABLE
 = 0x20 + 
IBV_EXP_START_ENUM
,

621 
	mIBV_EXP_WR_RECV_ENABLE
,

622 
	mIBV_EXP_WR_CQE_WAIT
,

623 
	mIBV_EXP_WR_EXT_MASKED_ATOMIC_CMP_AND_SWP
,

624 
	mIBV_EXP_WR_EXT_MASKED_ATOMIC_FETCH_AND_ADD
,

625 
	mIBV_EXP_WR_NOP
,

626 
	mIBV_EXP_WR_UMR_FILL
,

627 
	mIBV_EXP_WR_UMR_INVALIDATE
,

630 
	eibv_exp_£nd_Êags
 {

631 
	mIBV_EXP_SEND_FENCE
 = 
IBV_SEND_FENCE
,

632 
	mIBV_EXP_SEND_SIGNALED
 = 
IBV_SEND_SIGNALED
,

633 
	mIBV_EXP_SEND_SOLICITED
 = 
IBV_SEND_SOLICITED
,

634 
	mIBV_EXP_SEND_INLINE
 = 
IBV_SEND_INLINE
,

636 
	mIBV_EXP_SEND_IP_CSUM
 = (
IBV_EXP_START_FLAG
 << 0),

637 
	mIBV_EXP_SEND_WITH_CALC
 = (
IBV_EXP_START_FLAG
 << 1),

638 
	mIBV_EXP_SEND_WAIT_EN_LAST
 = (
IBV_EXP_START_FLAG
 << 2),

639 
	mIBV_EXP_SEND_EXT_ATOMIC_INLINE
 = (
IBV_EXP_START_FLAG
 << 3),

642 
	sibv_exp_cmp_sw≠
 {

643 
uöt64_t
 
	mcom∑ª_mask
;

644 
uöt64_t
 
	mcom∑ª_vÆ
;

645 
uöt64_t
 
	msw≠_vÆ
;

646 
uöt64_t
 
	msw≠_mask
;

649 
	sibv_exp_„tch_add
 {

650 
uöt64_t
 
	madd_vÆ
;

651 
uöt64_t
 
	mfõld_bound¨y
;

657 
	eibv_exp_£nd_wr_comp_mask
 {

658 
	mIBV_EXP_SEND_WR_ATTR_RESERVED
 = 1 << 0

661 
	sibv_exp_mem_ªgi⁄
 {

662 
uöt64_t
 
	mba£_addr
;

663 
ibv_mr
 *
	mmr
;

664 
size_t
 
	mÀngth
;

667 
	sibv_exp_mem_ª≥©_block
 {

668 
uöt64_t
 
	mba£_addr
;

669 
ibv_mr
 *
	mmr
;

670 
size_t
 *
	mbyã_cou¡
;

671 
size_t
 *
	m°ride
;

674 
	eibv_exp_umr_wr_ty≥
 {

675 
	mIBV_EXP_UMR_MR_LIST
,

676 
	mIBV_EXP_UMR_REPEAT
,

677 
	mIBV_EXP_UMR_MR_LIST_FIXED_SIZE
,

680 
	sibv_exp_£nd_wr
 {

681 
uöt64_t
 
	mwr_id
;

682 
ibv_exp_£nd_wr
 *
	m√xt
;

683 
ibv_sge
 *
	msg_li°
;

684 
	mnum_sge
;

685 
ibv_exp_wr_›code
 
	mexp_›code
;

686 
	mª£rved
;

688 
uöt32_t
 
	mimm_d©a
;

689 
uöt32_t
 
	mövÆid©e_rkey
;

690 } 
	mex
;

693 
uöt64_t
 
	mªmŸe_addr
;

694 
uöt32_t
 
	mrkey
;

695 } 
	mrdma
;

697 
uöt64_t
 
	mªmŸe_addr
;

698 
uöt64_t
 
	mcom∑ª_add
;

699 
uöt64_t
 
	msw≠
;

700 
uöt32_t
 
	mrkey
;

701 } 
	m©omic
;

703 
ibv_ah
 *
	mah
;

704 
uöt32_t
 
	mªmŸe_q≤
;

705 
uöt32_t
 
	mªmŸe_qkey
;

706 } 
	mud
;

707 } 
	mwr
;

711 
uöt32_t
 
	mªmŸe_§qn
;

712 } 
	mxrc
;

713 } 
	mqp_ty≥
;

715 
uöt32_t
 
	mxrc_ªmŸe_§q_num
;

719 
uöt64_t
 
	mªmŸe_addr
;

720 
uöt32_t
 
	mrkey
;

721 } 
	mrdma
;

723 
uöt64_t
 
	mªmŸe_addr
;

724 
uöt64_t
 
	mcom∑ª_add
;

725 
uöt64_t
 
	msw≠
;

726 
uöt32_t
 
	mrkey
;

727 } 
	m©omic
;

729 
ibv_cq
 *
	mcq
;

730 
öt32_t
 
	mcq_cou¡
;

731 } 
	mcqe_waô
;

733 
ibv_qp
 *
	mqp
;

734 
öt32_t
 
	mwqe_cou¡
;

735 } 
	mwqe_íabÀ
;

736 } 
	mèsk
;

739 
ibv_exp_ˇlc_›
 
	mˇlc_›
;

740 
ibv_exp_ˇlc_d©a_ty≥
 
	md©a_ty≥
;

741 
ibv_exp_ˇlc_d©a_size
 
	md©a_size
;

742 } 
	mˇlc
;

743 } 
	m›
;

745 
ibv_ah
 *
	mah
;

746 
uöt64_t
 
	md˘_ac˚ss_key
;

747 
uöt32_t
 
	md˘_numbî
;

748 } 
	mdc
;

751 
ibv_mw
 *
	mmw
;

752 
uöt32_t
 
	mrkey
;

753 
ibv_exp_mw_böd_öfo
 
	mböd_öfo
;

754 } 
	mböd_mw
;

756 *
	mhdr
;

757 
uöt16_t
 
	mhdr_sz
;

758 
uöt16_t
 
	mmss
;

759 } 
	mtso
;

761 
uöt64_t
 
	mexp_£nd_Êags
;

762 
uöt32_t
 
	mcomp_mask
;

765 
uöt32_t
 
	mumr_ty≥
;

766 
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem‹y_obje˘s
;

767 
uöt64_t
 
	mexp_ac˚ss
;

768 
ibv_mr
 *
	mmodifõd_mr
;

769 
uöt64_t
 
	mba£_addr
;

770 
uöt32_t
 
	mnum_mrs
;

772 
ibv_exp_mem_ªgi⁄
 *
	mmem_ªg_li°
;

774 
ibv_exp_mem_ª≥©_block
 *
	mmem_ª≥©_block_li°
;

775 
size_t
 *
	mª≥©_cou¡
;

776 
uöt32_t
 
	m°ride_dim
;

777 } 
	mrb
;

778 } 
	mmem_li°
;

779 } 
	mumr
;

781 
uöt32_t
 
	mlog_¨g_sz
;

782 
uöt64_t
 
	mªmŸe_addr
;

783 
uöt32_t
 
	mrkey
;

794 
ibv_exp_cmp_sw≠
 
	mcmp_sw≠
;

795 
ibv_exp_„tch_add
 
	m„tch_add
;

796 } 
	m›
;

797 } 
	mölöe_d©a
;

799 } 
	mwr_d©a
;

800 } 
	mmasked_©omics
;

801 } 
	mext_›
;

808 
	eibv_exp_˛ock_öfo_comp_mask
 {

809 
	mIBV_EXP_CLOCK_INFO_RESERVED
 = 1 << 0,

812 
	sibv_exp_˛ock_öfo
 {

813 
uöt64_t
 
	mcy˛es
;

814 
uöt64_t
 
	mn£c
;

815 
uöt64_t
 
	m‰ac
;

816 
uöt64_t
 
	mmask
;

817 
uöt32_t
 
	mshi·
;

818 
uöt32_t
 
	mmu…
;

819 
uöt32_t
 
	mcomp_mask
;

825 
	eibv_exp_vÆues_comp_mask
 {

826 
	mIBV_EXP_VALUES_HW_CLOCK_NS
 = 1 << 0,

827 
	mIBV_EXP_VALUES_HW_CLOCK
 = 1 << 1,

828 
	mIBV_EXP_VALUES_CLOCK_INFO
 = 1 << 2,

829 
	mIBV_EXP_VALUES_RESERVED
 = 1 << 3,

832 
	sibv_exp_vÆues
 {

833 
uöt32_t
 
	mcomp_mask
;

834 
uöt64_t
 
	mhw˛ock_ns
;

835 
uöt64_t
 
	mhw˛ock
;

837 
ibv_exp_˛ock_öfo
 
	m˛ock_öfo
;

843 
	eibv_exp_cq_¸óã_Êags
 {

844 
	mIBV_EXP_CQ_CREATE_CROSS_CHANNEL
 = 1 << 0,

845 
	mIBV_EXP_CQ_TIMESTAMP
 = 1 << 1,

846 
	mIBV_EXP_CQ_TIMESTAMP_TO_SYS_TIME
 = 1 << 2,

847 
	mIBV_EXP_CQ_COMPRESSED_CQE
 = 1 << 3,

848 
	mIBV_EXP_CQ_AS_NOTIFY
 = 1 << 4,

855 
	mIBV_EXP_CQ_CREATE_FLAGS_MASK
 = 
IBV_EXP_CQ_CREATE_CROSS_CHANNEL
 |

856 
IBV_EXP_CQ_TIMESTAMP
 |

857 
IBV_EXP_CQ_TIMESTAMP_TO_SYS_TIME
 |

858 
IBV_EXP_CQ_COMPRESSED_CQE
 |

859 
IBV_EXP_CQ_AS_NOTIFY
,

866 
	eibv_exp_cq_öô_©å_mask
 {

867 
	mIBV_EXP_CQ_INIT_ATTR_FLAGS
 = 1 << 0,

868 
	mIBV_EXP_CQ_INIT_ATTR_RESERVED
 = 1 << 1,

876 
	mIBV_EXP_CQ_INIT_ATTR_RES_DOMAIN
 = 1 << 1,

877 
	mIBV_EXP_CQ_INIT_ATTR_PEER_DIRECT
 = 1 << 2,

878 
	mIBV_EXP_CQ_INIT_ATTR_RESERVED1
 = 1 << 3,

881 
	sibv_exp_ªs_domaö
 {

882 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

885 
	sibv_exp_cq_öô_©å
 {

886 
uöt32_t
 
	mcomp_mask
;

887 
uöt32_t
 
	mÊags
;

888 
ibv_exp_ªs_domaö
 *
	mªs_domaö
;

889 
ibv_exp_≥î_dúe˘_©å
 *
	m≥î_dúe˘_©ås
;

895 
	eibv_exp_ah_©å_©å_comp_mask
 {

896 
	mIBV_EXP_AH_ATTR_LL
 = 1 << 0,

897 
	mIBV_EXP_AH_ATTR_VID
 = 1 << 1,

898 
	mIBV_EXP_AH_ATTR_RESERVED
 = 1 << 2

901 
	eŒ_addªss_ty≥
 {

902 
	mLL_ADDRESS_UNKNOWN
,

903 
	mLL_ADDRESS_IB
,

904 
	mLL_ADDRESS_ETH
,

905 
	mLL_ADDRESS_SIZE


908 
	sibv_exp_ah_©å
 {

909 
ibv_globÆ_rouã
 
	mgrh
;

910 
uöt16_t
 
	mdlid
;

911 
uöt8_t
 
	m¶
;

912 
uöt8_t
 
	m§c_∑th_bôs
;

913 
uöt8_t
 
	m°©ic_øã
;

914 
uöt8_t
 
	mis_globÆ
;

915 
uöt8_t
 
	mp‹t_num
;

916 
uöt32_t
 
	mcomp_mask
;

918 
Œ_addªss_ty≥
 
	mty≥
;

919 
uöt32_t
 
	mÀn
;

920 *
	maddªss
;

921 } 
	mŒ_addªss
;

922 
uöt16_t
 
	mvid
;

928 
	eibv_exp_qp_©å_mask
 {

929 
	mIBV_EXP_QP_STATE
 = 
IBV_QP_STATE
,

930 
	mIBV_EXP_QP_CUR_STATE
 = 
IBV_QP_CUR_STATE
,

931 
	mIBV_EXP_QP_EN_SQD_ASYNC_NOTIFY
 = 
IBV_QP_EN_SQD_ASYNC_NOTIFY
,

932 
	mIBV_EXP_QP_ACCESS_FLAGS
 = 
IBV_QP_ACCESS_FLAGS
,

933 
	mIBV_EXP_QP_PKEY_INDEX
 = 
IBV_QP_PKEY_INDEX
,

934 
	mIBV_EXP_QP_PORT
 = 
IBV_QP_PORT
,

935 
	mIBV_EXP_QP_QKEY
 = 
IBV_QP_QKEY
,

936 
	mIBV_EXP_QP_AV
 = 
IBV_QP_AV
,

937 
	mIBV_EXP_QP_PATH_MTU
 = 
IBV_QP_PATH_MTU
,

938 
	mIBV_EXP_QP_TIMEOUT
 = 
IBV_QP_TIMEOUT
,

939 
	mIBV_EXP_QP_RETRY_CNT
 = 
IBV_QP_RETRY_CNT
,

940 
	mIBV_EXP_QP_RNR_RETRY
 = 
IBV_QP_RNR_RETRY
,

941 
	mIBV_EXP_QP_RQ_PSN
 = 
IBV_QP_RQ_PSN
,

942 
	mIBV_EXP_QP_MAX_QP_RD_ATOMIC
 = 
IBV_QP_MAX_QP_RD_ATOMIC
,

943 
	mIBV_EXP_QP_ALT_PATH
 = 
IBV_QP_ALT_PATH
,

944 
	mIBV_EXP_QP_MIN_RNR_TIMER
 = 
IBV_QP_MIN_RNR_TIMER
,

945 
	mIBV_EXP_QP_SQ_PSN
 = 
IBV_QP_SQ_PSN
,

946 
	mIBV_EXP_QP_MAX_DEST_RD_ATOMIC
 = 
IBV_QP_MAX_DEST_RD_ATOMIC
,

947 
	mIBV_EXP_QP_PATH_MIG_STATE
 = 
IBV_QP_PATH_MIG_STATE
,

948 
	mIBV_EXP_QP_CAP
 = 
IBV_QP_CAP
,

949 
	mIBV_EXP_QP_DEST_QPN
 = 
IBV_QP_DEST_QPN
,

951 
	mIBV_EXP_QP_GROUP_RSS
 = 
IBV_EXP_START_FLAG
 << 21,

952 
	mIBV_EXP_QP_DC_KEY
 = 
IBV_EXP_START_FLAG
 << 22,

953 
	mIBV_EXP_QP_FLOW_ENTROPY
 = 
IBV_EXP_START_FLAG
 << 23,

954 
	mIBV_EXP_QP_OOO_RW_DATA_PLACEMENT
 = 
IBV_EXP_START_FLAG
 << 24,

955 
	mIBV_EXP_QP_RATE_LIMIT
 = 
IBV_EXP_START_FLAG
 << 25,

962 
	eibv_exp_qp_©å_comp_mask
 {

963 
	mIBV_EXP_QP_ATTR_FLOW_ENTROPY
 = 1UL << 0,

964 
	mIBV_EXP_QP_ATTR_BURST_INFO
 = 1UL << 1,

965 
	mIBV_EXP_QP_ATTR_RESERVED
 = 1UL << 2

968 
	sibv_exp_bur°_öfo
 {

969 
uöt32_t
 
	mmax_bur°_sz
;

970 
uöt16_t
 
	mtypiˇl_pkt_sz
;

973 
	sibv_exp_qp_©å
 {

974 
ibv_qp_°©e
 
	mqp_°©e
;

975 
ibv_qp_°©e
 
	mcur_qp_°©e
;

976 
ibv_mtu
 
	m∑th_mtu
;

977 
ibv_mig_°©e
 
	m∑th_mig_°©e
;

978 
uöt32_t
 
	mqkey
;

979 
uöt32_t
 
	mrq_p¢
;

980 
uöt32_t
 
	msq_p¢
;

981 
uöt32_t
 
	mde°_qp_num
;

982 
	mqp_ac˚ss_Êags
;

983 
ibv_qp_ˇp
 
	mˇp
;

984 
ibv_ah_©å
 
	mah_©å
;

985 
ibv_ah_©å
 
	mÆt_ah_©å
;

986 
uöt16_t
 
	mpkey_ödex
;

987 
uöt16_t
 
	mÆt_pkey_ödex
;

988 
uöt8_t
 
	mí_sqd_async_nŸify
;

989 
uöt8_t
 
	msq_døöög
;

990 
uöt8_t
 
	mmax_rd_©omic
;

991 
uöt8_t
 
	mmax_de°_rd_©omic
;

992 
uöt8_t
 
	mmö_∫r_timî
;

993 
uöt8_t
 
	mp‹t_num
;

994 
uöt8_t
 
	mtimeout
;

995 
uöt8_t
 
	mªåy_˙t
;

996 
uöt8_t
 
	m∫r_ªåy
;

997 
uöt8_t
 
	mÆt_p‹t_num
;

998 
uöt8_t
 
	mÆt_timeout
;

999 
uöt64_t
 
	md˘_key
;

1000 
uöt32_t
 
	mcomp_mask
;

1001 
uöt32_t
 
	mÊow_íå›y
;

1002 
uöt32_t
 
	møã_limô
;

1003 
ibv_exp_bur°_öfo
 
	mbur°_öfo
;

1010 
	eibv_exp_qp_öô_©å_comp_mask
 {

1011 
	mIBV_EXP_QP_INIT_ATTR_PD
 = 1 << 0,

1012 
	mIBV_EXP_QP_INIT_ATTR_XRCD
 = 1 << 1,

1013 
	mIBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 = 1 << 2,

1014 
	mIBV_EXP_QP_INIT_ATTR_INL_RECV
 = 1 << 3,

1015 
	mIBV_EXP_QP_INIT_ATTR_QPG
 = 1 << 4,

1016 
	mIBV_EXP_QP_INIT_ATTR_ATOMICS_ARG
 = 1 << 5,

1017 
	mIBV_EXP_QP_INIT_ATTR_MAX_INL_KLMS
 = 1 << 6,

1018 
	mIBV_EXP_QP_INIT_ATTR_RESERVED
 = 1 << 7,

1026 
	mIBV_EXP_QP_INIT_ATTR_RES_DOMAIN
 = 1 << 7,

1027 
	mIBV_EXP_QP_INIT_ATTR_RX_HASH
 = 1 << 8,

1028 
	mIBV_EXP_QP_INIT_ATTR_PORT
 = 1 << 9,

1029 
	mIBV_EXP_QP_INIT_ATTR_PEER_DIRECT
 = 1 << 10,

1030 
	mIBV_EXP_QP_INIT_ATTR_MAX_TSO_HEADER
 = 1 << 11,

1031 
	mIBV_EXP_QP_INIT_ATTR_ASSOCIATED_QPN
 = 1 << 12,

1032 
	mIBV_EXP_QP_INIT_ATTR_RESERVED1
 = 1 << 13,

1035 
	eibv_exp_qpg_ty≥
 {

1036 
	mIBV_EXP_QPG_NONE
 = 0,

1037 
	mIBV_EXP_QPG_PARENT
 = (1<<0),

1038 
	mIBV_EXP_QPG_CHILD_RX
 = (1<<1),

1039 
	mIBV_EXP_QPG_CHILD_TX
 = (1<<2)

1042 
	sibv_exp_qpg_öô_©åib
 {

1043 
uöt32_t
 
	mtss_chûd_cou¡
;

1044 
uöt32_t
 
	mrss_chûd_cou¡
;

1047 
	sibv_exp_qpg
 {

1048 
uöt32_t
 
	mqpg_ty≥
;

1050 
ibv_qp
 *
	mqpg_∑ª¡
;

1051 
ibv_exp_qpg_öô_©åib
 
	m∑ª¡_©åib
;

1058 
	eibv_exp_rx_hash_fun˘i⁄_Êags
 {

1059 
	mIBV_EXP_RX_HASH_FUNC_TOEPLITZ
 = 1 << 0,

1060 
	mIBV_EXP_RX_HASH_FUNC_XOR
 = 1 << 1

1071 
	eibv_exp_rx_hash_fõlds
 {

1072 
	mIBV_EXP_RX_HASH_SRC_IPV4
 = 1 << 0,

1073 
	mIBV_EXP_RX_HASH_DST_IPV4
 = 1 << 1,

1074 
	mIBV_EXP_RX_HASH_SRC_IPV6
 = 1 << 2,

1075 
	mIBV_EXP_RX_HASH_DST_IPV6
 = 1 << 3,

1076 
	mIBV_EXP_RX_HASH_SRC_PORT_TCP
 = 1 << 4,

1077 
	mIBV_EXP_RX_HASH_DST_PORT_TCP
 = 1 << 5,

1078 
	mIBV_EXP_RX_HASH_SRC_PORT_UDP
 = 1 << 6,

1079 
	mIBV_EXP_RX_HASH_DST_PORT_UDP
 = 1 << 7,

1082 
	#IBV_EXP_RX_HASH_INNER
 (1ULL << 31)

	)

1088 
	sibv_exp_rx_hash_c⁄f
 {

1090 
uöt8_t
 
	mrx_hash_fun˘i⁄
;

1092 
uöt8_t
 
	mrx_hash_key_Àn
;

1093 
uöt8_t
 *
	mrx_hash_key
;

1095 
uöt64_t
 
	mrx_hash_fõlds_mask
;

1096 
ibv_exp_rwq_öd_èbÀ
 *
	mrwq_öd_tbl
;

1102 
	eibv_exp_qp_¸óã_Êags
 {

1103 
	mIBV_EXP_QP_CREATE_CROSS_CHANNEL
 = (1 << 2),

1104 
	mIBV_EXP_QP_CREATE_MANAGED_SEND
 = (1 << 3),

1105 
	mIBV_EXP_QP_CREATE_MANAGED_RECV
 = (1 << 4),

1106 
	mIBV_EXP_QP_CREATE_IGNORE_SQ_OVERFLOW
 = (1 << 6),

1107 
	mIBV_EXP_QP_CREATE_IGNORE_RQ_OVERFLOW
 = (1 << 7),

1108 
	mIBV_EXP_QP_CREATE_ATOMIC_BE_REPLY
 = (1 << 8),

1109 
	mIBV_EXP_QP_CREATE_UMR
 = (1 << 9),

1110 
	mIBV_EXP_QP_CREATE_EC_PARITY_EN
 = (1 << 10),

1111 
	mIBV_EXP_QP_CREATE_RX_END_PADDING
 = (1 << 11),

1112 
	mIBV_EXP_QP_CREATE_SCATTER_FCS
 = (1 << 12),

1113 
	mIBV_EXP_QP_CREATE_TUNNEL_OFFLOADS
 = (1 << 13),

1114 
	mIBV_EXP_QP_CREATE_INTERNAL_USE
 = (1 << 15),

1115 
	mIBV_EXP_QP_CREATE_PACKET_BASED_CREDIT_MODE
 = (1 << 16),

1117 
	mIBV_EXP_QP_CREATE_MASK
 = (0x00013FDC)

1120 
	sibv_exp_qp_öô_©å
 {

1121 *
	mqp_c⁄ãxt
;

1122 
ibv_cq
 *
	m£nd_cq
;

1123 
ibv_cq
 *
	mªcv_cq
;

1124 
ibv_§q
 *
	m§q
;

1125 
ibv_qp_ˇp
 
	mˇp
;

1126 
ibv_qp_ty≥
 
	mqp_ty≥
;

1127 
	msq_sig_Æl
;

1129 
uöt32_t
 
	mcomp_mask
;

1130 
ibv_pd
 *
	mpd
;

1131 
ibv_xrcd
 *
	mxrcd
;

1132 
uöt32_t
 
	mexp_¸óã_Êags
;

1134 
uöt32_t
 
	mmax_öl_ªcv
;

1135 
ibv_exp_qpg
 
	mqpg
;

1136 
uöt32_t
 
	mmax_©omic_¨g
;

1137 
uöt32_t
 
	mmax_öl_£nd_klms
;

1138 
ibv_exp_ªs_domaö
 *
	mªs_domaö
;

1139 
ibv_exp_rx_hash_c⁄f
 *
	mrx_hash_c⁄f
;

1140 
uöt8_t
 
	mp‹t_num
;

1141 
ibv_exp_≥î_dúe˘_©å
 *
	m≥î_dúe˘_©ås
;

1142 
uöt16_t
 
	mmax_tso_hódî
;

1143 
uöt32_t
 
	massocüãd_q≤
;

1149 
	eibv_exp_d˘_öô_©å_comp_mask
 {

1150 
	mIBV_EXP_DCT_INIT_ATTR_RESERVED
 = 1 << 0

1153 
	eibv_exp_d˘_¸óã_Êags
 {

1155 
	mIBV_EXP_DCT_OOO_RW_DATA_PLACEMENT
 = 1 << 0,

1156 
	mIBV_EXP_DCT_CREATE_FLAGS_MASK
 = 
IBV_EXP_DCT_OOO_RW_DATA_PLACEMENT
,

1159 
	sibv_exp_d˘_öô_©å
 {

1160 
ibv_pd
 *
	mpd
;

1161 
ibv_cq
 *
	mcq
;

1162 
ibv_§q
 *
	m§q
;

1163 
uöt64_t
 
	mdc_key
;

1164 
uöt8_t
 
	mp‹t
;

1165 
uöt32_t
 
	mac˚ss_Êags
;

1166 
uöt8_t
 
	mmö_∫r_timî
;

1167 
uöt8_t
 
	mt˛ass
;

1168 
uöt32_t
 
	mÊow_œbñ
;

1169 
ibv_mtu
 
	mmtu
;

1170 
uöt8_t
 
	mpkey_ödex
;

1171 
uöt8_t
 
	mgid_ödex
;

1172 
uöt8_t
 
	mh›_limô
;

1173 
uöt32_t
 
	mölöe_size
;

1174 
uöt32_t
 
	m¸óã_Êags
;

1175 
uöt32_t
 
	mcomp_mask
;

1179 
	mIBV_EXP_DCT_STATE_ACTIVE
 = 0,

1180 
	mIBV_EXP_DCT_STATE_DRAINING
 = 1,

1181 
	mIBV_EXP_DCT_STATE_DRAINED
 = 2

1187 
	eibv_exp_d˘_©å_comp_mask
 {

1188 
	mIBV_EXP_DCT_ATTR_RESERVED
 = 1 << 0

1191 
	sibv_exp_d˘_©å
 {

1192 
uöt64_t
 
	mdc_key
;

1193 
uöt8_t
 
	mp‹t
;

1194 
uöt32_t
 
	mac˚ss_Êags
;

1195 
uöt8_t
 
	mmö_∫r_timî
;

1196 
uöt8_t
 
	mt˛ass
;

1197 
uöt32_t
 
	mÊow_œbñ
;

1198 
ibv_mtu
 
	mmtu
;

1199 
uöt8_t
 
	mpkey_ödex
;

1200 
uöt8_t
 
	mgid_ödex
;

1201 
uöt8_t
 
	mh›_limô
;

1202 
uöt32_t
 
	mkey_viﬁ©i⁄s
;

1203 
uöt8_t
 
	m°©e
;

1204 
ibv_§q
 *
	m§q
;

1205 
ibv_cq
 *
	mcq
;

1206 
ibv_pd
 *
	mpd
;

1207 
uöt32_t
 
	mcomp_mask
;

1211 
	mIBV_EXP_QUERY_PORT_STATE
 = 1 << 0,

1212 
	mIBV_EXP_QUERY_PORT_MAX_MTU
 = 1 << 1,

1213 
	mIBV_EXP_QUERY_PORT_ACTIVE_MTU
 = 1 << 2,

1214 
	mIBV_EXP_QUERY_PORT_GID_TBL_LEN
 = 1 << 3,

1215 
	mIBV_EXP_QUERY_PORT_CAP_FLAGS
 = 1 << 4,

1216 
	mIBV_EXP_QUERY_PORT_MAX_MSG_SZ
 = 1 << 5,

1217 
	mIBV_EXP_QUERY_PORT_BAD_PKEY_CNTR
 = 1 << 6,

1218 
	mIBV_EXP_QUERY_PORT_QKEY_VIOL_CNTR
 = 1 << 7,

1219 
	mIBV_EXP_QUERY_PORT_PKEY_TBL_LEN
 = 1 << 8,

1220 
	mIBV_EXP_QUERY_PORT_LID
 = 1 << 9,

1221 
	mIBV_EXP_QUERY_PORT_SM_LID
 = 1 << 10,

1222 
	mIBV_EXP_QUERY_PORT_LMC
 = 1 << 11,

1223 
	mIBV_EXP_QUERY_PORT_MAX_VL_NUM
 = 1 << 12,

1224 
	mIBV_EXP_QUERY_PORT_SM_SL
 = 1 << 13,

1225 
	mIBV_EXP_QUERY_PORT_SUBNET_TIMEOUT
 = 1 << 14,

1226 
	mIBV_EXP_QUERY_PORT_INIT_TYPE_REPLY
 = 1 << 15,

1227 
	mIBV_EXP_QUERY_PORT_ACTIVE_WIDTH
 = 1 << 16,

1228 
	mIBV_EXP_QUERY_PORT_ACTIVE_SPEED
 = 1 << 17,

1229 
	mIBV_EXP_QUERY_PORT_PHYS_STATE
 = 1 << 18,

1230 
	mIBV_EXP_QUERY_PORT_LINK_LAYER
 = 1 << 19,

1232 
	mIBV_EXP_QUERY_PORT_STD_MASK
 = (1 << 20) - 1,

1234 
	mIBV_EXP_QUERY_PORT_MASK
 = 
IBV_EXP_QUERY_PORT_STD_MASK
,

1241 
	eibv_exp_quîy_p‹t_©å_comp_mask
 {

1242 
	mIBV_EXP_QUERY_PORT_ATTR_MASK1
 = 1 << 0,

1243 
	mIBV_EXP_QUERY_PORT_ATTR_RESERVED
 = 1 << 1,

1245 
	mIBV_EXP_QUERY_PORT_ATTR_MASKS
 = 
IBV_EXP_QUERY_PORT_ATTR_RESERVED
 - 1

1248 
	sibv_exp_p‹t_©å
 {

1251 
ibv_p‹t_°©e
 
	m°©e
;

1252 
ibv_mtu
 
	mmax_mtu
;

1253 
ibv_mtu
 
	ma˘ive_mtu
;

1254 
	mgid_tbl_Àn
;

1255 
uöt32_t
 
	mp‹t_ˇp_Êags
;

1256 
uöt32_t
 
	mmax_msg_sz
;

1257 
uöt32_t
 
	mbad_pkey_˙å
;

1258 
uöt32_t
 
	mqkey_viﬁ_˙å
;

1259 
uöt16_t
 
	mpkey_tbl_Àn
;

1260 
uöt16_t
 
	mlid
;

1261 
uöt16_t
 
	msm_lid
;

1262 
uöt8_t
 
	mlmc
;

1263 
uöt8_t
 
	mmax_vl_num
;

1264 
uöt8_t
 
	msm_¶
;

1265 
uöt8_t
 
	msub√t_timeout
;

1266 
uöt8_t
 
	möô_ty≥_ª∂y
;

1267 
uöt8_t
 
	ma˘ive_width
;

1268 
uöt8_t
 
	ma˘ive_•ìd
;

1269 
uöt8_t
 
	mphys_°©e
;

1270 
uöt8_t
 
	mlök_œyî
;

1271 
uöt8_t
 
	mª£rved
;

1273 
ibv_p‹t_©å
 
	mp‹t_©å
;

1275 
uöt32_t
 
	mcomp_mask
;

1276 
uöt32_t
 
	mmask1
;

1279 
	eibv_exp_cq_©å_mask
 {

1280 
	mIBV_EXP_CQ_MODERATION
 = 1 << 0,

1281 
	mIBV_EXP_CQ_CAP_FLAGS
 = 1 << 1

1284 
	eibv_exp_cq_ˇp_Êags
 {

1285 
	mIBV_EXP_CQ_IGNORE_OVERRUN
 = (1 << 0),

1287 
	mIBV_EXP_CQ_CAP_MASK
 = (0x00000001)

1294 
	eibv_exp_cq_©å_comp_mask
 {

1295 
	mIBV_EXP_CQ_ATTR_MODERATION
 = (1 << 0),

1296 
	mIBV_EXP_CQ_ATTR_CQ_CAP_FLAGS
 = (1 << 1),

1298 
	mIBV_EXP_CQ_ATTR_RESERVED
 = (1 << 2)

1301 
	sibv_exp_cq_©å
 {

1302 
uöt32_t
 
	mcomp_mask
;

1304 
uöt16_t
 
	mcq_cou¡
;

1305 
uöt16_t
 
	mcq_≥riod
;

1306 } 
	mmodî©i⁄
;

1307 
uöt32_t
 
	mcq_ˇp_Êags
;

1313 
	eibv_exp_ªg_sh¨ed_mr_comp_mask
 {

1314 
	mIBV_EXP_REG_SHARED_MR_RESERVED
 = (1 << 0)

1317 
	sibv_exp_ªg_sh¨ed_mr_ö
 {

1318 
uöt32_t
 
	mmr_h™dÀ
;

1319 
ibv_pd
 *
	mpd
;

1320 *
	maddr
;

1321 
uöt64_t
 
	mexp_ac˚ss
;

1322 
uöt32_t
 
	mcomp_mask
;

1325 
	eibv_exp_Êow_Êags
 {

1326 
	mIBV_EXP_FLOW_ATTR_FLAGS_ALLOW_LOOP_BACK
 = 1,

1329 
	eibv_exp_Êow_©å_ty≥
 {

1331 
	mIBV_EXP_FLOW_ATTR_NORMAL
 = 0x0,

1335 
	mIBV_EXP_FLOW_ATTR_ALL_DEFAULT
 = 0x1,

1339 
	mIBV_EXP_FLOW_ATTR_MC_DEFAULT
 = 0x2,

1341 
	mIBV_EXP_FLOW_ATTR_SNIFFER
 = 0x3,

1344 
	eibv_exp_Êow_•ec_ty≥
 {

1345 
	mIBV_EXP_FLOW_SPEC_ETH
 = 0x20,

1346 
	mIBV_EXP_FLOW_SPEC_IB
 = 0x21,

1347 
	mIBV_EXP_FLOW_SPEC_IPV4
 = 0x30,

1348 
	mIBV_EXP_FLOW_SPEC_IPV6
 = 0x31,

1349 
	mIBV_EXP_FLOW_SPEC_IPV4_EXT
 = 0x32,

1350 
	mIBV_EXP_FLOW_SPEC_IPV6_EXT
 = 0x33,

1351 
	mIBV_EXP_FLOW_SPEC_TCP
 = 0x40,

1352 
	mIBV_EXP_FLOW_SPEC_UDP
 = 0x41,

1353 
	mIBV_EXP_FLOW_SPEC_VXLAN_TUNNEL
 = 0x50,

1354 
	mIBV_EXP_FLOW_SPEC_INNER
 = 0x100,

1355 
	mIBV_EXP_FLOW_SPEC_ACTION_TAG
 = 0x1000,

1356 
	mIBV_EXP_FLOW_SPEC_ACTION_DROP
 = 0x1001,

1359 
	sibv_exp_Êow_ëh_fûãr
 {

1360 
uöt8_t
 
	md°_mac
[6];

1361 
uöt8_t
 
	m§c_mac
[6];

1362 
uöt16_t
 
	mëhî_ty≥
;

1366 
uöt16_t
 
	mvœn_èg
;

1369 
	sibv_exp_Êow_•ec_ëh
 {

1370 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1371 
uöt16_t
 
	msize
;

1372 
ibv_exp_Êow_ëh_fûãr
 
	mvÆ
;

1373 
ibv_exp_Êow_ëh_fûãr
 
	mmask
;

1376 
	sibv_exp_Êow_ib_fûãr
 {

1377 
uöt32_t
 
	mq≤
;

1378 
uöt8_t
 
	md°_gid
[16];

1381 
	sibv_exp_Êow_•ec_ib
 {

1382 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1383 
uöt16_t
 
	msize
;

1384 
ibv_exp_Êow_ib_fûãr
 
	mvÆ
;

1385 
ibv_exp_Êow_ib_fûãr
 
	mmask
;

1388 
	sibv_exp_Êow_ùv4_fûãr
 {

1389 
uöt32_t
 
	m§c_ù
;

1390 
uöt32_t
 
	md°_ù
;

1393 
	sibv_exp_Êow_•ec_ùv4
 {

1394 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1395 
uöt16_t
 
	msize
;

1396 
ibv_exp_Êow_ùv4_fûãr
 
	mvÆ
;

1397 
ibv_exp_Êow_ùv4_fûãr
 
	mmask
;

1400 
	sibv_exp_Êow_ùv6_fûãr
 {

1401 
uöt8_t
 
	m§c_ù
[16];

1402 
uöt8_t
 
	md°_ù
[16];

1405 
	sibv_exp_Êow_•ec_ùv6
 {

1406 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1407 
uöt16_t
 
	msize
;

1408 
ibv_exp_Êow_ùv6_fûãr
 
	mvÆ
;

1409 
ibv_exp_Êow_ùv6_fûãr
 
	mmask
;

1412 
	sibv_exp_Êow_•ec_a˘i⁄_èg
 {

1413 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1414 
uöt16_t
 
	msize
;

1415 
uöt32_t
 
	mèg_id
;

1418 
	sibv_exp_Êow_•ec_a˘i⁄_dr›
 {

1419 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1420 
uöt16_t
 
	msize
;

1423 
	sibv_exp_Êow_ùv6_ext_fûãr
 {

1424 
uöt8_t
 
	m§c_ù
[16];

1425 
uöt8_t
 
	md°_ù
[16];

1426 
uöt32_t
 
	mÊow_œbñ
;

1427 
uöt8_t
 
	m√xt_hdr
;

1428 
uöt8_t
 
	måaffic_˛ass
;

1429 
uöt8_t
 
	mh›_limô
;

1432 
	sibv_exp_Êow_•ec_ùv6_ext
 {

1433 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1434 
uöt16_t
 
	msize
;

1435 
ibv_exp_Êow_ùv6_ext_fûãr
 
	mvÆ
;

1436 
ibv_exp_Êow_ùv6_ext_fûãr
 
	mmask
;

1439 
	sibv_exp_Êow_ùv4_ext_fûãr
 {

1440 
uöt32_t
 
	m§c_ù
;

1441 
uöt32_t
 
	md°_ù
;

1442 
uöt8_t
 
	m¥Ÿo
;

1443 
uöt8_t
 
	mtos
;

1444 
uöt8_t
 
	mâl
;

1445 
uöt8_t
 
	mÊags
;

1448 
	sibv_exp_Êow_•ec_ùv4_ext
 {

1449 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1450 
uöt16_t
 
	msize
;

1451 
ibv_exp_Êow_ùv4_ext_fûãr
 
	mvÆ
;

1452 
ibv_exp_Êow_ùv4_ext_fûãr
 
	mmask
;

1455 
	sibv_exp_Êow_t˝_udp_fûãr
 {

1456 
uöt16_t
 
	md°_p‹t
;

1457 
uöt16_t
 
	m§c_p‹t
;

1460 
	sibv_exp_Êow_•ec_t˝_udp
 {

1461 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1462 
uöt16_t
 
	msize
;

1463 
ibv_exp_Êow_t˝_udp_fûãr
 
	mvÆ
;

1464 
ibv_exp_Êow_t˝_udp_fûãr
 
	mmask
;

1467 
	sibv_exp_Êow_tu¬ñ_fûãr
 {

1468 
uöt32_t
 
	mtu¬ñ_id
;

1471 
	sibv_exp_Êow_•ec_tu¬ñ
 {

1472 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1473 
uöt16_t
 
	msize
;

1474 
ibv_exp_Êow_tu¬ñ_fûãr
 
	mvÆ
;

1475 
ibv_exp_Êow_tu¬ñ_fûãr
 
	mmask
;

1478 
	sibv_exp_Êow_•ec
 {

1481 
uöt32_t
 
	mty≥
;

1482 
uöt16_t
 
	msize
;

1483 } 
	mhdr
;

1484 
ibv_exp_Êow_•ec_ib
 
	mib
;

1485 
ibv_exp_Êow_•ec_ëh
 
	mëh
;

1486 
ibv_exp_Êow_•ec_ùv4
 
	mùv4
;

1487 
ibv_exp_Êow_•ec_ùv4_ext
 
	mùv4_ext
;

1488 
ibv_exp_Êow_•ec_t˝_udp
 
	mt˝_udp
;

1489 
ibv_exp_Êow_•ec_ùv6
 
	mùv6
;

1490 
ibv_exp_Êow_•ec_ùv6_ext
 
	mùv6_ext
;

1491 
ibv_exp_Êow_•ec_tu¬ñ
 
	mtu¬ñ
;

1492 
ibv_exp_Êow_•ec_a˘i⁄_èg
 
	mÊow_èg
;

1493 
ibv_exp_Êow_•ec_a˘i⁄_dr›
 
	mdr›
;

1497 
	sibv_exp_Êow_©å
 {

1498 
ibv_exp_Êow_©å_ty≥
 
	mty≥
;

1499 
uöt16_t
 
	msize
;

1500 
uöt16_t
 
	m¥i‹ôy
;

1501 
uöt8_t
 
	mnum_of_•ecs
;

1502 
uöt8_t
 
	mp‹t
;

1503 
uöt32_t
 
	mÊags
;

1508 
uöt64_t
 
	mª£rved
;

1511 
	sibv_exp_Êow
 {

1512 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1513 
uöt32_t
 
	mh™dÀ
;

1516 
	sibv_exp_d˘
 {

1517 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1518 
uöt32_t
 
	mh™dÀ
;

1519 
uöt32_t
 
	md˘_num
;

1520 
ibv_pd
 *
	mpd
;

1521 
ibv_§q
 *
	m§q
;

1522 
ibv_cq
 *
	mcq
;

1523 
±hªad_muãx_t
 
	mmuãx
;

1524 
±hªad_c⁄d_t
 
	mc⁄d
;

1525 
uöt32_t
 
	mevíts_com∂ëed
;

1528 
	eibv_exp_wc_›code
 {

1529 
	mIBV_EXP_WC_SEND
,

1530 
	mIBV_EXP_WC_RDMA_WRITE
,

1531 
	mIBV_EXP_WC_RDMA_READ
,

1532 
	mIBV_EXP_WC_COMP_SWAP
,

1533 
	mIBV_EXP_WC_FETCH_ADD
,

1534 
	mIBV_EXP_WC_BIND_MW
,

1535 
	mIBV_EXP_WC_LOCAL_INV
,

1536 
	mIBV_EXP_WC_MASKED_COMP_SWAP
 = 9,

1537 
	mIBV_EXP_WC_MASKED_FETCH_ADD
 = 10,

1538 
	mIBV_EXP_WC_TSO
,

1539 
	mIBV_EXP_WC_UMR
 = 0x100,

1544 
	mIBV_EXP_WC_RECV
 = 1 << 7,

1545 
	mIBV_EXP_WC_RECV_RDMA_WITH_IMM
,

1547 
	mIBV_EXP_WC_TM_ADD
 = 
IBV_EXP_WC_RECV
 + 
IBV_EXP_START_ENUM
,

1548 
	mIBV_EXP_WC_TM_DEL
,

1549 
	mIBV_EXP_WC_TM_SYNC
,

1550 
	mIBV_EXP_WC_TM_RECV
,

1551 
	mIBV_EXP_WC_TM_NO_TAG
,

1553 
	mIBV_EXP_WC_RECV_NOP


1556 
	eibv_exp_wc_Êags
 {

1557 
	mIBV_EXP_WC_GRH
 = 
IBV_WC_GRH
,

1558 
	mIBV_EXP_WC_WITH_IMM
 = 
IBV_WC_WITH_IMM
,

1559 
	mIBV_EXP_WC_WITH_INV
 = 
IBV_WC_WITH_INV
,

1561 
	mIBV_EXP_WC_WITH_SL
 = 
IBV_EXP_START_FLAG
 << 4,

1562 
	mIBV_EXP_WC_WITH_SLID
 = 
IBV_EXP_START_FLAG
 << 5,

1563 
	mIBV_EXP_WC_WITH_TIMESTAMP
 = 
IBV_EXP_START_FLAG
 << 6,

1564 
	mIBV_EXP_WC_QP
 = 
IBV_EXP_START_FLAG
 << 7,

1565 
	mIBV_EXP_WC_SRQ
 = 
IBV_EXP_START_FLAG
 << 8,

1566 
	mIBV_EXP_WC_DCT
 = 
IBV_EXP_START_FLAG
 << 9,

1567 
	mIBV_EXP_WC_RX_IP_CSUM_OK
 = 
IBV_EXP_START_FLAG
 << 10,

1568 
	mIBV_EXP_WC_RX_TCP_UDP_CSUM_OK
 = 
IBV_EXP_START_FLAG
 << 11,

1569 
	mIBV_EXP_WC_RX_IPV4_PACKET
 = 
IBV_EXP_START_FLAG
 << 12,

1570 
	mIBV_EXP_WC_RX_IPV6_PACKET
 = 
IBV_EXP_START_FLAG
 << 13,

1571 
	mIBV_EXP_WC_RX_TUNNEL_PACKET
 = 
IBV_EXP_START_FLAG
 << 14,

1572 
	mIBV_EXP_WC_RX_OUTER_IP_CSUM_OK
 = 
IBV_EXP_START_FLAG
 << 15,

1573 
	mIBV_EXP_WC_RX_OUTER_TCP_UDP_CSUM_OK
 = 
IBV_EXP_START_FLAG
 << 16,

1574 
	mIBV_EXP_WC_RX_OUTER_IPV4_PACKET
 = 
IBV_EXP_START_FLAG
 << 17,

1575 
	mIBV_EXP_WC_RX_OUTER_IPV6_PACKET
 = 
IBV_EXP_START_FLAG
 << 18,

1576 
	mIBV_EXP_WC_TM_SYNC_REQ
 = 
IBV_EXP_START_FLAG
 << 19,

1577 
	mIBV_EXP_WC_TM_DEL_FAILED
 = 
IBV_EXP_START_FLAG
 << 20,

1578 
	mIBV_EXP_WC_TM_MATCH
 = 
IBV_EXP_START_FLAG
 << 21,

1579 
	mIBV_EXP_WC_TM_DATA_VALID
 = 
IBV_EXP_START_FLAG
 << 22,

1580 
	mIBV_EXP_WC_TM_RNDV_INCOMPLETE
 = 
IBV_EXP_START_FLAG
 << 23,

1581 
	mIBV_EXP_WC_MP_WR_MORE_IN_MSG
 = 
IBV_EXP_START_FLAG
 << 24,

1582 
	mIBV_EXP_WC_MP_WR_CONSUMED
 = 
IBV_EXP_START_FLAG
 << 25

1585 
	sibv_exp_wc
 {

1586 
uöt64_t
 
	mwr_id
;

1587 
ibv_wc_°©us
 
	m°©us
;

1588 
ibv_exp_wc_›code
 
	mexp_›code
;

1589 
uöt32_t
 
	mvíd‹_îr
;

1591 
uöt32_t
 
	mbyã_Àn
;

1594 
uöt16_t
 
	m°rides_off£t
;

1596 
uöt16_t
 
	mbyã_Àn
;

1597 } 
	mmp_wr
;

1599 
uöt32_t
 
	mimm_d©a
;

1600 
uöt32_t
 
	mqp_num
;

1601 
uöt32_t
 
	m§c_qp
;

1602 
	mª£rved
;

1603 
uöt16_t
 
	mpkey_ödex
;

1604 
uöt16_t
 
	m¶id
;

1605 
uöt8_t
 
	m¶
;

1606 
uöt8_t
 
	mdlid_∑th_bôs
;

1607 
uöt64_t
 
	mtime°amp
;

1608 
ibv_qp
 *
	mqp
;

1609 
ibv_§q
 *
	m§q
;

1610 
ibv_exp_d˘
 *
	md˘
;

1611 
uöt64_t
 
	mexp_wc_Êags
;

1614 
uöt64_t
 
	mèg
;

1615 
uöt32_t
 
	m¥iv
;

1616 } 
	mtm_öfo
;

1622 
	eibv_exp_¥e„tch_©å_comp_mask
 {

1623 
	mIBV_EXP_PREFETCH_MR_RESERVED
 = (1 << 0),

1629 
	eibv_exp_¥e„tch_©å_Êags
 {

1631 
	mIBV_EXP_PREFETCH_WRITE_ACCESS
 = (1 << 0),

1634 
	sibv_exp_¥e„tch_©å
 {

1636 
uöt32_t
 
	mÊags
;

1638 *
	maddr
;

1640 
size_t
 
	mÀngth
;

1641 
uöt32_t
 
	mcomp_mask
;

1647 
	eibv_exp_ªg_mr_ö_comp_mask
 {

1649 
	mIBV_EXP_REG_MR_CREATE_FLAGS
 = (1 << 0),

1650 
	mIBV_EXP_REG_MR_DM
 = (1 << 1),

1651 
	mIBV_EXP_REG_MR_RESERVED
 = (1 << 2)

1654 
	eibv_exp_ªg_mr_¸óã_Êags
 {

1655 
	mIBV_EXP_REG_MR_CREATE_CONTIG
 = (1 << 0)

1658 
	sibv_exp_ªg_mr_ö
 {

1659 
ibv_pd
 *
	mpd
;

1660 *
	maddr
;

1661 
size_t
 
	mÀngth
;

1662 
uöt64_t
 
	mexp_ac˚ss
;

1663 
uöt32_t
 
	mcomp_mask
;

1664 
uöt32_t
 
	m¸óã_Êags
;

1665 
ibv_exp_dm
 *
	mdm
;

1669 
	eibv_exp_èsk_ty≥
 {

1670 
	mIBV_EXP_TASK_SEND
 = 0,

1671 
	mIBV_EXP_TASK_RECV
 = 1

1677 
	eibv_exp_èsk_comp_mask
 {

1678 
	mIBV_EXP_TASK_RESERVED
 = (1 << 0)

1681 
	sibv_exp_èsk
 {

1682 
ibv_exp_èsk_ty≥
 
	mèsk_ty≥
;

1684 
ibv_qp
 *
	mqp
;

1686 
ibv_exp_£nd_wr
 *
	m£nd_wr
;

1687 
ibv_ªcv_wr
 *
	mªcv_wr
;

1689 } 
	môem
;

1690 
ibv_exp_èsk
 *
	m√xt
;

1691 
uöt32_t
 
	mcomp_mask
;

1697 
	eibv_exp_¨m_©å_comp_mask
 {

1698 
	mIBV_EXP_ARM_ATTR_RESERVED
 = (1 << 0)

1700 
	sibv_exp_¨m_©å
 {

1701 
uöt32_t
 
	mcomp_mask
;

1704 
	eibv_exp_mr_¸óã_Êags
 {

1705 
	mIBV_EXP_MR_SIGNATURE_EN
 = (1 << 0),

1706 
	mIBV_EXP_MR_INDIRECT_KLMS
 = (1 << 1),

1707 
	mIBV_EXP_MR_FIXED_BUFFER_SIZE
 = (1 << 2)

1710 
	sibv_exp_mr_öô_©å
 {

1711 
uöt32_t
 
	mmax_klm_li°_size
;

1712 
uöt32_t
 
	m¸óã_Êags
;

1713 
uöt64_t
 
	mexp_ac˚ss_Êags
;

1719 
	eibv_exp_¸óã_mr_ö_comp_mask
 {

1720 
	mIBV_EXP_CREATE_MR_IN_RESERVED
 = (1 << 0)

1723 
	sibv_exp_¸óã_mr_ö
 {

1724 
ibv_pd
 *
	mpd
;

1725 
ibv_exp_mr_öô_©å
 
	m©å
;

1726 
uöt32_t
 
	mcomp_mask
;

1732 
	eibv_exp_mkey_©å_comp_mask
 {

1733 
	mIBV_EXP_MKEY_ATTR_RESERVED
 = (1 << 0)

1736 
	sibv_exp_mkey_©å
 {

1737 
uöt32_t
 
	mmax_klm_li°_size
;

1738 
uöt32_t
 
	mcomp_mask
;

1741 
	sibv_exp_mkey_li°_c⁄èöî
 {

1742 
uöt32_t
 
	mmax_klm_li°_size
;

1743 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1746 
	eibv_exp_mkey_li°_ty≥
 {

1747 
	mIBV_EXP_MKEY_LIST_TYPE_INDIRECT_MR


1753 
	eibv_exp_Æloc_mkey_li°_comp_mask
 {

1754 
	mIBV_EXP_MKEY_LIST_CONTAINER_RESERVED
 = (1 << 0)

1757 
	sibv_exp_mkey_li°_c⁄èöî_©å
 {

1758 
ibv_pd
 *
	mpd
;

1759 
uöt32_t
 
	mmkey_li°_ty≥
;

1760 
uöt32_t
 
	mmax_klm_li°_size
;

1761 
uöt32_t
 
	mcomp_mask
;

1767 
	eibv_exp_dîeg_mr_comp_mask
 {

1768 
	mIBV_EXP_DEREG_MR_RESERVED
 = (1 << 0)

1771 
	sibv_exp_dîeg_out
 {

1772 
	m√ed_dof‹k
;

1773 
uöt32_t
 
	mcomp_mask
;

1776 
	svîbs_ív_ôem
 {

1777 *
	m«me
;

1778 *
	mvÆue
;

1779 
vîbs_ív_ôem
 *
	m√xt
;

1782 
	svîbs_ívú⁄mít
 {

1783 
vîbs_ív_ôem
 *
	mhód
;

1784 
±hªad_muãx_t
 
	mmtx
;

1789 
	eibv_exp_wq_ty≥
 {

1790 
	mIBV_EXP_WQT_RQ
,

1791 
	mIBV_EXP_WQT_SRQ


1794 
	eibv_exp_wq_°©e
 {

1795 
	mIBV_EXP_WQS_RESET
,

1796 
	mIBV_EXP_WQS_RDY
,

1797 
	mIBV_EXP_WQS_ERR
,

1798 
	mIBV_EXP_WQS_UNKNOWN


1802 
	eibv_exp_vœn_ofÊﬂds
 {

1804 
	mIBV_EXP_RECEIVE_WQ_CVLAN_STRIP
 = (1 << 0),

1806 
	mIBV_EXP_RECEIVE_WQ_CVLAN_INSERTION
 = (1 << 1),

1807 
	mIBV_EXP_RECEIVE_WQ_VLAN_OFFLOADS_RESERVED
 = (1 << 2),

1822 
	sibv_exp_wq
 {

1823 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1824 *
	mwq_c⁄ãxt
;

1825 
uöt32_t
 
	mh™dÀ
;

1827 
ibv_pd
 *
	mpd
;

1829 
ibv_cq
 *
	mcq
;

1831 
ibv_§q
 *
	m§q
;

1832 
uöt32_t
 
	mwq_num
;

1833 
ibv_exp_wq_°©e
 
	m°©e
;

1834 
ibv_exp_wq_ty≥
 
	mwq_ty≥
;

1835 
uöt32_t
 
	mcomp_mask
;

1838 
	eibv_exp_wq_öô_©å_mask
 {

1839 
	mIBV_EXP_CREATE_WQ_RES_DOMAIN
 = (1 << 0),

1840 
	mIBV_EXP_CREATE_WQ_MP_RQ
 = (1 << 1),

1841 
	mIBV_EXP_CREATE_WQ_VLAN_OFFLOADS
 = (1 << 2),

1842 
	mIBV_EXP_CREATE_WQ_FLAGS
 = (1 << 3),

1843 
	mIBV_EXP_CREATE_WQ_RESERVED
 = (1 << 4)

1846 
	sibv_exp_wq_mp_rq
 {

1847 
ibv_exp_mp_rq_shi·s
 
	mu£_shi·
;

1848 
uöt8_t
 
	msögÀ_wqe_log_num_of_°rides
;

1849 
uöt8_t
 
	msögÀ_°ride_log_num_of_byãs
;

1852 
	eibv_exp_wq_öô_©å_Êags
 {

1853 
	mIBV_EXP_CREATE_WQ_FLAG_RX_END_PADDING
 = (1ULL << 0),

1854 
	mIBV_EXP_CREATE_WQ_FLAG_SCATTER_FCS
 = (1ULL << 1),

1855 
	mIBV_EXP_CREATE_WQ_FLAG_DELAY_DROP
 = (1ULL << 2),

1856 
	mIBV_EXP_CREATE_WQ_FLAG_RESERVED
 = (1ULL << 3)

1859 
	sibv_exp_wq_öô_©å
 {

1861 *
	mwq_c⁄ãxt
;

1862 
ibv_exp_wq_ty≥
 
	mwq_ty≥
;

1864 
uöt32_t
 
	mmax_ªcv_wr
;

1866 
uöt32_t
 
	mmax_ªcv_sge
;

1868 
ibv_pd
 *
	mpd
;

1870 
ibv_cq
 *
	mcq
;

1872 
ibv_§q
 *
	m§q
;

1874 
uöt32_t
 
	mcomp_mask
;

1875 
ibv_exp_ªs_domaö
 *
	mªs_domaö
;

1876 
ibv_exp_wq_mp_rq
 
	mmp_rq
;

1877 
uöt16_t
 
	mvœn_ofÊﬂds
;

1878 
uöt64_t
 
	mÊags
;

1881 
	eibv_exp_wq_©å_mask
 {

1882 
	mIBV_EXP_WQ_ATTR_STATE
 = 1 << 0,

1883 
	mIBV_EXP_WQ_ATTR_CURR_STATE
 = 1 << 1,

1884 
	mIBV_EXP_WQ_ATTR_VLAN_OFFLOADS
 = 1 << 2,

1885 
	mIBV_EXP_WQ_ATTR_RESERVED
 = 1 << 3

1888 
	sibv_exp_wq_©å
 {

1890 
uöt32_t
 
	m©å_mask
;

1892 
ibv_exp_wq_°©e
 
	mwq_°©e
;

1894 
ibv_exp_wq_°©e
 
	mcuº_wq_°©e
;

1895 
uöt16_t
 
	mvœn_ofÊﬂds
;

1905 
	sibv_exp_rwq_öd_èbÀ
 {

1906 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1907 
ibv_pd
 *
	mpd
;

1908 
	möd_tbl_h™dÀ
;

1909 
	möd_tbl_num
;

1910 
uöt32_t
 
	mcomp_mask
;

1913 
	eibv_exp_öd_èbÀ_öô_©å_mask
 {

1914 
	mIBV_EXP_CREATE_IND_TABLE_RESERVED
 = (1 << 0)

1920 
	sibv_exp_rwq_öd_èbÀ_öô_©å
 {

1921 
ibv_pd
 *
	mpd
;

1923 
uöt32_t
 
	mlog_öd_tbl_size
;

1925 
ibv_exp_wq
 **
	möd_tbl
;

1926 
uöt32_t
 
	mcomp_mask
;

1930 
	eibv_exp_thªad_modñ
 {

1931 
	mIBV_EXP_THREAD_SAFE
,

1932 
	mIBV_EXP_THREAD_UNSAFE
,

1933 
	mIBV_EXP_THREAD_SINGLE


1936 
	eibv_exp_msg_modñ
 {

1937 
	mIBV_EXP_MSG_DEFAULT
,

1938 
	mIBV_EXP_MSG_LOW_LATENCY
,

1939 
	mIBV_EXP_MSG_HIGH_BW
,

1940 
	mIBV_EXP_MSG_FORCE_LOW_LATENCY
,

1946 
	eibv_exp_ªs_domaö_öô_©å_comp_mask
 {

1947 
	mIBV_EXP_RES_DOMAIN_THREAD_MODEL
 = (1 << 0),

1948 
	mIBV_EXP_RES_DOMAIN_MSG_MODEL
 = (1 << 1),

1949 
	mIBV_EXP_RES_DOMAIN_RESERVED
 = (1 << 2),

1952 
	sibv_exp_ªs_domaö_öô_©å
 {

1953 
uöt32_t
 
	mcomp_mask
;

1954 
ibv_exp_thªad_modñ
 
	mthªad_modñ
;

1955 
ibv_exp_msg_modñ
 
	mmsg_modñ
;

1958 
	eibv_exp_de°roy_ªs_domaö_comp_mask
 {

1959 
	mIBV_EXP_DESTROY_RES_DOMAIN_RESERVED
 = (1 << 0),

1962 
	sibv_exp_de°roy_ªs_domaö_©å
 {

1963 
uöt32_t
 
	mcomp_mask
;

1970 
	eibv_exp_quîy_ötf_Êags
 {

1972 
	mIBV_EXP_QUERY_INTF_FLAG_ENABLE_CHECKS
 = (1 << 0),

1975 
	eibv_exp_ötf_Ámûy
 {

1976 
	mIBV_EXP_INTF_QP_BURST
,

1977 
	mIBV_EXP_INTF_CQ
,

1978 
	mIBV_EXP_INTF_WQ
,

1979 
	mIBV_EXP_INTF_RESERVED
,

1982 
	eibv_exp_ex≥rimíèl_ötf_Ámûy
 {

1983 
	mIBV_EXP_EXPERIMENTAL_INTF_RESERVED
,

1986 
	eibv_exp_ötf_sc›e
 {

1987 
	mIBV_EXP_INTF_GLOBAL
,

1990 
	mIBV_EXP_INTF_EXPERIMENTAL
,

1995 
	mIBV_EXP_INTF_VENDOR
,

1998 
	mIBV_EXP_INTF_VENDOR_EXPERIMENTAL
,

2005 
	eibv_exp_quîy_ötf_°©us
 {

2006 
	mIBV_EXP_INTF_STAT_OK
,

2007 
	mIBV_EXP_INTF_STAT_VENDOR_NOT_SUPPORTED
,

2008 
	mIBV_EXP_INTF_STAT_INTF_NOT_SUPPORTED
,

2009 
	mIBV_EXP_INTF_STAT_VERSION_NOT_SUPPORTED
,

2010 
	mIBV_EXP_INTF_STAT_INVAL_PARARM
,

2011 
	mIBV_EXP_INTF_STAT_INVAL_OBJ_STATE
,

2012 
	mIBV_EXP_INTF_STAT_INVAL_OBJ
,

2013 
	mIBV_EXP_INTF_STAT_FLAGS_NOT_SUPPORTED
,

2014 
	mIBV_EXP_INTF_STAT_FAMILY_FLAGS_NOT_SUPPORTED
,

2017 
	eibv_exp_quîy_ötf_comp_mask
 {

2018 
	mIBV_EXP_QUERY_INTF_RESERVED
 = (1 << 0),

2021 
	sibv_exp_quîy_ötf_∑øms
 {

2022 
uöt32_t
 
	mÊags
;

2023 
ibv_exp_ötf_sc›e
 
	mötf_sc›e
;

2024 
uöt64_t
 
	mvíd‹_guid
;

2025 
uöt32_t
 
	mötf
;

2026 
uöt32_t
 
	mötf_vîsi⁄
;

2027 *
	mobj
;

2028 *
	mÁmûy_∑øms
;

2029 
uöt32_t
 
	mÁmûy_Êags
;

2030 
uöt32_t
 
	mcomp_mask
;

2033 
	eibv_exp_ªÀa£_ötf_comp_mask
 {

2034 
	mIBV_EXP_RELEASE_INTF_RESERVED
 = (1 << 0),

2037 
	sibv_exp_ªÀa£_ötf_∑øms
 {

2038 
uöt32_t
 
	mcomp_mask
;

2048 
	eibv_exp_qp_bur°_Ámûy_¸óã_Êags
 {

2050 
	mIBV_EXP_QP_BURST_CREATE_DISABLE_ETH_LOOPBACK
 = (1 << 0),

2052 
	mIBV_EXP_QP_BURST_CREATE_ENABLE_MULTI_PACKET_SEND_WR
 = (1 << 1),

2056 
	eibv_exp_qp_bur°_Ámûy_Êags
 {

2057 
	mIBV_EXP_QP_BURST_SIGNALED
 = 1 << 0,

2058 
	mIBV_EXP_QP_BURST_SOLICITED
 = 1 << 1,

2059 
	mIBV_EXP_QP_BURST_IP_CSUM
 = 1 << 2,

2060 
	mIBV_EXP_QP_BURST_TUNNEL
 = 1 << 3,

2061 
	mIBV_EXP_QP_BURST_FENCE
 = 1 << 4,

2065 
	sibv_exp_qp_bur°_Ámûy
 {

2066 (*
	m£nd_≥ndög
)(
ibv_qp
 *
	mqp
, 
uöt64_t
 
	maddr
, 
uöt32_t
 
	mÀngth
, uöt32_à
	mlkey
, uöt32_à
	mÊags
);

2067 (*
	m£nd_≥ndög_ölöe
)(
ibv_qp
 *
	mqp
, *
	maddr
, 
uöt32_t
 
	mÀngth
, uöt32_à
	mÊags
);

2068 (*
	m£nd_≥ndög_sg_li°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	msg_li°
, 
uöt32_t
 
	mnum
, uöt32_à
	mÊags
);

2069 (*
	m£nd_Êush
)(
ibv_qp
 *
	mqp
);

2070 (*
	m£nd_bur°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
, uöt32_à
	mÊags
);

2071 (*
	mªcv_bur°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
);

2074 
	sibv_exp_qp_bur°_Ámûy_v1
 {

2083 (*
	m£nd_≥ndög
)(
ibv_qp
 *
	mqp
, 
uöt64_t
 
	maddr
, 
uöt32_t
 
	mÀngth
, uöt32_à
	mlkey
, uöt32_à
	mÊags
);

2094 (*
	m£nd_≥ndög_ölöe
)(
ibv_qp
 *
	mqp
, *
	maddr
, 
uöt32_t
 
	mÀngth
, uöt32_à
	mÊags
);

2105 (*
	m£nd_≥ndög_sg_li°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	msg_li°
, 
uöt32_t
 
	mnum
, uöt32_à
	mÊags
);

2111 (*
	m£nd_Êush
)(
ibv_qp
 *
	mqp
);

2115 (*
	m£nd_bur°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
, uöt32_à
	mÊags
);

2121 (*
	mªcv_bur°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
);

2131 (*
	m£nd_≥ndög_vœn
)(
ibv_qp
 *
	mqp
, 
uöt64_t
 
	maddr
, 
uöt32_t
 
	mÀngth
,

2132 
uöt32_t
 
	mlkey
, uöt32_à
	mÊags
, 
uöt16_t
 *
	mvœn_tci
);

2142 (*
	m£nd_≥ndög_ölöe_vœn
)(
ibv_qp
 *
	mqp
, *
	maddr
, 
uöt32_t
 
	mÀngth
,

2143 
uöt32_t
 
	mÊags
, 
uöt16_t
 *
	mvœn_tci
);

2153 (*
	m£nd_≥ndög_sg_li°_vœn
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	msg_li°
, 
uöt32_t
 
	mnum
,

2154 
uöt32_t
 
	mÊags
, 
uöt16_t
 *
	mvœn_tci
);

2158 
	sibv_exp_wq_Ámûy
 {

2167 (*
	mªcv_sg_li°
)(
ibv_exp_wq
 *
	mwq
, 
ibv_sge
 *
	msg_li°
, 
uöt32_t
 
	mnum_sg
);

2173 (*
	mªcv_bur°
)(
ibv_exp_wq
 *
	mwq
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
);

2177 
	eibv_exp_cq_Ámûy_Êags
 {

2182 
	mIBV_EXP_CQ_RX_IP_CSUM_OK
 = 1 << 0,

2183 
	mIBV_EXP_CQ_RX_TCP_UDP_CSUM_OK
 = 1 << 1,

2184 
	mIBV_EXP_CQ_RX_IPV4_PACKET
 = 1 << 2,

2185 
	mIBV_EXP_CQ_RX_IPV6_PACKET
 = 1 << 3,

2186 
	mIBV_EXP_CQ_RX_TUNNEL_PACKET
 = 1 << 4,

2187 
	mIBV_EXP_CQ_RX_OUTER_IP_CSUM_OK
 = 1 << 5,

2188 
	mIBV_EXP_CQ_RX_OUTER_TCP_UDP_CSUM_OK
 = 1 << 6,

2189 
	mIBV_EXP_CQ_RX_OUTER_IPV4_PACKET
 = 1 << 7,

2190 
	mIBV_EXP_CQ_RX_OUTER_IPV6_PACKET
 = 1 << 8,

2194 
	mIBV_EXP_CQ_RX_MULTI_PACKET_LAST_V1
 = 1 << 9,

2196 
	mIBV_EXP_CQ_RX_CVLAN_STRIPPED_V1
 = 1 << 10,

2206 
	mIBV_EXP_CQ_RX_TCP_PACKET
 = 1 << 11,

2207 
	mIBV_EXP_CQ_RX_UDP_PACKET
 = 1 << 12,

2208 
	mIBV_EXP_CQ_RX_WITH_TIMESTAMP
 = 1 << 13,

2212 
	sibv_exp_cq_Ámûy
 {

2213 
öt32_t
 (*
pﬁl_˙t
)(
ibv_cq
 *
	mcq
, 
uöt32_t
 
	mmax
);

2214 
öt32_t
 (*
pﬁl_Àngth
)(
ibv_cq
 *
	mcq
, *
	mbuf
, 
uöt32_t
 *
	möl
);

2215 
öt32_t
 (*
pﬁl_Àngth_Êags
)(
ibv_cq
 *
	mcq
, *
	mbuf
, 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
);

2218 
	sibv_exp_cq_Ámûy_v1
 {

2237 
öt32_t
 (*
pﬁl_˙t
)(
ibv_cq
 *
	mcq
, 
uöt32_t
 
	mmax
);

2261 
öt32_t
 (*
pﬁl_Àngth
)(
ibv_cq
 *
	mcq
, *
	mbuf
, 
uöt32_t
 *
	möl
);

2269 
öt32_t
 (*
pﬁl_Àngth_Êags
)(
ibv_cq
 *
	mcq
, *
	mbuf
, 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
);

2279 
öt32_t
 (*
pﬁl_Àngth_Êags_mp_rq
)(
ibv_cq
 *
	mcq
, 
uöt32_t
 *
	moff£t
, uöt32_à*
	mÊags
);

2291 
öt32_t
 (*
pﬁl_Àngth_Êags_cvœn
)(
ibv_cq
 *
	mcq
, *
	mbuf
,

2292 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
,

2293 
uöt16_t
 *
	mvœn_tci
);

2306 
öt32_t
 (*
pﬁl_Àngth_Êags_mp_rq_cvœn
)(
ibv_cq
 *
	mcq
,

2307 
uöt32_t
 *
	moff£t
,

2308 
uöt32_t
 *
	mÊags
,

2309 
uöt16_t
 *
	mvœn_tci
);

2320 
öt32_t
 (*
pﬁl_Àngth_Êags_ts
)(
ibv_cq
 *
	mcq
, *
	mbuf
,

2321 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
,

2322 
uöt64_t
 *
	mtime°amp
);

2335 
öt32_t
 (*
pﬁl_Àngth_Êags_mp_rq_ts
)(
ibv_cq
 *
	mcq
,

2336 
uöt32_t
 *
	moff£t
,

2337 
uöt32_t
 *
	mÊags
,

2338 
uöt64_t
 *
	mtime°amp
);

2349 
öt32_t
 (*
pﬁl_Àngth_Êags_cvœn_ts
)(
ibv_cq
 *
	mcq
, *
	mbuf
,

2350 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
,

2351 
uöt16_t
 *
	mvœn_tci
,

2352 
uöt64_t
 *
	mtime°amp
);

2365 
öt32_t
 (*
pﬁl_Àngth_Êags_mp_rq_cvœn_ts
)(
ibv_cq
 *
	mcq
,

2366 
uöt32_t
 *
	moff£t
,

2367 
uöt32_t
 *
	mÊags
,

2368 
uöt16_t
 *
	mvœn_tci
,

2369 
uöt64_t
 *
	mtime°amp
);

2373 
	mIBV_EXP_NUM_DC_INFO_LIDS
 = 30

2376 
	sibv_exp_dc_öfo_ít
 {

2377 
uöt16_t
 
	mlid
[
IBV_EXP_NUM_DC_INFO_LIDS
];

2378 
uöt32_t
 
	m£qnum
;

2381 
	eibv_exp_ro˚_gid_ty≥
 {

2382 
	mIBV_EXP_IB_ROCE_V1_GID_TYPE
,

2383 
	mIBV_EXP_ROCE_V2_GID_TYPE
,

2384 
	mIBV_EXP_ROCE_V1_5_GID_TYPE
,

2387 
	eibv_exp_quîy_gid_©å
 {

2388 
	mIBV_EXP_QUERY_GID_ATTR_TYPE
 = (1 << 0),

2389 
	mIBV_EXP_QUERY_GID_ATTR_GID
 = (1 << 1),

2390 
	mIBV_EXP_QUERY_GID_ATTR_RESERVED
 = (1 << 2),

2393 
	sibv_exp_gid_©å
 {

2394 
uöt32_t
 
	mcomp_mask
;

2395 
ibv_exp_ro˚_gid_ty≥
 
	mty≥
;

2396 
ibv_gid
 
	mgid
;

2403 
	eibv_exp_ec_ˇlc_©å_comp_mask
 {

2404 
	mIBV_EXP_EC_CALC_ATTR_MAX_INFLIGHT
 = (1 << 0),

2405 
	mIBV_EXP_EC_CALC_ATTR_K
 = (1 << 1),

2406 
	mIBV_EXP_EC_CALC_ATTR_M
 = (1 << 2),

2407 
	mIBV_EXP_EC_CALC_ATTR_W
 = (1 << 3),

2408 
	mIBV_EXP_EC_CALC_ATTR_MAX_DATA_SGE
 = (1 << 4),

2409 
	mIBV_EXP_EC_CALC_ATTR_MAX_CODE_SGE
 = (1 << 5),

2410 
	mIBV_EXP_EC_CALC_ATTR_ENCODE_MAT
 = (1 << 6),

2411 
	mIBV_EXP_EC_CALC_ATTR_AFFINITY
 = (1 << 7),

2412 
	mIBV_EXP_EC_CALC_ATTR_POLLING
 = (1 << 8),

2413 
	mIBV_EXP_EC_CALC_INIT_ATTR_RESERVED
 = (1 << 9),

2433 
	sibv_exp_ec_ˇlc_öô_©å
 {

2434 
uöt32_t
 
	mcomp_mask
;

2435 
uöt32_t
 
	mmax_öÊight_ˇlcs
;

2436 
	mk
;

2437 
	mm
;

2438 
	mw
;

2439 
	mmax_d©a_sge
;

2440 
	mmax_code_sge
;

2441 
uöt8_t
 *
	mícode_m©rix
;

2442 
	mafföôy_höt
;

2443 
	mpﬁlög
;

2452 
	eibv_exp_ec_°©us
 {

2453 
	mIBV_EXP_EC_CALC_SUCCESS
,

2454 
	mIBV_EXP_EC_CALC_FAIL
,

2466 
	sibv_exp_ec_comp
 {

2467 (*
	md⁄e
)(
ibv_exp_ec_comp
 *
	mcomp
);

2468 
ibv_exp_ec_°©us
 
	m°©us
;

2476 
	sibv_exp_ec_ˇlc
 {

2477 
ibv_pd
 *
	mpd
;

2489 
	sibv_exp_ec_mem
 {

2490 
ibv_sge
 *
	md©a_blocks
;

2491 
	mnum_d©a_sge
;

2492 
ibv_sge
 *
	mcode_blocks
;

2493 
	mnum_code_sge
;

2494 
	mblock_size
;

2503 
	sibv_exp_ec_°rùe
 {

2504 
ibv_qp
 *
	mqp
;

2505 
ibv_£nd_wr
 *
	mwr
;

2508 
	gibv_exp_≥î_commô
;

2509 
	gibv_exp_rﬁlback_˘x
;

2512 
	gibv_exp_≥î_≥ek
;

2513 
	gibv_exp_≥î_ab‹t_≥ek
;

2515 
	eibv_exp_§q_ty≥
 {

2516 
	mIBV_EXP_SRQT_BASIC
 = 
IBV_SRQT_BASIC
,

2517 
	mIBV_EXP_SRQT_XRC
 = 
IBV_SRQT_XRC
,

2518 
	mIBV_EXP_SRQT_TAG_MATCHING
 = 32

2521 
	eibv_exp_¸óã_§q_comp_mask
 {

2522 
	mIBV_EXP_CREATE_SRQ_CQ
 = (1 << 0),

2523 
	mIBV_EXP_CREATE_SRQ_XRCD
 = (1 << 1),

2524 
	mIBV_EXP_CREATE_SRQ_TM
 = (1 << 2),

2525 
	mIBV_EXP_CREATE_SRQ_DC_OFFLOAD_PARAMS
 = (1 << 3),

2526 
	mIBV_EXP_CREATE_SRQ_MP_WR
 = (1 << 4),

2527 
	mIBV_EXP_CREATE_SRQ_RESERVED
 = (1 << 5)

2530 
	sibv_exp_tm_ˇp
 {

2531 
uöt32_t
 
	mmax_num_ègs
;

2532 
uöt32_t
 
	mmax_›s
;

2535 
	sibv_exp_§q_dc_ofÊﬂd_∑øms
 {

2536 
uöt16_t
 
	mpkey_ödex
;

2537 
ibv_mtu
 
	m∑th_mtu
;

2538 
uöt8_t
 
	m¶
;

2539 
uöt8_t
 
	mmax_rd_©omic
;

2540 
uöt8_t
 
	mmö_∫r_timî
;

2541 
uöt8_t
 
	mtimeout
;

2542 
uöt8_t
 
	mªåy_˙t
;

2543 
uöt8_t
 
	m∫r_ªåy
;

2544 
uöt64_t
 
	md˘_key
;

2545 
uöt32_t
 
	mooo_ˇps
;

2546 
uöt32_t
 
	mcomp_mask
;

2549 
	sibv_exp_mp_wr
 {

2550 
uöt8_t
 
	mlog_num_of_°rides
;

2551 
uöt8_t
 
	mlog_°ride_size
;

2554 
	sibv_exp_¸óã_§q_©å
 {

2555 
ibv_§q_öô_©å
 
	mba£
;

2556 
ibv_exp_§q_ty≥
 
	m§q_ty≥
;

2557 
ibv_pd
 *
	mpd
;

2558 
uöt32_t
 
	mcomp_mask
;

2559 
ibv_cq
 *
	mcq
;

2560 
ibv_xrcd
 *
	mxrcd
;

2561 
ibv_exp_tm_ˇp
 
	mtm_ˇp
;

2562 
ibv_exp_§q_dc_ofÊﬂd_∑øms
 *
	mdc_ofÊﬂd_∑øms
;

2563 
ibv_exp_mp_wr
 
	mmp_wr
;

2566 
	eibv_exp_›s_wr_›code
 {

2567 
	mIBV_EXP_WR_TAG_ADD
,

2568 
	mIBV_EXP_WR_TAG_DEL
,

2569 
	mIBV_EXP_WR_TAG_SYNC


2572 
	eibv_exp_›s_Êags
 {

2573 
	mIBV_EXP_OPS_SIGNALED
 = 1 << 0,

2574 
	mIBV_EXP_OPS_TM_SYNC
 = 1 << 1

2577 
	sibv_exp_›s_wr
 {

2578 
uöt64_t
 
	mwr_id
;

2579 
ibv_exp_›s_wr
 *
	m√xt
;

2580 
ibv_exp_›s_wr_›code
 
	m›code
;

2581 
	mÊags
;

2583 
uöt32_t
 
	mu√x≥˘ed_˙t
;

2584 
uöt32_t
 
	mh™dÀ
;

2586 
uöt64_t
 
	mªcv_wr_id
;

2587 
ibv_sge
 *
	msg_li°
;

2588 
	mnum_sge
;

2589 
uöt64_t
 
	mèg
;

2590 
uöt64_t
 
	mmask
;

2591 } 
	madd
;

2592 } 
	mtm
;

2595 
	svîbs_c⁄ãxt_exp
 {

2597 
	mibv_exp_dm
 *(*
	mexp_Æloc_dm
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2598 
ibv_exp_Æloc_dm_©å
 *
	m©å
);

2599 (*
	mexp_‰ì_dm
)(
ibv_exp_dm
 *
	mdm
);

2600 (*
	mexp_mem˝y_dm
)(
ibv_exp_dm
 *
	mdm
,

2601 
ibv_exp_mem˝y_dm_©å
 *
	m©å
);

2602 (*
	mexp_po°_§q_›s
)(
ibv_§q
 *
	m§q
,

2603 
ibv_exp_›s_wr
 *
	m›
,

2604 
ibv_exp_›s_wr
 **
	mbad_›
);

2605 
	mibv_§q
 *(*
	mexp_¸óã_§q
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2606 
ibv_exp_¸óã_§q_©å
 *
	m©å
);

2607 (*
	mdrv_exp_£t_c⁄ãxt_©å
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2608 
ibv_exp_›í_devi˚_©å
 *
	m©å
);

2609 
	mibv_ah
 * (*
	mdrv_exp_ibv_¸óã_kah
)(
ibv_pd
 *
	mpd
,

2610 
ibv_exp_ah_©å
 *
	m©å_exp
);

2611 (*
	mexp_≥î_≥ek_cq
)(
ibv_cq
 *
	mibcq
,

2612 
ibv_exp_≥î_≥ek
 *
	m≥ek_˘x
);

2613 (*
	mexp_≥î_ab‹t_≥ek_cq
)(
ibv_cq
 *
	mibcq
,

2614 
ibv_exp_≥î_ab‹t_≥ek
 *
	mack_˘x
);

2615 (*
	mexp_≥î_commô_qp
)(
ibv_qp
 *
	mqp
,

2616 
ibv_exp_≥î_commô
 *
	m≥î
);

2617 (*
	mexp_rﬁlback_£nd
)(
ibv_qp
 *
	mqp
,

2618 
ibv_exp_rﬁlback_˘x
 *
	mrﬁlback
);

2619 (*
	mec_upd©e_sync
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2620 
ibv_exp_ec_mem
 *
	mec_mem
,

2621 
uöt8_t
 *
	md©a_upd©es
,

2622 
uöt8_t
 *
	mcode_upd©es
);

2623 (*
	mec_upd©e_async
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2624 
ibv_exp_ec_mem
 *
	mec_mem
,

2625 
uöt8_t
 *
	md©a_upd©es
,

2626 
uöt8_t
 *
	mcode_upd©es
,

2627 
ibv_exp_ec_comp
 *
	mec_comp
);

2628 
	mibv_exp_ec_ˇlc
 *(*
	mÆloc_ec_ˇlc
)(
ibv_pd
 *
	mpd
,

2629 
ibv_exp_ec_ˇlc_öô_©å
 *
	m©å
);

2630 (*
	mdóŒoc_ec_ˇlc
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
);

2631 (*
	mec_ícode_async
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2632 
ibv_exp_ec_mem
 *
	mec_mem
,

2633 
ibv_exp_ec_comp
 *
	mec_comp
);

2634 (*
	mec_ícode_sync
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2635 
ibv_exp_ec_mem
 *
	mec_mem
);

2636 (*
	mec_decode_async
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2637 
ibv_exp_ec_mem
 *
	mec_mem
,

2638 
uöt8_t
 *
	mîasuªs
,

2639 
uöt8_t
 *
	mdecode_m©rix
,

2640 
ibv_exp_ec_comp
 *
	mec_comp
);

2641 (*
	mec_decode_sync
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2642 
ibv_exp_ec_mem
 *
	mec_mem
,

2643 
uöt8_t
 *
	mîasuªs
,

2644 
uöt8_t
 *
	mdecode_m©rix
);

2645 (*
	mec_pﬁl
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
, 
	mn
);

2646 (*
	mec_ícode_£nd
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2647 
ibv_exp_ec_mem
 *
	mec_mem
,

2648 
ibv_exp_ec_°rùe
 *
	md©a_°rùes
,

2649 
ibv_exp_ec_°rùe
 *
	mcode_°rùes
);

2650 (*
	mexp_quîy_gid_©å
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

2651 
	mödex
,

2652 
ibv_exp_gid_©å
 *
	m©å
);

2653 (*
	mexp_de°roy_rwq_öd_èbÀ
)(
ibv_exp_rwq_öd_èbÀ
 *
	mrwq_öd_èbÀ
);

2654 
	mibv_exp_rwq_öd_èbÀ
 *(*
	mexp_¸óã_rwq_öd_èbÀ
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2655 
ibv_exp_rwq_öd_èbÀ_öô_©å
 *
	möô_©å
);

2656 (*
	mexp_de°roy_wq
)(
ibv_exp_wq
 *
	mwq
);

2657 (*
	mexp_modify_wq
)(
ibv_exp_wq
 *
	mwq
,

2658 
ibv_exp_wq_©å
 *
	mwq_©å
);

2659 
	mibv_exp_wq
 * (*
	mexp_¸óã_wq
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2660 
ibv_exp_wq_öô_©å
 *
	mwq_öô_©å
);

2661 (*
	mdrv_exp_pﬁl_dc_öfo
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2662 
ibv_exp_dc_öfo_ít
 *
	míts
,

2663 
	m√¡
, 
	mp‹t
);

2664 *(*
	mexp_quîy_ötf
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
ibv_exp_quîy_ötf_∑øms
 *
	m∑øms
,

2665 
ibv_exp_quîy_ötf_°©us
 *
	m°©us
);

2666 (*
	mexp_ªÀa£_ötf
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, *
	mötf
,

2667 
ibv_exp_ªÀa£_ötf_∑øms
 *
	m∑øms
);

2668 
	mibv_exp_ªs_domaö
 *(*
	mexp_¸óã_ªs_domaö
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2669 
ibv_exp_ªs_domaö_öô_©å
 *
	m©å
);

2670 (*
	mexp_de°roy_ªs_domaö
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2671 
ibv_exp_ªs_domaö
 *
	mªs_dom
,

2672 
ibv_exp_de°roy_ªs_domaö_©å
 *
	m©å
);

2673 (*
	mlib_exp_u£_¥iv_ív
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
);

2674 (*
	mlib_exp_£ãnv
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, c⁄° *
	m«me
,

2675 c⁄° *
	mvÆue
, 
	movîwrôe
);

2676 
vîbs_ívú⁄mít
 *
	mvív
;

2677 (*
	mdrv_exp_dîeg_mr
)(
ibv_mr
 *
	mmr
, 
ibv_exp_dîeg_out
 *
	mout
);

2678 (*
	mABI_∂a˚hﬁdî2
)();

2679 (*
	mABI_∂a˚hﬁdî1
)();

2680 (*
	mdrv_exp_¥e„tch_mr
)(
ibv_mr
 *
	mmr
,

2681 
ibv_exp_¥e„tch_©å
 *
	m©å
);

2682 (*
	mlib_exp_¥e„tch_mr
)(
ibv_mr
 *
	mmr
,

2683 
ibv_exp_¥e„tch_©å
 *
	m©å
);

2684 
	mibv_exp_mkey_li°_c⁄èöî
 * (*
	mdrv_exp_Æloc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
	m©å
);

2685 
	mibv_exp_mkey_li°_c⁄èöî
 * (*
	mlib_exp_Æloc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
	m©å
);

2686 (*
	mdrv_exp_dóŒoc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem
);

2687 (*
	mlib_exp_dóŒoc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem
);

2688 (*
	mdrv_exp_quîy_mkey
)(
ibv_mr
 *
	mmr
, 
ibv_exp_mkey_©å
 *
	mmkey_©å
);

2689 (*
	mlib_exp_quîy_mkey
)(
ibv_mr
 *
	mmr
, 
ibv_exp_mkey_©å
 *
	mmkey_©å
);

2690 
	mibv_mr
 * (*
	mdrv_exp_¸óã_mr
)(
ibv_exp_¸óã_mr_ö
 *
	mö
);

2691 
	mibv_mr
 * (*
	mlib_exp_¸óã_mr
)(
ibv_exp_¸óã_mr_ö
 *
	mö
);

2692 (*
	mdrv_exp_¨m_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_¨m_©å
 *
	m©å
);

2693 (*
	mlib_exp_¨m_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_¨m_©å
 *
	m©å
);

2694 (*
	mdrv_exp_böd_mw
)(
ibv_exp_mw_böd
 *
	mmw_böd
);

2695 (*
	mlib_exp_böd_mw
)(
ibv_exp_mw_böd
 *
	mmw_böd
);

2696 (*
	mdrv_exp_po°_£nd
)(
ibv_qp
 *
	mqp
,

2697 
ibv_exp_£nd_wr
 *
	mwr
,

2698 
ibv_exp_£nd_wr
 **
	mbad_wr
);

2699 
	mibv_mr
 * (*
	mdrv_exp_ªg_mr
)(
ibv_exp_ªg_mr_ö
 *
	mö
);

2700 
	mibv_mr
 * (*
	mlib_exp_ªg_mr
)(
ibv_exp_ªg_mr_ö
 *
	mö
);

2701 
	mibv_ah
 * (*
	mdrv_exp_ibv_¸óã_ah
)(
ibv_pd
 *
	mpd
,

2702 
ibv_exp_ah_©å
 *
	m©å_exp
);

2703 (*
	mdrv_exp_quîy_vÆues
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
	mq_vÆues
,

2704 
ibv_exp_vÆues
 *
	mvÆues
);

2705 
	mibv_cq
 * (*
	mexp_¸óã_cq
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
	mcqe
,

2706 
ibv_comp_ch™√l
 *
	mch™√l
,

2707 
	mcomp_ve˘‹
, 
ibv_exp_cq_öô_©å
 *
	m©å
);

2708 (*
	mdrv_exp_ibv_pﬁl_cq
)(
ibv_cq
 *
	mibcq
, 
	mnum_íåõs
,

2709 
ibv_exp_wc
 *
	mwc
, 
uöt32_t
 
	mwc_size
);

2710 * (*
	mdrv_exp_gë_Àgacy_xrc
Ë(
ibv_§q
 *
	mibv_§q
);

2711 (*
	mdrv_exp_£t_Àgacy_xrc
Ë(
ibv_§q
 *
	mibv_§q
, *
	mÀgacy_xrc
);

2712 
	mibv_mr
 * (*
	mdrv_exp_ibv_ªg_sh¨ed_mr
)(
ibv_exp_ªg_sh¨ed_mr_ö
 *
	mö
);

2713 
	mibv_mr
 * (*
	mlib_exp_ibv_ªg_sh¨ed_mr
)(
ibv_exp_ªg_sh¨ed_mr_ö
 *
	mö
);

2714 (*
	mdrv_exp_modify_qp
)(
ibv_qp
 *
	mqp
, 
ibv_exp_qp_©å
 *
	m©å
,

2715 
uöt64_t
 
	mexp_©å_mask
);

2716 (*
	mlib_exp_modify_qp
)(
ibv_qp
 *
	mqp
, 
ibv_exp_qp_©å
 *
	m©å
,

2717 
uöt64_t
 
	mexp_©å_mask
);

2718 (*
	mdrv_exp_po°_èsk
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2719 
ibv_exp_èsk
 *
	mèsk
,

2720 
ibv_exp_èsk
 **
	mbad_èsk
);

2721 (*
	mlib_exp_po°_èsk
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2722 
ibv_exp_èsk
 *
	mèsk
,

2723 
ibv_exp_èsk
 **
	mbad_èsk
);

2724 (*
	mdrv_exp_modify_cq
)(
ibv_cq
 *
	mcq
,

2725 
ibv_exp_cq_©å
 *
	m©å
, 
	m©å_mask
);

2726 (*
	mlib_exp_modify_cq
)(
ibv_cq
 *
	mcq
,

2727 
ibv_exp_cq_©å
 *
	m©å
, 
	m©å_mask
);

2728 (*
	mdrv_exp_ibv_de°roy_Êow
Ë(
ibv_exp_Êow
 *
	mÊow
);

2729 (*
	mlib_exp_ibv_de°roy_Êow
Ë(
ibv_exp_Êow
 *
	mÊow
);

2730 
	mibv_exp_Êow
 * (*
	mdrv_exp_ibv_¸óã_Êow
Ë(
ibv_qp
 *
	mqp
,

2731 
ibv_exp_Êow_©å


2732 *
	mÊow_©å
);

2733 
	mibv_exp_Êow
 * (*
	mlib_exp_ibv_¸óã_Êow
Ë(
ibv_qp
 *
	mqp
,

2734 
ibv_exp_Êow_©å


2735 *
	mÊow_©å
);

2737 (*
	mdrv_exp_quîy_p‹t
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

2738 
ibv_exp_p‹t_©å
 *
	mp‹t_©å
);

2739 (*
	mlib_exp_quîy_p‹t
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

2740 
ibv_exp_p‹t_©å
 *
	mp‹t_©å
);

2741 
	mibv_exp_d˘
 *(*
	m¸óã_d˘
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2742 
ibv_exp_d˘_öô_©å
 *
	m©å
);

2743 (*
	mde°roy_d˘
)(
ibv_exp_d˘
 *
	md˘
);

2744 (*
	mquîy_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_d˘_©å
 *
	m©å
);

2745 (*
	mdrv_exp_quîy_devi˚
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2746 
ibv_exp_devi˚_©å
 *
	m©å
);

2747 (*
	mlib_exp_quîy_devi˚
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2748 
ibv_exp_devi˚_©å
 *
	m©å
);

2749 
	mibv_qp
 *(*
	mdrv_exp_¸óã_qp
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2750 
ibv_exp_qp_öô_©å
 *
	möô_©å
);

2751 
	mibv_qp
 *(*
	mlib_exp_¸óã_qp
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2752 
ibv_exp_qp_öô_©å
 *
	möô_©å
);

2753 
size_t
 
	msz
;

2757 
	#ETHERNET_LL_SIZE
 6

	)

2759 
ölöe
 
vîbs_c⁄ãxt_exp
 *
	$vîbs_gë_exp_˘x
(
ibv_c⁄ãxt
 *
˘x
)

2761 
vîbs_c⁄ãxt
 *
≠p_ex_˘x
 = 
	`vîbs_gë_˘x
(
˘x
);

2762 *
a˘uÆ_ex_˘x
;

2764 i‡(!
≠p_ex_˘x
 || !◊µ_ex_˘x->
has_comp_mask
 & 
VERBS_CONTEXT_EXP
))

2765  
NULL
;

2767 
a˘uÆ_ex_˘x
 = ((*)
˘x
Ë- (
≠p_ex_˘x
->
sz
 - (
ibv_c⁄ãxt
));

2769  (
vîbs_c⁄ãxt_exp
 *)(
a˘uÆ_ex_˘x
 - (verbs_context_exp));

2770 
	}
}

2772 
	#vîbs_gë_exp_˘x_›
(
˘x
, 
›
) ({ \

2773 
vîbs_c⁄ãxt_exp
 *
_v˘x
 = 
	`vîbs_gë_exp_˘x
(
˘x
); \

2774 (!
_v˘x
 || (_v˘x->
sz
 < (*_v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt_exp
, 
›
)) || \

2775 !
_v˘x
->
›
Ë? 
NULL
 : _v˘x; })

	)

2777 
	#vîbs_£t_exp_˘x_›
(
_v˘x
, 
›
, 
±r
) ({ \

2778 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
_v˘x
; \

2779 i‡(
v˘x
 && (v˘x->
sz
 >(*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt_exp
, 
›
))) \

2780 
v˘x
->
›
 = 
±r
; })

	)

2790 
ibv_devi˚
 **
ibv_exp_gë_devi˚_li°
(*
num_devi˚s
);

2800 
ölöe
 
ibv_exp_ec_ˇlc
 *

2801 
	$ibv_exp_Æloc_ec_ˇlc
(
ibv_pd
 *
pd
,

2802 
ibv_exp_ec_ˇlc_öô_©å
 *
©å
)

2804 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2806 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
pd
->
c⁄ãxt
, 
Æloc_ec_ˇlc
);

2807 i‡(!
v˘x
) {

2808 
î∫o
 = 
ENOSYS
;

2809  
NULL
;

2811 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

2812 
IBV_EXP_EC_CALC_INIT_ATTR_RESERVED
 - 1);

2814  
v˘x
->
	`Æloc_ec_ˇlc
(
pd
, 
©å
);

2815 
	}
}

2822 
ölöe
 
	$ibv_exp_dóŒoc_ec_ˇlc
(
ibv_exp_ec_ˇlc
 *
ˇlc
)

2824 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2826 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
dóŒoc_ec_ˇlc
);

2827 i‡(!
v˘x
) {

2828 
î∫o
 = 
ENOSYS
;

2832 
v˘x
->
	`dóŒoc_ec_ˇlc
(
ˇlc
);

2833 
	}
}

2858 
ölöe
 

2859 
	$ibv_exp_ec_ícode_async
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

2860 
ibv_exp_ec_mem
 *
ec_mem
,

2861 
ibv_exp_ec_comp
 *
ec_comp
)

2863 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2865 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_ícode_async
);

2866 i‡(!
v˘x
)

2867  
ENOSYS
;

2869  
v˘x
->
	`ec_ícode_async
(
ˇlc
, 
ec_mem
, 
ec_comp
);

2870 
	}
}

2892 
ölöe
 

2893 
	$ibv_exp_ec_ícode_sync
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

2894 
ibv_exp_ec_mem
 *
ec_mem
)

2896 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2898 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_ícode_sync
);

2899 i‡(!
v˘x
)

2900  
ENOSYS
;

2902  
v˘x
->
	`ec_ícode_sync
(
ˇlc
, 
ec_mem
);

2903 
	}
}

2937 
ölöe
 

2938 
	$ibv_exp_ec_decode_async
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

2939 
ibv_exp_ec_mem
 *
ec_mem
,

2940 
uöt8_t
 *
îasuªs
,

2941 
uöt8_t
 *
decode_m©rix
,

2942 
ibv_exp_ec_comp
 *
ec_comp
)

2944 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2946 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_decode_async
);

2947 i‡(!
v˘x
)

2948  
ENOSYS
;

2950  
v˘x
->
	`ec_decode_async
(
ˇlc
, 
ec_mem
, 
îasuªs
,

2951 
decode_m©rix
, 
ec_comp
);

2952 
	}
}

2980 
ölöe
 

2981 
	$ibv_exp_ec_decode_sync
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

2982 
ibv_exp_ec_mem
 *
ec_mem
,

2983 
uöt8_t
 *
îasuªs
,

2984 
uöt8_t
 *
decode_m©rix
)

2986 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2988 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_decode_sync
);

2989 i‡(!
v˘x
)

2990  
ENOSYS
;

2992  
v˘x
->
	`ec_decode_sync
(
ˇlc
, 
ec_mem
, 
îasuªs
, 
decode_m©rix
);

2993 
	}
}

3033 
ölöe
 

3034 
	$ibv_exp_ec_upd©e_async
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

3035 
ibv_exp_ec_mem
 *
ec_mem
,

3036 
uöt8_t
 *
d©a_upd©es
,

3037 
uöt8_t
 *
code_upd©es
,

3038 
ibv_exp_ec_comp
 *
ec_comp
)

3040 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3042 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_upd©e_async
);

3043 i‡(!
v˘x
)

3044  -
ENOSYS
;

3046  
v˘x
->
	`ec_upd©e_async
(
ˇlc
, 
ec_mem
, 
d©a_upd©es
,

3047 
code_upd©es
, 
ec_comp
);

3048 
	}
}

3087 
ölöe
 

3088 
	$ibv_exp_ec_upd©e_sync
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

3089 
ibv_exp_ec_mem
 *
ec_mem
,

3090 
uöt8_t
 *
d©a_upd©es
,

3091 
uöt8_t
 *
code_upd©es
)

3093 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3095 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_upd©e_sync
);

3096 i‡(!
v˘x
)

3097  -
ENOSYS
;

3099  
v˘x
->
	`ec_upd©e_sync
(
ˇlc
, 
ec_mem
, 
d©a_upd©es
, 
code_upd©es
);

3100 
	}
}

3111 
ölöe
 

3112 
	$ibv_exp_ec_pﬁl
(
ibv_exp_ec_ˇlc
 *
ˇlc
, 
n
)

3114 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3116 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_pﬁl
);

3117 i‡(!
v˘x
)

3118  
ENOSYS
;

3120  
v˘x
->
	`ec_pﬁl
(
ˇlc
, 
n
);

3121 
	}
}

3145 
ölöe
 

3146 
	$ibv_exp_ec_ícode_£nd
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

3147 
ibv_exp_ec_mem
 *
ec_mem
,

3148 
ibv_exp_ec_°rùe
 *
d©a_°rùes
,

3149 
ibv_exp_ec_°rùe
 *
code_°rùes
)

3151 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3153 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_ícode_£nd
);

3154 i‡(!
v˘x
)

3155  -
ENOSYS
;

3157  
v˘x
->
	`ec_ícode_£nd
(
ˇlc
, 
ec_mem
, 
d©a_°rùes
, 
code_°rùes
);

3158 
	}
}

3160 
ölöe
 
ibv_qp
 *

3161 
	$ibv_exp_¸óã_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_exp_qp_öô_©å
 *
qp_öô_©å
)

3163 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3164 
uöt32_t
 
mask
 = 
qp_öô_©å
->
comp_mask
;

3166 i‡(
mask
 =
IBV_EXP_QP_INIT_ATTR_PD
)

3167  
	`ibv_¸óã_qp
(
qp_öô_©å
->
pd
,

3168 (
ibv_qp_öô_©å
 *Ë
qp_öô_©å
);

3170 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_¸óã_qp
);

3171 i‡(!
v˘x
) {

3172 
î∫o
 = 
ENOSYS
;

3173  
NULL
;

3175 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
qp_öô_©å
->
comp_mask
,

3176 
IBV_EXP_QP_INIT_ATTR_RESERVED1
 - 1);

3178  
v˘x
->
	`lib_exp_¸óã_qp
(
c⁄ãxt
, 
qp_öô_©å
);

3179 
	}
}

3186 
ölöe
 
	$ibv_exp_u£_¥iv_ív
(
ibv_c⁄ãxt
 *
c⁄ãxt
)

3188 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3190 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_u£_¥iv_ív
);

3191 i‡(!
v˘x
) {

3192 
î∫o
 = 
ENOSYS
;

3196  
v˘x
->
	`lib_exp_u£_¥iv_ív
(
c⁄ãxt
);

3197 
	}
}

3208 
ölöe
 
	$ibv_exp_pﬁl_dc_öfo
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3209 
ibv_exp_dc_öfo_ít
 *
íts
,

3210 
√¡
, 
p‹t
)

3212 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3214 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_pﬁl_dc_öfo
);

3215 i‡(!
v˘x
) {

3216 
î∫o
 = 
ENOSYS
;

3220  
v˘x
->
	`drv_exp_pﬁl_dc_öfo
(
c⁄ãxt
, 
íts
, 
√¡
, 
p‹t
);

3221 
	}
}

3228 
ölöe
 
	$ibv_exp_£ãnv
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3229 c⁄° *
«me
,

3230 c⁄° *
vÆue
,

3231 
ovîwrôe
)

3233 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3235 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_£ãnv
);

3236 i‡(!
v˘x
)

3237  
	`£ãnv
(
«me
, 
vÆue
, 
ovîwrôe
);

3239  
v˘x
->
	`lib_exp_£ãnv
(
c⁄ãxt
, 
«me
, 
vÆue
, 
ovîwrôe
);

3240 
	}
}

3242 
ölöe
 
	$ibv_exp_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3243 
ibv_exp_devi˚_©å
 *
©å
)

3245 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

3246 
lib_exp_quîy_devi˚
);

3247 i‡(!
v˘x
)

3248  
ENOSYS
;

3250 i‡(
©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_COMP_MASK_2
)

3251 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask_2
,

3252 
IBV_EXP_DEVICE_ATTR_RESERVED_2
 - 1);

3254  
v˘x
->
	`lib_exp_quîy_devi˚
(
c⁄ãxt
, 
©å
);

3255 
	}
}

3257 
ölöe
 
ibv_exp_d˘
 *

3258 
	$ibv_exp_¸óã_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3259 
ibv_exp_d˘_öô_©å
 *
©å
)

3261 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3262 
ibv_exp_d˘
 *
d˘
;

3264 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
¸óã_d˘
);

3265 i‡(!
v˘x
) {

3266 
î∫o
 = 
ENOSYS
;

3267  
NULL
;

3270 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3271 
IBV_EXP_DCT_INIT_ATTR_RESERVED
 - 1);

3272 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3273 
d˘
 = 
v˘x
->
	`¸óã_d˘
(
c⁄ãxt
, 
©å
);

3274 i‡(
d˘
)

3275 
d˘
->
c⁄ãxt
 = context;

3277 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3279  
d˘
;

3280 
	}
}

3282 
ölöe
 
	$ibv_exp_de°roy_d˘
(
ibv_exp_d˘
 *
d˘
)

3284 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3285 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

3286 
îr
;

3288 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
de°roy_d˘
);

3289 i‡(!
v˘x
) {

3290 
î∫o
 = 
ENOSYS
;

3291  
î∫o
;

3294 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3295 
îr
 = 
v˘x
->
	`de°roy_d˘
(
d˘
);

3296 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3298  
îr
;

3299 
	}
}

3301 
ölöe
 
	$ibv_exp_quîy_d˘
(
ibv_exp_d˘
 *
d˘
,

3302 
ibv_exp_d˘_©å
 *
©å
)

3304 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3305 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

3306 
îr
;

3308 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
quîy_d˘
);

3309 i‡(!
v˘x
) {

3310 
î∫o
 = 
ENOSYS
;

3311  
î∫o
;

3314 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3315 
IBV_EXP_DCT_ATTR_RESERVED
 - 1);

3316 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3317 
îr
 = 
v˘x
->
	`quîy_d˘
(
d˘
, 
©å
);

3318 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3320  
îr
;

3321 
	}
}

3323 
ölöe
 
	$ibv_exp_¨m_d˘
(
ibv_exp_d˘
 *
d˘
,

3324 
ibv_exp_¨m_©å
 *
©å
)

3326 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3327 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

3328 
îr
;

3330 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_¨m_d˘
);

3331 i‡(!
v˘x
) {

3332 
î∫o
 = 
ENOSYS
;

3333  
î∫o
;

3336 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3337 
IBV_EXP_ARM_ATTR_RESERVED
 - 1);

3338 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3339 
îr
 = 
v˘x
->
	`lib_exp_¨m_d˘
(
d˘
, 
©å
);

3340 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3342  
îr
;

3343 
	}
}

3345 
ölöe
 
	$ibv_exp_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3346 
uöt8_t
 
p‹t_num
,

3347 
ibv_exp_p‹t_©å
 *
p‹t_©å
)

3349 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3351 i‡(0 =
p‹t_©å
->
comp_mask
)

3352  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
,

3353 &
p‹t_©å
->port_attr);

3356 i‡(!(
p‹t_©å
->
comp_mask
 & 
IBV_EXP_QUERY_PORT_ATTR_MASK1
) ||

3357 (
p‹t_©å
->
comp_mask
 & ~
IBV_EXP_QUERY_PORT_ATTR_MASKS
) ||

3358 (
p‹t_©å
->
mask1
 & ~
IBV_EXP_QUERY_PORT_MASK
)) {

3359 
î∫o
 = 
EINVAL
;

3360  -
î∫o
;

3363 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_quîy_p‹t
);

3365 i‡(!
v˘x
) {

3367 i‡(
p‹t_©å
->
comp_mask
 =
IBV_EXP_QUERY_PORT_ATTR_MASK1
 &&

3368 !(
p‹t_©å
->
mask1
 & ~
IBV_EXP_QUERY_PORT_STD_MASK
))

3369  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
,

3370 &
p‹t_©å
->port_attr);

3373 
î∫o
 = 
ENOSYS
;

3374  -
î∫o
;

3376 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
p‹t_©å
->
comp_mask
,

3377 
IBV_EXP_QUERY_PORT_ATTR_RESERVED
 - 1);

3379  
v˘x
->
	`lib_exp_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
);

3380 
	}
}

3385 
ölöe
 
	$ibv_exp_po°_èsk
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3386 
ibv_exp_èsk
 *
èsk
,

3387 
ibv_exp_èsk
 **
bad_èsk
)

3389 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

3390 
lib_exp_po°_èsk
);

3391 i‡(!
v˘x
)

3392  
ENOSYS
;

3394 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
èsk
->
comp_mask
,

3395 
IBV_EXP_TASK_RESERVED
 - 1);

3397  
v˘x
->
	`lib_exp_po°_èsk
(
c⁄ãxt
, 
èsk
, 
bad_èsk
);

3398 
	}
}

3400 
ölöe
 
	$ibv_exp_quîy_vÆues
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
q_vÆues
,

3401 
ibv_exp_vÆues
 *
vÆues
)

3403 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

3404 
drv_exp_quîy_vÆues
);

3405 i‡(!
v˘x
) {

3406 
î∫o
 = 
ENOSYS
;

3407  -
î∫o
;

3409 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
vÆues
->
comp_mask
,

3410 
IBV_EXP_VALUES_RESERVED
 - 1);

3412  
v˘x
->
	`drv_exp_quîy_vÆues
(
c⁄ãxt
, 
q_vÆues
, 
vÆues
);

3413 
	}
}

3415 
ölöe
 
uöt64_t
 
	$ibv_exp_cqe_ts_to_ns
(
ibv_exp_˛ock_öfo
 *
˛ock_öfo
,

3416 
uöt64_t
 
ts
)

3418 
uöt64_t
 
dñè
, 
n£c
;

3420 
	`IBV_EXP_RET_ZERO_ON_INVALID_COMP_MASK
(
˛ock_öfo
->
comp_mask
,

3421 
IBV_EXP_CLOCK_INFO_RESERVED
 - 1);

3423 
dñè
 = (
ts
 - 
˛ock_öfo
->
cy˛es
Ë& clock_öfo->
mask
;

3424 
n£c
 = 
˛ock_öfo
->nsec;

3430 i‡(
dñè
 > 
˛ock_öfo
->
mask
 / 2) {

3431 
dñè
 = (
˛ock_öfo
->
cy˛es
 - 
ts
Ë& clock_öfo->
mask
;

3432 
n£c
 -((
dñè
 * 
˛ock_öfo
->
mu…
Ë- clock_öfo->
‰ac
Ë>> clock_öfo->
shi·
;

3434 
n£c
 +((
dñè
 * 
˛ock_öfo
->
mu…
Ë+ clock_öfo->
‰ac
Ë>> clock_öfo->
shi·
;

3437  
n£c
;

3438 
	}
}

3440 
ölöe
 
ibv_exp_Êow
 *
	$ibv_exp_¸óã_Êow
(
ibv_qp
 *
qp
,

3441 
ibv_exp_Êow_©å
 *
Êow
)

3443 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
,

3444 
lib_exp_ibv_¸óã_Êow
);

3445 i‡(!
v˘x
 || !v˘x->
lib_exp_ibv_¸óã_Êow
)

3446  
NULL
;

3448 i‡(
Êow
->
ª£rved
 != 0L) {

3449 
	`Ârötf
(
°dîr
, "%s:%d: flow->ª£rved mu° bê0\n", 
__FUNCTION__
, 
__LINE__
);

3450 
Êow
->
ª£rved
 = 0L;

3453  
v˘x
->
	`lib_exp_ibv_¸óã_Êow
(
qp
, 
Êow
);

3454 
	}
}

3456 
ölöe
 
	$ibv_exp_de°roy_Êow
(
ibv_exp_Êow
 *
Êow_id
)

3458 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
Êow_id
->
c⁄ãxt
,

3459 
lib_exp_ibv_de°roy_Êow
);

3460 i‡(!
v˘x
 || !v˘x->
lib_exp_ibv_de°roy_Êow
)

3461  -
ENOSYS
;

3463  
v˘x
->
	`lib_exp_ibv_de°roy_Êow
(
Êow_id
);

3464 
	}
}

3466 
ölöe
 
	$ibv_exp_pﬁl_cq
(
ibv_cq
 *
ibcq
, 
num_íåõs
,

3467 
ibv_exp_wc
 *
wc
, 
uöt32_t
 
wc_size
)

3469 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ibcq
->
c⁄ãxt
,

3470 
drv_exp_ibv_pﬁl_cq
);

3471 i‡(!
v˘x
)

3472  -
ENOSYS
;

3474  
v˘x
->
	`drv_exp_ibv_pﬁl_cq
(
ibcq
, 
num_íåõs
, 
wc
, 
wc_size
);

3475 
	}
}

3480 
ölöe
 
	$ibv_exp_po°_£nd
(
ibv_qp
 *
qp
,

3481 
ibv_exp_£nd_wr
 *
wr
,

3482 
ibv_exp_£nd_wr
 **
bad_wr
)

3484 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
,

3485 
drv_exp_po°_£nd
);

3486 i‡(!
v˘x
)

3487  -
ENOSYS
;

3489  
v˘x
->
	`drv_exp_po°_£nd
(
qp
, 
wr
, 
bad_wr
);

3490 
	}
}

3496 
ibv_mr
 *
	$ibv_exp_ªg_sh¨ed_mr
(
ibv_exp_ªg_sh¨ed_mr_ö
 *
mr_ö
Ë
DEPRECATED
;

3497 
ölöe
 
ibv_mr
 *
	$ibv_exp_ªg_sh¨ed_mr
(
ibv_exp_ªg_sh¨ed_mr_ö
 *
mr_ö
)

3499 
î∫o
 = 
ENOSYS
;

3500  
NULL
;

3501 
	}
}

3510 
ölöe
 
	$ibv_exp_modify_cq
(
ibv_cq
 *
cq
,

3511 
ibv_exp_cq_©å
 *
cq_©å
,

3512 
cq_©å_mask
)

3514 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
cq
->
c⁄ãxt
,

3515 
lib_exp_modify_cq
);

3516 i‡(!
v˘x
)

3517  
ENOSYS
;

3519 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
cq_©å
->
comp_mask
,

3520 
IBV_EXP_CQ_ATTR_RESERVED
 - 1);

3522  
v˘x
->
	`lib_exp_modify_cq
(
cq
, 
cq_©å
, 
cq_©å_mask
);

3523 
	}
}

3525 
ölöe
 
ibv_cq
 *
	$ibv_exp_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3526 
cqe
,

3527 *
cq_c⁄ãxt
,

3528 
ibv_comp_ch™√l
 *
ch™√l
,

3529 
comp_ve˘‹
,

3530 
ibv_exp_cq_öô_©å
 *
©å
)

3532 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3533 
ibv_cq
 *
cq
;

3535 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_cq
);

3536 i‡(!
v˘x
) {

3537 
î∫o
 = 
ENOSYS
;

3538  
NULL
;

3541 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3542 
IBV_EXP_CQ_INIT_ATTR_RESERVED1
 - 1);

3543 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3544 
cq
 = 
v˘x
->
	`exp_¸óã_cq
(
c⁄ãxt
, 
cqe
, 
ch™√l
, 
comp_ve˘‹
, 
©å
);

3545 i‡(
cq
) {

3546 
cq
->
c⁄ãxt
 = context;

3547 
cq
->
ch™√l
 = channel;

3548 i‡(
ch™√l
)

3549 ++
ch™√l
->
ªf˙t
;

3550 
cq
->
cq_c⁄ãxt
 = cq_context;

3551 
cq
->
comp_evíts_com∂ëed
 = 0;

3552 
cq
->
async_evíts_com∂ëed
 = 0;

3553 
	`±hªad_muãx_öô
(&
cq
->
muãx
, 
NULL
);

3554 
	`±hªad_c⁄d_öô
(&
cq
->
c⁄d
, 
NULL
);

3557 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3559  
cq
;

3560 
	}
}

3567 
ölöe
 

3568 
	$ibv_exp_modify_qp
(
ibv_qp
 *
qp
, 
ibv_exp_qp_©å
 *
©å
, 
uöt64_t
 
exp_©å_mask
)

3570 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3572 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
, 
lib_exp_modify_qp
);

3573 i‡(!
v˘x
) {

3574 
î∫o
 = 
ENOSYS
;

3575  
î∫o
;

3577 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3578 
IBV_EXP_QP_ATTR_RESERVED
 - 1);

3580  
v˘x
->
	`lib_exp_modify_qp
(
qp
, 
©å
, 
exp_©å_mask
);

3581 
	}
}

3586 
ölöe
 
ibv_mr
 *
	$ibv_exp_ªg_mr
(
ibv_exp_ªg_mr_ö
 *
ö
)

3588 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3590 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ö
->
pd
->
c⁄ãxt
, 
lib_exp_ªg_mr
);

3591 i‡(!
v˘x
) {

3592 
î∫o
 = 
ENOSYS
;

3593  
NULL
;

3595 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
ö
->
comp_mask
,

3596 
IBV_EXP_REG_MR_RESERVED
 - 1);

3598  
v˘x
->
	`lib_exp_ªg_mr
(
ö
);

3599 
	}
}

3605 
ölöe
 
	$ibv_exp_böd_mw
(
ibv_exp_mw_böd
 *
mw_böd
)

3607 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3609 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mw_böd
->
mw
->
c⁄ãxt
, 
lib_exp_böd_mw
);

3610 i‡(!
v˘x
) {

3611 
î∫o
 = 
ENOSYS
;

3612  
î∫o
;

3614 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
mw_böd
->
comp_mask
,

3615 
IBV_EXP_BIND_MW_RESERVED
 - 1);

3617  
v˘x
->
	`lib_exp_böd_mw
(
mw_böd
);

3618 
	}
}

3631 
ölöe
 
	$ibv_exp_¥e„tch_mr
(

3632 
ibv_mr
 *
mr
,

3633 
ibv_exp_¥e„tch_©å
 *
©å
)

3635 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr
->
c⁄ãxt
,

3636 
lib_exp_¥e„tch_mr
);

3638 i‡(!
v˘x
) {

3639 
î∫o
 = 
ENOSYS
;

3640  
î∫o
;

3642 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3643 
IBV_EXP_PREFETCH_MR_RESERVED
 - 1);

3645  
v˘x
->
	`lib_exp_¥e„tch_mr
(
mr
, 
©å
);

3646 
	}
}

3648 (*
	tdrv_exp_po°_£nd_func
)(
	tibv_qp
 *
	tqp
,

3649 
	tibv_exp_£nd_wr
 *
	twr
,

3650 
	tibv_exp_£nd_wr
 **
	tbad_wr
);

3651 (*
	tdrv_po°_£nd_func
)(
	tibv_qp
 *
	tqp
, 
	tibv_£nd_wr
 *
	twr
,

3652 
	tibv_£nd_wr
 **
	tbad_wr
);

3653 (*
	tdrv_exp_pﬁl_cq_func
)(
	tibv_cq
 *
	tibcq
, 
	tnum_íåõs
,

3654 
	tibv_exp_wc
 *
	twc
, 
	tuöt32_t
 
	twc_size
);

3655 (*
	tdrv_pﬁl_cq_func
)(
	tibv_cq
 *
	tcq
, 
	tnum_íåõs
, 
	tibv_wc
 *
	twc
);

3656 (*
	tdrv_po°_ªcv_func
)(
	tibv_qp
 *
	tqp
, 
	tibv_ªcv_wr
 *
	twr
,

3657 
	tibv_ªcv_wr
 **
	tbad_wr
);

3659 
ölöe
 *
	$ibv_exp_gë_¥ovidî_func
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3660 
ibv_exp_func_«me
 
«me
)

3662 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3664 
«me
) {

3665 
IBV_EXP_POST_SEND_FUNC
:

3666 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_po°_£nd
);

3667 i‡(!
v˘x
)

3668 
îr‹
;

3670  (*)
v˘x
->
drv_exp_po°_£nd
;

3672 
IBV_EXP_POLL_CQ_FUNC
:

3673 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_ibv_pﬁl_cq
);

3674 i‡(!
v˘x
)

3675 
îr‹
;

3677  (*)
v˘x
->
drv_exp_ibv_pﬁl_cq
;

3679 
IBV_POST_SEND_FUNC
:

3680 i‡(!
c⁄ãxt
->
›s
.
po°_£nd
)

3681 
îr‹
;

3683  (*)
c⁄ãxt
->
›s
.
po°_£nd
;

3685 
IBV_POLL_CQ_FUNC
:

3686 i‡(!
c⁄ãxt
->
›s
.
pﬁl_cq
)

3687 
îr‹
;

3689  (*)
c⁄ãxt
->
›s
.
pﬁl_cq
;

3691 
IBV_POST_RECV_FUNC
:

3692 i‡(!
c⁄ãxt
->
›s
.
po°_ªcv
)

3693 
îr‹
;

3695  (*)
c⁄ãxt
->
›s
.
po°_ªcv
;

3701 
îr‹
:

3702 
î∫o
 = 
ENOSYS
;

3703  
NULL
;

3704 
	}
}

3706 
ölöe
 
ibv_mr
 *
	$ibv_exp_¸óã_mr
(
ibv_exp_¸óã_mr_ö
 *
ö
)

3708 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3709 
ibv_mr
 *
mr
;

3711 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ö
->
pd
->
c⁄ãxt
, 
lib_exp_¸óã_mr
);

3712 i‡(!
v˘x
) {

3713 
î∫o
 = 
ENOSYS
;

3714  
NULL
;

3717 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
ö
->
comp_mask
,

3718 
IBV_EXP_CREATE_MR_IN_RESERVED
 - 1);

3719 
mr
 = 
v˘x
->
	`lib_exp_¸óã_mr
(
ö
);

3720 i‡(
mr
)

3721 
mr
->
pd
 = 
ö
->pd;

3723  
mr
;

3724 
	}
}

3726 
ölöe
 
	$ibv_exp_quîy_mkey
(
ibv_mr
 *
mr
,

3727 
ibv_exp_mkey_©å
 *
©å
)

3729 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3731 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr
->
c⁄ãxt
, 
lib_exp_quîy_mkey
);

3732 i‡(!
v˘x
) {

3733 
î∫o
 = 
ENOSYS
;

3734  
î∫o
;

3737 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3738 
IBV_EXP_MKEY_ATTR_RESERVED
 - 1);

3740  
v˘x
->
	`lib_exp_quîy_mkey
(
mr
, 
©å
);

3741 
	}
}

3743 
ölöe
 
	$ibv_exp_dóŒoc_mkey_li°_mem‹y
(
ibv_exp_mkey_li°_c⁄èöî
 *
mem
)

3745 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3747 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mem
->
c⁄ãxt
,

3748 
lib_exp_dóŒoc_mkey_li°_mem‹y
);

3749 i‡(!
v˘x
) {

3750 
î∫o
 = 
ENOSYS
;

3751  
î∫o
;

3754  
v˘x
->
	`lib_exp_dóŒoc_mkey_li°_mem‹y
(
mem
);

3755 
	}
}

3757 
ölöe
 
ibv_exp_mkey_li°_c⁄èöî
 *

3758 
	$ibv_exp_Æloc_mkey_li°_mem‹y
(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
©å
)

3760 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3762 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
©å
->
pd
->
c⁄ãxt
,

3763 
lib_exp_Æloc_mkey_li°_mem‹y
);

3764 i‡(!
v˘x
) {

3765 
î∫o
 = 
ENOSYS
;

3766  
NULL
;

3769 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3770 
IBV_EXP_MKEY_LIST_CONTAINER_RESERVED
 - 1);

3772  
v˘x
->
	`lib_exp_Æloc_mkey_li°_mem‹y
(
©å
);

3773 
	}
}

3775 
ölöe
 
ibv_§q
 *

3776 
	$ibv_exp_¸óã_§q
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3777 
ibv_exp_¸óã_§q_©å
 *
©å
)

3779 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3781 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_§q
);

3782 i‡(!
v˘x
) {

3783 
î∫o
 = 
ENOSYS
;

3784  
NULL
;

3787 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3788 
IBV_EXP_CREATE_SRQ_RESERVED
 - 1);

3790  
v˘x
->
	`exp_¸óã_§q
(
c⁄ãxt
, 
©å
);

3791 
	}
}

3796 
ölöe
 
ibv_exp_ªs_domaö
 *
	$ibv_exp_¸óã_ªs_domaö
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3797 
ibv_exp_ªs_domaö_öô_©å
 *
©å
)

3799 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3801 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_ªs_domaö
);

3802 i‡(!
v˘x
) {

3803 
î∫o
 = 
ENOSYS
;

3804  
NULL
;

3807 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3808 
IBV_EXP_RES_DOMAIN_RESERVED
 - 1);

3810  
v˘x
->
	`exp_¸óã_ªs_domaö
(
c⁄ãxt
, 
©å
);

3811 
	}
}

3816 
ölöe
 
	$ibv_exp_de°roy_ªs_domaö
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3817 
ibv_exp_ªs_domaö
 *
ªs_dom
,

3818 
ibv_exp_de°roy_ªs_domaö_©å
 *
©å
)

3820 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3822 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_de°roy_ªs_domaö
);

3823 i‡(!
v˘x
)

3824  
î∫o
 = 
ENOSYS
;

3826 i‡(
©å
)

3827 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3828 
IBV_EXP_DESTROY_RES_DOMAIN_RESERVED
 - 1);

3830  
v˘x
->
	`exp_de°roy_ªs_domaö
(
c⁄ãxt
, 
ªs_dom
, 
©å
);

3831 
	}
}

3844 
ölöe
 *
	$ibv_exp_quîy_ötf
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3845 
ibv_exp_quîy_ötf_∑øms
 *
∑øms
,

3846 
ibv_exp_quîy_ötf_°©us
 *
°©us
)

3848 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3850 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_quîy_ötf
);

3851 i‡(!
v˘x
) {

3852 
î∫o
 = 
ENOSYS
;

3853  
NULL
;

3856 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
∑øms
->
comp_mask
,

3857 
IBV_EXP_QUERY_INTF_RESERVED
 - 1);

3859  
v˘x
->
	`exp_quîy_ötf
(
c⁄ãxt
, 
∑øms
, 
°©us
);

3860 
	}
}

3865 
ölöe
 
	$ibv_exp_ªÀa£_ötf
(
ibv_c⁄ãxt
 *
c⁄ãxt
, *
ötf
,

3866 
ibv_exp_ªÀa£_ötf_∑øms
 *
∑øms
)

3868 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3870 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_ªÀa£_ötf
);

3871 i‡(!
v˘x
)

3872  
î∫o
 = 
ENOSYS
;

3874 i‡(
∑øms
)

3875 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
∑øms
->
comp_mask
,

3876 
IBV_EXP_RELEASE_INTF_RESERVED
 - 1);

3878  
v˘x
->
	`exp_ªÀa£_ötf
(
c⁄ãxt
, 
ötf
, 
∑øms
);

3879 
	}
}

3881 
ölöe
 
ibv_exp_wq
 *
	$ibv_exp_¸óã_wq
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3882 
ibv_exp_wq_öô_©å
 *
wq_öô_©å
)

3884 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3886 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_wq
);

3887 i‡(!
v˘x
) {

3888 
î∫o
 = 
ENOSYS
;

3889  
NULL
;

3892 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
wq_öô_©å
->
comp_mask
,

3893 
IBV_EXP_CREATE_WQ_RESERVED
 - 1);

3895  
v˘x
->
	`exp_¸óã_wq
(
c⁄ãxt
, 
wq_öô_©å
);

3896 
	}
}

3898 
ölöe
 
	$ibv_exp_modify_wq
(
ibv_exp_wq
 *
wq
, 
ibv_exp_wq_©å
 *
wq_©å
)

3900 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3902 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
wq
->
c⁄ãxt
, 
exp_modify_wq
);

3903 i‡(!
v˘x
)

3904  
ENOSYS
;

3906 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
wq_©å
->
©å_mask
,

3907 
IBV_EXP_WQ_ATTR_RESERVED
 - 1);

3908  
v˘x
->
	`exp_modify_wq
(
wq
, 
wq_©å
);

3909 
	}
}

3911 
ölöe
 
	$ibv_exp_de°roy_wq
(
ibv_exp_wq
 *
wq
)

3913 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3915 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
wq
->
c⁄ãxt
, 
exp_de°roy_wq
);

3916 i‡(!
v˘x
)

3917  
ENOSYS
;

3919  
v˘x
->
	`exp_de°roy_wq
(
wq
);

3920 
	}
}

3932 
ölöe
 
ibv_exp_rwq_öd_èbÀ
 *
	$ibv_exp_¸óã_rwq_öd_èbÀ
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3933 
ibv_exp_rwq_öd_èbÀ_öô_©å
 *
öô_©å
)

3935 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3937 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_rwq_öd_èbÀ
);

3938 i‡(!
v˘x
) {

3939 
î∫o
 = 
ENOSYS
;

3940  
NULL
;

3943 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
öô_©å
->
comp_mask
,

3944 
IBV_EXP_CREATE_IND_TABLE_RESERVED
 - 1);

3945  
v˘x
->
	`exp_¸óã_rwq_öd_èbÀ
(
c⁄ãxt
, 
öô_©å
);

3946 
	}
}

3955 
ölöe
 
	$ibv_exp_de°roy_rwq_öd_èbÀ
(
ibv_exp_rwq_öd_èbÀ
 *
rwq_öd_èbÀ
)

3957 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3959 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
rwq_öd_èbÀ
->
c⁄ãxt
, 
exp_de°roy_rwq_öd_èbÀ
);

3960 i‡(!
v˘x
)

3961  
ENOSYS
;

3963  
v˘x
->
	`exp_de°roy_rwq_öd_èbÀ
(
rwq_öd_èbÀ
);

3964 
	}
}

3975 
ölöe
 
	$ibv_exp_quîy_gid_©å
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3976 
uöt8_t
 
p‹t_num
,

3977 
ödex
,

3978 
ibv_exp_gid_©å
 *
©å
)

3980 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3982 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_quîy_gid_©å
);

3983 i‡(!
v˘x
)

3984  
ENOSYS
;

3986 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3987 
IBV_EXP_QUERY_GID_ATTR_RESERVED
 - 1);

3988  
v˘x
->
	`exp_quîy_gid_©å
(
c⁄ãxt
, 
p‹t_num
, 
ödex
, 
©å
);

3989 
	}
}

3998 
ölöe
 
ibv_c⁄ãxt
 *
	$ibv_exp_›í_devi˚
(
ibv_devi˚
 *
devi˚
,

3999 
ibv_exp_›í_devi˚_©å
 *
©å
)

4001 
ibv_c⁄ãxt
 *
c⁄ãxt
;

4002 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4003 
ªt
;

4005 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

4006 
IBV_EXP_SET_CONTEXT_ATTR_RESERVED
 - 1);

4008 i‡(!
©å
->
comp_mask
) {

4009 
î∫o
 = 
EINVAL
;

4010 
out
;

4013 
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
devi˚
);

4014 i‡(!
c⁄ãxt
)

4015 
out
;

4017 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_£t_c⁄ãxt_©å
);

4018 i‡(!
v˘x
) {

4019 
î∫o
 = 
ENOSYS
;

4020 
˛o£
;

4023 
ªt
 = 
v˘x
->
	`drv_exp_£t_c⁄ãxt_©å
(
c⁄ãxt
, 
©å
);

4024 i‡(
ªt
)

4025 
˛o£
;

4027  
c⁄ãxt
;

4029 
˛o£
:

4030 
	`ibv_˛o£_devi˚
(
c⁄ãxt
);

4031 
out
:

4032  
NULL
;

4033 
	}
}

4039 
ölöe
 
	$ibv_exp_po°_§q_›s
(
ibv_§q
 *
§q
,

4040 
ibv_exp_›s_wr
 *
›
,

4041 
ibv_exp_›s_wr
 **
bad_›
)

4043 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4045 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
§q
->
c⁄ãxt
, 
exp_po°_§q_›s
);

4046 i‡(!
v˘x
) {

4047 *
bad_›
 = 
›
;

4048  
ENOSYS
;

4050  
v˘x
->
	`exp_po°_§q_›s
(
§q
, 
›
, 
bad_›
);

4052 
	}
}

4057 
ölöe
 
ibv_exp_dm
 *
	$ibv_exp_Æloc_dm
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

4058 
ibv_exp_Æloc_dm_©å
 *
©å
)

4060 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4062 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

4063 
IBV_EXP_ALLOC_DM_ATTR_RESERVED
 - 1);

4065 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_Æloc_dm
);

4066 i‡(!
v˘x
)

4067  
NULL
;

4069  
v˘x
->
	`exp_Æloc_dm
(
c⁄ãxt
, 
©å
);

4070 
	}
}

4074 
ölöe
 
	$ibv_exp_‰ì_dm
(
ibv_exp_dm
 *
dm
)

4076 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4078 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
dm
->
c⁄ãxt
, 
exp_‰ì_dm
);

4079 i‡(!
v˘x
)

4080  
ENOSYS
;

4082  
v˘x
->
	`exp_‰ì_dm
(
dm
);

4083 
	}
}

4088 
ölöe
 
	$ibv_exp_mem˝y_dm
(
ibv_exp_dm
 *
dm
,

4089 
ibv_exp_mem˝y_dm_©å
 *
©å
)

4091 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4093 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

4094 
IBV_EXP_DM_CPY_COMP_MASK_RESERVED
 - 1);

4096 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
dm
->
c⁄ãxt
, 
exp_mem˝y_dm
);

4097 i‡(!
v˘x
)

4098  
ENOSYS
;

4100  
v˘x
->
	`exp_mem˝y_dm
(
dm
, 
©å
);

4101 
	}
}

4103 
	eibv_exp_tmh_›
 {

4104 
	mIBV_EXP_TMH_NO_TAG
 = 0,

4105 
	mIBV_EXP_TMH_RNDV
 = 1,

4106 
	mIBV_EXP_TMH_FIN
 = 2,

4107 
	mIBV_EXP_TMH_EAGER
 = 3

4110 
	sibv_exp_tmh
 {

4111 
uöt8_t
 
	m›code
;

4112 
uöt8_t
 
	mª£rved
[3];

4113 
uöt32_t
 
	m≠p_˘x
;

4114 
uöt64_t
 
	mèg
;

4117 
	sibv_exp_tmh_rvh
 {

4118 
uöt64_t
 
	mva
;

4119 
uöt32_t
 
	mrkey
;

4120 
uöt32_t
 
	mÀn
;

4123 
	sibv_exp_tmh_øvh
 {

4124 
uöt32_t
 
	m¶_d˘
;

4125 
uöt32_t
 
	mª£rved
;

4126 
uöt64_t
 
	mdc_ac˚ss_key
;

4129 
	gEND_C_DECLS


4131 
	#VERBS_MAX_ENV_VAL
 4096

	)

4133 #unde‡
__©åibuã_c⁄°


	@libibverbs-41mlnx1/src/cmd.c

35 #i‡
HAVE_CONFIG_H


36 
	~<c⁄fig.h
>

39 
	~<°dio.h
>

40 
	~<uni°d.h
>

41 
	~<°dlib.h
>

42 
	~<î∫o.h
>

43 
	~<Æloˇ.h
>

44 
	~<°rög.h
>

46 
	~"ibvîbs.h
"

48 
	eibv_cmd_ty≥
 {

49 
	mIBV_CMD_BASIC
,

50 
	mIBV_CMD_EXTENDED


53 
	$ibv_cmd_gë_c⁄ãxt
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_gë_c⁄ãxt
 *
cmd
,

54 
size_t
 
cmd_size
, 
ibv_gë_c⁄ãxt_ª•
 *
ª•
,

55 
size_t
 
ª•_size
)

57 i‡(
abi_vî
 <= 2)

58  
ENOSYS
;

60 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
GET_CONTEXT
, 
ª•
, 
ª•_size
);

62 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

63  
î∫o
;

65 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

67 
c⁄ãxt
->
async_fd
 = 
ª•
->async_fd;

68 
c⁄ãxt
->
num_comp_ve˘‹s
 = 
ª•
->num_comp_vectors;

71 
	}
}

73 
	$c›y_quîy_dev_fõlds
(
ibv_devi˚_©å
 *
devi˚_©å
,

74 
ibv_quîy_devi˚_ª•
 *
ª•
,

75 
uöt64_t
 *
øw_fw_vî
)

77 *
øw_fw_vî
 = 
ª•
->
fw_vî
;

78 
devi˚_©å
->
node_guid
 = 
ª•
->node_guid;

79 
devi˚_©å
->
sys_image_guid
 = 
ª•
->sys_image_guid;

80 
devi˚_©å
->
max_mr_size
 = 
ª•
->max_mr_size;

81 
devi˚_©å
->
∑ge_size_ˇp
 = 
ª•
->page_size_cap;

82 
devi˚_©å
->
víd‹_id
 = 
ª•
->vendor_id;

83 
devi˚_©å
->
víd‹_∑π_id
 = 
ª•
->vendor_part_id;

84 
devi˚_©å
->
hw_vî
 = 
ª•
->hw_ver;

85 
devi˚_©å
->
max_qp
 = 
ª•
->max_qp;

86 
devi˚_©å
->
max_qp_wr
 = 
ª•
->max_qp_wr;

87 
devi˚_©å
->
devi˚_ˇp_Êags
 = 
ª•
->device_cap_flags;

88 
devi˚_©å
->
max_sge
 = 
ª•
->max_sge;

89 
devi˚_©å
->
max_sge_rd
 = 
ª•
->max_sge_rd;

90 
devi˚_©å
->
max_cq
 = 
ª•
->max_cq;

91 
devi˚_©å
->
max_cqe
 = 
ª•
->max_cqe;

92 
devi˚_©å
->
max_mr
 = 
ª•
->max_mr;

93 
devi˚_©å
->
max_pd
 = 
ª•
->max_pd;

94 
devi˚_©å
->
max_qp_rd_©om
 = 
ª•
->max_qp_rd_atom;

95 
devi˚_©å
->
max_ì_rd_©om
 = 
ª•
->max_ee_rd_atom;

96 
devi˚_©å
->
max_ªs_rd_©om
 = 
ª•
->max_res_rd_atom;

97 
devi˚_©å
->
max_qp_öô_rd_©om
 = 
ª•
->max_qp_init_rd_atom;

98 
devi˚_©å
->
max_ì_öô_rd_©om
 = 
ª•
->max_ee_init_rd_atom;

99 
devi˚_©å
->
©omic_ˇp
 = 
ª•
->atomic_cap;

100 
devi˚_©å
->
max_ì
 = 
ª•
->max_ee;

101 
devi˚_©å
->
max_rdd
 = 
ª•
->max_rdd;

102 
devi˚_©å
->
max_mw
 = 
ª•
->max_mw;

103 
devi˚_©å
->
max_øw_ùv6_qp
 = 
ª•
->max_raw_ipv6_qp;

104 
devi˚_©å
->
max_øw_ëhy_qp
 = 
ª•
->max_raw_ethy_qp;

105 
devi˚_©å
->
max_mˇ°_gΩ
 = 
ª•
->max_mcast_grp;

106 
devi˚_©å
->
max_mˇ°_qp_©èch
 = 
ª•
->max_mcast_qp_attach;

107 
devi˚_©å
->
max_tŸÆ_mˇ°_qp_©èch
 = 
ª•
->max_total_mcast_qp_attach;

108 
devi˚_©å
->
max_ah
 = 
ª•
->max_ah;

109 
devi˚_©å
->
max_fmr
 = 
ª•
->max_fmr;

110 
devi˚_©å
->
max_m≠_≥r_fmr
 = 
ª•
->max_map_per_fmr;

111 
devi˚_©å
->
max_§q
 = 
ª•
->max_srq;

112 
devi˚_©å
->
max_§q_wr
 = 
ª•
->max_srq_wr;

113 
devi˚_©å
->
max_§q_sge
 = 
ª•
->max_srq_sge;

114 
devi˚_©å
->
max_pkeys
 = 
ª•
->max_pkeys;

115 
devi˚_©å
->
loˇl_ˇ_ack_dñay
 = 
ª•
->local_ca_ack_delay;

116 
devi˚_©å
->
phys_p‹t_˙t
 = 
ª•
->phys_port_cnt;

117 
	}
}

119 
	$ibv_cmd_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

120 
ibv_devi˚_©å
 *
devi˚_©å
,

121 
uöt64_t
 *
øw_fw_vî
,

122 
ibv_quîy_devi˚
 *
cmd
, 
size_t
 
cmd_size
)

124 
ibv_quîy_devi˚_ª•
 
ª•
;

126 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
QUERY_DEVICE
, &
ª•
, Ñesp);

128 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

129  
î∫o
;

131 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

132 
	`mem£t
(
devi˚_©å
->
fw_vî
, 0, (device_attr->fw_ver));

133 
	`c›y_quîy_dev_fõlds
(
devi˚_©å
, &
ª•
, 
øw_fw_vî
);

135 
	}
}

137 
	$ibv_cmd_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

138 
ibv_p‹t_©å
 *
p‹t_©å
,

139 
ibv_quîy_p‹t
 *
cmd
, 
size_t
 
cmd_size
)

141 
ibv_quîy_p‹t_ª•
 
ª•
;

143 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
QUERY_PORT
, &
ª•
, Ñesp);

144 
cmd
->
p‹t_num
 =Öort_num;

145 
	`mem£t
(
cmd
->
ª£rved
, 0,  cmd->reserved);

147 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

148  
î∫o
;

150 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

152 
p‹t_©å
->
°©e
 = 
ª•
.state;

153 
p‹t_©å
->
max_mtu
 = 
ª•
.max_mtu;

154 
p‹t_©å
->
a˘ive_mtu
 = 
ª•
.active_mtu;

155 
p‹t_©å
->
gid_tbl_Àn
 = 
ª•
.gid_tbl_len;

156 
p‹t_©å
->
p‹t_ˇp_Êags
 = 
ª•
.port_cap_flags;

157 
p‹t_©å
->
max_msg_sz
 = 
ª•
.max_msg_sz;

158 
p‹t_©å
->
bad_pkey_˙å
 = 
ª•
.bad_pkey_cntr;

159 
p‹t_©å
->
qkey_viﬁ_˙å
 = 
ª•
.qkey_viol_cntr;

160 
p‹t_©å
->
pkey_tbl_Àn
 = 
ª•
.pkey_tbl_len;

161 
p‹t_©å
->
lid
 = 
ª•
.lid;

162 
p‹t_©å
->
sm_lid
 = 
ª•
.sm_lid;

163 
p‹t_©å
->
lmc
 = 
ª•
.lmc;

164 
p‹t_©å
->
max_vl_num
 = 
ª•
.max_vl_num;

165 
p‹t_©å
->
sm_¶
 = 
ª•
.sm_sl;

166 
p‹t_©å
->
sub√t_timeout
 = 
ª•
.subnet_timeout;

167 
p‹t_©å
->
öô_ty≥_ª∂y
 = 
ª•
.init_type_reply;

168 
p‹t_©å
->
a˘ive_width
 = 
ª•
.active_width;

169 
p‹t_©å
->
a˘ive_•ìd
 = 
ª•
.active_speed;

170 
p‹t_©å
->
phys_°©e
 = 
ª•
.phys_state;

171 
p‹t_©å
->
lök_œyî
 = 
ª•
.link_layer;

174 
	}
}

176 
	$ibv_cmd_Æloc_pd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_pd
 *
pd
,

177 
ibv_Æloc_pd
 *
cmd
, 
size_t
 
cmd_size
,

178 
ibv_Æloc_pd_ª•
 *
ª•
, 
size_t
 
ª•_size
)

180 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
ALLOC_PD
, 
ª•
, 
ª•_size
);

182 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

183  
î∫o
;

185 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

187 
pd
->
h™dÀ
 = 
ª•
->
pd_h™dÀ
;

188 
pd
->
c⁄ãxt
 = context;

191 
	}
}

193 
	$ibv_cmd_dóŒoc_pd
(
ibv_pd
 *
pd
)

195 
ibv_dóŒoc_pd
 
cmd
;

197 
	`IBV_INIT_CMD
(&
cmd
,  cmd, 
DEALLOC_PD
);

198 
cmd
.
pd_h™dÀ
 = 
pd
->
h™dÀ
;

200 i‡(
	`wrôe
(
pd
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

201  
î∫o
;

204 
	}
}

206 
	$ibv_cmd_›í_xrcd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
vîbs_xrcd
 *
xrcd
,

207 
vxrcd_size
,

208 
ibv_xrcd_öô_©å
 *
©å
,

209 
ibv_›í_xrcd
 *
cmd
, 
size_t
 
cmd_size
,

210 
ibv_›í_xrcd_ª•
 *
ª•
,

211 
size_t
 
ª•_size
)

213 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
OPEN_XRCD
, 
ª•
, 
ª•_size
);

215 i‡(
©å
->
comp_mask
 >
IBV_XRCD_INIT_ATTR_RESERVED
)

216  
ENOSYS
;

218 i‡(!(
©å
->
comp_mask
 & 
IBV_XRCD_INIT_ATTR_FD
) ||

219 !(
©å
->
comp_mask
 & 
IBV_XRCD_INIT_ATTR_OFLAGS
))

220  
EINVAL
;

222 
cmd
->
fd
 = 
©å
->fd;

223 
cmd
->
oÊags
 = 
©å
->oflags;

224 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

225  
î∫o
;

227 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

229 
xrcd
->xrcd.
c⁄ãxt
 = context;

230 
xrcd
->
comp_mask
 = 0;

231 i‡(
	`vext_fõld_avaû
(
vîbs_xrcd
, 
h™dÀ
, 
vxrcd_size
)) {

232 
xrcd
->
comp_mask
 = 
VERBS_XRCD_HANDLE
;

233 
xrcd
->
h™dÀ
 = 
ª•
->
xrcd_h™dÀ
;

237 
	}
}

239 
	$ibv_cmd_˛o£_xrcd
(
vîbs_xrcd
 *
xrcd
)

241 
ibv_˛o£_xrcd
 
cmd
;

243 
	`IBV_INIT_CMD
(&
cmd
,  cmd, 
CLOSE_XRCD
);

244 
cmd
.
xrcd_h™dÀ
 = 
xrcd
->
h™dÀ
;

246 i‡(
	`wrôe
(
xrcd
->xrcd.
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

247  
î∫o
;

250 
	}
}

252 
	$ibv_cmd_ªg_mr
(
ibv_pd
 *
pd
, *
addr
, 
size_t
 
Àngth
,

253 
uöt64_t
 
hˇ_va
, 
ac˚ss
,

254 
ibv_mr
 *
mr
, 
ibv_ªg_mr
 *
cmd
,

255 
size_t
 
cmd_size
,

256 
ibv_ªg_mr_ª•
 *
ª•
, 
size_t
 
ª•_size
)

259 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
REG_MR
, 
ª•
, 
ª•_size
);

261 
cmd
->
°¨t
 = (
uöçå_t
Ë
addr
;

262 
cmd
->
Àngth
 =Üength;

263 
cmd
->
hˇ_va
 = hca_va;

264 
cmd
->
pd_h™dÀ
 = 
pd
->
h™dÀ
;

265 
cmd
->
ac˚ss_Êags
 = 
ac˚ss
;

267 i‡(
	`wrôe
(
pd
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

268  
î∫o
;

270 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

272 
mr
->
h™dÀ
 = 
ª•
->
mr_h™dÀ
;

273 
mr
->
lkey
 = 
ª•
->lkey;

274 
mr
->
rkey
 = 
ª•
->rkey;

275 
mr
->
c⁄ãxt
 = 
pd
->context;

278 
	}
}

280 
	$ibv_cmd_ªªg_mr
(
ibv_mr
 *
mr
, 
uöt32_t
 
Êags
, *
addr
,

281 
size_t
 
Àngth
, 
uöt64_t
 
hˇ_va
, 
ac˚ss
,

282 
ibv_pd
 *
pd
, 
ibv_ªªg_mr
 *
cmd
,

283 
size_t
 
cmd_sz
, 
ibv_ªªg_mr_ª•
 *
ª•
,

284 
size_t
 
ª•_sz
)

286 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_sz
, 
REREG_MR
, 
ª•
, 
ª•_sz
);

288 
cmd
->
mr_h™dÀ
 = 
mr
->
h™dÀ
;

289 
cmd
->
Êags
 = flags;

290 
cmd
->
°¨t
 = (
uöçå_t
)
addr
;

291 
cmd
->
Àngth
 =Üength;

292 
cmd
->
hˇ_va
 = hca_va;

293 
cmd
->
pd_h™dÀ
 = (
Êags
 & 
IBV_REREG_MR_CHANGE_PD
Ë? 
pd
->
h™dÀ
 : 0;

294 
cmd
->
ac˚ss_Êags
 = 
ac˚ss
;

296 i‡(
	`wrôe
(
mr
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_sz
) != cmd_sz)

297  
î∫o
;

299 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_sz
);

301 
mr
->
lkey
 = 
ª•
->lkey;

302 
mr
->
rkey
 = 
ª•
->rkey;

303 i‡(
Êags
 & 
IBV_REREG_MR_CHANGE_PD
)

304 
mr
->
c⁄ãxt
 = 
pd
->context;

307 
	}
}

309 
	$ibv_cmd_dîeg_mr
(
ibv_mr
 *
mr
)

311 
ibv_dîeg_mr
 
cmd
;

313 
	`IBV_INIT_CMD
(&
cmd
,  cmd, 
DEREG_MR
);

314 
cmd
.
mr_h™dÀ
 = 
mr
->
h™dÀ
;

316 i‡(
	`wrôe
(
mr
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

317  
î∫o
;

320 
	}
}

322 
	$ibv_cmd_Æloc_mw
(
ibv_pd
 *
pd
, 
ibv_mw_ty≥
 
ty≥
,

323 
ibv_mw
 *
mw
, 
ibv_Æloc_mw
 *
cmd
,

324 
size_t
 
cmd_size
,

325 
ibv_Æloc_mw_ª•
 *
ª•
, 
size_t
 
ª•_size
)

327 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
ALLOC_MW
, 
ª•
, 
ª•_size
);

328 
cmd
->
pd_h™dÀ
 = 
pd
->
h™dÀ
;

329 
cmd
->
mw_ty≥
 = 
ty≥
;

330 
	`mem£t
(
cmd
->
ª£rved
, 0, (cmd->reserved));

332 i‡(
	`wrôe
(
pd
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

333  
î∫o
;

335 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

337 
mw
->
c⁄ãxt
 = 
pd
->context;

338 
mw
->
pd
 =Öd;

339 
mw
->
rkey
 = 
ª•
->rkey;

340 
mw
->
h™dÀ
 = 
ª•
->
mw_h™dÀ
;

341 
mw
->
ty≥
 =Åype;

344 
	}
}

346 
	$ibv_cmd_dóŒoc_mw
(
ibv_mw
 *
mw
,

347 
ibv_dóŒoc_mw
 *
cmd
, 
size_t
 
cmd_size
)

349 
	`IBV_INIT_CMD
(
cmd
, 
cmd_size
, 
DEALLOC_MW
);

350 
cmd
->
mw_h™dÀ
 = 
mw
->
h™dÀ
;

351 
cmd
->
ª£rved
 = 0;

353 i‡(
	`wrôe
(
mw
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

354  
î∫o
;

357 
	}
}

359 
	$ibv_cmd_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

360 
ibv_comp_ch™√l
 *
ch™√l
,

361 
comp_ve˘‹
, 
ibv_cq
 *
cq
,

362 
ibv_¸óã_cq
 *
cmd
, 
size_t
 
cmd_size
,

363 
ibv_¸óã_cq_ª•
 *
ª•
, 
size_t
 
ª•_size
)

365 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
CREATE_CQ
, 
ª•
, 
ª•_size
);

366 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
Ë
cq
;

367 
cmd
->
cqe
 = cqe;

368 
cmd
->
comp_ve˘‹
 = comp_vector;

369 
cmd
->
comp_ch™√l
 = 
ch™√l
 ? ch™√l->
fd
 : -1;

370 
cmd
->
ª£rved
 = 0;

372 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

373  
î∫o
;

375 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

377 
cq
->
h™dÀ
 = 
ª•
->
cq_h™dÀ
;

378 
cq
->
cqe
 = 
ª•
->cqe;

379 
cq
->
c⁄ãxt
 = context;

382 
	}
}

384 
	$ibv_cmd_pﬁl_cq
(
ibv_cq
 *
ibcq
, 
√
, 
ibv_wc
 *
wc
)

386 
ibv_pﬁl_cq
 
cmd
;

387 
ibv_pﬁl_cq_ª•
 *
ª•
;

388 
i
;

389 
rsize
;

390 
ªt
;

392 
rsize
 =  *
ª•
 + 
√
 * (
ibv_kîn_wc
);

393 
ª•
 = 
	`mÆloc
(
rsize
);

394 i‡(!
ª•
)

397 
	`IBV_INIT_CMD_RESP
(&
cmd
,  cmd, 
POLL_CQ
, 
ª•
, 
rsize
);

398 
cmd
.
cq_h™dÀ
 = 
ibcq
->
h™dÀ
;

399 
cmd
.
√
 =Çe;

401 i‡(
	`wrôe
(
ibcq
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd) {

402 
ªt
 = -1;

403 
out
;

406 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
rsize
);

408 
i
 = 0; i < 
ª•
->
cou¡
; i++) {

409 
wc
[
i
].
wr_id
 = 
ª•
->wc[i].wr_id;

410 
wc
[
i
].
°©us
 = 
ª•
->wc[i].status;

411 
wc
[
i
].
›code
 = 
ª•
->wc[i].opcode;

412 
wc
[
i
].
víd‹_îr
 = 
ª•
->wc[i].vendor_err;

413 
wc
[
i
].
byã_Àn
 = 
ª•
->wc[i].byte_len;

414 
wc
[
i
].
imm_d©a
 = 
ª•
->wc[i].imm_data;

415 
wc
[
i
].
qp_num
 = 
ª•
->wc[i].qp_num;

416 
wc
[
i
].
§c_qp
 = 
ª•
->wc[i].src_qp;

417 
wc
[
i
].
wc_Êags
 = 
ª•
->wc[i].wc_flags;

418 
wc
[
i
].
pkey_ödex
 = 
ª•
->wc[i].pkey_index;

419 
wc
[
i
].
¶id
 = 
ª•
->wc[i].slid;

420 
wc
[
i
].
¶
 = 
ª•
->wc[i].sl;

421 
wc
[
i
].
dlid_∑th_bôs
 = 
ª•
->wc[i].dlid_path_bits;

424 
ªt
 = 
ª•
->
cou¡
;

426 
out
:

427 
	`‰ì
(
ª•
);

428  
ªt
;

429 
	}
}

431 
	$ibv_cmd_ªq_nŸify_cq
(
ibv_cq
 *
ibcq
, 
sﬁicôed_⁄ly
)

433 
ibv_ªq_nŸify_cq
 
cmd
;

435 
	`IBV_INIT_CMD
(&
cmd
,  cmd, 
REQ_NOTIFY_CQ
);

436 
cmd
.
cq_h™dÀ
 = 
ibcq
->
h™dÀ
;

437 
cmd
.
sﬁicôed
 = !!
sﬁicôed_⁄ly
;

439 i‡(
	`wrôe
(
ibcq
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

440  
î∫o
;

443 
	}
}

445 
	$ibv_cmd_ªsize_cq
(
ibv_cq
 *
cq
, 
cqe
,

446 
ibv_ªsize_cq
 *
cmd
, 
size_t
 
cmd_size
,

447 
ibv_ªsize_cq_ª•
 *
ª•
, 
size_t
 
ª•_size
)

449 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
RESIZE_CQ
, 
ª•
, 
ª•_size
);

450 
cmd
->
cq_h™dÀ
 = 
cq
->
h™dÀ
;

451 
cmd
->
cqe
 = cqe;

453 i‡(
	`wrôe
(
cq
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

454  
î∫o
;

456 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

458 
cq
->
cqe
 = 
ª•
->cqe;

461 
	}
}

463 
	$ibv_cmd_de°roy_cq
(
ibv_cq
 *
cq
)

465 
ibv_de°roy_cq
 
cmd
;

466 
ibv_de°roy_cq_ª•
 
ª•
;

468 
	`IBV_INIT_CMD_RESP
(&
cmd
,  cmd, 
DESTROY_CQ
, &
ª•
, Ñesp);

469 
cmd
.
cq_h™dÀ
 = 
cq
->
h™dÀ
;

470 
cmd
.
ª£rved
 = 0;

472 i‡(
	`wrôe
(
cq
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

473  
î∫o
;

475 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

477 
	`±hªad_muãx_lock
(&
cq
->
muãx
);

478 
cq
->
comp_evíts_com∂ëed
 !
ª•
.
comp_evíts_ªp‹ãd
 ||

479 
cq
->
async_evíts_com∂ëed
 !
ª•
.
async_evíts_ªp‹ãd
)

480 
	`±hªad_c⁄d_waô
(&
cq
->
c⁄d
, &cq->
muãx
);

481 
	`±hªad_muãx_u∆ock
(&
cq
->
muãx
);

484 
	}
}

486 
	$ibv_cmd_¸óã_§q
(
ibv_pd
 *
pd
,

487 
ibv_§q
 *
§q
, 
ibv_§q_öô_©å
 *
©å
,

488 
ibv_¸óã_§q
 *
cmd
, 
size_t
 
cmd_size
,

489 
ibv_¸óã_§q_ª•
 *
ª•
, 
size_t
 
ª•_size
)

491 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
CREATE_SRQ
, 
ª•
, 
ª•_size
);

492 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
Ë
§q
;

493 
cmd
->
pd_h™dÀ
 = 
pd
->
h™dÀ
;

494 
cmd
->
max_wr
 = 
©å
->attr.max_wr;

495 
cmd
->
max_sge
 = 
©å
->attr.max_sge;

496 
cmd
->
§q_limô
 = 
©å
->attr.srq_limit;

498 i‡(
	`wrôe
(
pd
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

499  
î∫o
;

501 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

503 
§q
->
h™dÀ
 = 
ª•
->
§q_h™dÀ
;

504 
§q
->
c⁄ãxt
 = 
pd
->context;

506 i‡(
abi_vî
 > 5) {

507 
©å
->©å.
max_wr
 = 
ª•
->max_wr;

508 
©å
->©å.
max_sge
 = 
ª•
->max_sge;

510 
ibv_¸óã_§q_ª•_v5
 *
ª•_v5
 =

511 (
ibv_¸óã_§q_ª•_v5
 *Ë
ª•
;

513 
	`memmove
((*Ë
ª•
 +  *resp,

514 (*Ë
ª•_v5
 +  *resp_v5,

515 
ª•_size
 -  *
ª•
);

519 
	}
}

521 
	$ibv_cmd_¸óã_§q_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

522 
vîbs_§q
 *
§q
, 
v§q_sz
,

523 
ibv_§q_öô_©å_ex
 *
©å_ex
,

524 
ibv_¸óã_x§q
 *
cmd
, 
size_t
 
cmd_size
,

525 
ibv_¸óã_§q_ª•
 *
ª•
, 
size_t
 
ª•_size
)

527 
vîbs_xrcd
 *
vxrcd
 = 
NULL
;

529 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
CREATE_XSRQ
, 
ª•
, 
ª•_size
);

531 i‡(
©å_ex
->
comp_mask
 >
IBV_SRQ_INIT_ATTR_RESERVED
)

532  
ENOSYS
;

534 i‡(!(
©å_ex
->
comp_mask
 & 
IBV_SRQ_INIT_ATTR_PD
))

535  
EINVAL
;

537 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
Ë
§q
;

538 
cmd
->
pd_h™dÀ
 = 
©å_ex
->
pd
->
h™dÀ
;

539 
cmd
->
max_wr
 = 
©å_ex
->
©å
.max_wr;

540 
cmd
->
max_sge
 = 
©å_ex
->
©å
.max_sge;

541 
cmd
->
§q_limô
 = 
©å_ex
->
©å
.srq_limit;

543 
cmd
->
§q_ty≥
 = (
©å_ex
->
comp_mask
 & 
IBV_SRQ_INIT_ATTR_TYPE
) ?

544 
©å_ex
->
§q_ty≥
 : 
IBV_SRQT_BASIC
;

545 i‡(
©å_ex
->
comp_mask
 & 
IBV_SRQ_INIT_ATTR_XRCD
) {

546 i‡(!(
©å_ex
->
comp_mask
 & 
IBV_SRQ_INIT_ATTR_CQ
))

547  
EINVAL
;

549 
vxrcd
 = 
	`c⁄èöî_of
(
©å_ex
->
xrcd
, 
vîbs_xrcd
, xrcd);

550 
cmd
->
xrcd_h™dÀ
 = 
vxrcd
->
h™dÀ
;

551 
cmd
->
cq_h™dÀ
 = 
©å_ex
->
cq
->
h™dÀ
;

554 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

555  
î∫o
;

557 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

559 
§q
->§q.
h™dÀ
 = 
ª•
->
§q_h™dÀ
;

560 
§q
->§q.
c⁄ãxt
 = context;

561 
§q
->§q.
§q_c⁄ãxt
 = 
©å_ex
->srq_context;

562 
§q
->§q.
pd
 = 
©å_ex
->pd;

563 
§q
->§q.
evíts_com∂ëed
 = 0;

564 
	`±hªad_muãx_öô
(&
§q
->§q.
muãx
, 
NULL
);

565 
	`±hªad_c⁄d_öô
(&
§q
->§q.
c⁄d
, 
NULL
);

571 i‡(
	`vext_fõld_avaû
(
vîbs_§q
, 
§q_num
, 
v§q_sz
)) {

572 
§q
->
comp_mask
 = 
IBV_SRQ_INIT_ATTR_TYPE
;

573 
§q
->
§q_ty≥
 = (
©å_ex
->
comp_mask
 & 
IBV_SRQ_INIT_ATTR_TYPE
) ?

574 
©å_ex
->
§q_ty≥
 : 
IBV_SRQT_BASIC
;

576 i‡(
§q
->
§q_ty≥
 =
IBV_SRQT_XRC
) {

577 
§q
->
comp_mask
 |
VERBS_SRQ_NUM
;

578 
§q
->
§q_num
 = 
ª•
->
§qn
;

581 i‡(
©å_ex
->
comp_mask
 & 
IBV_SRQ_INIT_ATTR_XRCD
) {

582 
§q
->
comp_mask
 |
VERBS_SRQ_XRCD
;

583 
§q
->
xrcd
 = 
vxrcd
;

586 i‡(
©å_ex
->
comp_mask
 & 
IBV_SRQ_INIT_ATTR_CQ
) {

587 
§q
->
comp_mask
 |
VERBS_SRQ_CQ
;

588 
§q
->
cq
 = 
©å_ex
->cq;

592 
©å_ex
->
©å
.
max_wr
 = 
ª•
->max_wr;

593 
©å_ex
->
©å
.
max_sge
 = 
ª•
->max_sge;

596 
	}
}

599 
	$ibv_cmd_modify_§q_v3
(
ibv_§q
 *
§q
,

600 
ibv_§q_©å
 *
§q_©å
,

601 
§q_©å_mask
,

602 
ibv_modify_§q
 *
√w_cmd
,

603 
size_t
 
√w_cmd_size
)

605 
ibv_modify_§q_v3
 *
cmd
;

606 
size_t
 
cmd_size
;

608 
cmd_size
 =  *
cmd
 + 
√w_cmd_size
 -  *
√w_cmd
;

609 
cmd
 = 
	`Æloˇ
(
cmd_size
);

610 
	`mem˝y
(
cmd
->
drivî_d©a
, 
√w_cmd
->drivî_d©a, 
√w_cmd_size
 -  *new_cmd);

612 
	`IBV_INIT_CMD
(
cmd
, 
cmd_size
, 
MODIFY_SRQ
);

614 
cmd
->
§q_h™dÀ
 = 
§q
->
h™dÀ
;

615 
cmd
->
©å_mask
 = 
§q_©å_mask
;

616 
cmd
->
max_wr
 = 
§q_©å
->max_wr;

617 
cmd
->
§q_limô
 = 
§q_©å
->srq_limit;

618 
cmd
->
max_sge
 = 0;

619 
cmd
->
ª£rved
 = 0;

621 i‡(
	`wrôe
(
§q
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

622  
î∫o
;

625 
	}
}

627 
	$ibv_cmd_modify_§q
(
ibv_§q
 *
§q
,

628 
ibv_§q_©å
 *
§q_©å
,

629 
§q_©å_mask
,

630 
ibv_modify_§q
 *
cmd
, 
size_t
 
cmd_size
)

632 i‡(
abi_vî
 == 3)

633  
	`ibv_cmd_modify_§q_v3
(
§q
, 
§q_©å
, 
§q_©å_mask
,

634 
cmd
, 
cmd_size
);

636 
	`IBV_INIT_CMD
(
cmd
, 
cmd_size
, 
MODIFY_SRQ
);

638 
cmd
->
§q_h™dÀ
 = 
§q
->
h™dÀ
;

639 
cmd
->
©å_mask
 = 
§q_©å_mask
;

640 
cmd
->
max_wr
 = 
§q_©å
->max_wr;

641 
cmd
->
§q_limô
 = 
§q_©å
->srq_limit;

643 i‡(
	`wrôe
(
§q
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

644  
î∫o
;

647 
	}
}

649 
	$ibv_cmd_quîy_§q
(
ibv_§q
 *
§q
, 
ibv_§q_©å
 *
§q_©å
,

650 
ibv_quîy_§q
 *
cmd
, 
size_t
 
cmd_size
)

652 
ibv_quîy_§q_ª•
 
ª•
;

654 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
QUERY_SRQ
, &
ª•
, Ñesp);

655 
cmd
->
§q_h™dÀ
 = 
§q
->
h™dÀ
;

656 
cmd
->
ª£rved
 = 0;

658 i‡(
	`wrôe
(
§q
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

659  
î∫o
;

661 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

663 
§q_©å
->
max_wr
 = 
ª•
.max_wr;

664 
§q_©å
->
max_sge
 = 
ª•
.max_sge;

665 
§q_©å
->
§q_limô
 = 
ª•
.srq_limit;

668 
	}
}

670 
	$ibv_cmd_de°roy_§q
(
ibv_§q
 *
§q
)

672 
ibv_de°roy_§q
 
cmd
;

673 
ibv_de°roy_§q_ª•
 
ª•
;

675 
	`IBV_INIT_CMD_RESP
(&
cmd
,  cmd, 
DESTROY_SRQ
, &
ª•
, Ñesp);

676 
cmd
.
§q_h™dÀ
 = 
§q
->
h™dÀ
;

677 
cmd
.
ª£rved
 = 0;

679 i‡(
	`wrôe
(
§q
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

680  
î∫o
;

682 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

684 
	`±hªad_muãx_lock
(&
§q
->
muãx
);

685 
§q
->
evíts_com∂ëed
 !
ª•
.
evíts_ªp‹ãd
)

686 
	`±hªad_c⁄d_waô
(&
§q
->
c⁄d
, &§q->
muãx
);

687 
	`±hªad_muãx_u∆ock
(&
§q
->
muãx
);

690 
	}
}

692 
	$ibv_cmd_¸óã_qp
(
ibv_pd
 *
pd
,

693 
ibv_qp
 *
qp
, 
ibv_qp_öô_©å
 *
©å
,

694 
ibv_¸óã_qp
 *
cmd
, 
size_t
 
cmd_size
,

695 
ibv_¸óã_qp_ª•
 *
ª•
, 
size_t
 
ª•_size
)

697 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
CREATE_QP
, 
ª•
, 
ª•_size
);

699 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
Ë
qp
;

700 
cmd
->
pd_h™dÀ
 = 
pd
->
h™dÀ
;

701 
cmd
->
£nd_cq_h™dÀ
 = 
©å
->
£nd_cq
->
h™dÀ
;

702 
cmd
->
ªcv_cq_h™dÀ
 = 
©å
->
ªcv_cq
->
h™dÀ
;

703 
cmd
->
§q_h™dÀ
 = 
©å
->
§q
 ?áâr->§q->
h™dÀ
 : 0;

704 
cmd
->
max_£nd_wr
 = 
©å
->
ˇp
.max_send_wr;

705 
cmd
->
max_ªcv_wr
 = 
©å
->
ˇp
.max_recv_wr;

706 
cmd
->
max_£nd_sge
 = 
©å
->
ˇp
.max_send_sge;

707 
cmd
->
max_ªcv_sge
 = 
©å
->
ˇp
.max_recv_sge;

708 
cmd
->
max_ölöe_d©a
 = 
©å
->
ˇp
.max_inline_data;

709 
cmd
->
sq_sig_Æl
 = 
©å
->sq_sig_all;

710 
cmd
->
qp_ty≥
 = 
©å
->qp_type;

711 
cmd
->
is_§q
 = !!
©å
->
§q
;

712 
cmd
->
ª£rved
 = 0;

714 i‡(
	`wrôe
(
pd
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

715  
î∫o
;

717 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

719 
qp
->
h™dÀ
 = 
ª•
->
qp_h™dÀ
;

720 
qp
->
qp_num
 = 
ª•
->
q≤
;

721 
qp
->
c⁄ãxt
 = 
pd
->context;

723 i‡(
abi_vî
 > 3) {

724 
©å
->
ˇp
.
max_ªcv_sge
 = 
ª•
->max_recv_sge;

725 
©å
->
ˇp
.
max_£nd_sge
 = 
ª•
->max_send_sge;

726 
©å
->
ˇp
.
max_ªcv_wr
 = 
ª•
->max_recv_wr;

727 
©å
->
ˇp
.
max_£nd_wr
 = 
ª•
->max_send_wr;

728 
©å
->
ˇp
.
max_ölöe_d©a
 = 
ª•
->max_inline_data;

731 i‡(
abi_vî
 == 4) {

732 
ibv_¸óã_qp_ª•_v4
 *
ª•_v4
 =

733 (
ibv_¸óã_qp_ª•_v4
 *Ë
ª•
;

735 
	`memmove
((*Ë
ª•
 +  *resp,

736 (*Ë
ª•_v4
 +  *resp_v4,

737 
ª•_size
 -  *
ª•
);

738 } i‡(
abi_vî
 <= 3) {

739 
ibv_¸óã_qp_ª•_v3
 *
ª•_v3
 =

740 (
ibv_¸óã_qp_ª•_v3
 *Ë
ª•
;

742 
	`memmove
((*Ë
ª•
 +  *resp,

743 (*Ë
ª•_v3
 +  *resp_v3,

744 
ª•_size
 -  *
ª•
);

748 
	}
}

750 
	$ibv_cmd_›í_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
vîbs_qp
 *
qp
,

751 
vqp_sz
,

752 
ibv_qp_›í_©å
 *
©å
,

753 
ibv_›í_qp
 *
cmd
, 
size_t
 
cmd_size
,

754 
ibv_¸óã_qp_ª•
 *
ª•
, 
size_t
 
ª•_size
)

756 
vîbs_xrcd
 *
xrcd
;

757 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
OPEN_QP
, 
ª•
, 
ª•_size
);

759 i‡(
©å
->
comp_mask
 >
IBV_QP_OPEN_ATTR_RESERVED
)

760  
ENOSYS
;

762 i‡(!(
©å
->
comp_mask
 & 
IBV_QP_OPEN_ATTR_XRCD
) ||

763 !(
©å
->
comp_mask
 & 
IBV_QP_OPEN_ATTR_NUM
) ||

764 !(
©å
->
comp_mask
 & 
IBV_QP_OPEN_ATTR_TYPE
))

765  
EINVAL
;

767 
xrcd
 = 
	`c⁄èöî_of
(
©å
->xrcd, 
vîbs_xrcd
, xrcd);

768 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
Ë
qp
;

769 
cmd
->
pd_h™dÀ
 = 
xrcd
->
h™dÀ
;

770 
cmd
->
q≤
 = 
©å
->
qp_num
;

771 
cmd
->
qp_ty≥
 = 
©å
->qp_type;

773 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

774  
î∫o
;

776 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

778 
qp
->qp.
h™dÀ
 = 
ª•
->
qp_h™dÀ
;

779 
qp
->qp.
c⁄ãxt
 = context;

780 
qp
->qp.
qp_c⁄ãxt
 = 
©å
->qp_context;

781 
qp
->qp.
pd
 = 
NULL
;

782 
qp
->qp.
£nd_cq
 = qp->qp.
ªcv_cq
 = 
NULL
;

783 
qp
->qp.
§q
 = 
NULL
;

784 
qp
->qp.
qp_num
 = 
©å
->qp_num;

785 
qp
->qp.
qp_ty≥
 = 
©å
->qp_type;

786 
qp
->qp.
°©e
 = 
IBV_QPS_UNKNOWN
;

787 
qp
->qp.
evíts_com∂ëed
 = 0;

788 
	`±hªad_muãx_öô
(&
qp
->qp.
muãx
, 
NULL
);

789 
	`±hªad_c⁄d_öô
(&
qp
->qp.
c⁄d
, 
NULL
);

791 
qp
->
comp_mask
 = 0;

792 i‡(
	`vext_fõld_avaû
(
vîbs_qp
, 
xrcd
, 
vqp_sz
)) {

793 
qp
->
comp_mask
 |
VERBS_QP_XRCD
;

794 
qp
->
xrcd
 = xrcd;

798 
	}
}

800 
	$ibv_cmd_quîy_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

801 
©å_mask
,

802 
ibv_qp_öô_©å
 *
öô_©å
,

803 
ibv_quîy_qp
 *
cmd
, 
size_t
 
cmd_size
)

805 
ibv_quîy_qp_ª•
 
ª•
;

807 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
QUERY_QP
, &
ª•
, Ñesp);

808 
cmd
->
qp_h™dÀ
 = 
qp
->
h™dÀ
;

809 
cmd
->
©å_mask
 =áttr_mask;

811 i‡(
	`wrôe
(
qp
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

812  
î∫o
;

814 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

816 
©å
->
qkey
 = 
ª•
.qkey;

817 
©å
->
rq_p¢
 = 
ª•
.rq_psn;

818 
©å
->
sq_p¢
 = 
ª•
.sq_psn;

819 
©å
->
de°_qp_num
 = 
ª•
.dest_qp_num;

820 
©å
->
qp_ac˚ss_Êags
 = 
ª•
.qp_access_flags;

821 
©å
->
pkey_ödex
 = 
ª•
.pkey_index;

822 
©å
->
Æt_pkey_ödex
 = 
ª•
.alt_pkey_index;

823 
©å
->
qp_°©e
 = 
ª•
.qp_state;

824 
©å
->
cur_qp_°©e
 = 
ª•
.cur_qp_state;

825 
©å
->
∑th_mtu
 = 
ª•
.path_mtu;

826 
©å
->
∑th_mig_°©e
 = 
ª•
.path_mig_state;

827 
©å
->
sq_døöög
 = 
ª•
.sq_draining;

828 
©å
->
max_rd_©omic
 = 
ª•
.max_rd_atomic;

829 
©å
->
max_de°_rd_©omic
 = 
ª•
.max_dest_rd_atomic;

830 
©å
->
mö_∫r_timî
 = 
ª•
.min_rnr_timer;

831 
©å
->
p‹t_num
 = 
ª•
.port_num;

832 
©å
->
timeout
 = 
ª•
.timeout;

833 
©å
->
ªåy_˙t
 = 
ª•
.retry_cnt;

834 
©å
->
∫r_ªåy
 = 
ª•
.rnr_retry;

835 
©å
->
Æt_p‹t_num
 = 
ª•
.alt_port_num;

836 
©å
->
Æt_timeout
 = 
ª•
.alt_timeout;

837 
©å
->
ˇp
.
max_£nd_wr
 = 
ª•
.max_send_wr;

838 
©å
->
ˇp
.
max_ªcv_wr
 = 
ª•
.max_recv_wr;

839 
©å
->
ˇp
.
max_£nd_sge
 = 
ª•
.max_send_sge;

840 
©å
->
ˇp
.
max_ªcv_sge
 = 
ª•
.max_recv_sge;

841 
©å
->
ˇp
.
max_ölöe_d©a
 = 
ª•
.max_inline_data;

843 
	`mem˝y
(
©å
->
ah_©å
.
grh
.
dgid
.
øw
, 
ª•
.
de°
.dgid, 16);

844 
©å
->
ah_©å
.
grh
.
Êow_œbñ
 = 
ª•
.
de°
.flow_label;

845 
©å
->
ah_©å
.
dlid
 = 
ª•
.
de°
.dlid;

846 
©å
->
ah_©å
.
grh
.
sgid_ödex
 = 
ª•
.
de°
.sgid_index;

847 
©å
->
ah_©å
.
grh
.
h›_limô
 = 
ª•
.
de°
.hop_limit;

848 
©å
->
ah_©å
.
grh
.
åaffic_˛ass
 = 
ª•
.
de°
.traffic_class;

849 
©å
->
ah_©å
.
¶
 = 
ª•
.
de°
.sl;

850 
©å
->
ah_©å
.
§c_∑th_bôs
 = 
ª•
.
de°
.src_path_bits;

851 
©å
->
ah_©å
.
°©ic_øã
 = 
ª•
.
de°
.static_rate;

852 
©å
->
ah_©å
.
is_globÆ
 = 
ª•
.
de°
.is_global;

853 
©å
->
ah_©å
.
p‹t_num
 = 
ª•
.
de°
.port_num;

855 
	`mem˝y
(
©å
->
Æt_ah_©å
.
grh
.
dgid
.
øw
, 
ª•
.
Æt_de°
.dgid, 16);

856 
©å
->
Æt_ah_©å
.
grh
.
Êow_œbñ
 = 
ª•
.
Æt_de°
.flow_label;

857 
©å
->
Æt_ah_©å
.
dlid
 = 
ª•
.
Æt_de°
.dlid;

858 
©å
->
Æt_ah_©å
.
grh
.
sgid_ödex
 = 
ª•
.
Æt_de°
.sgid_index;

859 
©å
->
Æt_ah_©å
.
grh
.
h›_limô
 = 
ª•
.
Æt_de°
.hop_limit;

860 
©å
->
Æt_ah_©å
.
grh
.
åaffic_˛ass
 = 
ª•
.
Æt_de°
.traffic_class;

861 
©å
->
Æt_ah_©å
.
¶
 = 
ª•
.
Æt_de°
.sl;

862 
©å
->
Æt_ah_©å
.
§c_∑th_bôs
 = 
ª•
.
Æt_de°
.src_path_bits;

863 
©å
->
Æt_ah_©å
.
°©ic_øã
 = 
ª•
.
Æt_de°
.static_rate;

864 
©å
->
Æt_ah_©å
.
is_globÆ
 = 
ª•
.
Æt_de°
.is_global;

865 
©å
->
Æt_ah_©å
.
p‹t_num
 = 
ª•
.
Æt_de°
.port_num;

867 
öô_©å
->
qp_c⁄ãxt
 = 
qp
->qp_context;

868 
öô_©å
->
£nd_cq
 = 
qp
->send_cq;

869 
öô_©å
->
ªcv_cq
 = 
qp
->recv_cq;

870 
öô_©å
->
§q
 = 
qp
->srq;

871 
öô_©å
->
qp_ty≥
 = 
qp
->qp_type;

872 
öô_©å
->
ˇp
.
max_£nd_wr
 = 
ª•
.max_send_wr;

873 
öô_©å
->
ˇp
.
max_ªcv_wr
 = 
ª•
.max_recv_wr;

874 
öô_©å
->
ˇp
.
max_£nd_sge
 = 
ª•
.max_send_sge;

875 
öô_©å
->
ˇp
.
max_ªcv_sge
 = 
ª•
.max_recv_sge;

876 
öô_©å
->
ˇp
.
max_ölöe_d©a
 = 
ª•
.max_inline_data;

877 
öô_©å
->
sq_sig_Æl
 = 
ª•
.sq_sig_all;

878 
qp
->
°©e
 = 
©å
->
cur_qp_°©e
;

881 
	}
}

883 
	$ibv_cmd_modify_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

884 
©å_mask
,

885 
ibv_modify_qp
 *
cmd
, 
size_t
 
cmd_size
)

887 
	`IBV_INIT_CMD
(
cmd
, 
cmd_size
, 
MODIFY_QP
);

889 
cmd
->
qp_h™dÀ
 = 
qp
->
h™dÀ
;

890 
cmd
->
©å_mask
 =áttr_mask;

891 
cmd
->
qkey
 = 
©å
->qkey;

892 
cmd
->
rq_p¢
 = 
©å
->rq_psn;

893 
cmd
->
sq_p¢
 = 
©å
->sq_psn;

894 
cmd
->
de°_qp_num
 = 
©å
->dest_qp_num;

895 
cmd
->
qp_ac˚ss_Êags
 = 
©å
->qp_access_flags;

896 
cmd
->
pkey_ödex
 = 
©å
->pkey_index;

897 
cmd
->
Æt_pkey_ödex
 = 
©å
->alt_pkey_index;

898 
cmd
->
qp_°©e
 = 
©å
->qp_state;

899 
cmd
->
cur_qp_°©e
 = 
©å
->cur_qp_state;

900 
cmd
->
∑th_mtu
 = 
©å
->path_mtu;

901 
cmd
->
∑th_mig_°©e
 = 
©å
->path_mig_state;

902 
cmd
->
í_sqd_async_nŸify
 = 
©å
->en_sqd_async_notify;

903 
cmd
->
max_rd_©omic
 = 
©å
->max_rd_atomic;

904 
cmd
->
max_de°_rd_©omic
 = 
©å
->max_dest_rd_atomic;

905 
cmd
->
mö_∫r_timî
 = 
©å
->min_rnr_timer;

906 
cmd
->
p‹t_num
 = 
©å
->port_num;

907 
cmd
->
timeout
 = 
©å
->timeout;

908 
cmd
->
ªåy_˙t
 = 
©å
->retry_cnt;

909 
cmd
->
∫r_ªåy
 = 
©å
->rnr_retry;

910 
cmd
->
Æt_p‹t_num
 = 
©å
->alt_port_num;

911 
cmd
->
Æt_timeout
 = 
©å
->alt_timeout;

913 
	`mem˝y
(
cmd
->
de°
.
dgid
, 
©å
->
ah_©å
.
grh
.dgid.
øw
, 16);

914 
cmd
->
de°
.
Êow_œbñ
 = 
©å
->
ah_©å
.
grh
.flow_label;

915 
cmd
->
de°
.
dlid
 = 
©å
->
ah_©å
.dlid;

916 
cmd
->
de°
.
ª£rved
 = 0;

917 
cmd
->
de°
.
sgid_ödex
 = 
©å
->
ah_©å
.
grh
.sgid_index;

918 
cmd
->
de°
.
h›_limô
 = 
©å
->
ah_©å
.
grh
.hop_limit;

919 
cmd
->
de°
.
åaffic_˛ass
 = 
©å
->
ah_©å
.
grh
.traffic_class;

920 
cmd
->
de°
.
¶
 = 
©å
->
ah_©å
.sl;

921 
cmd
->
de°
.
§c_∑th_bôs
 = 
©å
->
ah_©å
.src_path_bits;

922 
cmd
->
de°
.
°©ic_øã
 = 
©å
->
ah_©å
.static_rate;

923 
cmd
->
de°
.
is_globÆ
 = 
©å
->
ah_©å
.is_global;

924 
cmd
->
de°
.
p‹t_num
 = 
©å
->
ah_©å
.port_num;

926 
	`mem˝y
(
cmd
->
Æt_de°
.
dgid
, 
©å
->
Æt_ah_©å
.
grh
.dgid.
øw
, 16);

927 
cmd
->
Æt_de°
.
Êow_œbñ
 = 
©å
->
Æt_ah_©å
.
grh
.flow_label;

928 
cmd
->
Æt_de°
.
dlid
 = 
©å
->
Æt_ah_©å
.dlid;

929 
cmd
->
Æt_de°
.
ª£rved
 = 0;

930 
cmd
->
Æt_de°
.
sgid_ödex
 = 
©å
->
Æt_ah_©å
.
grh
.sgid_index;

931 
cmd
->
Æt_de°
.
h›_limô
 = 
©å
->
Æt_ah_©å
.
grh
.hop_limit;

932 
cmd
->
Æt_de°
.
åaffic_˛ass
 = 
©å
->
Æt_ah_©å
.
grh
.traffic_class;

933 
cmd
->
Æt_de°
.
¶
 = 
©å
->
Æt_ah_©å
.sl;

934 
cmd
->
Æt_de°
.
§c_∑th_bôs
 = 
©å
->
Æt_ah_©å
.src_path_bits;

935 
cmd
->
Æt_de°
.
°©ic_øã
 = 
©å
->
Æt_ah_©å
.static_rate;

936 
cmd
->
Æt_de°
.
is_globÆ
 = 
©å
->
Æt_ah_©å
.is_global;

937 
cmd
->
Æt_de°
.
p‹t_num
 = 
©å
->
Æt_ah_©å
.port_num;

939 
cmd
->
ª£rved
[0] = cmd->reserved[1] = 0;

941 i‡(
	`wrôe
(
qp
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

942  
î∫o
;

944 i‡(
©å_mask
 & 
IBV_QP_STATE
)

945 
qp
->
°©e
 = 
©å
->
qp_°©e
;

948 
	}
}

950 
	$ibv_cmd_po°_£nd
(
ibv_qp
 *
ibqp
, 
ibv_£nd_wr
 *
wr
,

951 
ibv_£nd_wr
 **
bad_wr
)

953 
ibv_po°_£nd
 *
cmd
;

954 
ibv_po°_£nd_ª•
 
ª•
;

955 
ibv_£nd_wr
 *
i
;

956 
ibv_kîn_£nd_wr
 *
n
, *
tmp
;

957 
ibv_sge
 *
s
;

958 
wr_cou¡
 = 0;

959 
sge_cou¡
 = 0;

960 
cmd_size
;

961 
ªt
 = 0;

963 
i
 = 
wr
; i; i = i->
√xt
) {

964 
wr_cou¡
++;

965 
sge_cou¡
 +
i
->
num_sge
;

968 
cmd_size
 =  *
cmd
 + 
wr_cou¡
 *  *
n
 + 
sge_cou¡
 *  *
s
;

969 
cmd
 = 
	`Æloˇ
(
cmd_size
);

971 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
POST_SEND
, &
ª•
, Ñesp);

972 
cmd
->
qp_h™dÀ
 = 
ibqp
->
h™dÀ
;

973 
cmd
->
wr_cou¡
 = wr_count;

974 
cmd
->
sge_cou¡
 = sge_count;

975 
cmd
->
wqe_size
 =  *
n
;

977 
n
 = (
ibv_kîn_£nd_wr
 *Ë((*Ë
cmd
 +  *cmd);

978 
s
 = (
ibv_sge
 *Ë(
n
 + 
wr_cou¡
);

980 
tmp
 = 
n
;

981 
i
 = 
wr
; i; i = i->
√xt
) {

982 
tmp
->
wr_id
 = 
i
->wr_id;

983 
tmp
->
num_sge
 = 
i
->num_sge;

984 
tmp
->
›code
 = 
i
->opcode;

985 
tmp
->
£nd_Êags
 = 
i
->send_flags;

986 
tmp
->
imm_d©a
 = 
i
->imm_data;

987 i‡(
ibqp
->
qp_ty≥
 =
IBV_QPT_UD
) {

988 
tmp
->
wr
.
ud
.
ah
 = 
i
->wr.ud.ah->
h™dÀ
;

989 
tmp
->
wr
.
ud
.
ªmŸe_q≤
 = 
i
->wr.ud.remote_qpn;

990 
tmp
->
wr
.
ud
.
ªmŸe_qkey
 = 
i
->wr.ud.remote_qkey;

992 
i
->
›code
) {

993 
IBV_WR_RDMA_WRITE
:

994 
IBV_WR_RDMA_WRITE_WITH_IMM
:

995 
IBV_WR_RDMA_READ
:

996 
tmp
->
wr
.
rdma
.
ªmŸe_addr
 =

997 
i
->
wr
.
rdma
.
ªmŸe_addr
;

998 
tmp
->
wr
.
rdma
.
rkey
 = 
i
->wr.rdma.rkey;

1000 
IBV_WR_ATOMIC_CMP_AND_SWP
:

1001 
IBV_WR_ATOMIC_FETCH_AND_ADD
:

1002 
tmp
->
wr
.
©omic
.
ªmŸe_addr
 =

1003 
i
->
wr
.
©omic
.
ªmŸe_addr
;

1004 
tmp
->
wr
.
©omic
.
com∑ª_add
 =

1005 
i
->
wr
.
©omic
.
com∑ª_add
;

1006 
tmp
->
wr
.
©omic
.
sw≠
 = 
i
->wr.atomic.swap;

1007 
tmp
->
wr
.
©omic
.
rkey
 = 
i
->wr.atomic.rkey;

1014 i‡(
tmp
->
num_sge
) {

1015 
	`mem˝y
(
s
, 
i
->
sg_li°
, 
tmp
->
num_sge
 *  *s);

1016 
s
 +
tmp
->
num_sge
;

1019 
tmp
++;

1022 
ª•
.
bad_wr
 = 0;

1023 i‡(
	`wrôe
(
ibqp
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

1024 
ªt
 = 
î∫o
;

1026 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

1028 
wr_cou¡
 = 
ª•
.
bad_wr
;

1029 i‡(
wr_cou¡
) {

1030 
i
 = 
wr
;

1031 --
wr_cou¡
)

1032 
i
 = i->
√xt
;

1033 *
bad_wr
 = 
i
;

1034 } i‡(
ªt
)

1035 *
bad_wr
 = 
wr
;

1037  
ªt
;

1038 
	}
}

1040 
	$ibv_cmd_po°_ªcv
(
ibv_qp
 *
ibqp
, 
ibv_ªcv_wr
 *
wr
,

1041 
ibv_ªcv_wr
 **
bad_wr
)

1043 
ibv_po°_ªcv
 *
cmd
;

1044 
ibv_po°_ªcv_ª•
 
ª•
;

1045 
ibv_ªcv_wr
 *
i
;

1046 
ibv_kîn_ªcv_wr
 *
n
, *
tmp
;

1047 
ibv_sge
 *
s
;

1048 
wr_cou¡
 = 0;

1049 
sge_cou¡
 = 0;

1050 
cmd_size
;

1051 
ªt
 = 0;

1053 
i
 = 
wr
; i; i = i->
√xt
) {

1054 
wr_cou¡
++;

1055 
sge_cou¡
 +
i
->
num_sge
;

1058 
cmd_size
 =  *
cmd
 + 
wr_cou¡
 *  *
n
 + 
sge_cou¡
 *  *
s
;

1059 
cmd
 = 
	`Æloˇ
(
cmd_size
);

1061 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
POST_RECV
, &
ª•
, Ñesp);

1062 
cmd
->
qp_h™dÀ
 = 
ibqp
->
h™dÀ
;

1063 
cmd
->
wr_cou¡
 = wr_count;

1064 
cmd
->
sge_cou¡
 = sge_count;

1065 
cmd
->
wqe_size
 =  *
n
;

1067 
n
 = (
ibv_kîn_ªcv_wr
 *Ë((*Ë
cmd
 +  *cmd);

1068 
s
 = (
ibv_sge
 *Ë(
n
 + 
wr_cou¡
);

1070 
tmp
 = 
n
;

1071 
i
 = 
wr
; i; i = i->
√xt
) {

1072 
tmp
->
wr_id
 = 
i
->wr_id;

1073 
tmp
->
num_sge
 = 
i
->num_sge;

1075 i‡(
tmp
->
num_sge
) {

1076 
	`mem˝y
(
s
, 
i
->
sg_li°
, 
tmp
->
num_sge
 *  *s);

1077 
s
 +
tmp
->
num_sge
;

1080 
tmp
++;

1083 
ª•
.
bad_wr
 = 0;

1084 i‡(
	`wrôe
(
ibqp
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

1085 
ªt
 = 
î∫o
;

1087 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

1089 
wr_cou¡
 = 
ª•
.
bad_wr
;

1090 i‡(
wr_cou¡
) {

1091 
i
 = 
wr
;

1092 --
wr_cou¡
)

1093 
i
 = i->
√xt
;

1094 *
bad_wr
 = 
i
;

1095 } i‡(
ªt
)

1096 *
bad_wr
 = 
wr
;

1098  
ªt
;

1099 
	}
}

1101 
	$ibv_cmd_po°_§q_ªcv
(
ibv_§q
 *
§q
, 
ibv_ªcv_wr
 *
wr
,

1102 
ibv_ªcv_wr
 **
bad_wr
)

1104 
ibv_po°_§q_ªcv
 *
cmd
;

1105 
ibv_po°_§q_ªcv_ª•
 
ª•
;

1106 
ibv_ªcv_wr
 *
i
;

1107 
ibv_kîn_ªcv_wr
 *
n
, *
tmp
;

1108 
ibv_sge
 *
s
;

1109 
wr_cou¡
 = 0;

1110 
sge_cou¡
 = 0;

1111 
cmd_size
;

1112 
ªt
 = 0;

1114 
i
 = 
wr
; i; i = i->
√xt
) {

1115 
wr_cou¡
++;

1116 
sge_cou¡
 +
i
->
num_sge
;

1119 
cmd_size
 =  *
cmd
 + 
wr_cou¡
 *  *
n
 + 
sge_cou¡
 *  *
s
;

1120 
cmd
 = 
	`Æloˇ
(
cmd_size
);

1122 
	`IBV_INIT_CMD_RESP
(
cmd
, 
cmd_size
, 
POST_SRQ_RECV
, &
ª•
, Ñesp);

1123 
cmd
->
§q_h™dÀ
 = 
§q
->
h™dÀ
;

1124 
cmd
->
wr_cou¡
 = wr_count;

1125 
cmd
->
sge_cou¡
 = sge_count;

1126 
cmd
->
wqe_size
 =  *
n
;

1128 
n
 = (
ibv_kîn_ªcv_wr
 *Ë((*Ë
cmd
 +  *cmd);

1129 
s
 = (
ibv_sge
 *Ë(
n
 + 
wr_cou¡
);

1131 
tmp
 = 
n
;

1132 
i
 = 
wr
; i; i = i->
√xt
) {

1133 
tmp
->
wr_id
 = 
i
->wr_id;

1134 
tmp
->
num_sge
 = 
i
->num_sge;

1136 i‡(
tmp
->
num_sge
) {

1137 
	`mem˝y
(
s
, 
i
->
sg_li°
, 
tmp
->
num_sge
 *  *s);

1138 
s
 +
tmp
->
num_sge
;

1141 
tmp
++;

1144 
ª•
.
bad_wr
 = 0;

1145 i‡(
	`wrôe
(
§q
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

1146 
ªt
 = 
î∫o
;

1148 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

1150 
wr_cou¡
 = 
ª•
.
bad_wr
;

1151 i‡(
wr_cou¡
) {

1152 
i
 = 
wr
;

1153 --
wr_cou¡
)

1154 
i
 = i->
√xt
;

1155 *
bad_wr
 = 
i
;

1156 } i‡(
ªt
)

1157 *
bad_wr
 = 
wr
;

1159  
ªt
;

1160 
	}
}

1162 
	$ibv_cmd_¸óã_ah
(
ibv_pd
 *
pd
, 
ibv_ah
 *
ah
,

1163 
ibv_ah_©å
 *
©å
,

1164 
ibv_¸óã_ah_ª•
 *
ª•
,

1165 
size_t
 
ª•_size
)

1167 
ibv_¸óã_ah
 
cmd
;

1169 
	`IBV_INIT_CMD_RESP
(&
cmd
,  cmd, 
CREATE_AH
, 
ª•
, 
ª•_size
);

1170 
cmd
.
u£r_h™dÀ
 = (
uöçå_t
Ë
ah
;

1171 
cmd
.
pd_h™dÀ
 = 
pd
->
h™dÀ
;

1172 
cmd
.
©å
.
dlid
 =áttr->dlid;

1173 
cmd
.
©å
.
¶
 =áttr->sl;

1174 
cmd
.
©å
.
§c_∑th_bôs
 =áttr->src_path_bits;

1175 
cmd
.
©å
.
°©ic_øã
 =áttr->static_rate;

1176 
cmd
.
©å
.
is_globÆ
 =áttr->is_global;

1177 
cmd
.
©å
.
p‹t_num
 =áttr->port_num;

1178 
cmd
.
©å
.
grh
.
Êow_œbñ
 =áttr->grh.flow_label;

1179 
cmd
.
©å
.
grh
.
sgid_ödex
 =áttr->grh.sgid_index;

1180 
cmd
.
©å
.
grh
.
h›_limô
 =áttr->grh.hop_limit;

1181 
cmd
.
©å
.
grh
.
åaffic_˛ass
 =áttr->grh.traffic_class;

1182 
cmd
.
ª£rved
 = 0;

1183 
	`mem˝y
(
cmd
.
©å
.
grh
.
dgid
,áâr->grh.dgid.
øw
, 16);

1185 i‡(
	`wrôe
(
pd
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

1186  
î∫o
;

1188 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

1190 
ah
->
h™dÀ
 = 
ª•
->handle;

1191 
ah
->
c⁄ãxt
 = 
pd
->context;

1194 
	}
}

1196 
	$ibv_cmd_de°roy_ah
(
ibv_ah
 *
ah
)

1198 
ibv_de°roy_ah
 
cmd
;

1200 
	`IBV_INIT_CMD
(&
cmd
,  cmd, 
DESTROY_AH
);

1201 
cmd
.
ah_h™dÀ
 = 
ah
->
h™dÀ
;

1203 i‡(
	`wrôe
(
ah
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

1204  
î∫o
;

1207 
	}
}

1209 
	$ibv_cmd_de°roy_qp
(
ibv_qp
 *
qp
)

1211 
ibv_de°roy_qp
 
cmd
;

1212 
ibv_de°roy_qp_ª•
 
ª•
;

1214 
	`IBV_INIT_CMD_RESP
(&
cmd
,  cmd, 
DESTROY_QP
, &
ª•
, Ñesp);

1215 
cmd
.
qp_h™dÀ
 = 
qp
->
h™dÀ
;

1216 
cmd
.
ª£rved
 = 0;

1218 i‡(
	`wrôe
(
qp
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

1219  
î∫o
;

1221 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

1223 
	`±hªad_muãx_lock
(&
qp
->
muãx
);

1224 
qp
->
evíts_com∂ëed
 !
ª•
.
evíts_ªp‹ãd
)

1225 
	`±hªad_c⁄d_waô
(&
qp
->
c⁄d
, &qp->
muãx
);

1226 
	`±hªad_muãx_u∆ock
(&
qp
->
muãx
);

1229 
	}
}

1231 
	$ibv_cmd_©èch_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
)

1233 
ibv_©èch_mˇ°
 
cmd
;

1235 
	`IBV_INIT_CMD
(&
cmd
,  cmd, 
ATTACH_MCAST
);

1236 
	`mem˝y
(
cmd
.
gid
, gid->
øw
,  cmd.gid);

1237 
cmd
.
qp_h™dÀ
 = 
qp
->
h™dÀ
;

1238 
cmd
.
mlid
 = 
lid
;

1239 
cmd
.
ª£rved
 = 0;

1241 i‡(
	`wrôe
(
qp
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

1242  
î∫o
;

1245 
	}
}

1247 
	$ibv_cmd_dëach_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
)

1249 
ibv_dëach_mˇ°
 
cmd
;

1251 
	`IBV_INIT_CMD
(&
cmd
,  cmd, 
DETACH_MCAST
);

1252 
	`mem˝y
(
cmd
.
gid
, gid->
øw
,  cmd.gid);

1253 
cmd
.
qp_h™dÀ
 = 
qp
->
h™dÀ
;

1254 
cmd
.
mlid
 = 
lid
;

1255 
cmd
.
ª£rved
 = 0;

1257 i‡(
	`wrôe
(
qp
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

1258  
î∫o
;

1261 
	}
}

1263 
	$buf„r_is_zîo
(*
addr
, 
ssize_t
 
size
)

1265  
addr
[0] =0 && !
	`memcmp
◊ddr,ádd∏+ 1, 
size
 - 1);

1266 
	}
}

1268 
	$gë_fûãrs_size
(
ibv_exp_Êow_•ec
 *
ib_•ec
,

1269 
ibv_exp_kîn_•ec
 *
kîn_•ec
,

1270 *
ib_fûãr_size
, *
kîn_fûãr_size
,

1271 
ibv_exp_Êow_•ec_ty≥
 
ty≥
)

1273 *
ib_•ec_fûãr_mask
;

1274 
cuº_kîn_fûãr_size
;

1275 
mö_fûãr_size
;

1277 *
ib_fûãr_size
 = (
ib_•ec
->
hdr
.
size
 - (ib_spec->hdr)) / 2;

1279 
ty≥
) {

1280 
IBV_EXP_FLOW_SPEC_IPV4_EXT
:

1281 
mö_fûãr_size
 =

1282 
	`off£tof
(
ibv_exp_kîn_ùv4_ext_fûãr
, 
Êags
) +

1283 (
kîn_•ec
->
ùv4_ext
.
mask
.
Êags
);

1284 
cuº_kîn_fûãr_size
 = 
mö_fûãr_size
;

1285 
ib_•ec_fûãr_mask
 = (*)&
ib_•ec
->
ùv4_ext
.
vÆ
 +

1286 *
ib_fûãr_size
;

1288 
IBV_EXP_FLOW_SPEC_IPV6_EXT
:

1289 
mö_fûãr_size
 =

1290 
	`off£tof
(
ibv_exp_kîn_ùv6_ext_fûãr
,

1291 
h›_limô
) +

1292 (
kîn_•ec
->
ùv6_ext
.
mask
.
h›_limô
);

1293 
cuº_kîn_fûãr_size
 = 
mö_fûãr_size
;

1294 
ib_•ec_fûãr_mask
 = (*)&
ib_•ec
->
ùv6_ext
.
vÆ
 +

1295 *
ib_fûãr_size
;

1297 
IBV_EXP_FLOW_SPEC_VXLAN_TUNNEL
:

1298 
mö_fûãr_size
 =

1299 
	`off£tof
(
ibv_exp_kîn_tu¬ñ_fûãr
,

1300 
tu¬ñ_id
) +

1301 (
kîn_•ec
->
tu¬ñ
.
mask
.
tu¬ñ_id
);

1302 
cuº_kîn_fûãr_size
 = 
mö_fûãr_size
;

1303 
ib_•ec_fûãr_mask
 = (*)&
ib_•ec
->
tu¬ñ
.
vÆ
 +

1304 *
ib_fûãr_size
;

1307  
EINVAL
;

1310 i‡(*
ib_fûãr_size
 < 
mö_fûãr_size
)

1311  
EINVAL
;

1313 i‡(*
ib_fûãr_size
 > 
cuº_kîn_fûãr_size
 &&

1314 !
	`buf„r_is_zîo
(
ib_•ec_fûãr_mask
 + 
cuº_kîn_fûãr_size
,

1315 *
ib_fûãr_size
 - 
cuº_kîn_fûãr_size
))

1316  
EOPNOTSUPP
;

1318 *
kîn_fûãr_size
 = 
	`mö
(
cuº_kîn_fûãr_size
, *
ib_fûãr_size
);

1321 
	}
}

1323 
	$ib_•ec_to_kîn_•ec
(
ibv_exp_Êow_•ec
 *
ib_•ec
,

1324 
ibv_exp_kîn_•ec
 *
kîn_•ec
,

1325 
is_exp
)

1327 
kîn_fûãr_size
;

1328 
ib_fûãr_size
;

1329 
ªt
;

1331 i‡(!
is_exp
 && (
ib_•ec
->
hdr
.
ty≥
 & 
IBV_EXP_FLOW_SPEC_INNER
))

1332  
EINVAL
;

1334 
kîn_•ec
->
hdr
.
ty≥
 = 
ib_•ec
->hdr.type;

1335 
ib_•ec
->
hdr
.
ty≥
) {

1336 
IBV_EXP_FLOW_SPEC_ETH
:

1337 
IBV_EXP_FLOW_SPEC_ETH
 | 
IBV_EXP_FLOW_SPEC_INNER
:

1338 
kîn_•ec
->
ëh
.
size
 = (
ibv_kîn_•ec_ëh
);

1339 
	`mem˝y
(&
kîn_•ec
->
ëh
.
vÆ
, &
ib_•ec
->eth.val,

1340 (
ibv_exp_Êow_ëh_fûãr
));

1341 
	`mem˝y
(&
kîn_•ec
->
ëh
.
mask
, &
ib_•ec
->eth.mask,

1342 (
ibv_exp_Êow_ëh_fûãr
));

1344 
IBV_EXP_FLOW_SPEC_IB
:

1345 i‡(!
is_exp
)

1346  
EINVAL
;

1347 
kîn_•ec
->
ib
.
size
 = (
ibv_kîn_•ec_ib
);

1348 
	`mem˝y
(&
kîn_•ec
->
ib
.
vÆ
, &
ib_•ec
->ib.val,

1349 (
ibv_exp_Êow_ib_fûãr
));

1350 
	`mem˝y
(&
kîn_•ec
->
ib
.
mask
, &
ib_•ec
->ib.mask,

1351 (
ibv_exp_Êow_ib_fûãr
));

1353 
IBV_EXP_FLOW_SPEC_IPV4
:

1354 
IBV_EXP_FLOW_SPEC_IPV4
 | 
IBV_EXP_FLOW_SPEC_INNER
:

1355 
kîn_•ec
->
ùv4
.
size
 = (
ibv_kîn_•ec_ùv4
);

1356 
	`mem˝y
(&
kîn_•ec
->
ùv4
.
vÆ
, &
ib_•ec
->ipv4.val,

1357 (
ibv_exp_Êow_ùv4_fûãr
));

1358 
	`mem˝y
(&
kîn_•ec
->
ùv4
.
mask
, &
ib_•ec
->ipv4.mask,

1359 (
ibv_exp_Êow_ùv4_fûãr
));

1361 
IBV_EXP_FLOW_SPEC_IPV6
:

1362 
IBV_EXP_FLOW_SPEC_IPV6
 | 
IBV_EXP_FLOW_SPEC_INNER
:

1363 i‡(!
is_exp
)

1364  
EINVAL
;

1365 
kîn_•ec
->
ùv6
.
size
 = (
ibv_exp_kîn_•ec_ùv6
);

1366 
	`mem˝y
(&
kîn_•ec
->
ùv6
.
vÆ
, &
ib_•ec
->ipv6.val,

1367 (
ibv_exp_Êow_ùv6_fûãr
));

1368 
	`mem˝y
(&
kîn_•ec
->
ùv6
.
mask
, &
ib_•ec
->ipv6.mask,

1369 (
ibv_exp_Êow_ùv6_fûãr
));

1371 
IBV_EXP_FLOW_SPEC_IPV6_EXT
:

1372 
IBV_EXP_FLOW_SPEC_IPV6_EXT
 | 
IBV_EXP_FLOW_SPEC_INNER
:

1373 i‡(!
is_exp
)

1374  
EINVAL
;

1375 
ªt
 = 
	`gë_fûãrs_size
(
ib_•ec
, 
kîn_•ec
,

1376 &
ib_fûãr_size
, &
kîn_fûãr_size
,

1377 
IBV_EXP_FLOW_SPEC_IPV6_EXT
);

1378 i‡(
ªt
)

1379  
ªt
;

1381 
kîn_•ec
->
hdr
.
ty≥
 = 
ib_•ec
->hdr.ty≥ & 
IBV_EXP_FLOW_SPEC_INNER
 ?

1382 
IBV_EXP_FLOW_SPEC_IPV6
 | 
IBV_EXP_FLOW_SPEC_INNER
 :

1383 
IBV_EXP_FLOW_SPEC_IPV6
;

1384 
kîn_•ec
->
ùv6_ext
.
size
 = (
ibv_exp_kîn_•ec_ùv6_ext
);

1385 
	`mem˝y
(&
kîn_•ec
->
ùv6_ext
.
vÆ
, &
ib_•ec
->ipv6_ext.val,

1386 
kîn_fûãr_size
);

1387 
	`mem˝y
(&
kîn_•ec
->
ùv6_ext
.
mask
, (*)&
ib_•ec
->ùv6_ext.
vÆ


1388 + 
ib_fûãr_size
, 
kîn_fûãr_size
);

1390 
IBV_EXP_FLOW_SPEC_IPV4_EXT
:

1391 
IBV_EXP_FLOW_SPEC_IPV4_EXT
 | 
IBV_EXP_FLOW_SPEC_INNER
:

1392 i‡(!
is_exp
)

1393  
EINVAL
;

1394 
ªt
 = 
	`gë_fûãrs_size
(
ib_•ec
, 
kîn_•ec
,

1395 &
ib_fûãr_size
, &
kîn_fûãr_size
,

1396 
IBV_EXP_FLOW_SPEC_IPV4_EXT
);

1397 i‡(
ªt
)

1398  
ªt
;

1400 
kîn_•ec
->
hdr
.
ty≥
 = 
ib_•ec
->hdr.ty≥ & 
IBV_EXP_FLOW_SPEC_INNER
 ?

1401 
IBV_EXP_FLOW_SPEC_IPV4
 | 
IBV_EXP_FLOW_SPEC_INNER
 :

1402 
IBV_EXP_FLOW_SPEC_IPV4
;

1403 
kîn_•ec
->
ùv4_ext
.
size
 = (

1404 
ibv_exp_kîn_•ec_ùv4_ext
);

1405 
	`mem˝y
(&
kîn_•ec
->
ùv4_ext
.
vÆ
, &
ib_•ec
->ipv4_ext.val,

1406 
kîn_fûãr_size
);

1407 
	`mem˝y
(&
kîn_•ec
->
ùv4_ext
.
mask
, (*)&
ib_•ec
->ùv4_ext.
vÆ


1408 + 
ib_fûãr_size
, 
kîn_fûãr_size
);

1410 
IBV_EXP_FLOW_SPEC_TCP
:

1411 
IBV_EXP_FLOW_SPEC_UDP
:

1412 
IBV_EXP_FLOW_SPEC_TCP
 | 
IBV_EXP_FLOW_SPEC_INNER
:

1413 
IBV_EXP_FLOW_SPEC_UDP
 | 
IBV_EXP_FLOW_SPEC_INNER
:

1414 
kîn_•ec
->
t˝_udp
.
size
 = (
ibv_kîn_•ec_t˝_udp
);

1415 
	`mem˝y
(&
kîn_•ec
->
t˝_udp
.
vÆ
, &
ib_•ec
->tcp_udp.val,

1416 (
ibv_exp_Êow_t˝_udp_fûãr
));

1417 
	`mem˝y
(&
kîn_•ec
->
t˝_udp
.
mask
, &
ib_•ec
->tcp_udp.mask,

1418 (
ibv_exp_Êow_t˝_udp_fûãr
));

1420 
IBV_EXP_FLOW_SPEC_VXLAN_TUNNEL
:

1421 i‡(!
is_exp
)

1422  
EINVAL
;

1423 
ªt
 = 
	`gë_fûãrs_size
(
ib_•ec
, 
kîn_•ec
,

1424 &
ib_fûãr_size
, &
kîn_fûãr_size
,

1425 
IBV_EXP_FLOW_SPEC_VXLAN_TUNNEL
);

1426 i‡(
ªt
)

1427  
ªt
;

1429 
kîn_•ec
->
tu¬ñ
.
size
 = (
ibv_exp_kîn_•ec_tu¬ñ
);

1430 
	`mem˝y
(&
kîn_•ec
->
tu¬ñ
.
vÆ
, &
ib_•ec
->tunnel.val,

1431 
kîn_fûãr_size
);

1432 
	`mem˝y
(&
kîn_•ec
->
tu¬ñ
.
mask
, (*)&
ib_•ec
->tu¬ñ.
vÆ


1433 + 
ib_fûãr_size
, 
kîn_fûãr_size
);

1435 
IBV_EXP_FLOW_SPEC_ACTION_TAG
:

1436 i‡(!
is_exp
)

1437  
EINVAL
;

1438 
kîn_•ec
->
Êow_èg
.
size
 = (

1439 
ibv_exp_kîn_•ec_a˘i⁄_èg
);

1440 
kîn_•ec
->
Êow_èg
.
èg_id
 = 
ib_•ec
->flow_tag.tag_id;

1442 
IBV_EXP_FLOW_SPEC_ACTION_DROP
:

1443 i‡(!
is_exp
)

1444  
EINVAL
;

1445 
kîn_•ec
->
dr›
.
size
 = (

1446 
ibv_exp_kîn_•ec_a˘i⁄_dr›
);

1449  
EINVAL
;

1452 
	}
}

1454 
	$Êow_is_exp
(
ibv_exp_Êow_©å
 *
Êow_©å
)

1456 
i
;

1457 *
ib_•ec
 = 
Êow_©å
 + 1;

1459 
i
 = 0; i < 
Êow_©å
->
num_of_•ecs
; i++) {

1460 i‡(((
ibv_exp_Êow_•ec
 *)
ib_•ec
)->
hdr
.
ty≥
 ==

1461 
IBV_EXP_FLOW_SPEC_IPV6
 ||

1462 ((
ibv_exp_Êow_•ec
 *)
ib_•ec
)->
hdr
.
ty≥
 ==

1463 
IBV_EXP_FLOW_SPEC_IPV4_EXT
 ||

1464 ((
ibv_exp_Êow_•ec
 *)
ib_•ec
)->
hdr
.
ty≥
 ==

1465 
IBV_EXP_FLOW_SPEC_IPV6_EXT
 ||

1466 ((
ibv_exp_Êow_•ec
 *)
ib_•ec
)->
hdr
.
ty≥
 ==

1467 
IBV_EXP_FLOW_SPEC_VXLAN_TUNNEL
 ||

1468 ((
ibv_exp_Êow_•ec
 *)
ib_•ec
)->
hdr
.
ty≥
 ==

1469 
IBV_EXP_FLOW_SPEC_ACTION_TAG
 ||

1470 ((
ibv_exp_Êow_•ec
 *)
ib_•ec
)->
hdr
.
ty≥
 ==

1471 
IBV_EXP_FLOW_SPEC_ACTION_DROP
 ||

1472 ((
ibv_exp_Êow_•ec
 *)
ib_•ec
)->
hdr
.
ty≥
 &

1473 
IBV_EXP_FLOW_SPEC_INNER
)

1475 
ib_•ec
 +((
ibv_exp_Êow_•ec
 *)ib_•ec)->
hdr
.
size
;

1479 
	}
}

1481 
ibv_Êow
 *
	$cmd_¸óã_Êow
(
ibv_qp
 *
qp
,

1482 
ibv_exp_Êow_©å
 *
Êow_©å
,

1483 *
ib_•ec
,

1484 
is_exp
)

1486 
ibv_¸óã_Êow
 *
cmd
;

1487 
ibv_¸óã_Êow_ª•
 
ª•
;

1488 
ibv_Êow
 *
Êow_id
;

1489 
size_t
 
cmd_size
;

1490 
size_t
 
wrôãn_size
;

1491 
i
, 
îr
 = 0;

1492 *
kîn_•ec
;

1493 
exp_Êow
 = 
	`Êow_is_exp
(
Êow_©å
);

1494 
size_t
 
•ec_size
;

1496 
•ec_size
 = 
exp_Êow
 ? (
ibv_exp_kîn_•ec
) :

1497 (
ibv_kîn_•ec
);

1499 
cmd_size
 = (*
cmd
Ë+ (
Êow_©å
->
num_of_•ecs
 * 
•ec_size
);

1501 
cmd
 = 
	`Æloˇ
(
cmd_size
);

1502 
Êow_id
 = 
	`ˇŒoc
(1, (*flow_id));

1503 i‡(!
Êow_id
)

1504  
NULL
;

1505 
	`mem£t
(
cmd
, 0, 
cmd_size
);

1507 
cmd
->
qp_h™dÀ
 = 
qp
->
h™dÀ
;

1509 
cmd
->
Êow_©å
.
ty≥
 = flow_attr->type;

1510 
cmd
->
Êow_©å
.
¥i‹ôy
 = flow_attr->priority;

1511 
cmd
->
Êow_©å
.
num_of_•ecs
 = flow_attr->num_of_specs;

1512 
cmd
->
Êow_©å
.
p‹t
 = flow_attr->port;

1513 
cmd
->
Êow_©å
.
Êags
 = flow_attr->flags;

1515 
kîn_•ec
 = 
cmd
 + 1;

1516 
i
 = 0; i < 
Êow_©å
->
num_of_•ecs
; i++) {

1517 
îr
 = 
	`ib_•ec_to_kîn_•ec
(
ib_•ec
, 
kîn_•ec
, 
is_exp
);

1518 i‡(
îr
) {

1519 
î∫o
 = 
îr
;

1520 
îr
;

1522 
cmd
->
Êow_©å
.
size
 +=

1523 ((
ibv_kîn_•ec
 *)
kîn_•ec
)->
hdr
.
size
;

1524 
kîn_•ec
 +((
ibv_kîn_•ec
 *)kîn_•ec)->
hdr
.
size
;

1525 
ib_•ec
 +((
ibv_exp_Êow_•ec
 *)ib_•ec)->
hdr
.
size
;

1528 
wrôãn_size
 = (*
cmd
Ë+ cmd->
Êow_©å
.
size
;

1529 i‡(!
exp_Êow
)

1530 
	`IBV_INIT_CMD_RESP_EX_VCMD
(
cmd
, 
wrôãn_size
, written_size,

1531 
CREATE_FLOW
, &
ª•
, (resp));

1533 
	`IBV_INIT_CMD_RESP_EXP
(
CREATE_FLOW
, 
cmd
, 
wrôãn_size
, 0,

1534 &
ª•
, (resp), 0);

1536 i‡(
	`wrôe
(
qp
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
wrôãn_size
) != written_size)

1537 
îr
;

1539 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, (resp));

1541 
Êow_id
->
c⁄ãxt
 = 
qp
->context;

1542 
Êow_id
->
h™dÀ
 = 
ª•
.
Êow_h™dÀ
;

1543  
Êow_id
;

1544 
îr
:

1545 
	`‰ì
(
Êow_id
);

1546  
NULL
;

1547 
	}
}

1549 
ibv_exp_Êow
 *
	$ibv_exp_cmd_¸óã_Êow
(
ibv_qp
 *
qp
,

1550 
ibv_exp_Êow_©å
 *
Êow_©å
)

1552 *
ib_•ec
 = 
Êow_©å
 + 1;

1553 
ibv_Êow
 *
Ê
;

1555 
Ê
 = 
	`cmd_¸óã_Êow
(
qp
, 
Êow_©å
, 
ib_•ec
, 1);

1557 i‡(
Ê
)

1558  (
ibv_exp_Êow
 *)&
Ê
->
c⁄ãxt
;

1560  
NULL
;

1561 
	}
}

1563 
ibv_Êow
 *
	$ibv_cmd_¸óã_Êow
(
ibv_qp
 *
qp
,

1564 
ibv_Êow_©å
 *
Êow_©å
)

1566 *
ib_•ec
 = 
Êow_©å
 + 1;

1568 i‡(
Êow_©å
->
comp_mask
) {

1569 
î∫o
 = 
EINVAL
;

1570  
NULL
;

1573  
	`cmd_¸óã_Êow
(
qp
, (
ibv_exp_Êow_©å
 *)&
Êow_©å
->
ty≥
,

1574 
ib_•ec
, 0);

1575 
	}
}

1577 
	$cmd_de°roy_Êow
(
uöt32_t
 
h™dÀ
, 
cmd_fd
)

1579 
ibv_de°roy_Êow
 
cmd
;

1580 
ªt
 = 0;

1582 
	`mem£t
(&
cmd
, 0, (cmd));

1583 
	`IBV_INIT_CMD_EX
(&
cmd
, (cmd), 
DESTROY_FLOW
);

1584 
cmd
.
Êow_h™dÀ
 = 
h™dÀ
;

1586 i‡(
	`wrôe
(
cmd_fd
, &
cmd
, (cmd)) != (cmd))

1587 
ªt
 = 
î∫o
;

1589  
ªt
;

1590 
	}
}

1592 
	$ibv_exp_cmd_de°roy_Êow
(
ibv_exp_Êow
 *
Êow_id
)

1594 
ªt
 = 
	`cmd_de°roy_Êow
(
Êow_id
->
h™dÀ
, flow_id->
c⁄ãxt
->
cmd_fd
);

1595 
ibv_Êow
 *
Ê
 = (*)
Êow_id
 - 
	`off£tof
(ibv_Êow, 
c⁄ãxt
);

1597 
	`‰ì
(
Ê
);

1599  
ªt
;

1600 
	}
}

1602 
	$ibv_cmd_de°roy_Êow
(
ibv_Êow
 *
Êow_id
)

1604 
ªt
 = 
	`cmd_de°roy_Êow
(
Êow_id
->
h™dÀ
, flow_id->
c⁄ãxt
->
cmd_fd
);

1606 
	`‰ì
(
Êow_id
);

1608  
ªt
;

1609 
	}
}

1611 
	$ibv_cmd_quîy_devi˚_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1612 c⁄° 
ibv_quîy_devi˚_ex_öput
 *
öput
,

1613 
ibv_devi˚_©å_ex
 *
©å
, 
size_t
 
©å_size
,

1614 
uöt64_t
 *
øw_fw_vî
,

1615 
ibv_quîy_devi˚_ex
 *
cmd
,

1616 
size_t
 
cmd_c‹e_size
,

1617 
size_t
 
cmd_size
,

1618 
ibv_quîy_devi˚_ª•_ex
 *
ª•
,

1619 
size_t
 
ª•_c‹e_size
,

1620 
size_t
 
ª•_size
)

1622 
îr
;

1624 i‡(
öput
 && i≈ut->
comp_mask
)

1625  
EINVAL
;

1627 i‡(
©å_size
 < 
	`off£tof
(
ibv_devi˚_©å_ex
, 
comp_mask
) +

1628 (
©å
->
comp_mask
))

1629  
EINVAL
;

1631 i‡(
ª•_c‹e_size
 < 
	`off£tof
(
ibv_quîy_devi˚_ª•_ex
,

1632 
ª•⁄£_Àngth
) +

1633 (
ª•
->
ª•⁄£_Àngth
))

1634  
EINVAL
;

1636 
	`IBV_INIT_CMD_RESP_EX_V
(
cmd
, 
cmd_c‹e_size
, 
cmd_size
,

1637 
QUERY_DEVICE_EX
, 
ª•
, 
ª•_c‹e_size
,

1638 
ª•_size
);

1639 
cmd
->
comp_mask
 = 0;

1640 
cmd
->
ª£rved
 = 0;

1641 
	`mem£t
(
©å
->
‹ig_©å
.
fw_vî
, 0, (attr->orig_attr.fw_ver));

1642 
	`mem£t
(&
©å
->
comp_mask
, 0, 
©å_size
 - ◊âr->
‹ig_©å
));

1643 
îr
 = 
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
);

1644 i‡(
îr
 !
cmd_size
)

1645  
î∫o
;

1647 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

1648 
	`c›y_quîy_dev_fõlds
(&
©å
->
‹ig_©å
, &
ª•
->
ba£
, 
øw_fw_vî
);

1651 
©å
->
comp_mask
 = 
ª•
->comp_mask & 0;

1652 i‡(
©å_size
 >
	`off£tof
(
ibv_devi˚_©å_ex
, 
odp_ˇps
) +

1653 (
©å
->
odp_ˇps
)) {

1654 i‡(
ª•
->
ª•⁄£_Àngth
 >=

1655 
	`off£tof
(
ibv_quîy_devi˚_ª•_ex
, 
odp_ˇps
) +

1656 (
ª•
->
odp_ˇps
)) {

1657 
©å
->
odp_ˇps
.
gíîÆ_ˇps
 = 
ª•
->odp_caps.general_caps;

1658 
©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
rc_odp_ˇps
 =

1659 
ª•
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
rc_odp_ˇps
;

1660 
©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
uc_odp_ˇps
 =

1661 
ª•
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
uc_odp_ˇps
;

1662 
©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
ud_odp_ˇps
 =

1663 
ª•
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
ud_odp_ˇps
;

1665 
	`mem£t
(&
©å
->
odp_ˇps
, 0, (attr->odp_caps));

1670 
	}
}

	@libibverbs-41mlnx1/src/cmd_exp.c

34 #i‡
HAVE_CONFIG_H


35 
	~<c⁄fig.h
>

38 
	~<°dio.h
>

39 
	~<uni°d.h
>

40 
	~<°dlib.h
>

41 
	~<î∫o.h
>

42 
	~<Æloˇ.h
>

43 
	~<°rög.h
>

45 
	~"ibvîbs.h
"

51 
	$ibv_exp_cmd_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

52 
ibv_exp_devi˚_©å
 *
devi˚_©å
,

53 
uöt64_t
 *
øw_fw_vî
,

54 
ibv_exp_quîy_devi˚
 *
cmd
, 
size_t
 
cmd_size
)

56 
ibv_exp_quîy_devi˚_ª•
 
ª•
;

57 
ibv_quîy_devi˚_ª•
 *
r_ª•
;

58 
uöt64_t
 
comp_mask_2
 = 0;

59 
uöt32_t
 
comp_mask
 = 0;

61 
	`mem£t
(&
ª•
, 0, (resp));

62 
r_ª•
 = 
	`IBV_RESP_TO_VERBS_RESP_EX
(&
ª•
,

63 
ibv_exp_quîy_devi˚_ª•
,

64 
ibv_quîy_devi˚_ª•
);

66 
	`mem£t
(
cmd
, 0, (*cmd));

67 
cmd
->
comp_mask
 = 
devi˚_©å
->comp_mask;

68 
	`IBV_INIT_CMD_RESP_EXP
(
QUERY_DEVICE
, 
cmd
, 
cmd_size
, 0,

69 &
ª•
, (resp), 0);

70 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

71  
î∫o
;

73 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, (resp));

74 
	`mem£t
(
devi˚_©å
->
fw_vî
, 0, (device_attr->fw_ver));

75 
	`c›y_quîy_dev_fõlds
((
ibv_devi˚_©å
 *)
devi˚_©å
, 
r_ª•
,

76 
øw_fw_vî
);

78 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_WITH_TIMESTAMP_MASK
) &&

79 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_WITH_TIMESTAMP_MASK
)) {

80 
devi˚_©å
->
time°amp_mask
 = 
ª•
.timestamp_mask;

81 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_WITH_TIMESTAMP_MASK
;

84 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_WITH_HCA_CORE_CLOCK
) &&

85 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_WITH_HCA_CORE_CLOCK
)) {

86 
devi˚_©å
->
hˇ_c‹e_˛ock
 = 
ª•
.hca_core_clock;

87 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_WITH_HCA_CORE_CLOCK
;

90 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
) &&

91 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
)) {

92 
devi˚_©å
->
exp_devi˚_ˇp_Êags
 = (
uöt64_t
)(((
ibv_devi˚_©å
 *)devi˚_©å)->
devi˚_ˇp_Êags
);

93 
devi˚_©å
->
exp_devi˚_ˇp_Êags
 |
ª•
.
devi˚_ˇp_Êags2
 << 
IBV_EXP_START_FLAG_LOC
;

94 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
;

97 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_DC_RD_REQ
) &&

98 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_DC_RD_REQ
)) {

99 
devi˚_©å
->
max_dc_ªq_rd_©om
 = 
ª•
.
dc_rd_ªq
;

100 
comp_mask
 |
IBV_EXP_DEVICE_DC_RD_REQ
;

103 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_DC_RD_RES
) &&

104 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_DC_RD_RES
)) {

105 
devi˚_©å
->
max_dc_ªs_rd_©om
 = 
ª•
.
dc_rd_ªs
;

106 
comp_mask
 |
IBV_EXP_DEVICE_DC_RD_RES
;

109 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_DCT
) &&

110 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_DCT
)) {

111 
devi˚_©å
->
max_d˘
 = 
ª•
.max_dct;

112 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_MAX_DCT
;

115 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
) &&

116 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
)) {

117 
devi˚_©å
->
ölöe_ªcv_sz
 = 
ª•
.inline_recv_sz;

118 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
;

121 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_RSS_TBL_SZ
) &&

122 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_RSS_TBL_SZ
)) {

123 
devi˚_©å
->
max_rss_tbl_sz
 = 
ª•
.max_rss_tbl_sz;

124 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_RSS_TBL_SZ
;

127 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_EXT_ATOMIC_ARGS
) &&

128 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_EXT_ATOMIC_ARGS
)) {

129 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_EXT_ATOMIC_ARGS
;

130 
devi˚_©å
->
ext_©om
.
log_©omic_¨g_sizes
 = 
ª•
.log_atomic_arg_sizes;

131 
devi˚_©å
->
ext_©om
.
max_Á_bô_bound¨y
 = 
ª•
.max_fa_bit_boundary;

132 
devi˚_©å
->
ext_©om
.
log_max_©omic_ölöe
 = 
ª•
.log_max_atomic_inline;

135 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_UMR
) &&

136 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_UMR
)) {

137 
devi˚_©å
->
umr_ˇps
.
max_klm_li°_size
 = 
ª•
.umr_caps.max_klm_list_size;

138 
devi˚_©å
->
umr_ˇps
.
max_£nd_wqe_ölöe_klms
 = 
ª•
.umr_caps.max_send_wqe_inline_klms;

139 
devi˚_©å
->
umr_ˇps
.
max_umr_ªcursi⁄_dïth
 = 
ª•
.umr_caps.max_umr_recursion_depth;

140 
devi˚_©å
->
umr_ˇps
.
max_umr_°ride_dimísi⁄
 = 
ª•
.umr_caps.max_umr_stride_dimension;

141 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_UMR
;

144 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_ODP
) &&

145 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_ODP
)) {

146 
devi˚_©å
->
odp_ˇps
.
gíîÆ_odp_ˇps
 = 
ª•
.odp_caps.general_odp_caps;

147 
devi˚_©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
rc_odp_ˇps
 =

148 
ª•
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
rc_odp_ˇps
;

149 
devi˚_©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
uc_odp_ˇps
 =

150 
ª•
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
uc_odp_ˇps
;

151 
devi˚_©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
ud_odp_ˇps
 =

152 
ª•
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
ud_odp_ˇps
;

153 
devi˚_©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
dc_odp_ˇps
 =

154 
ª•
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
dc_odp_ˇps
;

155 
devi˚_©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
xrc_odp_ˇps
 =

156 
ª•
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
xrc_odp_ˇps
;

157 
devi˚_©å
->
odp_ˇps
.
≥r_å™•‹t_ˇps
.
øw_ëh_odp_ˇps
 =

158 
ª•
.
odp_ˇps
.
≥r_å™•‹t_ˇps
.
øw_ëh_odp_ˇps
;

159 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_ODP
;

162 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_CTX_RES_DOMAIN
) &&

163 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_CTX_RES_DOMAIN
)) {

164 
devi˚_©å
->
max_˘x_ªs_domaö
 = 
ª•
.max_ctx_res_domain;

165 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_MAX_CTX_RES_DOMAIN
;

168 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_WQ_TYPE_RQ
) &&

169 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_WQ_TYPE_RQ
)) {

170 
devi˚_©å
->
max_wq_ty≥_rq
 = 
ª•
.max_wq_type_rq;

171 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_MAX_WQ_TYPE_RQ
;

174 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_RX_HASH
) &&

175 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_RX_HASH
)) {

176 
devi˚_©å
->
rx_hash_ˇps
.
max_rwq_ödúe˘i⁄_èbÀs
 = 
ª•
.
rx_hash
.max_rwq_indirection_tables;

177 
devi˚_©å
->
rx_hash_ˇps
.
max_rwq_ödúe˘i⁄_èbÀ_size
 = 
ª•
.
rx_hash
.max_rwq_indirection_table_size;

178 
devi˚_©å
->
rx_hash_ˇps
.
suµ‹ãd_hash_fun˘i⁄s
 = 
ª•
.
rx_hash
.supported_hash_functions;

179 
devi˚_©å
->
rx_hash_ˇps
.
suµ‹ãd_∑ckë_fõlds
 = 
ª•
.
rx_hash
.supported_packet_fields;

180 
devi˚_©å
->
rx_hash_ˇps
.
suµ‹ãd_qps
 = 
ª•
.
rx_hash
.supported_qps;

181 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_RX_HASH
;

184 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_DEVICE_CTX
) &&

185 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_DEVICE_CTX
)) {

186 
devi˚_©å
->
max_devi˚_˘x
 = 
ª•
.max_device_ctx;

187 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_MAX_DEVICE_CTX
;

190 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MP_RQ
) &&

191 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MP_RQ
)) {

192 
devi˚_©å
->
mp_rq_ˇps
.
Ælowed_shi·s
 = 
ª•
.mp_rq_caps.allowed_shifts;

193 
devi˚_©å
->
mp_rq_ˇps
.
suµ‹ãd_qps
 = 
ª•
.mp_rq_caps.supported_qps;

194 
devi˚_©å
->
mp_rq_ˇps
.
max_sögÀ_°ride_log_num_of_byãs
 = 
ª•
.mp_rq_caps.max_single_stride_log_num_of_bytes;

195 
devi˚_©å
->
mp_rq_ˇps
.
mö_sögÀ_°ride_log_num_of_byãs
 = 
ª•
.mp_rq_caps.min_single_stride_log_num_of_bytes;

196 
devi˚_©å
->
mp_rq_ˇps
.
max_sögÀ_wqe_log_num_of_°rides
 = 
ª•
.mp_rq_caps.max_single_wqe_log_num_of_strides;

197 
devi˚_©å
->
mp_rq_ˇps
.
mö_sögÀ_wqe_log_num_of_°rides
 = 
ª•
.mp_rq_caps.min_single_wqe_log_num_of_strides;

198 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_MP_RQ
;

201 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_VLAN_OFFLOADS
) &&

202 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_VLAN_OFFLOADS
)) {

203 
devi˚_©å
->
wq_vœn_ofÊﬂds_ˇp
 = 
ª•
.wq_vlan_offloads_cap;

204 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_VLAN_OFFLOADS
;

207 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_EC_CAPS
) &&

208 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_EC_CAPS
)) {

209 
devi˚_©å
->
ec_ˇps
.
max_ec_ˇlc_öÊight_ˇlcs
 =

210 
ª•
.
ec_ˇps
.
max_ec_ˇlc_öÊight_ˇlcs
;

211 
devi˚_©å
->
ec_ˇps
.
max_ec_d©a_ve˘‹_cou¡
 =

212 
ª•
.
ec_ˇps
.
max_ec_d©a_ve˘‹_cou¡
;

213 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_EC_CAPS
;

214 i‡(
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_EC_GF_BASE
) {

215 
devi˚_©å
->
ec_w_mask
 = 
ª•
.ec_w_mask;

216 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_EC_GF_BASE
;

220 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MASKED_ATOMICS
) &&

221 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MASKED_ATOMICS
)) {

222 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_MASKED_ATOMICS
;

223 
devi˚_©å
->
masked_©omic
.
masked_log_©omic_¨g_sizes
 =

224 
ª•
.
masked_©omic_ˇps
.
masked_log_©omic_¨g_sizes
;

225 
devi˚_©å
->
masked_©omic
.
masked_log_©omic_¨g_sizes_√tw‹k_ídü¬ess
 =

226 
ª•
.
masked_©omic_ˇps
.
masked_log_©omic_¨g_sizes_√tw‹k_ídü¬ess
;

227 
devi˚_©å
->
masked_©omic
.
max_Á_bô_bound¨y
 =

228 
ª•
.
max_Á_bô_bound¨y
;

229 
devi˚_©å
->
masked_©omic
.
log_max_©omic_ölöe
 =

230 
ª•
.
log_max_©omic_ölöe
;

232 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_RX_PAD_END_ALIGN
) &&

233 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_RX_PAD_END_ALIGN
)) {

234 
devi˚_©å
->
rx_∑d_íd_addr_Æign
 = 
ª•
.rx_pad_end_addr_align;

235 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_RX_PAD_END_ALIGN
;

238 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TSO_CAPS
) &&

239 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TSO_CAPS
)) {

240 
devi˚_©å
->
tso_ˇps
.
max_tso
 = 
ª•
.tso_caps.max_tso;

241 
devi˚_©å
->
tso_ˇps
.
suµ‹ãd_q±s
 =

242 
ª•
.
tso_ˇps
.
suµ‹ãd_q±s
;

243 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_TSO_CAPS
;

246 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_PACKET_PACING_CAPS
) &&

247 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_PACKET_PACING_CAPS
)) {

248 
devi˚_©å
->
∑ckë_∑cög_ˇps
.
qp_øã_limô_mö
 =

249 
ª•
.
∑ckë_∑cög_ˇps
.
qp_øã_limô_mö
;

250 
devi˚_©å
->
∑ckë_∑cög_ˇps
.
qp_øã_limô_max
 =

251 
ª•
.
∑ckë_∑cög_ˇps
.
qp_øã_limô_max
;

252 
devi˚_©å
->
∑ckë_∑cög_ˇps
.
suµ‹ãd_q±s
 =

253 
ª•
.
∑ckë_∑cög_ˇps
.
suµ‹ãd_q±s
;

254 
devi˚_©å
->
∑ckë_∑cög_ˇps
.
ˇp_Êags
 =

255 
ª•
.
∑ckë_∑cög_ˇps
.
ˇp_Êags
;

256 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_PACKET_PACING_CAPS
;

259 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_OOO_CAPS
) &&

260 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_OOO_CAPS
)) {

261 
devi˚_©å
->
ooo_ˇps
.
rc_ˇps
 = 
ª•
.ooo_caps.rc_caps;

262 
devi˚_©å
->
ooo_ˇps
.
xrc_ˇps
 = 
ª•
.ooo_caps.xrc_caps;

263 
devi˚_©å
->
ooo_ˇps
.
dc_ˇps
 = 
ª•
.ooo_caps.dc_caps;

264 
devi˚_©å
->
ooo_ˇps
.
ud_ˇps
 = 
ª•
.ooo_caps.ud_caps;

265 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_OOO_CAPS
;

268 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_SW_PARSING_CAPS
) &&

269 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_SW_PARSING_CAPS
)) {

270 
devi˚_©å
->
sw_∑rsög_ˇps
.
sw_∑rsög_ofÊﬂds
 =

271 
ª•
.
sw_∑rsög_ˇps
.
sw_∑rsög_ofÊﬂds
;

272 
devi˚_©å
->
sw_∑rsög_ˇps
.
suµ‹ãd_q±s
 =

273 
ª•
.
sw_∑rsög_ˇps
.
suµ‹ãd_q±s
;

274 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_SW_PARSING_CAPS
;

277 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_ODP_MAX_SIZE
) &&

278 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_ODP_MAX_SIZE
)) {

279 
devi˚_©å
->
odp_mr_max_size
 = 
ª•
.odp_mr_max_size;

280 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_ODP_MAX_SIZE
;

283 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TM_CAPS
) &&

284 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TM_CAPS
)) {

285 
devi˚_©å
->
tm_ˇps
.
max_∫dv_hdr_size
 =

286 
ª•
.
tm_ˇps
.
max_∫dv_hdr_size
;

287 
devi˚_©å
->
tm_ˇps
.
max_num_ègs
 = 
ª•
.tm_caps.max_num_tags;

288 
devi˚_©å
->
tm_ˇps
.
ˇ∑bûôy_Êags
 =

289 
ª•
.
tm_ˇps
.
ˇ∑bûôy_Êags
;

290 
devi˚_©å
->
tm_ˇps
.
max_›s
 = 
ª•
.tm_caps.max_ops;

291 
devi˚_©å
->
tm_ˇps
.
max_sge
 = 
ª•
.tm_caps.max_sge;

292 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_TM_CAPS
;

295 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TUNNEL_OFFLOADS_CAPS
) &&

296 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TUNNEL_OFFLOADS_CAPS
)) {

297 
devi˚_©å
->
tu¬ñ_ofÊﬂds_ˇps
 =

298 
ª•
.
tu¬ñ_ofÊﬂds_ˇps
;

299 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_TUNNEL_OFFLOADS_CAPS
;

302 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_DM_SIZE
) &&

303 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_MAX_DM_SIZE
)) {

304 
devi˚_©å
->
max_dm_size
 = 
ª•
.max_dm_size;

305 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_MAX_DM_SIZE
;

308 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TUNNELED_ATOMIC
) &&

309 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_TUNNELED_ATOMIC
)) {

310 
devi˚_©å
->
tu¬ñed_©omic_ˇps
 = 
ª•
.tunneled_atomic_caps;

311 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_TUNNELED_ATOMIC
;

314 i‡((
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_COMP_MASK_2
) &&

315 (
ª•
.
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_COMP_MASK_2
)) {

316 
comp_mask
 |
IBV_EXP_DEVICE_ATTR_COMP_MASK_2
;

317 i‡((
devi˚_©å
->
comp_mask_2
 & 
IBV_EXP_DEVICE_ATTR_UMR_FIXED_SIZE_CAPS
) &&

318 (
ª•
.
comp_mask_2
 & 
IBV_EXP_DEVICE_ATTR_UMR_FIXED_SIZE_CAPS
)) {

319 
devi˚_©å
->
umr_fixed_size_ˇps
.
max_ítôy_size
 =

320 
ª•
.
umr_fixed_size_ˇps
.
max_ítôy_size
;

321 
comp_mask_2
 |
IBV_EXP_DEVICE_ATTR_UMR_FIXED_SIZE_CAPS
;

324 i‡((
devi˚_©å
->
comp_mask_2
 & 
IBV_EXP_DEVICE_ATTR_PCI_ATOMIC_CAPS
) &&

325 (
ª•
.
comp_mask_2
 & 
IBV_EXP_DEVICE_ATTR_PCI_ATOMIC_CAPS
)) {

326 
devi˚_©å
->
pci_©omic_ˇps
.
„tch_add
 = 
ª•
.pci_atomic_caps.fetch_add;

327 
devi˚_©å
->
pci_©omic_ˇps
.
sw≠
 = 
ª•
.pci_atomic_caps.swap;

328 
devi˚_©å
->
pci_©omic_ˇps
.
com∑ª_sw≠
 = 
ª•
.pci_atomic_caps.compare_swap;

329 
comp_mask_2
 |
IBV_EXP_DEVICE_ATTR_PCI_ATOMIC_CAPS
;

333 
devi˚_©å
->
comp_mask
 = comp_mask;

335 i‡(
devi˚_©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_COMP_MASK_2
)

336 
devi˚_©å
->
comp_mask_2
 = comp_mask_2;

339 
	}
}

341 
	$ibv_exp_cmd_¸óã_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

342 
vîbs_qp
 *
qp
, 
vqp_sz
,

343 
ibv_exp_qp_öô_©å
 *
©å_exp
,

344 *
cmd_buf
, 
size_t
 
lib_cmd_size
, size_à
drv_cmd_size
,

345 *
ª•_buf
, 
size_t
 
lib_ª•_size
, size_à
drv_ª•_size
,

346 
f‹˚_exp
)

348 
vîbs_xrcd
 *
vxrcd
 = 
NULL
;

349 
ibv_exp_¸óã_qp
 *
cmd_exp
 = 
NULL
;

350 
ibv_exp_¸óã_qp_ª•
 *
ª•_exp
 = 
NULL
;

351 
ibv_¸óã_qp
 *
cmd
;

352 
ibv_¸óã_qp_ª•
 *
ª•
;

353 
wsize
;

355 i‡(
©å_exp
->
comp_mask
 >
IBV_EXP_QP_INIT_ATTR_RESERVED1
)

356  
ENOSYS
;

358 
cmd
 = 
cmd_buf
;

359 
ª•
 = 
ª•_buf
;

361 i‡(
©å_exp
->
comp_mask
 >
IBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 || 
f‹˚_exp
) {

362 
cmd_exp
 = 
cmd_buf
;

363 
ª•_exp
 = 
ª•_buf
;

364 
wsize
 = 
lib_cmd_size
 + 
drv_cmd_size
;

372 
cmd
 = (
ibv_¸óã_qp
 *)((*)&
cmd_exp
->
comp_mask
 - (cmd->
ª•⁄£
));

377 
ª•
 = (
ibv_¸óã_qp_ª•
 *)

378 ((
uöt8_t
 *)
ª•_exp
 +

379 (
ª•_exp
->
comp_mask
));

381 
	`IBV_INIT_CMD_RESP_EXP
(
CREATE_QP
, 
cmd_exp
, 
lib_cmd_size
, 
drv_cmd_size
,

382 
ª•_exp
, 
lib_ª•_size
, 
drv_ª•_size
);

384 
wsize
 = 
lib_cmd_size
 + 
drv_cmd_size
;

385 
	`IBV_INIT_CMD_RESP
(
cmd
, 
wsize
, 
CREATE_QP
, 
ª•
, 
lib_ª•_size
 + 
drv_ª•_size
);

388 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
Ë
qp
;

390 i‡(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_XRCD
) {

392 
vxrcd
 = 
	`c⁄èöî_of
(
©å_exp
->
xrcd
, 
vîbs_xrcd
, xrcd);

393 
cmd
->
pd_h™dÀ
 = 
vxrcd
->
h™dÀ
;

395 i‡(!(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_PD
))

396  
EINVAL
;

398 
cmd
->
pd_h™dÀ
 = 
©å_exp
->
pd
->
h™dÀ
;

399 i‡(!(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_RX_HASH
))

400 
cmd
->
£nd_cq_h™dÀ
 = 
©å_exp
->
£nd_cq
->
h™dÀ
;

402 i‡(
©å_exp
->
qp_ty≥
 !
IBV_QPT_XRC_SEND
 &&

403 
©å_exp
->
qp_ty≥
 !
IBV_QPT_XRC
 &&

404 
©å_exp
->
qp_ty≥
 !
IBV_EXP_QPT_DC_INI
 &&

405 !(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_RX_HASH
)) {

406 
cmd
->
ªcv_cq_h™dÀ
 = 
©å_exp
->
ªcv_cq
->
h™dÀ
;

407 
cmd
->
§q_h™dÀ
 = 
©å_exp
->
§q
 ?áâr_exp->§q->
h™dÀ
 : 0;

411 
cmd
->
max_£nd_wr
 = 
©å_exp
->
ˇp
.max_send_wr;

412 
cmd
->
max_ªcv_wr
 = 
©å_exp
->
ˇp
.max_recv_wr;

413 
cmd
->
max_£nd_sge
 = 
©å_exp
->
ˇp
.max_send_sge;

414 
cmd
->
max_ªcv_sge
 = 
©å_exp
->
ˇp
.max_recv_sge;

415 
cmd
->
max_ölöe_d©a
 = 
©å_exp
->
ˇp
.max_inline_data;

416 
cmd
->
sq_sig_Æl
 = 
©å_exp
->sq_sig_all;

417 
cmd
->
qp_ty≥
 = (
©å_exp
->qp_ty≥ =
IBV_QPT_XRC
) ?

418 
IBV_QPT_XRC_SEND
 : 
©å_exp
->
qp_ty≥
;

419 
cmd
->
is_§q
 = !!
©å_exp
->
§q
;

420 
cmd
->
ª£rved
 = 0;

422 i‡(
cmd_exp
) {

423 
cmd_exp
->
comp_mask
 = 0;

424 i‡(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
) {

425 i‡(
©å_exp
->
exp_¸óã_Êags
 & ~
IBV_EXP_QP_CREATE_MASK
)

426  
EINVAL
;

428 
cmd_exp
->
comp_mask
 |
IBV_CREATE_QP_EX_CAP_FLAGS
;

429 
cmd_exp
->
qp_ˇp_Êags
 = 
©å_exp
->
exp_¸óã_Êags
 &

430 
IBV_EXP_CREATE_QP_KERNEL_FLAGS
;

433 i‡(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_INL_RECV
) {

434 
cmd_exp
->
comp_mask
 |
IBV_EXP_CREATE_QP_INL_RECV
;

435 
cmd_exp
->
max_öl_ªcv
 = 
©å_exp
->max_inl_recv;

437 i‡(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_QPG
) {

438 
ibv_exp_qpg
 *
qpg
 = &
©å_exp
->qpg;

440 
qpg
->
qpg_ty≥
) {

441 
IBV_EXP_QPG_PARENT
:

442 
cmd_exp
->
qpg
.
∑ª¡_©åib
.
rss_chûd_cou¡
 =

443 
qpg
->
∑ª¡_©åib
.
rss_chûd_cou¡
;

444 
cmd_exp
->
qpg
.
∑ª¡_©åib
.
tss_chûd_cou¡
 =

445 
qpg
->
∑ª¡_©åib
.
tss_chûd_cou¡
;

447 
IBV_EXP_QPG_CHILD_RX
:

448 
IBV_EXP_QPG_CHILD_TX
:

449 
cmd_exp
->
qpg
.
∑ª¡_h™dÀ
 =

450 
qpg
->
qpg_∑ª¡
->
h™dÀ
;

453  -
EINVAL
;

455 
cmd_exp
->
qpg
.
qpg_ty≥
 = qpg->qpg_type;

457 
cmd_exp
->
comp_mask
 |
IBV_EXP_CREATE_QP_QPG
;

460 i‡(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_MAX_INL_KLMS
) {

461 
cmd_exp
->
max_öl_£nd_klms
 = 
©å_exp
->max_inl_send_klms;

462 
cmd_exp
->
comp_mask
 |
IBV_EXP_CREATE_QP_MAX_INL_KLMS
;

464 i‡(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_RX_HASH
) {

465 i‡(
©å_exp
->
rx_hash_c⁄f
->
rx_hash_key_Àn
 > (
cmd_exp
->
rx_hash_öfo
.
rx_hash_key
))

466  -
EINVAL
;

468 
cmd_exp
->
rx_hash_öfo
.
rx_hash_fun˘i⁄
 = 
©å_exp
->
rx_hash_c⁄f
->rx_hash_function;

469 
cmd_exp
->
rx_hash_öfo
.
rx_hash_key_Àn
 = 
©å_exp
->
rx_hash_c⁄f
->rx_hash_key_len;

470 
cmd_exp
->
rx_hash_öfo
.
rx_hash_fõlds_mask
 = 
©å_exp
->
rx_hash_c⁄f
->rx_hash_fields_mask;

471 
	`mem˝y
(
cmd_exp
->
rx_hash_öfo
.
rx_hash_key
, 
©å_exp
->
rx_hash_c⁄f
->rx_hash_key,

472 
©å_exp
->
rx_hash_c⁄f
->
rx_hash_key_Àn
);

473 
cmd_exp
->
rx_hash_öfo
.
rwq_öd_tbl_h™dÀ
 = 
©å_exp
->
rx_hash_c⁄f
->
rwq_öd_tbl
->
öd_tbl_h™dÀ
;

474 
cmd_exp
->
rx_hash_öfo
.
ª£rved
 = 0;

477 i‡(
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_PORT
)

478 
cmd_exp
->
p‹t_num
 = 
©å_exp
->port_num;

480 
	`mem£t
(
cmd_exp
->
ª£rved_2
, 0, (cmd_exp->reserved_2));

482 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd_buf
, 
wsize
) != wsize)

483  
î∫o
;

485 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•_buf
, 
lib_ª•_size
 + 
drv_ª•_size
);

487 i‡(
abi_vî
 > 3) {

488 
©å_exp
->
ˇp
.
max_ªcv_sge
 = 
ª•
->max_recv_sge;

489 
©å_exp
->
ˇp
.
max_£nd_sge
 = 
ª•
->max_send_sge;

490 
©å_exp
->
ˇp
.
max_ªcv_wr
 = 
ª•
->max_recv_wr;

491 
©å_exp
->
ˇp
.
max_£nd_wr
 = 
ª•
->max_send_wr;

492 
©å_exp
->
ˇp
.
max_ölöe_d©a
 = 
ª•
->max_inline_data;

493 i‡(
ª•_exp
) {

494 
©å_exp
->
comp_mask
 &
IBV_EXP_QP_INIT_ATTR_RESERVED1
 - 1;

495 i‡((
ª•_exp
->
comp_mask
 & 
IBV_EXP_CREATE_QP_RESP_INL_RECV
) &&

496 (
©å_exp
->
comp_mask
 & 
IBV_EXP_QP_INIT_ATTR_INL_RECV
))

497 
©å_exp
->
max_öl_ªcv
 = 
ª•_exp
->max_inl_recv;

499 
©å_exp
->
comp_mask
 &~
IBV_EXP_QP_INIT_ATTR_INL_RECV
;

503 i‡(
abi_vî
 == 4) {

504 
ibv_¸óã_qp_ª•_v4
 *
ª•_v4
 =

505 (
ibv_¸óã_qp_ª•_v4
 *Ë
ª•
;

507 
	`memmove
((*Ë
ª•
 + (*resp),

508 (*Ë
ª•_v4
 + (*resp_v4),

509 
lib_ª•_size
 - (*
ª•
));

510 } i‡(
abi_vî
 <= 3) {

511 
ibv_¸óã_qp_ª•_v3
 *
ª•_v3
 =

512 (
ibv_¸óã_qp_ª•_v3
 *Ë
ª•
;

514 
	`memmove
((*Ë
ª•
 + (*resp),

515 (*Ë
ª•_v3
 + (*resp_v3),

516 
lib_ª•_size
 - (*
ª•
));

519 
qp
->qp.
h™dÀ
 = 
ª•
->
qp_h™dÀ
;

520 
qp
->qp.
qp_num
 = 
ª•
->
q≤
;

521 
qp
->qp.
c⁄ãxt
 = context;

522 
qp
->qp.
qp_c⁄ãxt
 = 
©å_exp
->qp_context;

523 
qp
->qp.
pd
 = 
©å_exp
->pd;

524 
qp
->qp.
£nd_cq
 = 
©å_exp
->send_cq;

525 
qp
->qp.
ªcv_cq
 = 
©å_exp
->recv_cq;

526 
qp
->qp.
§q
 = 
©å_exp
->srq;

527 
qp
->qp.
qp_ty≥
 = 
©å_exp
->qp_type;

528 
qp
->qp.
°©e
 = 
IBV_QPS_RESET
;

529 
qp
->qp.
evíts_com∂ëed
 = 0;

530 
	`±hªad_muãx_öô
(&
qp
->qp.
muãx
, 
NULL
);

531 
	`±hªad_c⁄d_öô
(&
qp
->qp.
c⁄d
, 
NULL
);

533 
qp
->
comp_mask
 = 0;

534 i‡(
	`vext_fõld_avaû
(
vîbs_qp
, 
xrcd
, 
vqp_sz
) &&

535 (
©å_exp
->
comp_mask
 & 
IBV_QP_INIT_ATTR_XRCD
)) {

536 
qp
->
comp_mask
 |
VERBS_QP_XRCD
;

537 
qp
->
xrcd
 = 
vxrcd
;

541 
	}
}

543 
	$ibv_exp_cmd_¸óã_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

544 
ibv_exp_d˘
 *
d˘
,

545 
ibv_exp_d˘_öô_©å
 *
©å
,

546 
ibv_exp_¸óã_d˘
 *
cmd
,

547 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

548 
ibv_exp_¸óã_d˘_ª•
 *
ª•
,

549 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
)

551 
wsize
 = 
lib_cmd_sz
 + 
drv_cmd_sz
;

553 
	`IBV_INIT_CMD_RESP_EXP
(
CREATE_DCT
, 
cmd
, 
lib_cmd_sz
, 
drv_cmd_sz
, 
ª•
,

554 
lib_ª•_sz
, 
drv_ª•_sz
);

556 
cmd
->
u£r_h™dÀ
 = (
__u64
)(
uöçå_t
)
d˘
;

557 
cmd
->
pd_h™dÀ
 = 
©å
->
pd
->
h™dÀ
;

558 
cmd
->
cq_h™dÀ
 = 
©å
->
cq
->
h™dÀ
;

559 
cmd
->
§q_h™dÀ
 = 
©å
->
§q
->
h™dÀ
;

560 
cmd
->
dc_key
 = 
©å
->dc_key;

561 
cmd
->
p‹t
 = 
©å
->port;

562 
cmd
->
ac˚ss_Êags
 = 
©å
->access_flags;

563 
cmd
->
mö_∫r_timî
 = 
©å
->min_rnr_timer;

564 
cmd
->
t˛ass
 = 
©å
->tclass;

565 
cmd
->
Êow_œbñ
 = 
©å
->flow_label;

566 
cmd
->
mtu
 = 
©å
->mtu;

567 
cmd
->
pkey_ödex
 = 
©å
->pkey_index;

568 
cmd
->
gid_ödex
 = 
©å
->gid_index;

569 
cmd
->
h›_limô
 = 
©å
->hop_limit;

570 
cmd
->
ölöe_size
 = 
©å
->inline_size;

571 i‡(~
IBV_EXP_DCT_CREATE_FLAGS_MASK
 & 
©å
->
¸óã_Êags
)

572  
EINVAL
;

574 
cmd
->
¸óã_Êags
 = 
©å
->create_flags;

575 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
wsize
) != wsize)

576 
îr
;

578 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, (*resp));

580 
©å
->
ölöe_size
 = 
ª•
->inline_size;

581 
d˘
->
evíts_com∂ëed
 = 0;

582 
	`±hªad_muãx_öô
(&
d˘
->
muãx
, 
NULL
);

583 
	`±hªad_c⁄d_öô
(&
d˘
->
c⁄d
, 
NULL
);

587 
îr
:

588  
î∫o
;

589 
	}
}

591 
	$ibv_exp_cmd_de°roy_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

592 
ibv_exp_d˘
 *
d˘
,

593 
ibv_exp_de°roy_d˘
 *
cmd
,

594 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

595 
ibv_exp_de°roy_d˘_ª•
 *
ª•
,

596 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
)

598 
wsize
 = 
lib_cmd_sz
 + 
drv_cmd_sz
;

600 
	`IBV_INIT_CMD_RESP_EXP
(
DESTROY_DCT
, 
cmd
, 
lib_cmd_sz
, 
drv_cmd_sz
, 
ª•
, 
lib_ª•_sz
, 
drv_ª•_sz
);

601 
cmd
->
d˘_h™dÀ
 = 
d˘
->
h™dÀ
;

603 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
wsize
) != wsize)

604  
î∫o
;

606 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, (*resp));

607 
	`±hªad_muãx_lock
(&
d˘
->
muãx
);

608 
d˘
->
evíts_com∂ëed
 !
ª•
->
evíts_ªp‹ãd
)

609 
	`±hªad_c⁄d_waô
(&
d˘
->
c⁄d
, &d˘->
muãx
);

610 
	`±hªad_muãx_u∆ock
(&
d˘
->
muãx
);

613 
	}
}

615 
	$ibv_exp_cmd_quîy_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

616 
ibv_exp_quîy_d˘
 *
cmd
,

617 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

618 
ibv_exp_quîy_d˘_ª•
 *
ª•
,

619 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
,

620 
ibv_exp_d˘_©å
 *
©å
)

622 
wsize
 = 
lib_cmd_sz
 + 
drv_cmd_sz
;

624 
	`IBV_INIT_CMD_RESP_EXP
(
QUERY_DCT
, 
cmd
, 
lib_cmd_sz
, 
drv_cmd_sz
, 
ª•
, 
lib_ª•_sz
, 
drv_ª•_sz
);

626 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
wsize
) != wsize)

627  
î∫o
;

629 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, (*resp));

630 
©å
->
dc_key
 = 
ª•
->dc_key;

631 
©å
->
p‹t
 = 
ª•
->port;

632 
©å
->
ac˚ss_Êags
 = 
ª•
->access_flags;

633 
©å
->
mö_∫r_timî
 = 
ª•
->min_rnr_timer;

634 
©å
->
t˛ass
 = 
ª•
->tclass;

635 
©å
->
Êow_œbñ
 = 
ª•
->flow_label;

636 
©å
->
mtu
 = 
ª•
->mtu;

637 
©å
->
pkey_ödex
 = 
ª•
->pkey_index;

638 
©å
->
gid_ödex
 = 
ª•
->gid_index;

639 
©å
->
h›_limô
 = 
ª•
->hop_limit;

640 
©å
->
key_viﬁ©i⁄s
 = 
ª•
->key_violations;

641 
©å
->
°©e
 = 
ª•
->state;

644 
	}
}

646 
	$ibv_exp_cmd_¨m_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

647 
ibv_exp_¨m_©å
 *
©å
,

648 
ibv_exp_¨m_d˘
 *
cmd
,

649 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

650 
ibv_exp_¨m_d˘_ª•
 *
ª•
,

651 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
)

653 
wsize
 = 
lib_cmd_sz
 + 
drv_cmd_sz
;

655 i‡(
©å
->
comp_mask
) {

656 
î∫o
 = 
EINVAL
;

657  
î∫o
;

660 
	`IBV_INIT_CMD_RESP_EXP
(
ARM_DCT
, 
cmd
, 
lib_cmd_sz
, 
drv_cmd_sz
, 
ª•
, 
lib_ª•_sz
, 
drv_ª•_sz
);

662 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
wsize
) != wsize)

663  
î∫o
;

666 
	}
}

668 
	$ibv_exp_cmd_modify_cq
(
ibv_cq
 *
cq
,

669 
ibv_exp_cq_©å
 *
©å
,

670 
©å_mask
,

671 
ibv_exp_modify_cq
 *
cmd
, 
size_t
 
cmd_size
)

673 
	`IBV_INIT_CMD_EXP
(
MODIFY_CQ
, 
cmd
, 
cmd_size
, 0);

675 i‡(
©å
->
comp_mask
 >
IBV_EXP_CQ_ATTR_RESERVED
)

676  
ENOSYS
;

678 
cmd
->
comp_mask
 = 0;

679 
cmd
->
cq_h™dÀ
 = 
cq
->
h™dÀ
;

680 
cmd
->
©å_mask
 =áttr_mask;

681 
cmd
->
cq_cou¡
 = 
©å
->
modî©i⁄
.cq_count;

682 
cmd
->
cq_≥riod
 = 
©å
->
modî©i⁄
.cq_period;

684 i‡(
©å
->
cq_ˇp_Êags
 & ~
IBV_EXP_CQ_CAP_MASK
)

685  
EINVAL
;

687 
cmd
->
cq_ˇp_Êags
 = 
©å
->cq_cap_flags;

689 i‡(
	`wrôe
(
cq
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

690  
î∫o
;

693 
	}
}

695 
	$ibv_exp_cmd_modify_qp
(
ibv_qp
 *
qp
, 
ibv_exp_qp_©å
 *
©å
,

696 
uöt64_t
 
exp_©å_mask
, 
ibv_exp_modify_qp
 *
cmd
,

697 
size_t
 
cmd_size
)

699 i‡(
©å
->
comp_mask
 >
IBV_EXP_QP_ATTR_RESERVED
)

700  
ENOSYS
;

702 
	`IBV_INIT_CMD_EXP
(
MODIFY_QP
, 
cmd
, 
cmd_size
, 0);

705 
cmd
->
qp_h™dÀ
 = 
qp
->
h™dÀ
;

706 
cmd
->
©å_mask
 = (
__u32
)
exp_©å_mask
;

707 
cmd
->
qkey
 = 
©å
->qkey;

708 
cmd
->
rq_p¢
 = 
©å
->rq_psn;

709 
cmd
->
sq_p¢
 = 
©å
->sq_psn;

710 
cmd
->
de°_qp_num
 = 
©å
->dest_qp_num;

711 
cmd
->
qp_ac˚ss_Êags
 = 
©å
->qp_access_flags;

712 
cmd
->
pkey_ödex
 = 
©å
->pkey_index;

713 
cmd
->
Æt_pkey_ödex
 = 
©å
->alt_pkey_index;

714 
cmd
->
qp_°©e
 = 
©å
->qp_state;

715 
cmd
->
cur_qp_°©e
 = 
©å
->cur_qp_state;

716 
cmd
->
∑th_mtu
 = 
©å
->path_mtu;

717 
cmd
->
∑th_mig_°©e
 = 
©å
->path_mig_state;

718 
cmd
->
í_sqd_async_nŸify
 = 
©å
->en_sqd_async_notify;

719 
cmd
->
max_rd_©omic
 = 
©å
->max_rd_atomic;

720 
cmd
->
max_de°_rd_©omic
 = 
©å
->max_dest_rd_atomic;

721 
cmd
->
mö_∫r_timî
 = 
©å
->min_rnr_timer;

722 
cmd
->
p‹t_num
 = 
©å
->port_num;

723 
cmd
->
timeout
 = 
©å
->timeout;

724 
cmd
->
ªåy_˙t
 = 
©å
->retry_cnt;

725 
cmd
->
∫r_ªåy
 = 
©å
->rnr_retry;

726 
cmd
->
Æt_p‹t_num
 = 
©å
->alt_port_num;

727 
cmd
->
Æt_timeout
 = 
©å
->alt_timeout;

729 
	`mem˝y
(
cmd
->
de°
.
dgid
, 
©å
->
ah_©å
.
grh
.dgid.
øw
, 16);

730 
cmd
->
de°
.
Êow_œbñ
 = 
©å
->
ah_©å
.
grh
.flow_label;

731 
cmd
->
de°
.
dlid
 = 
©å
->
ah_©å
.dlid;

732 
cmd
->
de°
.
ª£rved
 = 0;

733 
cmd
->
de°
.
sgid_ödex
 = 
©å
->
ah_©å
.
grh
.sgid_index;

734 
cmd
->
de°
.
h›_limô
 = 
©å
->
ah_©å
.
grh
.hop_limit;

735 
cmd
->
de°
.
åaffic_˛ass
 = 
©å
->
ah_©å
.
grh
.traffic_class;

736 
cmd
->
de°
.
¶
 = 
©å
->
ah_©å
.sl;

737 
cmd
->
de°
.
§c_∑th_bôs
 = 
©å
->
ah_©å
.src_path_bits;

738 
cmd
->
de°
.
°©ic_øã
 = 
©å
->
ah_©å
.static_rate;

739 
cmd
->
de°
.
is_globÆ
 = 
©å
->
ah_©å
.is_global;

740 
cmd
->
de°
.
p‹t_num
 = 
©å
->
ah_©å
.port_num;

742 
	`mem˝y
(
cmd
->
Æt_de°
.
dgid
, 
©å
->
Æt_ah_©å
.
grh
.dgid.
øw
, 16);

743 
cmd
->
Æt_de°
.
Êow_œbñ
 = 
©å
->
Æt_ah_©å
.
grh
.flow_label;

744 
cmd
->
Æt_de°
.
dlid
 = 
©å
->
Æt_ah_©å
.dlid;

745 
cmd
->
Æt_de°
.
ª£rved
 = 0;

746 
cmd
->
Æt_de°
.
sgid_ödex
 = 
©å
->
Æt_ah_©å
.
grh
.sgid_index;

747 
cmd
->
Æt_de°
.
h›_limô
 = 
©å
->
Æt_ah_©å
.
grh
.hop_limit;

748 
cmd
->
Æt_de°
.
åaffic_˛ass
 = 
©å
->
Æt_ah_©å
.
grh
.traffic_class;

749 
cmd
->
Æt_de°
.
¶
 = 
©å
->
Æt_ah_©å
.sl;

750 
cmd
->
Æt_de°
.
§c_∑th_bôs
 = 
©å
->
Æt_ah_©å
.src_path_bits;

751 
cmd
->
Æt_de°
.
°©ic_øã
 = 
©å
->
Æt_ah_©å
.static_rate;

752 
cmd
->
Æt_de°
.
is_globÆ
 = 
©å
->
Æt_ah_©å
.is_global;

753 
cmd
->
Æt_de°
.
p‹t_num
 = 
©å
->
Æt_ah_©å
.port_num;

754 
cmd
->
d˘_key
 = 
©å
->dct_key;

755 
cmd
->
exp_©å_mask
 = (
__u32
)”xp_©å_mask >> 
IBV_EXP_START_FLAG_LOC
);

756 i‡(
©å
->
comp_mask
 & 
IBV_EXP_QP_ATTR_FLOW_ENTROPY
)

757 
cmd
->
Êow_íå›y
 = 
©å
->flow_entropy;

758 
cmd
->
øã_limô
 = 
©å
->rate_limit;

759 i‡(
©å
->
comp_mask
 & 
IBV_EXP_QP_ATTR_BURST_INFO
) {

760 i‡(
cmd
->
øã_limô
) {

761 
cmd
->
bur°_öfo
.
max_bur°_sz
 = 
©å
->burst_info.max_burst_sz;

762 
cmd
->
bur°_öfo
.
typiˇl_pkt_sz
 = 
©å
->burst_info.typical_pkt_sz;

763 
cmd
->
bur°_öfo
.
ª£rved
 = 0;

765  
EINVAL
;

768 
cmd
->
ª£rved
[0] = 0;

769 
cmd
->
ª£rved
[1] = 0;

770 
cmd
->
comp_mask
 = 
©å
->comp_mask;

772 i‡(
	`wrôe
(
qp
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

773  
î∫o
;

775 i‡(
exp_©å_mask
 & 
IBV_EXP_QP_STATE
)

776 
qp
->
°©e
 = 
©å
->
qp_°©e
;

779 
	}
}

781 
	$ibv_exp_cmd_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

782 
ibv_comp_ch™√l
 *
ch™√l
,

783 
comp_ve˘‹
, 
ibv_cq
 *
cq
,

784 
ibv_exp_¸óã_cq
 *
cmd
, 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

785 
ibv_¸óã_cq_ª•
 *
ª•
, 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
,

786 
ibv_exp_cq_öô_©å
 *
©å
)

788 
wsize
 = 
lib_cmd_sz
 + 
drv_cmd_sz
;

790 
	`IBV_INIT_CMD_RESP_EXP
(
CREATE_CQ
, 
cmd
, 
lib_cmd_sz
, 
drv_cmd_sz
, 
ª•
,

791 
lib_ª•_sz
, 
drv_ª•_sz
);

793 
cmd
->
comp_mask
 = 0;

794 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
Ë
cq
;

795 
cmd
->
cqe
 = cqe;

796 
cmd
->
comp_ve˘‹
 = comp_vector;

797 
cmd
->
comp_ch™√l
 = 
ch™√l
 ? ch™√l->
fd
 : -1;

798 
cmd
->
ª£rved
 = 0;

800 i‡(
©å
->
comp_mask
 > 
IBV_EXP_CQ_INIT_ATTR_RESERVED1
)

801  
ENOSYS
;

803 i‡(
©å
->
comp_mask
 & 
IBV_EXP_CQ_INIT_ATTR_FLAGS
) {

804 i‡(
©å
->
Êags
 & ~
IBV_EXP_CQ_CREATE_FLAGS_MASK
)

805  
ENOSYS
;

807 
cmd
->
comp_mask
 |
IBV_EXP_CREATE_CQ_CAP_FLAGS
;

808 
cmd
->
¸óã_Êags
 = 
©å
->
Êags
;

811 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
wsize
) != wsize)

812  
î∫o
;

814 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
lib_ª•_sz
 + 
drv_ª•_sz
);

816 
cq
->
h™dÀ
 = 
ª•
->
cq_h™dÀ
;

817 
cq
->
cqe
 = 
ª•
->cqe;

818 
cq
->
c⁄ãxt
 = context;

821 
	}
}

823 
	$ibv_exp_cmd_¸óã_mr
(
ibv_exp_¸óã_mr_ö
 *
ö
,

824 
ibv_mr
 *
mr
,

825 
ibv_exp_¸óã_mr
 *
cmd
,

826 
size_t
 
lib_cmd_sz
,

827 
size_t
 
drv_cmd_sz
,

828 
ibv_exp_¸óã_mr_ª•
 *
ª•
,

829 
size_t
 
lib_ª•_sz
,

830 
size_t
 
drv_ª•_sz
)

832 
ibv_pd
 *
pd
 = 
ö
->pd;

833 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
pd
->context;

834 
ibv_exp_mr_öô_©å
 *
mr_öô_©å
 = &
ö
->
©å
;

836 
wsize
 = 
lib_cmd_sz
 + 
drv_cmd_sz
;

838 
	`IBV_INIT_CMD_RESP_EXP
(
CREATE_MR
, 
cmd
, 
lib_cmd_sz
, 
drv_cmd_sz
, 
ª•
,

839 
lib_ª•_sz
, 
drv_ª•_sz
);

841 
cmd
->
pd_h™dÀ
 = 
pd
->
h™dÀ
;

842 
cmd
->
max_klm_li°_size
 = 
mr_öô_©å
->max_klm_list_size;

843 
cmd
->
¸óã_Êags
 = 
mr_öô_©å
->create_flags;

844 
cmd
->
exp_ac˚ss_Êags
 = 
mr_öô_©å
->exp_access_flags;

845 
cmd
->
comp_mask
 = 
ö
->comp_mask;

847 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
wsize
) != wsize)

848  
î∫o
;

850 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, (*resp));

852 
mr
->
h™dÀ
 = 
ª•
->handle;

853 
mr
->
lkey
 = 
ª•
->lkey;

854 
mr
->
rkey
 = 
ª•
->rkey;

855 
mr
->
c⁄ãxt
 = 
pd
->context;

858 
	}
}

860 
	$ibv_exp_cmd_quîy_mkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

861 
ibv_mr
 *
mr
,

862 
ibv_exp_mkey_©å
 *
mkey_©å
,

863 
ibv_exp_quîy_mkey
 *
cmd
, 
size_t
 
lib_cmd_sz
,

864 
size_t
 
drv_cmd_sz
,

865 
ibv_exp_quîy_mkey_ª•
 *
ª•
,

866 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
)

868 
wsize
 = 
lib_cmd_sz
 + 
drv_cmd_sz
;

870 
	`IBV_INIT_CMD_RESP_EXP
(
QUERY_MKEY
, 
cmd
, 
lib_cmd_sz
, 
drv_cmd_sz
, 
ª•
,

871 
lib_ª•_sz
, 
drv_ª•_sz
);

873 
cmd
->
h™dÀ
 = 
mr
->handle;

874 
cmd
->
lkey
 = 
mr
->lkey;

875 
cmd
->
rkey
 = 
mr
->rkey;

876 
cmd
->
comp_mask
 = 
mkey_©å
->comp_mask;

877 
cmd
->
ª£rved
 = 0;

879 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
wsize
) != wsize)

880  
î∫o
;

882 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, (*resp));

884 
mkey_©å
->
max_klm_li°_size
 = 
ª•
->max_klm_list_size;

887 
	}
}

889 
	$ibv_cmd_exp_ªg_mr
(

890 c⁄° 
ibv_exp_ªg_mr_ö
 *
mr_öô_©å
,

891 
uöt64_t
 
hˇ_va
, 
ibv_mr
 *
mr
,

892 
ibv_exp_ªg_mr
 *
cmd
,

893 
size_t
 
cmd_size
,

894 
ibv_exp_ªg_mr_ª•
 *
ª•
,

895 
size_t
 
ª•_size
)

897 
ibv_pd
 *
pd
 = 
mr_öô_©å
->pd;

899 i‡(
mr_öô_©å
->
comp_mask
 >
IBV_EXP_REG_MR_RESERVED
)

900  
EINVAL
;

902 
	`IBV_INIT_CMD_RESP_EXP
(
REG_MR
, 
cmd
, 
cmd_size
, 0, 
ª•
, 
ª•_size
, 0);

904 
cmd
->
comp_mask
 = 0;

905 
cmd
->
°¨t
 = (
uöçå_t
Ë
mr_öô_©å
->
addr
;

906 
cmd
->
Àngth
 = 
mr_öô_©å
->length;

907 
cmd
->
hˇ_va
 = hca_va;

908 
cmd
->
pd_h™dÀ
 = 
pd
->
h™dÀ
;

909 
cmd
->
ª£rved
 = 0;

910 
cmd
->
exp_ac˚ss_Êags
 = 
mr_öô_©å
->
exp_ac˚ss
;

912 i‡(
mr_öô_©å
->
comp_mask
 & 
IBV_EXP_REG_MR_DM
) {

913 i‡(!
mr_öô_©å
->
dm
)

914  
EINVAL
;

915 
cmd
->
dm_h™dÀ
 = 
mr_öô_©å
->
dm
->
h™dÀ
;

916 
cmd
->
comp_mask
 |
IBV_EXP_REG_MR_DM_HANDLE
;

919 i‡(
	`wrôe
(
pd
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

920  
î∫o
;

922 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, (*resp));

924 
mr
->
h™dÀ
 = 
ª•
->
mr_h™dÀ
;

925 
mr
->
lkey
 = 
ª•
->lkey;

926 
mr
->
rkey
 = 
ª•
->rkey;

927 
mr
->
c⁄ãxt
 = 
pd
->context;

930 
	}
}

932 
	$ibv_cmd_exp_¥e„tch_mr
(
ibv_mr
 *
mr
,

933 
ibv_exp_¥e„tch_©å
 *
©å
)

935 
ibv_exp_¥e„tch_mr
 
cmd
;

937 
	`IBV_INIT_CMD_EXP
(
PREFETCH_MR
, &
cmd
, (cmd), 0);

939 i‡(
©å
->
comp_mask
 >
IBV_EXP_PREFETCH_MR_RESERVED
)

940  
EINVAL
;

942 i‡(
©å
->
Êags
 & ~
IBV_EXP_PREFETCH_WRITE_ACCESS
)

943  
EINVAL
;

945 
cmd
.
comp_mask
 = 0;

946 
cmd
.
mr_h™dÀ
 = 
mr
->
h™dÀ
;

947 
cmd
.
Êags
 = 
©å
->flags;

948 
cmd
.
°¨t
 = (
uöçå_t
Ë
©å
->
addr
;

949 
cmd
.
Àngth
 = 
©å
->length;

951 i‡(
	`wrôe
(
mr
->
c⁄ãxt
->
cmd_fd
, &
cmd
, (cmd)) != (cmd))

952  
î∫o
;

955 
	}
}

957 
	$ibv_exp_cmd_¸óã_wq
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

958 
ibv_exp_wq_öô_©å
 *
wq_öô_©å
,

959 
ibv_exp_wq
 *
wq
,

960 
ibv_exp_¸óã_wq
 *
cmd
,

961 
size_t
 
cmd_c‹e_size
,

962 
size_t
 
cmd_size
,

963 
ibv_exp_¸óã_wq_ª•
 *
ª•
,

964 
size_t
 
ª•_c‹e_size
,

965 
size_t
 
ª•_size
)

967 
îr
;

969 
	`IBV_INIT_CMD_RESP_EX_V
(
cmd
, 
cmd_c‹e_size
, 
cmd_size
,

970 
EXP_CREATE_WQ
, 
ª•
,

971 
ª•_c‹e_size
, 
ª•_size
);

973 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
)
wq
;

974 
cmd
->
pd_h™dÀ
 = 
wq_öô_©å
->
pd
->
h™dÀ
;

975 
cmd
->
cq_h™dÀ
 = 
wq_öô_©å
->
cq
->
h™dÀ
;

976 
cmd
->
wq_ty≥
 = 
wq_öô_©å
->wq_type;

977 
cmd
->
max_ªcv_sge
 = 
wq_öô_©å
->max_recv_sge;

978 
cmd
->
max_ªcv_wr
 = 
wq_öô_©å
->max_recv_wr;

979 
cmd
->
comp_mask
 = 0;

981 
îr
 = 
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
);

982 i‡(
îr
 !
cmd_size
)

983  
î∫o
;

985 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

987 i‡(
ª•
->
ª•⁄£_Àngth
 < 
ª•_c‹e_size
)

988  
EINVAL
;

990 
wq
->
h™dÀ
 = 
ª•
->
wq_h™dÀ
;

991 
wq_öô_©å
->
max_ªcv_wr
 = 
ª•
->max_recv_wr;

992 
wq_öô_©å
->
max_ªcv_sge
 = 
ª•
->max_recv_sge;

993 
wq
->
wq_num
 = 
ª•
->
wqn
;

994 
wq
->
c⁄ãxt
 = context;

995 
wq
->
cq
 = 
wq_öô_©å
->cq;

996 
wq
->
pd
 = 
wq_öô_©å
->pd;

997 
wq
->
§q
 = 
wq_öô_©å
->srq;

998 
wq
->
wq_ty≥
 = 
wq_öô_©å
->wq_type;

1001 
	}
}

1003 
	$ibv_exp_cmd_modify_wq
(
ibv_exp_wq
 *
wq
, 
ibv_exp_wq_©å
 *
©å
,

1004 
ib_exp_modify_wq
 *
cmd
, 
size_t
 
cmd_size
)

1006 
	`IBV_INIT_CMD_EX
(
cmd
, 
cmd_size
, 
EXP_MODIFY_WQ
);

1008 
cmd
->
cuº_wq_°©e
 = 
©å
->curr_wq_state;

1009 
cmd
->
wq_°©e
 = 
©å
->wq_state;

1010 
cmd
->
wq_h™dÀ
 = 
wq
->
h™dÀ
;

1014 
cmd
->
comp_mask
 = 
©å
->
©å_mask
 & (~
IBV_EXP_CREATE_WQ_VLAN_OFFLOADS
);

1016 i‡(
	`wrôe
(
wq
->
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

1017  
î∫o
;

1019 i‡(
©å
->
©å_mask
 & 
IBV_EXP_WQ_ATTR_STATE
)

1020 
wq
->
°©e
 = 
©å
->
wq_°©e
;

1023 
	}
}

1025 
	$ibv_exp_cmd_de°roy_wq
(
ibv_exp_wq
 *
wq
)

1027 
ib_exp_de°roy_wq
 
cmd
;

1028 
ibv_de°roy_wq_ª•
 
ª•
;

1029 
ªt
 = 0;

1031 
	`mem£t
(&
cmd
, 0, (cmd));

1032 
	`mem£t
(&
ª•
, 0, (resp));

1033 
	`IBV_INIT_CMD_RESP_EX
(&
cmd
, (cmd), 
EXP_DESTROY_WQ
, &
ª•
, (resp));

1034 
cmd
.
wq_h™dÀ
 = 
wq
->
h™dÀ
;

1036 i‡(
	`wrôe
(
wq
->
c⁄ãxt
->
cmd_fd
, &
cmd
, (cmd)) != (cmd))

1037 
ªt
 = 
î∫o
;

1039  
ªt
;

1040 
	}
}

1042 
	$ibv_exp_cmd_¸óã_§q
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
vîbs_§q
 *
§q
,

1043 
ibv_exp_¸óã_§q_©å
 *
©å
,

1044 
ibv_exp_¸óã_§q
 *
cmd
,

1045 
size_t
 
cmd_c‹e_size
, size_à
cmd_size
,

1046 
ibv_exp_¸óã_§q_ª•
 *
ª•
,

1047 
size_t
 
ª•_c‹e_size
, size_à
ª•_size
)

1049 
vîbs_xrcd
 *
vxrcd
 = 
NULL
;

1050 
îr
;

1052 
	`IBV_INIT_CMD_RESP_EX_V
(
cmd
, 
cmd_c‹e_size
, 
cmd_size
, 
EXP_CREATE_SRQ
,

1053 
ª•
, 
ª•_c‹e_size
, 
ª•_size
);

1055 i‡(
©å
->
comp_mask
 >
IBV_EXP_CREATE_SRQ_RESERVED
)

1056  
ENOSYS
;

1058 
cmd
->
u£r_h™dÀ
 = (
uöçå_t
Ë
§q
;

1059 
cmd
->
§q_ty≥
 = 
©å
->srq_type;

1060 
cmd
->
pd_h™dÀ
 = 
©å
->
pd
->
h™dÀ
;

1061 
cmd
->
max_wr
 = 
©å
->
ba£
.attr.max_wr;

1062 
cmd
->
max_sge
 = 
©å
->
ba£
.attr.max_sge;

1063 
cmd
->
§q_limô
 = 
©å
->
ba£
.attr.srq_limit;

1064 
cmd
->
cq_h™dÀ
 = 
©å
->
cq
->
h™dÀ
;

1066 i‡(
©å
->
comp_mask
 & 
IBV_EXP_CREATE_SRQ_XRCD
) {

1067 
vxrcd
 = 
	`c⁄èöî_of
(
©å
->
xrcd
, 
vîbs_xrcd
, xrcd);

1068 
cmd
->
xrcd_h™dÀ
 = 
vxrcd
->
h™dÀ
;

1071 
îr
 = 
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
);

1072 i‡(
îr
 !
cmd_size
)

1073  
î∫o
;

1075 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

1077 i‡(
ª•
->
ª•⁄£_Àngth
 < ‘e•->
ba£
))

1078  -
EINVAL
;

1080 
§q
->
§q_ty≥
 = 
©å
->srq_type;

1081 
§q
->
cq
 = 
©å
->cq;

1082 
§q
->
§q_num
 = 
ª•
->
ba£
.
§qn
;

1083 
§q
->
comp_mask
 = 
IBV_SRQ_INIT_ATTR_TYPE
 |

1084 
VERBS_SRQ_CQ
 |

1085 
VERBS_SRQ_NUM
;

1087 i‡(
vxrcd
) {

1088 
§q
->
xrcd
 = 
vxrcd
;

1089 
§q
->
comp_mask
 |
VERBS_SRQ_XRCD
;

1092 
§q
->§q.
h™dÀ
 = 
ª•
->
ba£
.
§q_h™dÀ
;

1093 
§q
->§q.
c⁄ãxt
 = context;

1094 
§q
->§q.
§q_c⁄ãxt
 = 
©å
->
ba£
.srq_context;

1095 
§q
->§q.
pd
 = 
©å
->pd;

1096 
§q
->§q.
evíts_com∂ëed
 = 0;

1097 
	`±hªad_muãx_öô
(&
§q
->§q.
muãx
, 
NULL
);

1098 
	`±hªad_c⁄d_öô
(&
§q
->§q.
c⁄d
, 
NULL
);

1100 
©å
->
ba£
.©å.
max_wr
 = 
ª•
->base.max_wr;

1101 
©å
->
ba£
.©å.
max_sge
 = 
ª•
->base.max_sge;

1104 
	}
}

1106 
	$ibv_exp_cmd_¸óã_rwq_öd_èbÀ
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1107 
ibv_exp_rwq_öd_èbÀ_öô_©å
 *
öô_©å
,

1108 
ibv_exp_rwq_öd_èbÀ
 *
rwq_öd_èbÀ
,

1109 
ibv_exp_¸óã_rwq_öd_èbÀ
 *
cmd
,

1110 
size_t
 
cmd_c‹e_size
,

1111 
size_t
 
cmd_size
,

1112 
ibv_exp_¸óã_rwq_öd_èbÀ_ª•
 *
ª•
,

1113 
size_t
 
ª•_c‹e_size
,

1114 
size_t
 
ª•_size
)

1116 
îr
, 
i
;

1117 
uöt32_t
 
ªquúed_tbl_size
, 
Æloc_tbl_size
;

1118 
uöt32_t
 *
tbl_°¨t
;

1119 
num_tbl_íåõs
;

1121 
Æloc_tbl_size
 = 
cmd_c‹e_size
 - (*
cmd
);

1122 
num_tbl_íåõs
 = 1 << 
öô_©å
->
log_öd_tbl_size
;

1125 
ªquúed_tbl_size
 = (
num_tbl_íåõs
 * (
uöt32_t
)Ë< (
uöt64_t
) ?

1126 (
uöt64_t
Ë: (
num_tbl_íåõs
 * (
uöt32_t
));

1128 i‡(
Æloc_tbl_size
 < 
ªquúed_tbl_size
)

1129  
EINVAL
;

1131 
tbl_°¨t
 = (
uöt32_t
 *)((
uöt8_t
 *)
cmd
 + (*cmd));

1132 
i
 = 0; i < 
num_tbl_íåõs
; i++)

1133 
tbl_°¨t
[
i
] = 
öô_©å
->
öd_tbl
[i]->
h™dÀ
;

1135 
	`IBV_INIT_CMD_RESP_EX_V
(
cmd
, 
cmd_c‹e_size
, 
cmd_size
,

1136 
EXP_CREATE_RWQ_IND_TBL
, 
ª•
,

1137 
ª•_c‹e_size
, 
ª•_size
);

1139 
cmd
->
log_öd_tbl_size
 = 
öô_©å
->log_ind_tbl_size;

1140 
cmd
->
comp_mask
 = 0;

1142 
îr
 = 
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
);

1143 i‡(
îr
 !
cmd_size
)

1144  
î∫o
;

1146 
	`VALGRIND_MAKE_MEM_DEFINED
(
ª•
, 
ª•_size
);

1148 i‡(
ª•
->
ª•⁄£_Àngth
 < 
ª•_c‹e_size
)

1149  
EINVAL
;

1151 
rwq_öd_èbÀ
->
öd_tbl_h™dÀ
 = 
ª•
->ind_tbl_handle;

1152 
rwq_öd_èbÀ
->
öd_tbl_num
 = 
ª•
->ind_tbl_num;

1153 
rwq_öd_èbÀ
->
c⁄ãxt
 = context;

1155 
	}
}

1157 
	$ibv_exp_cmd_de°roy_rwq_öd_èbÀ
(
ibv_exp_rwq_öd_èbÀ
 *
rwq_öd_èbÀ
)

1159 
ibv_exp_de°roy_rwq_öd_èbÀ
 
cmd
;

1160 
ªt
 = 0;

1162 
	`mem£t
(&
cmd
, 0, (cmd));

1163 
	`IBV_INIT_CMD_EX
(&
cmd
, (cmd), 
EXP_DESTROY_RWQ_IND_TBL
);

1164 
cmd
.
öd_tbl_h™dÀ
 = 
rwq_öd_èbÀ
->ind_tbl_handle;

1166 i‡(
	`wrôe
(
rwq_öd_èbÀ
->
c⁄ãxt
->
cmd_fd
, &
cmd
, (cmd)) != (cmd))

1167 
ªt
 = 
î∫o
;

1169  
ªt
;

1170 
	}
}

1172 
	$ibv_exp_cmd_£t_c⁄ãxt_©å
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1173 
ibv_exp_›í_devi˚_©å
 *
˘x_©å
,

1174 
ibv_exp_cmd_£t_c⁄ãxt_©å
 *
cmd
,

1175 
size_t
 
cmd_size
)

1177 
ªt
 = 0;

1179 
	`IBV_INIT_CMD_EX
(
cmd
, 
cmd_size
, 
EXP_SET_CTX_ATTR
);

1181 
cmd
->
comp_mask
 = 
˘x_©å
->comp_mask;

1183 i‡(
˘x_©å
->
comp_mask
 & 
IBV_EXP_SET_ATTR_PEER_INFO
) {

1184 i‡(!
˘x_©å
->
≥î_öfo
.
≥î_«me
)

1185  
EINVAL
;

1187 
cmd
->
≥î_id
 = 
˘x_©å
->
≥î_öfo
.peer_id;

1188 
	`mem˝y
(
cmd
->
≥î_«me
, 
˘x_©å
->
≥î_öfo
.peer_name,

1189 (
cmd
->
≥î_«me
));

1192 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

1193 
ªt
 = 
î∫o
;

1195  
ªt
;

1196 
	}
}

1198 
	$ibv_exp_cmd_Æloc_dm
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1199 
ibv_exp_Æloc_dm_©å
 *
©å
,

1200 
ibv_exp_dm
 *
dm
, *
°¨t_addr
,

1201 
ibv_exp_Æloc_dm
 *
cmd
,

1202 
size_t
 
cmd_c‹e_size
,

1203 
size_t
 
cmd_size
,

1204 
ibv_exp_Æloc_dm_ª•
 *
ª•
,

1205 
size_t
 
ª•_c‹e_size
,

1206 
size_t
 
ª•_size
)

1208 
	`IBV_INIT_CMD_RESP_EX_V
(
cmd
, 
cmd_c‹e_size
, 
cmd_size
,

1209 
EXP_ALLOC_DM
, 
ª•
,

1210 
ª•_c‹e_size
, 
ª•_size
);

1212 
cmd
->
uaddr
 = (
__u64
)(
uöçå_t
)
°¨t_addr
;

1213 
cmd
->
Àngth
 = 
©å
->length;

1215 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, 
cmd
, 
cmd_size
) != cmd_size)

1216  
î∫o
;

1218 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, (
ª•_size
));

1220 i‡(
ª•
->
ª•⁄£_Àngth
 < 
ª•_c‹e_size
)

1221  
EINVAL
;

1223 
dm
->
h™dÀ
 = 
ª•
->
dm_h™dÀ
;

1224 
dm
->
c⁄ãxt
 = context;

1227 
	}
}

1229 
	$ibv_exp_cmd_‰ì_dm
(
ibv_exp_dm
 *
dm
)

1231 
ibv_exp_‰ì_dm
 
cmd
;

1233 
	`IBV_INIT_CMD_EX
(&
cmd
, (cmd), 
EXP_FREE_DM
);

1234 
cmd
.
dm_h™dÀ
 = 
dm
->
h™dÀ
;

1236 i‡(
	`wrôe
(
dm
->
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd)

1237  
î∫o
;

1240 
	}
}

	@libibverbs-41mlnx1/src/compat-1_0.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°rög.h
>

38 
	~<°ddef.h
>

39 
	~<°dlib.h
>

40 
	~<uni°d.h
>

41 
	~<Æloˇ.h
>

43 
	~"ibvîbs.h
"

45 
	sibv_pd_1_0
 {

46 
ibv_c⁄ãxt_1_0
 *
	mc⁄ãxt
;

47 
uöt32_t
 
	mh™dÀ
;

49 
ibv_pd
 *
	mªÆ_pd
;

52 
	sibv_mr_1_0
 {

53 
ibv_c⁄ãxt_1_0
 *
	mc⁄ãxt
;

54 
ibv_pd_1_0
 *
	mpd
;

55 
uöt32_t
 
	mh™dÀ
;

56 
uöt32_t
 
	mlkey
;

57 
uöt32_t
 
	mrkey
;

59 
ibv_mr
 *
	mªÆ_mr
;

62 
	sibv_§q_1_0
 {

63 
ibv_c⁄ãxt_1_0
 *
	mc⁄ãxt
;

64 *
	m§q_c⁄ãxt
;

65 
ibv_pd_1_0
 *
	mpd
;

66 
uöt32_t
 
	mh™dÀ
;

68 
±hªad_muãx_t
 
	mmuãx
;

69 
±hªad_c⁄d_t
 
	mc⁄d
;

70 
uöt32_t
 
	mevíts_com∂ëed
;

72 
ibv_§q
 *
	mªÆ_§q
;

75 
	sibv_qp_öô_©å_1_0
 {

76 *
	mqp_c⁄ãxt
;

77 
ibv_cq_1_0
 *
	m£nd_cq
;

78 
ibv_cq_1_0
 *
	mªcv_cq
;

79 
ibv_§q_1_0
 *
	m§q
;

80 
ibv_qp_ˇp
 
	mˇp
;

81 
ibv_qp_ty≥
 
	mqp_ty≥
;

82 
	msq_sig_Æl
;

85 
	sibv_£nd_wr_1_0
 {

86 
ibv_£nd_wr_1_0
 *
	m√xt
;

87 
uöt64_t
 
	mwr_id
;

88 
ibv_sge
 *
	msg_li°
;

89 
	mnum_sge
;

90 
ibv_wr_›code
 
	m›code
;

91 
	m£nd_Êags
;

92 
uöt32_t
 
	mimm_d©a
;

95 
uöt64_t
 
	mªmŸe_addr
;

96 
uöt32_t
 
	mrkey
;

97 } 
	mrdma
;

99 
uöt64_t
 
	mªmŸe_addr
;

100 
uöt64_t
 
	mcom∑ª_add
;

101 
uöt64_t
 
	msw≠
;

102 
uöt32_t
 
	mrkey
;

103 } 
	m©omic
;

105 
ibv_ah_1_0
 *
	mah
;

106 
uöt32_t
 
	mªmŸe_q≤
;

107 
uöt32_t
 
	mªmŸe_qkey
;

108 } 
	mud
;

109 } 
	mwr
;

112 
	sibv_ªcv_wr_1_0
 {

113 
ibv_ªcv_wr_1_0
 *
	m√xt
;

114 
uöt64_t
 
	mwr_id
;

115 
ibv_sge
 *
	msg_li°
;

116 
	mnum_sge
;

119 
	sibv_qp_1_0
 {

120 
ibv_c⁄ãxt_1_0
 *
	mc⁄ãxt
;

121 *
	mqp_c⁄ãxt
;

122 
ibv_pd_1_0
 *
	mpd
;

123 
ibv_cq_1_0
 *
	m£nd_cq
;

124 
ibv_cq_1_0
 *
	mªcv_cq
;

125 
ibv_§q_1_0
 *
	m§q
;

126 
uöt32_t
 
	mh™dÀ
;

127 
uöt32_t
 
	mqp_num
;

128 
ibv_qp_°©e
 
	m°©e
;

129 
ibv_qp_ty≥
 
	mqp_ty≥
;

131 
±hªad_muãx_t
 
	mmuãx
;

132 
±hªad_c⁄d_t
 
	mc⁄d
;

133 
uöt32_t
 
	mevíts_com∂ëed
;

135 
ibv_qp
 *
	mªÆ_qp
;

138 
	sibv_cq_1_0
 {

139 
ibv_c⁄ãxt_1_0
 *
	mc⁄ãxt
;

140 *
	mcq_c⁄ãxt
;

141 
uöt32_t
 
	mh™dÀ
;

142 
	mcqe
;

144 
±hªad_muãx_t
 
	mmuãx
;

145 
±hªad_c⁄d_t
 
	mc⁄d
;

146 
uöt32_t
 
	mcomp_evíts_com∂ëed
;

147 
uöt32_t
 
	masync_evíts_com∂ëed
;

149 
ibv_cq
 *
	mªÆ_cq
;

152 
	sibv_ah_1_0
 {

153 
ibv_c⁄ãxt_1_0
 *
	mc⁄ãxt
;

154 
ibv_pd_1_0
 *
	mpd
;

155 
uöt32_t
 
	mh™dÀ
;

157 
ibv_ah
 *
	mªÆ_ah
;

160 
	sibv_devi˚_1_0
 {

161 *
	mobsﬁëe_sysfs_dev
;

162 *
	mobsﬁëe_sysfs_ibdev
;

163 
ibv_devi˚
 *
	mªÆ_devi˚
;

164 
ibv_devi˚_›s
 
	m›s
;

167 
	sibv_c⁄ãxt_›s_1_0
 {

168 (*
	mquîy_devi˚
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

169 
ibv_devi˚_©å
 *
	mdevi˚_©å
);

170 (*
	mquîy_p‹t
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

171 
ibv_p‹t_©å
 *
	mp‹t_©å
);

172 
	mibv_pd
 * (*
	mÆloc_pd
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
);

173 (*
	mdóŒoc_pd
)(
ibv_pd
 *
	mpd
);

174 
	mibv_mr
 * (*
	mªg_mr
)(
ibv_pd
 *
	mpd
, *
	maddr
, 
size_t
 
	mÀngth
,

175 
	mac˚ss
);

176 (*
	mdîeg_mr
)(
ibv_mr
 *
	mmr
);

177 
	mibv_cq
 * (*
	m¸óã_cq
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
	mcqe
,

178 
ibv_comp_ch™√l
 *
	mch™√l
,

179 
	mcomp_ve˘‹
);

180 (*
	mpﬁl_cq
)(
ibv_cq_1_0
 *
	mcq
, 
	mnum_íåõs
,

181 
ibv_wc
 *
	mwc
);

182 (*
	mªq_nŸify_cq
)(
ibv_cq_1_0
 *
	mcq
,

183 
	msﬁicôed_⁄ly
);

184 (*
	mcq_evít
)(
ibv_cq
 *
	mcq
);

185 (*
	mªsize_cq
)(
ibv_cq
 *
	mcq
, 
	mcqe
);

186 (*
	mde°roy_cq
)(
ibv_cq
 *
	mcq
);

187 
	mibv_§q
 * (*
	m¸óã_§q
)(
ibv_pd
 *
	mpd
,

188 
ibv_§q_öô_©å
 *
	m§q_öô_©å
);

189 (*
	mmodify_§q
)(
ibv_§q
 *
	m§q
,

190 
ibv_§q_©å
 *
	m§q_©å
,

191 
	m§q_©å_mask
);

192 (*
	mquîy_§q
)(
ibv_§q
 *
	m§q
,

193 
ibv_§q_©å
 *
	m§q_©å
);

194 (*
	mde°roy_§q
)(
ibv_§q
 *
	m§q
);

195 (*
	mpo°_§q_ªcv
)(
ibv_§q_1_0
 *
	m§q
,

196 
ibv_ªcv_wr_1_0
 *
	mªcv_wr
,

197 
ibv_ªcv_wr_1_0
 **
	mbad_ªcv_wr
);

198 
	mibv_qp
 * (*
	m¸óã_qp
)(
ibv_pd
 *
	mpd
, 
ibv_qp_öô_©å
 *
	m©å
);

199 (*
	mquîy_qp
)(
ibv_qp
 *
	mqp
, 
ibv_qp_©å
 *
	m©å
,

200 
	m©å_mask
,

201 
ibv_qp_öô_©å
 *
	möô_©å
);

202 (*
	mmodify_qp
)(
ibv_qp
 *
	mqp
, 
ibv_qp_©å
 *
	m©å
,

203 
	m©å_mask
);

204 (*
	mde°roy_qp
)(
ibv_qp
 *
	mqp
);

205 (*
	mpo°_£nd
)(
ibv_qp_1_0
 *
	mqp
,

206 
ibv_£nd_wr_1_0
 *
	mwr
,

207 
ibv_£nd_wr_1_0
 **
	mbad_wr
);

208 (*
	mpo°_ªcv
)(
ibv_qp_1_0
 *
	mqp
,

209 
ibv_ªcv_wr_1_0
 *
	mwr
,

210 
ibv_ªcv_wr_1_0
 **
	mbad_wr
);

211 
	mibv_ah
 * (*
	m¸óã_ah
)(
ibv_pd
 *
	mpd
, 
ibv_ah_©å
 *
	m©å
);

212 (*
	mde°roy_ah
)(
ibv_ah
 *
	mah
);

213 (*
	m©èch_mˇ°
)(
ibv_qp
 *
	mqp
, 
ibv_gid
 *
	mgid
,

214 
uöt16_t
 
	mlid
);

215 (*
	mdëach_mˇ°
)(
ibv_qp
 *
	mqp
, 
ibv_gid
 *
	mgid
,

216 
uöt16_t
 
	mlid
);

219 
	sibv_c⁄ãxt_1_0
 {

220 
ibv_devi˚_1_0
 *
	mdevi˚
;

221 
ibv_c⁄ãxt_›s_1_0
 
	m›s
;

222 
	mcmd_fd
;

223 
	masync_fd
;

224 
	mnum_comp_ve˘‹s
;

226 
ibv_c⁄ãxt
 *
	mªÆ_c⁄ãxt
;

229 
ibv_devi˚_1_0
 **
	$__ibv_gë_devi˚_li°_1_0
(*
num
)

231 
ibv_devi˚
 **
ªÆ_li°
;

232 
ibv_devi˚_1_0
 **
l
;

233 
i
, 
n
;

235 
ªÆ_li°
 = 
	`ibv_gë_devi˚_li°
(&
n
);

236 i‡(!
ªÆ_li°
)

237  
NULL
;

239 
l
 = 
	`ˇŒoc
(
n
 + 2,  (
ibv_devi˚_1_0
 *));

240 i‡(!
l
)

241 
‰ì_devi˚_li°
;

243 
l
[0] = (*Ë
ªÆ_li°
;

245 
i
 = 0; i < 
n
; ++i) {

246 
l
[
i
 + 1] = 
	`ˇŒoc
(1,  (
ibv_devi˚_1_0
));

247 i‡(!
l
[
i
 + 1])

248 
Áû
;

249 
l
[
i
 + 1]->
ªÆ_devi˚
 = 
ªÆ_li°
[i];

252 i‡(
num
)

253 *
num
 = 
n
;

255  
l
 + 1;

257 
Áû
:

258 
i
 = 1; i <
n
; ++i)

259 i‡(
l
[
i
])

260 
	`‰ì
(
l
[
i
]);

261 
	`‰ì
(
l
);

263 
‰ì_devi˚_li°
:

264 
	`ibv_‰ì_devi˚_li°
(
ªÆ_li°
);

265  
NULL
;

266 
	}
}

267 
symvî
(
__ibv_gë_devi˚_li°_1_0
, 
ibv_gë_devi˚_li°
, 
IBVERBS_1
.0);

269 
	$__ibv_‰ì_devi˚_li°_1_0
(
ibv_devi˚_1_0
 **
li°
)

271 
ibv_devi˚_1_0
 **
l
 = 
li°
;

273 *
l
) {

274 
	`‰ì
(*
l
);

275 ++
l
;

278 
	`ibv_‰ì_devi˚_li°
((*Ë
li°
[-1]);

279 
	`‰ì
(
li°
 - 1);

280 
	}
}

281 
symvî
(
__ibv_‰ì_devi˚_li°_1_0
, 
ibv_‰ì_devi˚_li°
, 
IBVERBS_1
.0);

283 c⁄° *
	$__ibv_gë_devi˚_«me_1_0
(
ibv_devi˚_1_0
 *
devi˚
)

285  
	`ibv_gë_devi˚_«me
(
devi˚
->
ªÆ_devi˚
);

286 
	}
}

287 
symvî
(
__ibv_gë_devi˚_«me_1_0
, 
ibv_gë_devi˚_«me
, 
IBVERBS_1
.0);

289 
uöt64_t
 
	$__ibv_gë_devi˚_guid_1_0
(
ibv_devi˚_1_0
 *
devi˚
)

291  
	`ibv_gë_devi˚_guid
(
devi˚
->
ªÆ_devi˚
);

292 
	}
}

293 
symvî
(
__ibv_gë_devi˚_guid_1_0
, 
ibv_gë_devi˚_guid
, 
IBVERBS_1
.0);

295 
	$pﬁl_cq_wøµî_1_0
(
ibv_cq_1_0
 *
cq
, 
num_íåõs
,

296 
ibv_wc
 *
wc
)

298  
cq
->
c⁄ãxt
->
ªÆ_c⁄ãxt
->
›s
.
	`pﬁl_cq
(cq->
ªÆ_cq
, 
num_íåõs
, 
wc
);

299 
	}
}

301 
	$ªq_nŸify_cq_wøµî_1_0
(
ibv_cq_1_0
 *
cq
, 
sﬁ_⁄ly
)

303  
cq
->
c⁄ãxt
->
ªÆ_c⁄ãxt
->
›s
.
	`ªq_nŸify_cq
(cq->
ªÆ_cq
, 
sﬁ_⁄ly
);

304 
	}
}

306 
	$po°_§q_ªcv_wøµî_1_0
(
ibv_§q_1_0
 *
§q
, 
ibv_ªcv_wr_1_0
 *
wr
,

307 
ibv_ªcv_wr_1_0
 **
bad_wr
)

309 
ibv_ªcv_wr_1_0
 *
w
;

310 
ibv_ªcv_wr
 *
ªÆ_wr
, *
hód_wr
 = 
NULL
, *
èû_wr
 = NULL, *
ªÆ_bad_wr
;

311 
ªt
;

313 
w
 = 
wr
; w; w = w->
√xt
) {

314 
ªÆ_wr
 = 
	`Æloˇ
( *real_wr);

315 
ªÆ_wr
->
wr_id
 = 
w
->wr_id;

316 
ªÆ_wr
->
sg_li°
 = 
w
->sg_list;

317 
ªÆ_wr
->
num_sge
 = 
w
->num_sge;

318 
ªÆ_wr
->
√xt
 = 
NULL
;

319 i‡(
èû_wr
)

320 
èû_wr
->
√xt
 = 
ªÆ_wr
;

322 
hód_wr
 = 
ªÆ_wr
;

324 
èû_wr
 = 
ªÆ_wr
;

327 
ªt
 = 
§q
->
c⁄ãxt
->
ªÆ_c⁄ãxt
->
›s
.
	`po°_§q_ªcv
(§q->
ªÆ_§q
, 
hód_wr
,

328 &
ªÆ_bad_wr
);

330 i‡(
ªt
) {

331 
ªÆ_wr
 = 
hód_wr
, 
w
 = 
wr
;

332 
ªÆ_wr
;

333 
ªÆ_wr
 =Ñól_wr->
√xt
, 
w
 = w->next)

334 i‡(
ªÆ_wr
 =
ªÆ_bad_wr
) {

335 *
bad_wr
 = 
w
;

340  
ªt
;

341 
	}
}

343 
	$po°_£nd_wøµî_1_0
(
ibv_qp_1_0
 *
qp
, 
ibv_£nd_wr_1_0
 *
wr
,

344 
ibv_£nd_wr_1_0
 **
bad_wr
)

346 
ibv_£nd_wr_1_0
 *
w
;

347 
ibv_£nd_wr
 *
ªÆ_wr
, *
hód_wr
 = 
NULL
, *
èû_wr
 = NULL, *
ªÆ_bad_wr
;

348 
is_ud
 = 
qp
->
qp_ty≥
 =
IBV_QPT_UD
;

349 
ªt
;

351 
w
 = 
wr
; w; w = w->
√xt
) {

352 
ªÆ_wr
 = 
	`Æloˇ
( *real_wr);

353 
ªÆ_wr
->
wr_id
 = 
w
->wr_id;

354 
ªÆ_wr
->
√xt
 = 
NULL
;

356 
	`mem˝y
(&
ªÆ_wr
->
sg_li°
, &
w
->sg_list,

357  *
w
 - 
	`off£tof
(
ibv_£nd_wr
, 
sg_li°
));

359 i‡(
is_ud
)

360 
ªÆ_wr
->
wr
.
ud
.
ah
 = 
w
->wr.ud.ah->
ªÆ_ah
;

362 i‡(
èû_wr
)

363 
èû_wr
->
√xt
 = 
ªÆ_wr
;

365 
hód_wr
 = 
ªÆ_wr
;

367 
èû_wr
 = 
ªÆ_wr
;

370 
ªt
 = 
qp
->
c⁄ãxt
->
ªÆ_c⁄ãxt
->
›s
.
	`po°_£nd
(qp->
ªÆ_qp
, 
hód_wr
,

371 &
ªÆ_bad_wr
);

373 i‡(
ªt
) {

374 
ªÆ_wr
 = 
hód_wr
, 
w
 = 
wr
;

375 
ªÆ_wr
;

376 
ªÆ_wr
 =Ñól_wr->
√xt
, 
w
 = w->next)

377 i‡(
ªÆ_wr
 =
ªÆ_bad_wr
) {

378 *
bad_wr
 = 
w
;

383  
ªt
;

384 
	}
}

386 
	$po°_ªcv_wøµî_1_0
(
ibv_qp_1_0
 *
qp
, 
ibv_ªcv_wr_1_0
 *
wr
,

387 
ibv_ªcv_wr_1_0
 **
bad_wr
)

389 
ibv_ªcv_wr_1_0
 *
w
;

390 
ibv_ªcv_wr
 *
ªÆ_wr
, *
hód_wr
 = 
NULL
, *
èû_wr
 = NULL, *
ªÆ_bad_wr
;

391 
ªt
;

393 
w
 = 
wr
; w; w = w->
√xt
) {

394 
ªÆ_wr
 = 
	`Æloˇ
( *real_wr);

395 
ªÆ_wr
->
wr_id
 = 
w
->wr_id;

396 
ªÆ_wr
->
sg_li°
 = 
w
->sg_list;

397 
ªÆ_wr
->
num_sge
 = 
w
->num_sge;

398 
ªÆ_wr
->
√xt
 = 
NULL
;

399 i‡(
èû_wr
)

400 
èû_wr
->
√xt
 = 
ªÆ_wr
;

402 
hód_wr
 = 
ªÆ_wr
;

404 
èû_wr
 = 
ªÆ_wr
;

407 
ªt
 = 
qp
->
c⁄ãxt
->
ªÆ_c⁄ãxt
->
›s
.
	`po°_ªcv
(qp->
ªÆ_qp
, 
hód_wr
,

408 &
ªÆ_bad_wr
);

410 i‡(
ªt
) {

411 
ªÆ_wr
 = 
hód_wr
, 
w
 = 
wr
;

412 
ªÆ_wr
;

413 
ªÆ_wr
 =Ñól_wr->
√xt
, 
w
 = w->next)

414 i‡(
ªÆ_wr
 =
ªÆ_bad_wr
) {

415 *
bad_wr
 = 
w
;

420  
ªt
;

421 
	}
}

423 
ibv_c⁄ãxt_1_0
 *
	$__ibv_›í_devi˚_1_0
(
ibv_devi˚_1_0
 *
devi˚
)

425 
ibv_c⁄ãxt
 *
ªÆ_˘x
;

426 
ibv_c⁄ãxt_1_0
 *
˘x
;

428 
˘x
 = 
	`mÆloc
( *ctx);

429 i‡(!
˘x
)

430  
NULL
;

432 
ªÆ_˘x
 = 
	`ibv_›í_devi˚
(
devi˚
->
ªÆ_devi˚
);

433 i‡(!
ªÆ_˘x
) {

434 
	`‰ì
(
˘x
);

435  
NULL
;

438 
˘x
->
devi˚
 = device;

439 
˘x
->
ªÆ_c⁄ãxt
 = 
ªÆ_˘x
;

441 
˘x
->
›s
.
pﬁl_cq
 = 
pﬁl_cq_wøµî_1_0
;

442 
˘x
->
›s
.
ªq_nŸify_cq
 = 
ªq_nŸify_cq_wøµî_1_0
;

443 
˘x
->
›s
.
po°_£nd
 = 
po°_£nd_wøµî_1_0
;

444 
˘x
->
›s
.
po°_ªcv
 = 
po°_ªcv_wøµî_1_0
;

445 
˘x
->
›s
.
po°_§q_ªcv
 = 
po°_§q_ªcv_wøµî_1_0
;

447  
˘x
;

448 
	}
}

449 
symvî
(
__ibv_›í_devi˚_1_0
, 
ibv_›í_devi˚
, 
IBVERBS_1
.0);

451 
	$__ibv_˛o£_devi˚_1_0
(
ibv_c⁄ãxt_1_0
 *
c⁄ãxt
)

453 
ªt
;

455 
ªt
 = 
	`ibv_˛o£_devi˚
(
c⁄ãxt
->
ªÆ_c⁄ãxt
);

456 i‡(
ªt
)

457  
ªt
;

459 
	`‰ì
(
c⁄ãxt
);

461 
	}
}

462 
symvî
(
__ibv_˛o£_devi˚_1_0
, 
ibv_˛o£_devi˚
, 
IBVERBS_1
.0);

464 
	$__ibv_gë_async_evít_1_0
(
ibv_c⁄ãxt_1_0
 *
c⁄ãxt
,

465 
ibv_async_evít
 *
evít
)

467 
ªt
;

469 
ªt
 = 
	`ibv_gë_async_evít
(
c⁄ãxt
->
ªÆ_c⁄ãxt
, 
evít
);

470 i‡(
ªt
)

471  
ªt
;

473 
evít
->
evít_ty≥
) {

474 
IBV_EVENT_CQ_ERR
:

475 
evít
->
ñemít
.
cq
 =Évít->ñemít.cq->
cq_c⁄ãxt
;

478 
IBV_EVENT_QP_FATAL
:

479 
IBV_EVENT_QP_REQ_ERR
:

480 
IBV_EVENT_QP_ACCESS_ERR
:

481 
IBV_EVENT_COMM_EST
:

482 
IBV_EVENT_SQ_DRAINED
:

483 
IBV_EVENT_PATH_MIG
:

484 
IBV_EVENT_PATH_MIG_ERR
:

485 
IBV_EVENT_QP_LAST_WQE_REACHED
:

486 
evít
->
ñemít
.
qp
 =Évít->ñemít.qp->
qp_c⁄ãxt
;

489 
IBV_EVENT_SRQ_ERR
:

490 
IBV_EVENT_SRQ_LIMIT_REACHED
:

491 
evít
->
ñemít
.
§q
 =Évít->ñemít.§q->
§q_c⁄ãxt
;

498  
ªt
;

499 
	}
}

500 
symvî
(
__ibv_gë_async_evít_1_0
, 
ibv_gë_async_evít
, 
IBVERBS_1
.0);

502 
	$__ibv_ack_async_evít_1_0
(
ibv_async_evít
 *
evít
)

504 
ibv_async_evít
 
ªÆ_evít
 = *
evít
;

506 
evít
->
evít_ty≥
) {

507 
IBV_EVENT_CQ_ERR
:

508 
ªÆ_evít
.
ñemít
.
cq
 =

509 ((
ibv_cq_1_0
 *Ë
evít
->
ñemít
.
cq
)->
ªÆ_cq
;

512 
IBV_EVENT_QP_FATAL
:

513 
IBV_EVENT_QP_REQ_ERR
:

514 
IBV_EVENT_QP_ACCESS_ERR
:

515 
IBV_EVENT_COMM_EST
:

516 
IBV_EVENT_SQ_DRAINED
:

517 
IBV_EVENT_PATH_MIG
:

518 
IBV_EVENT_PATH_MIG_ERR
:

519 
IBV_EVENT_QP_LAST_WQE_REACHED
:

520 
ªÆ_evít
.
ñemít
.
qp
 =

521 ((
ibv_qp_1_0
 *Ë
evít
->
ñemít
.
qp
)->
ªÆ_qp
;

524 
IBV_EVENT_SRQ_ERR
:

525 
IBV_EVENT_SRQ_LIMIT_REACHED
:

526 
ªÆ_evít
.
ñemít
.
§q
 =

527 ((
ibv_§q_1_0
 *Ë
evít
->
ñemít
.
§q
)->
ªÆ_§q
;

534 
	`ibv_ack_async_evít
(&
ªÆ_evít
);

535 
	}
}

536 
symvî
(
__ibv_ack_async_evít_1_0
, 
ibv_ack_async_evít
, 
IBVERBS_1
.0);

538 
	$__ibv_quîy_devi˚_1_0
(
ibv_c⁄ãxt_1_0
 *
c⁄ãxt
,

539 
ibv_devi˚_©å
 *
devi˚_©å
)

541  
	`ibv_quîy_devi˚
(
c⁄ãxt
->
ªÆ_c⁄ãxt
, 
devi˚_©å
);

542 
	}
}

543 
symvî
(
__ibv_quîy_devi˚_1_0
, 
ibv_quîy_devi˚
, 
IBVERBS_1
.0);

545 
	$__ibv_quîy_p‹t_1_0
(
ibv_c⁄ãxt_1_0
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

546 
ibv_p‹t_©å
 *
p‹t_©å
)

548  
	`ibv_quîy_p‹t
(
c⁄ãxt
->
ªÆ_c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
);

549 
	}
}

550 
symvî
(
__ibv_quîy_p‹t_1_0
, 
ibv_quîy_p‹t
, 
IBVERBS_1
.0);

552 
	$__ibv_quîy_gid_1_0
(
ibv_c⁄ãxt_1_0
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

553 
ödex
, 
ibv_gid
 *
gid
)

555  
	`ibv_quîy_gid
(
c⁄ãxt
->
ªÆ_c⁄ãxt
, 
p‹t_num
, 
ödex
, 
gid
);

556 
	}
}

557 
symvî
(
__ibv_quîy_gid_1_0
, 
ibv_quîy_gid
, 
IBVERBS_1
.0);

559 
	$__ibv_quîy_pkey_1_0
(
ibv_c⁄ãxt_1_0
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

560 
ödex
, 
uöt16_t
 *
pkey
)

562  
	`ibv_quîy_pkey
(
c⁄ãxt
->
ªÆ_c⁄ãxt
, 
p‹t_num
, 
ödex
, 
pkey
);

563 
	}
}

564 
symvî
(
__ibv_quîy_pkey_1_0
, 
ibv_quîy_pkey
, 
IBVERBS_1
.0);

566 
ibv_pd_1_0
 *
	$__ibv_Æloc_pd_1_0
(
ibv_c⁄ãxt_1_0
 *
c⁄ãxt
)

568 
ibv_pd
 *
ªÆ_pd
;

569 
ibv_pd_1_0
 *
pd
;

571 
pd
 = 
	`mÆloc
( *pd);

572 i‡(!
pd
)

573  
NULL
;

575 
ªÆ_pd
 = 
	`ibv_Æloc_pd
(
c⁄ãxt
->
ªÆ_c⁄ãxt
);

576 i‡(!
ªÆ_pd
) {

577 
	`‰ì
(
pd
);

578  
NULL
;

581 
pd
->
c⁄ãxt
 = context;

582 
pd
->
ªÆ_pd
 =Ñeal_pd;

584  
pd
;

585 
	}
}

586 
symvî
(
__ibv_Æloc_pd_1_0
, 
ibv_Æloc_pd
, 
IBVERBS_1
.0);

588 
	$__ibv_dóŒoc_pd_1_0
(
ibv_pd_1_0
 *
pd
)

590 
ªt
;

592 
ªt
 = 
	`ibv_dóŒoc_pd
(
pd
->
ªÆ_pd
);

593 i‡(
ªt
)

594  
ªt
;

596 
	`‰ì
(
pd
);

598 
	}
}

599 
symvî
(
__ibv_dóŒoc_pd_1_0
, 
ibv_dóŒoc_pd
, 
IBVERBS_1
.0);

601 
ibv_mr_1_0
 *
	$__ibv_ªg_mr_1_0
(
ibv_pd_1_0
 *
pd
, *
addr
,

602 
size_t
 
Àngth
, 
ac˚ss
)

604 
ibv_mr
 *
ªÆ_mr
;

605 
ibv_mr_1_0
 *
mr
;

607 
mr
 = 
	`mÆloc
( *mr);

608 i‡(!
mr
)

609  
NULL
;

611 
ªÆ_mr
 = 
	`ibv_ªg_mr
(
pd
->
ªÆ_pd
, 
addr
, 
Àngth
, 
ac˚ss
);

612 i‡(!
ªÆ_mr
) {

613 
	`‰ì
(
mr
);

614  
NULL
;

617 
mr
->
c⁄ãxt
 = 
pd
->context;

618 
mr
->
pd
 =Öd;

619 
mr
->
lkey
 = 
ªÆ_mr
->lkey;

620 
mr
->
rkey
 = 
ªÆ_mr
->rkey;

621 
mr
->
ªÆ_mr
 =Ñeal_mr;

623  
mr
;

624 
	}
}

625 
symvî
(
__ibv_ªg_mr_1_0
, 
ibv_ªg_mr
, 
IBVERBS_1
.0);

627 
	$__ibv_dîeg_mr_1_0
(
ibv_mr_1_0
 *
mr
)

629 
ªt
;

631 
ªt
 = 
	`ibv_dîeg_mr
(
mr
->
ªÆ_mr
);

632 i‡(
ªt
)

633  
ªt
;

635 
	`‰ì
(
mr
);

637 
	}
}

638 
symvî
(
__ibv_dîeg_mr_1_0
, 
ibv_dîeg_mr
, 
IBVERBS_1
.0);

640 
ibv_cq_1_0
 *
	$__ibv_¸óã_cq_1_0
(
ibv_c⁄ãxt_1_0
 *
c⁄ãxt
, 
cqe
,

641 *
cq_c⁄ãxt
,

642 
ibv_comp_ch™√l
 *
ch™√l
,

643 
comp_ve˘‹
)

645 
ibv_cq
 *
ªÆ_cq
;

646 
ibv_cq_1_0
 *
cq
;

648 
cq
 = 
	`mÆloc
( *cq);

649 i‡(!
cq
)

650  
NULL
;

652 
ªÆ_cq
 = 
	`ibv_¸óã_cq
(
c⁄ãxt
->
ªÆ_c⁄ãxt
, 
cqe
, 
cq_c⁄ãxt
,

653 
ch™√l
, 
comp_ve˘‹
);

654 i‡(!
ªÆ_cq
) {

655 
	`‰ì
(
cq
);

656  
NULL
;

659 
cq
->
c⁄ãxt
 = context;

660 
cq
->
cq_c⁄ãxt
 = cq_context;

661 
cq
->
cqe
 = cqe;

662 
cq
->
ªÆ_cq
 =Ñeal_cq;

664 
ªÆ_cq
->
cq_c⁄ãxt
 = 
cq
;

666  
cq
;

667 
	}
}

668 
symvî
(
__ibv_¸óã_cq_1_0
, 
ibv_¸óã_cq
, 
IBVERBS_1
.0);

670 
	$__ibv_ªsize_cq_1_0
(
ibv_cq_1_0
 *
cq
, 
cqe
)

672  
	`ibv_ªsize_cq
(
cq
->
ªÆ_cq
, 
cqe
);

673 
	}
}

674 
symvî
(
__ibv_ªsize_cq_1_0
, 
ibv_ªsize_cq
, 
IBVERBS_1
.0);

676 
	$__ibv_de°roy_cq_1_0
(
ibv_cq_1_0
 *
cq
)

678 
ªt
;

680 
ªt
 = 
	`ibv_de°roy_cq
(
cq
->
ªÆ_cq
);

681 i‡(
ªt
)

682  
ªt
;

684 
	`‰ì
(
cq
);

686 
	}
}

687 
symvî
(
__ibv_de°roy_cq_1_0
, 
ibv_de°roy_cq
, 
IBVERBS_1
.0);

689 
	$__ibv_gë_cq_evít_1_0
(
ibv_comp_ch™√l
 *
ch™√l
,

690 
ibv_cq_1_0
 **
cq
, **
cq_c⁄ãxt
)

692 
ibv_cq
 *
ªÆ_cq
;

693 *
cq_±r
;

694 
ªt
;

696 
ªt
 = 
	`ibv_gë_cq_evít
(
ch™√l
, &
ªÆ_cq
, &
cq_±r
);

697 i‡(
ªt
)

698  
ªt
;

700 *
cq
 = 
cq_±r
;

701 *
cq_c⁄ãxt
 = (*
cq
)->cq_context;

704 
	}
}

705 
symvî
(
__ibv_gë_cq_evít_1_0
, 
ibv_gë_cq_evít
, 
IBVERBS_1
.0);

707 
	$__ibv_ack_cq_evíts_1_0
(
ibv_cq_1_0
 *
cq
, 
√víts
)

709 
	`ibv_ack_cq_evíts
(
cq
->
ªÆ_cq
, 
√víts
);

710 
	}
}

711 
symvî
(
__ibv_ack_cq_evíts_1_0
, 
ibv_ack_cq_evíts
, 
IBVERBS_1
.0);

713 
ibv_§q_1_0
 *
	$__ibv_¸óã_§q_1_0
(
ibv_pd_1_0
 *
pd
,

714 
ibv_§q_öô_©å
 *
§q_öô_©å
)

716 
ibv_§q
 *
ªÆ_§q
;

717 
ibv_§q_1_0
 *
§q
;

719 
§q
 = 
	`mÆloc
( *srq);

720 i‡(!
§q
)

721  
NULL
;

723 
ªÆ_§q
 = 
	`ibv_¸óã_§q
(
pd
->
ªÆ_pd
, 
§q_öô_©å
);

724 i‡(!
ªÆ_§q
) {

725 
	`‰ì
(
§q
);

726  
NULL
;

729 
§q
->
c⁄ãxt
 = 
pd
->context;

730 
§q
->
§q_c⁄ãxt
 = 
§q_öô_©å
->srq_context;

731 
§q
->
pd
 =Öd;

732 
§q
->
ªÆ_§q
 =Ñeal_srq;

734 
ªÆ_§q
->
§q_c⁄ãxt
 = 
§q
;

736  
§q
;

737 
	}
}

738 
symvî
(
__ibv_¸óã_§q_1_0
, 
ibv_¸óã_§q
, 
IBVERBS_1
.0);

740 
	$__ibv_modify_§q_1_0
(
ibv_§q_1_0
 *
§q
,

741 
ibv_§q_©å
 *
§q_©å
,

742 
§q_©å_mask
)

744  
	`ibv_modify_§q
(
§q
->
ªÆ_§q
, 
§q_©å
, 
§q_©å_mask
);

745 
	}
}

746 
symvî
(
__ibv_modify_§q_1_0
, 
ibv_modify_§q
, 
IBVERBS_1
.0);

748 
	$__ibv_quîy_§q_1_0
(
ibv_§q_1_0
 *
§q
, 
ibv_§q_©å
 *
§q_©å
)

750  
	`ibv_quîy_§q
(
§q
->
ªÆ_§q
, 
§q_©å
);

751 
	}
}

752 
symvî
(
__ibv_quîy_§q_1_0
, 
ibv_quîy_§q
, 
IBVERBS_1
.0);

754 
	$__ibv_de°roy_§q_1_0
(
ibv_§q_1_0
 *
§q
)

756 
ªt
;

758 
ªt
 = 
	`ibv_de°roy_§q
(
§q
->
ªÆ_§q
);

759 i‡(
ªt
)

760  
ªt
;

762 
	`‰ì
(
§q
);

764 
	}
}

765 
symvî
(
__ibv_de°roy_§q_1_0
, 
ibv_de°roy_§q
, 
IBVERBS_1
.0);

767 
ibv_qp_1_0
 *
	$__ibv_¸óã_qp_1_0
(
ibv_pd_1_0
 *
pd
,

768 
ibv_qp_öô_©å_1_0
 *
qp_öô_©å
)

770 
ibv_qp
 *
ªÆ_qp
;

771 
ibv_qp_1_0
 *
qp
;

772 
ibv_qp_öô_©å
 
ªÆ_öô_©å
;

774 
qp
 = 
	`mÆloc
( *qp);

775 i‡(!
qp
)

776  
NULL
;

778 
ªÆ_öô_©å
.
qp_c⁄ãxt
 = 
qp_öô_©å
->qp_context;

779 
ªÆ_öô_©å
.
£nd_cq
 = 
qp_öô_©å
->£nd_cq->
ªÆ_cq
;

780 
ªÆ_öô_©å
.
ªcv_cq
 = 
qp_öô_©å
->ªcv_cq->
ªÆ_cq
;

781 
ªÆ_öô_©å
.
§q
 = 
qp_öô_©å
->srq ?

782 
qp_öô_©å
->
§q
->
ªÆ_§q
 : 
NULL
;

783 
ªÆ_öô_©å
.
ˇp
 = 
qp_öô_©å
->cap;

784 
ªÆ_öô_©å
.
qp_ty≥
 = 
qp_öô_©å
->qp_type;

785 
ªÆ_öô_©å
.
sq_sig_Æl
 = 
qp_öô_©å
->sq_sig_all;

787 
ªÆ_qp
 = 
	`ibv_¸óã_qp
(
pd
->
ªÆ_pd
, &
ªÆ_öô_©å
);

788 i‡(!
ªÆ_qp
) {

789 
	`‰ì
(
qp
);

790  
NULL
;

793 
qp
->
c⁄ãxt
 = 
pd
->context;

794 
qp
->
qp_c⁄ãxt
 = 
qp_öô_©å
->qp_context;

795 
qp
->
pd
 =Öd;

796 
qp
->
£nd_cq
 = 
qp_öô_©å
->send_cq;

797 
qp
->
ªcv_cq
 = 
qp_öô_©å
->recv_cq;

798 
qp
->
§q
 = 
qp_öô_©å
->srq;

799 
qp
->
qp_ty≥
 = 
qp_öô_©å
->qp_type;

800 
qp
->
qp_num
 = 
ªÆ_qp
->qp_num;

801 
qp
->
ªÆ_qp
 =Ñeal_qp;

803 
qp_öô_©å
->
ˇp
 = 
ªÆ_öô_©å
.cap;

805 
ªÆ_qp
->
qp_c⁄ãxt
 = 
qp
;

807  
qp
;

808 
	}
}

809 
symvî
(
__ibv_¸óã_qp_1_0
, 
ibv_¸óã_qp
, 
IBVERBS_1
.0);

811 
	$__ibv_quîy_qp_1_0
(
ibv_qp_1_0
 *
qp
, 
ibv_qp_©å
 *
©å
,

812 
©å_mask
,

813 
ibv_qp_öô_©å_1_0
 *
öô_©å
)

815 
ibv_qp_öô_©å
 
ªÆ_öô_©å
;

816 
ªt
;

818 
ªt
 = 
	`ibv_quîy_qp
(
qp
->
ªÆ_qp
, 
©å
, 
©å_mask
, &
ªÆ_öô_©å
);

819 i‡(
ªt
)

820  
ªt
;

822 
öô_©å
->
qp_c⁄ãxt
 = 
qp
->qp_context;

823 
öô_©å
->
£nd_cq
 = 
ªÆ_öô_©å
.£nd_cq->
cq_c⁄ãxt
;

824 
öô_©å
->
ªcv_cq
 = 
ªÆ_öô_©å
.ªcv_cq->
cq_c⁄ãxt
;

825 
öô_©å
->
§q
 = 
ªÆ_öô_©å
.§q->
§q_c⁄ãxt
;

826 
öô_©å
->
qp_ty≥
 = 
ªÆ_öô_©å
.qp_type;

827 
öô_©å
->
ˇp
 = 
ªÆ_öô_©å
.cap;

828 
öô_©å
->
sq_sig_Æl
 = 
ªÆ_öô_©å
.sq_sig_all;

831 
	}
}

832 
symvî
(
__ibv_quîy_qp_1_0
, 
ibv_quîy_qp
, 
IBVERBS_1
.0);

834 
	$__ibv_modify_qp_1_0
(
ibv_qp_1_0
 *
qp
, 
ibv_qp_©å
 *
©å
,

835 
©å_mask
)

837  
	`ibv_modify_qp
(
qp
->
ªÆ_qp
, 
©å
, 
©å_mask
);

838 
	}
}

839 
symvî
(
__ibv_modify_qp_1_0
, 
ibv_modify_qp
, 
IBVERBS_1
.0);

841 
	$__ibv_de°roy_qp_1_0
(
ibv_qp_1_0
 *
qp
)

843 
ªt
;

845 
ªt
 = 
	`ibv_de°roy_qp
(
qp
->
ªÆ_qp
);

846 i‡(
ªt
)

847  
ªt
;

849 
	`‰ì
(
qp
);

851 
	}
}

852 
symvî
(
__ibv_de°roy_qp_1_0
, 
ibv_de°roy_qp
, 
IBVERBS_1
.0);

854 
ibv_ah_1_0
 *
	$__ibv_¸óã_ah_1_0
(
ibv_pd_1_0
 *
pd
,

855 
ibv_ah_©å
 *
©å
)

857 
ibv_ah
 *
ªÆ_ah
;

858 
ibv_ah_1_0
 *
ah
;

860 
ah
 = 
	`mÆloc
( *ah);

861 i‡(!
ah
)

862  
NULL
;

864 
ªÆ_ah
 = 
	`ibv_¸óã_ah
(
pd
->
ªÆ_pd
, 
©å
);

865 i‡(!
ªÆ_ah
) {

866 
	`‰ì
(
ah
);

867  
NULL
;

870 
ah
->
c⁄ãxt
 = 
pd
->context;

871 
ah
->
pd
 =Öd;

872 
ah
->
ªÆ_ah
 =Ñeal_ah;

874  
ah
;

875 
	}
}

876 
symvî
(
__ibv_¸óã_ah_1_0
, 
ibv_¸óã_ah
, 
IBVERBS_1
.0);

878 
	$__ibv_de°roy_ah_1_0
(
ibv_ah_1_0
 *
ah
)

880 
ªt
;

882 
ªt
 = 
	`ibv_de°roy_ah
(
ah
->
ªÆ_ah
);

883 i‡(
ªt
)

884  
ªt
;

886 
	`‰ì
(
ah
);

888 
	}
}

889 
symvî
(
__ibv_de°roy_ah_1_0
, 
ibv_de°roy_ah
, 
IBVERBS_1
.0);

891 
	$__ibv_©èch_mˇ°_1_0
(
ibv_qp_1_0
 *
qp
, 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
)

893  
	`ibv_©èch_mˇ°
(
qp
->
ªÆ_qp
, 
gid
, 
lid
);

894 
	}
}

895 
symvî
(
__ibv_©èch_mˇ°_1_0
, 
ibv_©èch_mˇ°
, 
IBVERBS_1
.0);

897 
	$__ibv_dëach_mˇ°_1_0
(
ibv_qp_1_0
 *
qp
, 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
)

899  
	`ibv_dëach_mˇ°
(
qp
->
ªÆ_qp
, 
gid
, 
lid
);

900 
	}
}

901 
symvî
(
__ibv_dëach_mˇ°_1_0
, 
ibv_dëach_mˇ°
, 
IBVERBS_1
.0);

	@libibverbs-41mlnx1/src/device.c

34 #i‡
HAVE_CONFIG_H


35 
	~<c⁄fig.h
>

38 
	~<°dio.h
>

39 
	~<√töë/ö.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/°©.h
>

42 
	~<f˙é.h
>

43 
	~<uni°d.h
>

44 
	~<°dlib.h
>

45 
	~<Æloˇ.h
>

46 
	~<î∫o.h
>

47 
	~<°rög.h
>

48 
	~<dúít.h
>

50 
	~<öföib™d/¨ch.h
>

52 
	~"ibvîbs.h
"

54 
	göôülized
;

56 
±hªad_⁄˚_t
 
	göô_⁄˚
 = 
PTHREAD_ONCE_INIT
;

57 
±hªad_⁄˚_t
 
	gdevi˚_li°_⁄˚
 = 
PTHREAD_ONCE_INIT
;

58 
	gnum_devi˚s
;

59 
ibv_devi˚
 **
	gdevi˚_li°
;

61 
	$gë_devi˚
(
ibv_devi˚
 *
dev
)

63 
vîbs_devi˚
 *vîbs_devi˚ = 
	`vîbs_gë_devi˚
(
dev
);

65 i‡(!
vîbs_devi˚
)

68 
	`±hªad_muãx_lock
(&
vîbs_devi˚
->
ªÊock
);

69 
vîbs_devi˚
->
ªfcou¡
++;

70 
	`±hªad_muãx_u∆ock
(&
vîbs_devi˚
->
ªÊock
);

71 
	}
}

73 
	$put_devi˚
(
ibv_devi˚
 *
dev
)

75 
vîbs_devi˚
 *vîbs_devi˚ = 
	`vîbs_gë_devi˚
(
dev
);

77 i‡(!
vîbs_devi˚
)

80 
	`±hªad_muãx_lock
(&
vîbs_devi˚
->
ªÊock
);

81 
vîbs_devi˚
->
ªfcou¡
--;

82 i‡(!
vîbs_devi˚
->
ªfcou¡
 && vîbs_devi˚->
vîbs_unöô_func
) {

83 
	`±hªad_muãx_u∆ock
(&
vîbs_devi˚
->
ªÊock
);

84 
vîbs_devi˚
->
	`vîbs_unöô_func
(verbs_device);

87 
	`±hªad_muãx_u∆ock
(&
vîbs_devi˚
->
ªÊock
);

88 
	}
}

90 
	$öô_ªsour˚s
()

92 
öôülized
 = 
	`ibvîbs_öô
();

93 
	}
}

95 
	$cou¡_devi˚s
()

97 
num_devi˚s
 = 
	`ibvîbs_gë_devi˚_li°
(&
devi˚_li°
);

98 
	}
}

100 
	$upd©e_devs_ªfcou¡
()

102 
i
;

104 
i
 = 0; i < 
num_devi˚s
; i++)

105 
	`gë_devi˚
(
devi˚_li°
[
i
]);

106 
	}
}

108 
ibv_devi˚
 **
	$__ibv_gë_devi˚_li°
(*
num
)

110 
ibv_devi˚
 **
l
;

111 
i
;

113 i‡(
num
)

114 *
num
 = 0;

116 
	`±hªad_⁄˚
(&
öô_⁄˚
, 
öô_ªsour˚s
);

117 i‡(
öôülized
 < 0) {

118 
î∫o
 = -
öôülized
;

119  
NULL
;

122 
	`±hªad_⁄˚
(&
devi˚_li°_⁄˚
, 
cou¡_devi˚s
);

123 i‡(
num_devi˚s
 < 0) {

124 
î∫o
 = -
num_devi˚s
;

125  
NULL
;

129 
	`upd©e_devs_ªfcou¡
();

131 
l
 = 
	`ˇŒoc
(
num_devi˚s
 + 1,  (
ibv_devi˚
 *));

132 i‡(!
l
) {

133 
î∫o
 = 
ENOMEM
;

134  
NULL
;

137 
i
 = 0; i < 
num_devi˚s
; ++i)

138 
l
[
i
] = 
devi˚_li°
[i];

139 i‡(
num
)

140 *
num
 = 
num_devi˚s
;

142  
l
;

143 
	}
}

144 
deÁu…_symvî
(
__ibv_gë_devi˚_li°
, 
ibv_gë_devi˚_li°
);

146 
ibv_devi˚
 **
	$__ibv_exp_gë_devi˚_li°
(*
num
)

148 
ibv_devi˚
 **
exp_devi˚_li°
;

149 
ibv_devi˚
 **
l
 = 
NULL
;

150 
exp_num_devi˚s
;

151 
i
;

153 i‡(
num
)

154 *
num
 = 0;

156 
	`±hªad_⁄˚
(&
öô_⁄˚
, 
öô_ªsour˚s
);

158 i‡(
öôülized
 < 0) {

159 
î∫o
 = -
öôülized
;

160  
NULL
;

163 
exp_num_devi˚s
 = 
	`ibvîbs_gë_devi˚_li°
(&
exp_devi˚_li°
);

164 i‡(
exp_num_devi˚s
 < 0) {

165 
î∫o
 = -
exp_num_devi˚s
;

166  
NULL
;

169 
l
 = 
	`ˇŒoc
(
exp_num_devi˚s
 + 1, (
ibv_devi˚
 *));

170 i‡(!
l
) {

171 
î∫o
 = 
ENOMEM
;

172  
NULL
;

175 
i
 = 0; i < 
exp_num_devi˚s
; ++i)

176 
l
[
i
] = 
exp_devi˚_li°
[i];

177 i‡(
num
)

178 *
num
 = 
exp_num_devi˚s
;

180 
	`‰ì
(
exp_devi˚_li°
);

181  
l
;

182 
	}
}

183 
deÁu…_symvî
(
__ibv_exp_gë_devi˚_li°
, 
ibv_exp_gë_devi˚_li°
);

185 
	$__ibv_‰ì_devi˚_li°
(
ibv_devi˚
 **
li°
)

187 
i
;

189 
i
 = 0; 
li°
[i]; i++)

190 
	`put_devi˚
(
li°
[
i
]);

191 
	`‰ì
(
li°
);

192 
	}
}

193 
deÁu…_symvî
(
__ibv_‰ì_devi˚_li°
, 
ibv_‰ì_devi˚_li°
);

195 c⁄° *
	$__ibv_gë_devi˚_«me
(
ibv_devi˚
 *
devi˚
)

197  
devi˚
->
«me
;

198 
	}
}

199 
deÁu…_symvî
(
__ibv_gë_devi˚_«me
, 
ibv_gë_devi˚_«me
);

201 
uöt64_t
 
	$__ibv_gë_devi˚_guid
(
ibv_devi˚
 *
devi˚
)

203 
©å
[24];

204 
uöt64_t
 
guid
 = 0;

205 
uöt16_t
 
∑πs
[4];

206 
i
;

208 i‡(
	`ibv_ªad_sysfs_fûe
(
devi˚
->
ibdev_∑th
, "node_guid",

209 
©å
, áttr) < 0)

212 i‡(
	`ssˇnf
(
©å
, "%hx:%hx:%hx:%hx",

213 
∑πs
,Öarts + 1,Öarts + 2,Öarts + 3) != 4)

216 
i
 = 0; i < 4; ++i)

217 
guid
 = (guid << 16Ë| 
∑πs
[
i
];

219  
	`ht⁄Œ
(
guid
);

220 
	}
}

221 
deÁu…_symvî
(
__ibv_gë_devi˚_guid
, 
ibv_gë_devi˚_guid
);

223 
	$__ibv_exp_modify_cq
(
ibv_cq
 *
cq
,

224 
ibv_exp_cq_©å
 *
©å
,

225 
©å_mask
)

227 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

228  
ENOSYS
;

229 
	}
}

231 
	$__ibv_exp_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

232 
ibv_exp_devi˚_©å
 *
©å
)

234 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

235  
ENOSYS
;

236 
	}
}

238 
	$__ibv_exp_po°_èsk
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

239 
ibv_exp_èsk
 *
èsk_li°
,

240 
ibv_exp_èsk
 **
bad_èsk
)

242 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

243  
ENOSYS
;

244 
	}
}

246 
	$__ibv_exp_¥e„tch_mr
(
ibv_mr
 *
mr
, 
ibv_exp_¥e„tch_©å
 *
©å
)

248 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

249  
ENOSYS
;

250 
	}
}

252 
	$__ibv_exp_böd_mw
(
ibv_exp_mw_böd
 *
mw_böd
)

254 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

255  
ENOSYS
;

256 
	}
}

258 
	$__ibv_exp_¨m_d˘
(
ibv_exp_d˘
 *
d˘
,

259 
ibv_exp_¨m_©å
 *
©å
)

261 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

262  
ENOSYS
;

263 
	}
}

265 
	$__ibv_exp_modify_qp
(
ibv_qp
 *
qp
, 
ibv_exp_qp_©å
 *
©å
,

266 
uöt64_t
 
exp_©å_mask
)

268 
vîbs_c⁄ãxt_exp
 *
v˘x
;

269 
ªt
;

271 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
, 
drv_exp_modify_qp
);

272 i‡(!
v˘x
) {

273 
î∫o
 = 
ENOSYS
;

274  
î∫o
;

276 
ªt
 = 
v˘x
->
	`drv_exp_modify_qp
(
qp
, 
©å
, 
exp_©å_mask
);

277 i‡(
ªt
)

278  
ªt
;

280 i‡(
exp_©å_mask
 & 
IBV_EXP_QP_STATE
)

281 
qp
->
°©e
 = 
©å
->
qp_°©e
;

284 
	}
}

286 
ibv_mr
 *
	$__ibv_exp_¸óã_mr
(
ibv_exp_¸óã_mr_ö
 *
ö
)

288 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

289 
î∫o
 = 
ENOSYS
;

290  
NULL
;

291 
	}
}

293 
ibv_exp_mkey_li°_c⁄èöî
 *
	$__ibv_exp_Æloc_mkey_li°_mem‹y
(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
©å
)

295 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

296 
î∫o
 = 
ENOSYS
;

297  
NULL
;

298 
	}
}

300 
	$__ibv_exp_dóŒoc_mkey_li°_mem‹y
(
ibv_exp_mkey_li°_c⁄èöî
 *
mem
)

302 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

303 
î∫o
 = 
ENOSYS
;

304  
î∫o
;

305 
	}
}

307 
	$__ibv_exp_quîy_mkey
(
ibv_mr
 *
mr
,

308 
ibv_exp_mkey_©å
 *
quîy_mkey_ö
)

310 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: device doesn't support function.\n");

311 
î∫o
 = 
ENOSYS
;

312  
î∫o
;

313 
	}
}

315 
	$__ibv_exp_quîy_gid_©å
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

316 
uöt8_t
 
p‹t_num
,

317 
ödex
,

318 
ibv_exp_gid_©å
 *
©å
)

320 *
dú_∑th
;

321 
«me
[32];

322 
buff
[41];

323 
DIR
 *
dú
;

325 i‡(
©å
->
comp_mask
 & ~(
IBV_EXP_QUERY_GID_ATTR_RESERVED
 - 1))

326  
ENOTSUP
;

328 i‡(
©å
->
comp_mask
 & 
IBV_EXP_QUERY_GID_ATTR_TYPE
) {

329 
	`¢¥ötf
(
«me
, (name), "ports/%d/gid_attrs/types/%d",

330 
p‹t_num
, 
ödex
);

331 i‡(
	`ibv_ªad_sysfs_fûe
(
c⁄ãxt
->
devi˚
->
ibdev_∑th
, 
«me
, 
buff
,

332 (
buff
)) <= 0) {

333 i‡(
î∫o
 =
EINVAL
) {

337 
©å
->
ty≥
 = 
IBV_EXP_IB_ROCE_V1_GID_TYPE
;

338 
quîy_gid
;

340 i‡(
	`a•rötf
(&
dú_∑th
, "%s/%s",

341 
c⁄ãxt
->
devi˚
->
ibdev_∑th
,

343  
ENOMEM
;

344 
dú
 = 
	`›ídú
(
dú_∑th
);

345 
	`‰ì
(
dú_∑th
);

346 i‡(!
dú
) {

347 i‡(
î∫o
 =
ENOENT
)

352 
©å
->
ty≥
 = 
IBV_EXP_IB_ROCE_V1_GID_TYPE
;

354  
î∫o
;

356 
	`˛o£dú
(
dú
);

357  
EINVAL
;

360 i‡(!
	`°rcmp
(
buff
, "IB/RoCE v1"))

361 
©å
->
ty≥
 = 
IBV_EXP_IB_ROCE_V1_GID_TYPE
;

362 i‡(!
	`°rcmp
(
buff
, "RoCE v2"))

363 
©å
->
ty≥
 = 
IBV_EXP_ROCE_V2_GID_TYPE
;

364 i‡(!
	`°rcmp
(
buff
, "RoCE v1.5"))

365 
©å
->
ty≥
 = 
IBV_EXP_ROCE_V1_5_GID_TYPE
;

367  
EINVAL
;

371 
quîy_gid
:

372 i‡(
©å
->
comp_mask
 & 
IBV_EXP_QUERY_GID_ATTR_GID
) {

373 i‡(
	`ibv_quîy_gid
(
c⁄ãxt
, 
p‹t_num
, 
ödex
, &
©å
->
gid
))

374  
ENOENT
;

378 
	}
}

380 
	$ªmove_ív
(
vîbs_ívú⁄mít
 *
ív
,

381 
vîbs_ív_ôem
 *
cur
,

382 
vîbs_ív_ôem
 *
¥ev
)

384 
	`‰ì
(
cur
->
«me
);

385 
	`‰ì
(
cur
->
vÆue
);

386 i‡(
¥ev
)

387 
¥ev
->
√xt
 = 
cur
->next;

389 
ív
->
hód
 = 
cur
->
√xt
;

390 
	`‰ì
(
cur
);

391 
	}
}

393 
	$v£ãnv
(
vîbs_ívú⁄mít
 *
ív
, c⁄° *
«me
,

394 c⁄° *
vÆue
, 
ovîwrôe
)

396 
vîbs_ív_ôem
 *
cur
;

397 
vîbs_ív_ôem
 *
¥ev
;

398 
îr
 = 0;

399 
found
 = 0;

401 
	`±hªad_muãx_lock
(&
ív
->
mtx
);

402 
¥ev
 = 
NULL
, 
cur
 = 
ív
->
hód
; cur;Öªv = cur, cu∏cur->
√xt
) {

403 i‡(!
	`°rcmp
(
cur
->
«me
,Çame)) {

404 
found
 = 1;

405 i‡(!
	`°rcmp
(
cur
->
vÆue
, value))

408 i‡(
ovîwrôe
) {

409 
	`‰ì
(
cur
->
vÆue
);

410 
cur
->
vÆue
 = 
	`°rdup
(value);

411 i‡(!
cur
->
vÆue
) {

412 
	`ªmove_ív
(
ív
, 
cur
, 
¥ev
);

413 
îr
 = -1;

416 
î∫o
 = 
EEXIST
;

417 
îr
 = -1;

422 i‡(!
found
) {

423 
cur
 = 
	`ˇŒoc
(1, (*cur));

424 i‡(!
cur
)

425 
out
;

427 
cur
->
«me
 = 
	`°rdup
(name);

428 i‡(!
cur
->
«me
)

429 
out
;

431 
cur
->
vÆue
 = 
	`°rdup
(value);

432 i‡(!
cur
->
vÆue
)

433 
out
;

435 
cur
->
√xt
 = 
ív
->
hód
;

436 
ív
->
hód
 = 
cur
;

439 
	`±hªad_muãx_u∆ock
(&
ív
->
mtx
);

440  
îr
;

442 
out
:

443 i‡(
cur
) {

444 
	`‰ì
(
cur
->
«me
);

445 
	`‰ì
(
cur
);

448 
	`±hªad_muãx_u∆ock
(&
ív
->
mtx
);

450 
	}
}

452 
	$˛⁄e_ív
(
vîbs_ívú⁄mít
 *
vív
)

454 *
tmp
;

455 
i
;

456 *
p
;

457 
îr
;

464 
i
 = 0; 
ívú⁄
[i]; i++) {

465 
tmp
 = 
	`°rdup
(
ívú⁄
[
i
]);

466 i‡(!
tmp
) {

467 
	`Ârötf
(
°dîr
, "strdup failed\n");

470 
p
 = 
	`°Ωbrk
(
tmp
, "=");

471 i‡(!
p
) {

472 
	`Ârötf
(
°dîr
, "couldÇot find = char\n");

473 
	`‰ì
(
tmp
);

476 *
p
 = '\0';

477 
îr
 = 
	`v£ãnv
(
vív
, 
tmp
, 
p
 + 1, 0);

478 i‡(
îr
) {

479 
	`Ârötf
(
°dîr
, "v£ãnv %†Áûed\n", 
tmp
);

480 
	`‰ì
(
tmp
);

484 
	`‰ì
(
tmp
);

486 
	}
}

488 
	$check_•a˚_c›y
(*
vÆue
, c⁄° *
s
, 
size_t
 
n
)

490 
Àn
;

492 
Àn
 = 
	`°æí
(
s
);

493 i‡(
Àn
 >
n
)

494  
Àn
 + 1;

495 
	`°r˝y
(
vÆue
, 
s
);

497 
	}
}

499 
	$vgëív
(
vîbs_ívú⁄mít
 *
ív
, c⁄° *
«me
,

500 *
vÆue
, 
size_t
 
n
)

502 
vîbs_ív_ôem
 *
cur
;

503 
ªt
 = -1;

505 
	`±hªad_muãx_lock
(&
ív
->
mtx
);

506 
cur
 = 
ív
->
hód
; cur; cu∏cur->
√xt
) {

507 i‡(!
	`°rcmp
(
cur
->
«me
,Çame)) {

508 
ªt
 = 
	`check_•a˚_c›y
(
vÆue
, 
cur
->vÆue, 
n
);

512 
	`±hªad_muãx_u∆ock
(&
ív
->
mtx
);

513  
ªt
;

514 
	}
}

516 
	$ibv_exp_cmd_gëív
(
ibv_c⁄ãxt
 *
c⁄ãxt
, c⁄° *
«me
, *
vÆue
, 
size_t
 
n
)

518 
vîbs_c⁄ãxt_exp
 *
v˘x
;

519 *
ªs
;

521 
v˘x
 = 
	`vîbs_gë_exp_˘x
(
c⁄ãxt
);

522 i‡(
v˘x
 && v˘x->
vív
)

523  
	`vgëív
(
v˘x
->
vív
, 
«me
, 
vÆue
, 
n
);

525 
ªs
 = 
	`gëív
(
«me
);

526 i‡(
ªs
)

527  
	`check_•a˚_c›y
(
vÆue
, 
ªs
, 
n
);

530 
	}
}

532 
±hªad_muãx_t
 
	gvív_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

534 
	$__ibv_exp_u£_¥iv_ív
(
ibv_c⁄ãxt
 *
c⁄ãxt
)

536 
vîbs_c⁄ãxt_exp
 *
v˘x
;

537 
îr
;

538 
vîbs_ívú⁄mít
 *
vív
;

540 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_u£_¥iv_ív
);

541 i‡(!
v˘x
) {

542 
î∫o
 = 
ENOSYS
;

543 
	`Ârötf
(
°dîr
, "couldÇotÑetrieve context\n");

546 
	`±hªad_muãx_lock
(&
vív_muãx
);

547 i‡(!
v˘x
->
vív
) {

548 
vív
 = 
	`ˇŒoc
(1, (*venv));

549 i‡(!
vív
) {

550 
î∫o
 = 
ENOMEM
;

551 
îr
 = -1;

552 
out
;

554 
vív
->
hód
 = 
NULL
;

555 i‡(
	`±hªad_muãx_öô
(&
vív
->
mtx
, 
NULL
)) {

556 
îr
 = -1;

557 
out
;

559 
	`˛⁄e_ív
(
vív
);

560 
v˘x
->
vív
 = venv;

562 
	`±hªad_muãx_u∆ock
(&
vív_muãx
);

565 
out
:

566 
	`‰ì
(
vív
);

567 
	`±hªad_muãx_u∆ock
(&
vív_muãx
);

568  
îr
;

569 
	}
}

571 
	$__ibv_exp_£ãnv
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

572 c⁄° *
«me
,

573 c⁄° *
vÆue
,

574 
ovîwrôe
)

576 
vîbs_c⁄ãxt_exp
 *
v˘x
;

577 
vîbs_ívú⁄mít
 *
vív
;

579 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_£ãnv
);

580 i‡(
v˘x
)

581 
vív
 = 
v˘x
->venv;

583  
v˘x
 && 
vív
 ?

584 
	`v£ãnv
(
vív
, 
«me
, 
vÆue
, 
ovîwrôe
) :

585 
	`£ãnv
(
«me
, 
vÆue
, 
ovîwrôe
);

586 
	}
}

588 
ibv_c⁄ãxt
 *
	$__ibv_›í_devi˚
(
ibv_devi˚
 *
devi˚
)

590 
vîbs_devi˚
 *vîbs_devi˚ = 
	`vîbs_gë_devi˚
(
devi˚
);

591 *
dev∑th
;

592 
cmd_fd
, 
ªt
;

593 
ibv_c⁄ãxt
 *
c⁄ãxt
;

594 
vîbs_c⁄ãxt
 *
c⁄ãxt_ex
;

595 
vîbs_c⁄ãxt_exp
 *
c⁄ãxt_exp
;

597 i‡(
	`a•rötf
(&
dev∑th
, 
RDMA_CDEV_DIR
"/%s", 
devi˚
->
dev_«me
) < 0)

598  
NULL
;

604 
cmd_fd
 = 
	`›í
(
dev∑th
, 
O_RDWR
);

605 
	`‰ì
(
dev∑th
);

607 i‡(
cmd_fd
 < 0)

608  
NULL
;

610 i‡(!
vîbs_devi˚
) {

611 
c⁄ãxt
 = 
devi˚
->
›s
.
	`Æloc_c⁄ãxt
(devi˚, 
cmd_fd
);

612 i‡(!
c⁄ãxt
)

613 
îr
;

616 
c⁄ãxt_exp
 = 
	`ˇŒoc
(1, (*
c⁄ãxt_ex
) + (*context_exp) +

617 
vîbs_devi˚
->
size_of_c⁄ãxt
);

618 i‡(!
c⁄ãxt_exp
) {

619 
î∫o
 = 
ENOMEM
;

620 
îr
;

623 
c⁄ãxt_ex
 = (
vîbs_c⁄ãxt
 *)((*)
c⁄ãxt_exp
 + (*context_exp));

624 
c⁄ãxt_exp
->
sz
 = (*context_exp);

625 
c⁄ãxt_ex
->
has_comp_mask
 |
VERBS_CONTEXT_EXP
;

626 
c⁄ãxt_ex
->
c⁄ãxt
.
abi_com∑t
 = 
__VERBS_ABI_IS_EXTENDED
;

627 
c⁄ãxt_ex
->
sz
 = (*context_ex);

628 
c⁄ãxt_exp
->
exp_quîy_gid_©å
 = 
__ibv_exp_quîy_gid_©å
;

630 
c⁄ãxt
 = &
c⁄ãxt_ex
->context;

631 
ªt
 = 
vîbs_devi˚
->
	`öô_c⁄ãxt
(vîbs_devi˚, 
c⁄ãxt
, 
cmd_fd
);

632 i‡(
ªt
)

633 
vîbs_îr
;

646 
c⁄ãxt_exp
->
lib_exp_¸óã_qp
 = c⁄ãxt_exp->
drv_exp_¸óã_qp
;

647 
c⁄ãxt_exp
->
lib_exp_quîy_devi˚
 = c⁄ãxt_exp->
drv_exp_quîy_devi˚
;

648 
c⁄ãxt_exp
->
lib_exp_quîy_p‹t
 =

649 
c⁄ãxt_exp
->
drv_exp_quîy_p‹t
;

651 
c⁄ãxt_exp
->
lib_exp_ibv_ªg_sh¨ed_mr
 = 
__ibv_ªg_sh¨ed_mr
;

652 
c⁄ãxt_exp
->
lib_exp_ibv_¸óã_Êow
 =

653 
c⁄ãxt_exp
->
drv_exp_ibv_¸óã_Êow
;

654 
c⁄ãxt_exp
->
lib_exp_ibv_de°roy_Êow
 =

655 
c⁄ãxt_exp
->
drv_exp_ibv_de°roy_Êow
;

656 
c⁄ãxt_exp
->
lib_exp_modify_cq
 = (c⁄ãxt_exp->
drv_exp_modify_cq
 ?

657 
c⁄ãxt_exp
->
drv_exp_modify_cq
 :

658 
__ibv_exp_modify_cq
);

659 
c⁄ãxt_exp
->
lib_exp_quîy_devi˚
 = (c⁄ãxt_exp->
drv_exp_quîy_devi˚
 ?

660 
c⁄ãxt_exp
->
drv_exp_quîy_devi˚
 :

661 
__ibv_exp_quîy_devi˚
);

663 
c⁄ãxt_exp
->
lib_exp_modify_qp
 = 
__ibv_exp_modify_qp
;

665 
c⁄ãxt_exp
->
lib_exp_po°_èsk
 = (c⁄ãxt_exp->
drv_exp_po°_èsk
 ?

666 
c⁄ãxt_exp
->
drv_exp_po°_èsk
 :

667 
__ibv_exp_po°_èsk
);

668 
c⁄ãxt_exp
->
lib_exp_ªg_mr
 = 
__ibv_exp_ªg_mr
;

669 
c⁄ãxt_exp
->
lib_exp_böd_mw
 = (c⁄ãxt_exp->
drv_exp_böd_mw
 ?

670 
c⁄ãxt_exp
->
drv_exp_böd_mw
 :

671 
__ibv_exp_böd_mw
);

672 
c⁄ãxt_exp
->
lib_exp_¨m_d˘
 = (c⁄ãxt_exp->
drv_exp_¨m_d˘
 ?

673 
c⁄ãxt_exp
->
drv_exp_¨m_d˘
 :

674 
__ibv_exp_¨m_d˘
);

675 
c⁄ãxt_exp
->
lib_exp_¸óã_mr
 = (c⁄ãxt_exp->
drv_exp_¸óã_mr
 ?

676 
c⁄ãxt_exp
->
drv_exp_¸óã_mr
 :

677 
__ibv_exp_¸óã_mr
);

678 
c⁄ãxt_exp
->
lib_exp_quîy_mkey
 = (c⁄ãxt_exp->
drv_exp_quîy_mkey
 ?

679 
c⁄ãxt_exp
->
drv_exp_quîy_mkey
 :

680 
__ibv_exp_quîy_mkey
);

681 
c⁄ãxt_exp
->
lib_exp_dóŒoc_mkey_li°_mem‹y
 = (c⁄ãxt_exp->
drv_exp_dóŒoc_mkey_li°_mem‹y
 ?

682 
c⁄ãxt_exp
->
drv_exp_dóŒoc_mkey_li°_mem‹y
 :

683 
__ibv_exp_dóŒoc_mkey_li°_mem‹y
);

684 
c⁄ãxt_exp
->
lib_exp_Æloc_mkey_li°_mem‹y
 = (c⁄ãxt_exp->
drv_exp_Æloc_mkey_li°_mem‹y
 ?

685 
c⁄ãxt_exp
->
drv_exp_Æloc_mkey_li°_mem‹y
 :

686 
__ibv_exp_Æloc_mkey_li°_mem‹y
);

687 
c⁄ãxt_exp
->
lib_exp_¥e„tch_mr
 =

688 (
c⁄ãxt_exp
->
drv_exp_¥e„tch_mr
 ?

689 
c⁄ãxt_exp
->
drv_exp_¥e„tch_mr
 :

690 
__ibv_exp_¥e„tch_mr
);

692 
c⁄ãxt_exp
->
lib_exp_u£_¥iv_ív
 = 
__ibv_exp_u£_¥iv_ív
;

693 
c⁄ãxt_exp
->
lib_exp_£ãnv
 = 
__ibv_exp_£ãnv
;

694 
ªt
 = 
	`ibv_exp_u£_¥iv_ív
(
c⁄ãxt
);

695 i‡(
ªt
)

696 
	`Ârötf
(
°dîr
, 
PFX
 "W¨nög: ibv_exp_u£_¥iv_ív faûed,Éºno: %d\n", 
î∫o
);

700 
c⁄ãxt
->
devi˚
 = device;

701 
c⁄ãxt
->
cmd_fd
 = cmd_fd;

702 
	`±hªad_muãx_öô
(&
c⁄ãxt
->
muãx
, 
NULL
);

704 
	`gë_devi˚
(
devi˚
);

705  
c⁄ãxt
;

707 
vîbs_îr
:

708 
	`‰ì
(
c⁄ãxt_exp
);

709 
îr
:

710 
	`˛o£
(
cmd_fd
);

711  
NULL
;

712 
	}
}

713 
deÁu…_symvî
(
__ibv_›í_devi˚
, 
ibv_›í_devi˚
);

715 
	$˛ór_ív
(
vîbs_ívú⁄mít
 *
vív
)

717 
vîbs_ív_ôem
 *
cur
;

718 
vîbs_ív_ôem
 *
tmp
;

720 i‡(!
vív
)

723 
	`±hªad_muãx_lock
(&
vív
->
mtx
);

724 
cur
 = 
vív
->
hód
; cur;) {

725 
	`‰ì
(
cur
->
«me
);

726 
	`‰ì
(
cur
->
vÆue
);

727 
tmp
 = 
cur
->
√xt
;

728 
	`‰ì
(
cur
);

729 
cur
 = 
tmp
;

731 
	`±hªad_muãx_u∆ock
(&
vív
->
mtx
);

732 
	`‰ì
(
vív
);

733 
	}
}

735 
	$__ibv_˛o£_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
)

737 
ibv_devi˚
 *
devi˚
 = 
c⁄ãxt
->device;

738 
async_fd
 = 
c⁄ãxt
->async_fd;

739 
cmd_fd
 = 
c⁄ãxt
->cmd_fd;

741 
vîbs_c⁄ãxt_exp
 *
c⁄ãxt_exp
;

743 
c⁄ãxt_exp
 = 
	`vîbs_gë_exp_˘x
(
c⁄ãxt
);

745 i‡(
c⁄ãxt_exp
) {

746 
vîbs_devi˚
 *vîbs_devi˚ = 
	`vîbs_gë_devi˚
(
c⁄ãxt
->
devi˚
);

747 
vîbs_devi˚
->
	`unöô_c⁄ãxt
(vîbs_devi˚, 
c⁄ãxt
);

748 
	`˛ór_ív
(
c⁄ãxt_exp
->
vív
);

749 
	`‰ì
(
c⁄ãxt_exp
);

751 
c⁄ãxt
->
devi˚
->
›s
.
	`‰ì_c⁄ãxt
(context);

754 
	`˛o£
(
async_fd
);

755 
	`˛o£
(
cmd_fd
);

756 
	`put_devi˚
(
devi˚
);

759 
	}
}

760 
deÁu…_symvî
(
__ibv_˛o£_devi˚
, 
ibv_˛o£_devi˚
);

762 
	$__ibv_gë_async_evít
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

763 
ibv_async_evít
 *
evít
)

765 
ibv_kîn_async_evít
 
ev
;

766 
vîbs_c⁄ãxt_exp
 *
v˘x
;

767 
ibv_§q_Àgacy
 *ibv_§q_Àgacy = 
NULL
;

768 
ibv_qp
 *
qp
;

770 i‡(
	`ªad
(
c⁄ãxt
->
async_fd
, &
ev
, Év) != Év)

773 
evít
->
evít_ty≥
 = 
ev
.event_type;

775 
evít
->
evít_ty≥
) {

776 
IBV_EVENT_CQ_ERR
:

777 
evít
->
ñemít
.
cq
 = (*Ë(
uöçå_t
Ë
ev
.element;

780 
IBV_EVENT_QP_FATAL
:

781 
IBV_EVENT_QP_REQ_ERR
:

782 
IBV_EVENT_QP_ACCESS_ERR
:

783 
IBV_EVENT_COMM_EST
:

784 
IBV_EVENT_SQ_DRAINED
:

785 
IBV_EVENT_PATH_MIG
:

786 
IBV_EVENT_PATH_MIG_ERR
:

787 
IBV_EVENT_QP_LAST_WQE_REACHED
:

788 
evít
->
ñemít
.
qp
 = (*Ë(
uöçå_t
Ë
ev
.element;

789 
qp
 = 
	`ibv_föd_xrc_qp
(
evít
->
ñemít
.qp->
qp_num
);

790 i‡(
qp
) {

792 
evít
->
evít_ty≥
 |
IBV_XRC_QP_EVENT_FLAG
;

793 
evít
->
ñemít
.
qp
 = 
NULL
;

794 
evít
->
ñemít
.
xrc_qp_num
 = 
qp
->
qp_num
;

798 
IBV_EVENT_SRQ_ERR
:

799 
IBV_EVENT_SRQ_LIMIT_REACHED
:

800 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_gë_Àgacy_xrc
);

801 i‡(
v˘x
)

805 
ibv_§q_Àgacy
 = 
v˘x
->
	`drv_exp_gë_Àgacy_xrc
((*Ë(
uöçå_t
Ë
ev
.
ñemít
);

807 
evít
->
ñemít
.
§q
 = (
ibv_§q_Àgacy
) ? (*)ibv_srq_legacy :

808 (*Ë(
uöçå_t
Ë
ev
.
ñemít
;

810 
IBV_EXP_EVENT_DCT_KEY_VIOLATION
:

811 
IBV_EXP_EVENT_DCT_ACCESS_ERR
:

812 
IBV_EXP_EVENT_DCT_REQ_ERR
:

813 
evít
->
ñemít
.
d˘
 = (*)(
uöçå_t
)
ev
.element;

816 
evít
->
ñemít
.
p‹t_num
 = 
ev
.element;

820 i‡(
c⁄ãxt
->
›s
.
async_evít
)

821 
c⁄ãxt
->
›s
.
	`async_evít
(
evít
);

824 
	}
}

825 
deÁu…_symvî
(
__ibv_gë_async_evít
, 
ibv_gë_async_evít
);

827 
	$__ibv_ack_async_evít
(
ibv_async_evít
 *
evít
)

829 
is_Àgacy_xrc
 = 0;

830 
ibv_exp_d˘
 *
d˘
;

832 i‡(
evít
->
evít_ty≥
 & 
IBV_XRC_QP_EVENT_FLAG
) {

833 
evít
->
evít_ty≥
 ^
IBV_XRC_QP_EVENT_FLAG
;

834 
is_Àgacy_xrc
 = 1;

837 
evít
->
evít_ty≥
) {

838 
IBV_EVENT_CQ_ERR
:

840 
ibv_cq
 *
cq
 = 
evít
->
ñemít
.cq;

842 
	`±hªad_muãx_lock
(&
cq
->
muãx
);

843 ++
cq
->
async_evíts_com∂ëed
;

844 
	`±hªad_c⁄d_sig«l
(&
cq
->
c⁄d
);

845 
	`±hªad_muãx_u∆ock
(&
cq
->
muãx
);

850 
IBV_EVENT_QP_FATAL
:

851 
IBV_EVENT_QP_REQ_ERR
:

852 
IBV_EVENT_QP_ACCESS_ERR
:

853 
IBV_EVENT_COMM_EST
:

854 
IBV_EVENT_SQ_DRAINED
:

855 
IBV_EVENT_PATH_MIG
:

856 
IBV_EVENT_PATH_MIG_ERR
:

857 
IBV_EVENT_QP_LAST_WQE_REACHED
:

859 
ibv_qp
 *
qp
 = 
evít
->
ñemít
.qp;

861 i‡(
is_Àgacy_xrc
) {

863 
qp
 = 
	`ibv_föd_xrc_qp
(
evít
->
ñemít
.
xrc_qp_num
);

867 i‡(!
qp
 || qp->
qp_num
 !
evít
->
ñemít
.
xrc_qp_num
) {

868 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: ibv_ack_async_event, XRC qpn=%u wasn't found\n",

869 
evít
->
ñemít
.
xrc_qp_num
);

874 
	`±hªad_muãx_lock
(&
qp
->
muãx
);

875 ++
qp
->
evíts_com∂ëed
;

876 
	`±hªad_c⁄d_sig«l
(&
qp
->
c⁄d
);

877 
	`±hªad_muãx_u∆ock
(&
qp
->
muãx
);

882 
IBV_EVENT_SRQ_ERR
:

883 
IBV_EVENT_SRQ_LIMIT_REACHED
:

885 
ibv_§q
 *
§q
 = 
evít
->
ñemít
.srq;

887 i‡(
§q
->
h™dÀ
 =
LEGACY_XRC_SRQ_HANDLE
) {

888 
ibv_§q_Àgacy
 *ibv_srq_legacy =

889 (
ibv_§q_Àgacy
 *Ë
§q
;

890 
§q
 = 
ibv_§q_Àgacy
->
ibv_§q
;

894 
	`±hªad_muãx_lock
(&
§q
->
muãx
);

895 ++
§q
->
evíts_com∂ëed
;

896 
	`±hªad_c⁄d_sig«l
(&
§q
->
c⁄d
);

897 
	`±hªad_muãx_u∆ock
(&
§q
->
muãx
);

902 
IBV_EXP_EVENT_DCT_KEY_VIOLATION
:

903 
IBV_EXP_EVENT_DCT_ACCESS_ERR
:

904 
IBV_EXP_EVENT_DCT_REQ_ERR
:

905 
d˘
 = 
evít
->
ñemít
.dct;

906 
	`±hªad_muãx_lock
(&
d˘
->
muãx
);

907 
d˘
->
evíts_com∂ëed
++;

908 
	`±hªad_c⁄d_sig«l
(&
d˘
->
c⁄d
);

909 
	`±hªad_muãx_u∆ock
(&
d˘
->
muãx
);

915 
	}
}

916 
deÁu…_symvî
(
__ibv_ack_async_evít
, 
ibv_ack_async_evít
);

	@libibverbs-41mlnx1/src/enum_strs.c

33 
	~<öföib™d/vîbs.h
>

35 c⁄° *
	$ibv_node_ty≥_°r
(
ibv_node_ty≥
 
node_ty≥
)

37 c⁄° *c⁄° 
node_ty≥_°r
[] = {

38 [
IBV_NODE_CA
] = "InfiniBand channeládapter",

39 [
IBV_NODE_SWITCH
] = "InfiniBand switch",

40 [
IBV_NODE_ROUTER
] = "InfiniBandÑouter",

41 [
IBV_NODE_RNIC
] = "iWARP NIC"

43 c⁄° *c⁄° 
exp_node_ty≥_°r
[] = {

44 [
IBV_EXP_NODE_MIC
 - 
IBV_EXP_NODE_TYPE_START
] = "MIC"

47 i‡(
node_ty≥
 < 
IBV_EXP_NODE_TYPE_START
) {

48 i‡(
node_ty≥
 < 
IBV_NODE_CA
 ||Çode_ty≥ > 
IBV_NODE_RNIC
)

51  
node_ty≥_°r
[
node_ty≥
];

53 i‡(
node_ty≥
 > 
IBV_EXP_NODE_MIC
)

56  
exp_node_ty≥_°r
[
node_ty≥
 - 
IBV_EXP_NODE_TYPE_START
];

58 
	}
}

60 c⁄° *
	$ibv_p‹t_°©e_°r
(
ibv_p‹t_°©e
 
p‹t_°©e
)

62 c⁄° *c⁄° 
p‹t_°©e_°r
[] = {

63 [
IBV_PORT_NOP
] = "no state change (NOP)",

64 [
IBV_PORT_DOWN
] = "down",

65 [
IBV_PORT_INIT
] = "init",

66 [
IBV_PORT_ARMED
] = "armed",

67 [
IBV_PORT_ACTIVE
] = "active",

68 [
IBV_PORT_ACTIVE_DEFER
] = "active defer"

71 i‡(
p‹t_°©e
 < 
IBV_PORT_NOP
 ||Ö‹t_°©ê> 
IBV_PORT_ACTIVE_DEFER
)

74  
p‹t_°©e_°r
[
p‹t_°©e
];

75 
	}
}

77 c⁄° *
	$ibv_evít_ty≥_°r
(
ibv_evít_ty≥
 
evít
)

79 c⁄° *c⁄° 
evít_ty≥_°r
[] = {

80 [
IBV_EVENT_CQ_ERR
] = "CQÉrror",

81 [
IBV_EVENT_QP_FATAL
] = "local work queue catastrophicÉrror",

82 [
IBV_EVENT_QP_REQ_ERR
] = "invalidÑequestÜocal work queueÉrror",

83 [
IBV_EVENT_QP_ACCESS_ERR
] = "localáccess violation work queueÉrror",

84 [
IBV_EVENT_COMM_EST
] = "communicationÉstablished",

85 [
IBV_EVENT_SQ_DRAINED
] = "send queue drained",

86 [
IBV_EVENT_PATH_MIG
] = "path migrated",

87 [
IBV_EVENT_PATH_MIG_ERR
] = "path migrationÑequestÉrror",

88 [
IBV_EVENT_DEVICE_FATAL
] = "local catastrophicÉrror",

89 [
IBV_EVENT_PORT_ACTIVE
] = "portáctive",

90 [
IBV_EVENT_PORT_ERR
] = "portÉrror",

91 [
IBV_EVENT_LID_CHANGE
] = "LID change",

92 [
IBV_EVENT_PKEY_CHANGE
] = "P_Key change",

93 [
IBV_EVENT_SM_CHANGE
] = "SM change",

94 [
IBV_EVENT_SRQ_ERR
] = "SRQ catastrophicÉrror",

95 [
IBV_EVENT_SRQ_LIMIT_REACHED
] = "SRQÜimitÑeached",

96 [
IBV_EVENT_QP_LAST_WQE_REACHED
] = "last WQEÑeached",

97 [
IBV_EVENT_CLIENT_REREGISTER
] = "clientÑeregistration",

98 [
IBV_EVENT_GID_CHANGE
] = "GIDÅable change"

101 i‡(
evít
 < 
IBV_EVENT_CQ_ERR
 ||Évíà> 
IBV_EVENT_GID_CHANGE
)

104  
evít_ty≥_°r
[
evít
];

105 
	}
}

107 c⁄° *
	$ibv_wc_°©us_°r
(
ibv_wc_°©us
 
°©us
)

109 c⁄° *c⁄° 
wc_°©us_°r
[] = {

110 [
IBV_WC_SUCCESS
] = "success",

111 [
IBV_WC_LOC_LEN_ERR
] = "localÜengthÉrror",

112 [
IBV_WC_LOC_QP_OP_ERR
] = "local QP operationÉrror",

113 [
IBV_WC_LOC_EEC_OP_ERR
] = "local EE context operationÉrror",

114 [
IBV_WC_LOC_PROT_ERR
] = "localÖrotectionÉrror",

115 [
IBV_WC_WR_FLUSH_ERR
] = "Work Request Flushed Error",

116 [
IBV_WC_MW_BIND_ERR
] = "memory management operationÉrror",

117 [
IBV_WC_BAD_RESP_ERR
] = "badÑesponseÉrror",

118 [
IBV_WC_LOC_ACCESS_ERR
] = "localáccessÉrror",

119 [
IBV_WC_REM_INV_REQ_ERR
] = "remote invalidÑequestÉrror",

120 [
IBV_WC_REM_ACCESS_ERR
] = "remoteáccessÉrror",

121 [
IBV_WC_REM_OP_ERR
] = "remote operationÉrror",

122 [
IBV_WC_RETRY_EXC_ERR
] = "transportÑetry counterÉxceeded",

123 [
IBV_WC_RNR_RETRY_EXC_ERR
] = "RNRÑetry counterÉxceeded",

124 [
IBV_WC_LOC_RDD_VIOL_ERR
] = "local RDD violationÉrror",

125 [
IBV_WC_REM_INV_RD_REQ_ERR
] = "remote invalid RDÑequest",

126 [
IBV_WC_REM_ABORT_ERR
] = "abortedÉrror",

127 [
IBV_WC_INV_EECN_ERR
] = "invalid EE contextÇumber",

128 [
IBV_WC_INV_EEC_STATE_ERR
] = "invalid EE context state",

129 [
IBV_WC_FATAL_ERR
] = "fatalÉrror",

130 [
IBV_WC_RESP_TIMEOUT_ERR
] = "responseÅimeoutÉrror",

131 [
IBV_WC_GENERAL_ERR
] = "generalÉrror"

134 i‡(
°©us
 < 
IBV_WC_SUCCESS
 || sètu†> 
IBV_WC_GENERAL_ERR
)

137  
wc_°©us_°r
[
°©us
];

138 
	}
}

	@libibverbs-41mlnx1/src/ibverbs.h

34 #i‚de‡
IB_VERBS_H


35 
	#IB_VERBS_H


	)

37 
	~<±hªad.h
>

39 
	~<öföib™d/drivî.h
>

40 
	~<öföib™d/drivî_exp.h
>

42 #ifde‡
HAVE_VALGRIND_MEMCHECK_H


44 
	~<vÆgröd/memcheck.h
>

46 #i‚de‡
VALGRIND_MAKE_MEM_DEFINED


52 #i‚de‡
VALGRIND_MAKE_MEM_DEFINED


53 
	#VALGRIND_MAKE_MEM_DEFINED
(
addr
, 
Àn
)

	)

56 
	#HIDDEN
 
	`__©åibuã__
((
	`visibûôy
 ("hiddí")))

	)

58 
	#INIT
 
	`__©åibuã__
((
c⁄°ru˘‹
))

	)

59 
	#FINI
 
	`__©åibuã__
((
de°ru˘‹
))

	)

61 
	#DEFAULT_ABI
 "IBVERBS_1.1"

	)

63 #ifde‡
HAVE_SYMVER_SUPPORT


64 
	#symvî
(
«me
, 
≠i
, 
vî
) \

65 
	`asm
(".symvî " #«mê"," #≠ò"@" #vî)

	)

66 
	#deÁu…_symvî
(
«me
, 
≠i
) \

67 
	`asm
(".symvî " #«mê"," #≠ò"@@" 
DEFAULT_ABI
)

	)

69 
	#symvî
(
«me
, 
≠i
, 
vî
)

	)

70 
	#deÁu…_symvî
(
«me
, 
≠i
) \

71 
	`__ty≥of
(
«me
Ë
≠i
 
	`__©åibuã__
((
	`Æüs
(#«me)))

	)

74 
	#PFX
 "libibvîbs: "

	)

76 #i‚de‡
mö


77 
	#mö
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

80 
	#RDMA_CDEV_DIR
 "/dev/öföib™d"

	)

82 
	sibv_abi_com∑t_v2
 {

83 
ibv_comp_ch™√l
 
ch™√l
;

84 
±hªad_muãx_t
 
ö_u£
;

87 
HIDDEN
 
abi_vî
;

89 
HIDDEN
 
ibvîbs_gë_devi˚_li°
(
ibv_devi˚
 ***
li°
);

90 
HIDDEN
 
ibvîbs_öô
();

91 
HIDDEN
 
ibv_mr
 *
__ibv_ªg_sh¨ed_mr
(
ibv_exp_ªg_sh¨ed_mr_ö
 *
ö
);

92 
HIDDEN
 
ibv_mr
 *
__ibv_exp_ªg_mr
(
ibv_exp_ªg_mr_ö
 *
ö
);

93 
HIDDEN
 
ibv_qp
 *
ibv_föd_xrc_qp
(
uöt32_t
 
q≤
);

95 
	#IBV_INIT_CMD
(
cmd
, 
size
, 
›code
) \

97 i‡(
abi_vî
 > 2) \

98 (
cmd
)->
comm™d
 = 
IB_USER_VERBS_CMD_
##
›code
; \

100 (
cmd
)->
comm™d
 = 
IB_USER_VERBS_CMD_
##
›code
##
_V2
; \

101 (
cmd
)->
ö_w‹ds
 = (
size
) / 4; \

102 (
cmd
)->
out_w‹ds
 = 0; \

103 } 0)

	)

105 
	#IBV_INIT_CMD_RESP
(
cmd
, 
size
, 
›code
, 
out
, 
outsize
) \

107 i‡(
abi_vî
 > 2) \

108 (
cmd
)->
comm™d
 = 
IB_USER_VERBS_CMD_
##
›code
; \

110 (
cmd
)->
comm™d
 = 
IB_USER_VERBS_CMD_
##
›code
##
_V2
; \

111 (
cmd
)->
ö_w‹ds
 = (
size
) / 4; \

112 (
cmd
)->
out_w‹ds
 = (
outsize
) / 4; \

113 (
cmd
)->
ª•⁄£
 = (
uöçå_t
Ë(
out
); \

114 } 0)

	)

116 
	#IBV_INIT_CMD_RESP_EX_V
(
cmd
, 
cmd_size
, 
size
, 
›code
, 
out
, 
ª•_size
,\

117 
outsize
) \

119 
size_t
 
c_size
 = 
cmd_size
 - (
ex_hdr
); \

120 i‡(
abi_vî
 > 2) \

121 (
cmd
)->
hdr
.
comm™d
 = 
IB_USER_VERBS_CMD_
##
›code
; \

123 (
cmd
)->
hdr
.
comm™d
 = \

124 
IB_USER_VERBS_CMD_
##
›code
##
_V2
; \

125 (
cmd
)->
hdr
.
ö_w‹ds
 = ((
c_size
) / 8); \

126 (
cmd
)->
hdr
.
out_w‹ds
 = ((
ª•_size
) / 8); \

127 (
cmd
)->
hdr
.
¥ovidî_ö_w‹ds
 = (((
size
Ë- (
cmd_size
))/8);\

128 (
cmd
)->
hdr
.
¥ovidî_out_w‹ds
 = \

129 (((
outsize
Ë- (
ª•_size
)) / 8); \

130 (
cmd
)->
hdr
.
ª•⁄£
 = (
uöçå_t
Ë(
out
); \

131 (
cmd
)->
hdr
.
ª£rved
 = 0; \

132 } 0)

	)

134 
	#IBV_INIT_CMD_RESP_EX_VCMD
(
cmd
, 
cmd_size
, 
size
, 
›code
, 
out
, 
outsize
) \

135 
	`IBV_INIT_CMD_RESP_EX_V
(
cmd
, 
cmd_size
, 
size
, 
›code
, 
out
, \

136 (*(
out
)), 
outsize
)

	)

138 
	#IBV_INIT_CMD_RESP_EX
(
cmd
, 
size
, 
›code
, 
out
, 
outsize
) \

139 
	`IBV_INIT_CMD_RESP_EX_V
(
cmd
, (*(cmd)), 
size
, 
›code
, 
out
, \

140 (*(
out
)), 
outsize
)

	)

142 
	#IBV_INIT_CMD_EX
(
cmd
, 
size
, 
›code
) \

143 
	`IBV_INIT_CMD_RESP_EX_V
(
cmd
, (*(cmd)), 
size
, 
›code
, 
NULL
, 0, 0)

	)

145 
	#IBV_INIT_CMD_RESP_EXP
(
›code
, 
cmd
, 
cmd_size
, 
drv_size
, 
out
, 
osize
, \

146 
drv_osize
) \

148 
size_t
 
c_size
 = 
cmd_size
 - (
ex_hdr
); \

149 (
cmd
)->
hdr
.
comm™d
 = 
IB_USER_VERBS_EXP_CMD_
##
›code
 + \

150 
IB_USER_VERBS_EXP_CMD_FIRST
; \

151 (
cmd
)->
hdr
.
ö_w‹ds
 = (
c_size
 / 8); \

152 (
cmd
)->
hdr
.
out_w‹ds
 = (
osize
 / 8); \

153 (
cmd
)->
hdr
.
¥ovidî_ö_w‹ds
 = (
drv_size
 / 8); \

154 (
cmd
)->
hdr
.
¥ovidî_out_w‹ds
 = (
drv_osize
 / 8); \

155 (
cmd
)->
hdr
.
ª•⁄£
 = (
uöçå_t
Ë(
out
); \

156 (
cmd
)->
hdr
.
ª£rved
 = 0; \

157 } 0)

	)

159 
	#IBV_INIT_CMD_EXP
(
›code
, 
cmd
, 
cmd_size
, 
drv_size
) \

160 
	`IBV_INIT_CMD_RESP_EXP
(
›code
, 
cmd
, 
cmd_size
, 
drv_size
, 0, 0, 0)

	)

162 #i‚de‡
unöôülized_v¨


163 
	#unöôülized_v¨
(
x
Ëx = 
	)
x

166 
ibv_£t_huge_ß„
();

	@libibverbs-41mlnx1/src/init.c

34 #i‡
HAVE_CONFIG_H


35 
	~<c⁄fig.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

40 
	~<glob.h
>

41 
	~<°dio.h
>

42 
	~<dlf˙.h
>

43 
	~<uni°d.h
>

44 
	~<sys/°©.h
>

45 
	~<sys/ty≥s.h
>

46 
	~<sys/time.h
>

47 
	~<sys/ªsour˚.h
>

48 
	~<dúít.h
>

49 
	~<î∫o.h
>

51 
	~<utû/utû.h
>

52 
	~"ibvîbs.h
"

54 
HIDDEN
 
	gabi_vî
;

56 
±hªad_muãx_t
 
	gdev_li°_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

58 
	sibv_sysfs_dev
 {

59 
	msysfs_«me
[
IBV_SYSFS_NAME_MAX
];

60 
	mibdev_«me
[
IBV_SYSFS_NAME_MAX
];

61 
	msysfs_∑th
[
IBV_SYSFS_PATH_MAX
];

62 
	mibdev_∑th
[
IBV_SYSFS_PATH_MAX
];

63 
ibv_sysfs_dev
 *
	m√xt
;

64 
	mabi_vî
;

65 
	mhave_drivî
;

68 
	sibv_drivî_«me
 {

69 *
	m«me
;

70 
ibv_drivî_«me
 *
	m√xt
;

73 
	sibv_drivî
 {

74 c⁄° *
	m«me
;

75 
ibv_drivî_öô_func
 
	möô_func
;

76 
vîbs_drivî_öô_func
 
	mvîbs_öô_func
;

77 
ibv_drivî
 *
	m√xt
;

80 
ibv_sysfs_dev
 *
	gsysfs_dev_li°
;

81 
ibv_drivî_«me
 *
	gdrivî_«me_li°
;

82 
ibv_drivî
 *
	ghód_drivî
, *
	gèû_drivî
;

84 
	$åy_ac˚ss_devi˚
(c⁄° 
ibv_sysfs_dev
 *
sysfs_dev
)

86 
°©
 
cdev_°©
;

87 *
dev∑th
;

88 
ªt
;

90 i‡(
	`a•rötf
(&
dev∑th
, 
RDMA_CDEV_DIR
"/%s",

91 
sysfs_dev
->
sysfs_«me
) < 0)

92  
ENOMEM
;

94 
ªt
 = 
	`°©
(
dev∑th
, &
cdev_°©
);

95 
	`‰ì
(
dev∑th
);

96  
ªt
;

97 
	}
}

99 
	$föd_sysfs_devs
()

101 
˛ass_∑th
[
IBV_SYSFS_PATH_MAX
];

102 
DIR
 *
˛ass_dú
;

103 
dúít
 *
dít
;

104 
ibv_sysfs_dev
 *
sysfs_dev
 = 
NULL
;

105 
vÆue
[8];

106 
ªt
 = 0;

108 i‡(!
	`check_¢¥ötf
(
˛ass_∑th
, (class_path),

109 "%s/˛ass/öföib™d_vîbs", 
	`ibv_gë_sysfs_∑th
()))

110  
ENOMEM
;

112 
˛ass_dú
 = 
	`›ídú
(
˛ass_∑th
);

113 i‡(!
˛ass_dú
)

114  
ENOSYS
;

116 (
dít
 = 
	`ªaddú
(
˛ass_dú
))) {

117 
°©
 
buf
;

119 i‡(
dít
->
d_«me
[0] == '.')

122 i‡(!
sysfs_dev
)

123 
sysfs_dev
 = 
	`mÆloc
( *sysfs_dev);

124 i‡(!
sysfs_dev
) {

125 
ªt
 = 
ENOMEM
;

126 
out
;

129 i‡(!
	`check_¢¥ötf
(
sysfs_dev
->
sysfs_∑th
,  sysfs_dev->sysfs_path,

130 "%s/%s", 
˛ass_∑th
, 
dít
->
d_«me
))

133 i‡(
	`°©
(
sysfs_dev
->
sysfs_∑th
, &
buf
)) {

134 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: couldn't stat '%s'.\n",

135 
sysfs_dev
->
sysfs_∑th
);

139 i‡(!
	`S_ISDIR
(
buf
.
°_mode
))

142 i‡(!
	`check_¢¥ötf
(
sysfs_dev
->
sysfs_«me
,  sysfs_dev->sysfs_name,

143 "%s", 
dít
->
d_«me
))

146 i‡(
	`ibv_ªad_sysfs_fûe
(
sysfs_dev
->
sysfs_∑th
, "ibdev",

147 
sysfs_dev
->
ibdev_«me
,

148  
sysfs_dev
->
ibdev_«me
) < 0) {

149 
	`Ârötf
(
°dîr
, 
PFX
 "Warning:Ço ibdev classáttr for '%s'.\n",

150 
dít
->
d_«me
);

154 i‡(!
	`check_¢¥ötf
(

155 
sysfs_dev
->
ibdev_∑th
, (sysfs_dev->ibdev_path),

156 "%s/˛ass/öföib™d/%s", 
	`ibv_gë_sysfs_∑th
(),

157 
sysfs_dev
->
ibdev_«me
))

160 i‡(
	`åy_ac˚ss_devi˚
(
sysfs_dev
))

163 
sysfs_dev
->
√xt
 = 
sysfs_dev_li°
;

164 
sysfs_dev
->
have_drivî
 = 0;

165 i‡(
	`ibv_ªad_sysfs_fûe
(
sysfs_dev
->
sysfs_∑th
, "abi_version",

166 
vÆue
,  value) > 0)

167 
sysfs_dev
->
abi_vî
 = 
	`°πﬁ
(
vÆue
, 
NULL
, 10);

169 
sysfs_dev
->
abi_vî
 = 0;

171 
sysfs_dev_li°
 = 
sysfs_dev
;

172 
sysfs_dev
 = 
NULL
;

175 
out
:

176 i‡(
sysfs_dev
)

177 
	`‰ì
(
sysfs_dev
);

179 
	`˛o£dú
(
˛ass_dú
);

180  
ªt
;

181 
	}
}

183 
	$ªgi°î_drivî
(c⁄° *
«me
, 
ibv_drivî_öô_func
 
öô_func
,

184 
vîbs_drivî_öô_func
 
vîbs_öô_func
)

186 
ibv_drivî
 *
drivî
;

188 
drivî
 = 
	`mÆloc
( *driver);

189 i‡(!
drivî
) {

190 
	`Ârötf
(
°dîr
, 
PFX
 "W¨nög: couldn'àÆloˇã drivî f‹ %s\n", 
«me
);

194 
drivî
->
«me
 =Çame;

195 
drivî
->
öô_func
 = init_func;

196 
drivî
->
vîbs_öô_func
 = verbs_init_func;

197 
drivî
->
√xt
 = 
NULL
;

199 i‡(
èû_drivî
)

200 
èû_drivî
->
√xt
 = 
drivî
;

202 
hód_drivî
 = 
drivî
;

203 
èû_drivî
 = 
drivî
;

204 
	}
}

206 
	$ibv_ªgi°î_drivî
(c⁄° *
«me
, 
ibv_drivî_öô_func
 
öô_func
)

208 
	`ªgi°î_drivî
(
«me
, 
öô_func
, 
NULL
);

209 
	}
}

214 
	$vîbs_ªgi°î_drivî
(c⁄° *
«me
, 
vîbs_drivî_öô_func
 
öô_func
)

216 
	`ªgi°î_drivî
(
«me
, 
NULL
, 
öô_func
);

217 
	}
}

219 
	$lﬂd_drivî
(c⁄° *
«me
)

221 *
so_«me
;

222 *
îr‹
;

223 *
dlh™dÀ
;

225 
	#__IBV_QUOTE
(
x
Ë#x

	)

226 
	#IBV_QUOTE
(
x
Ë
	`__IBV_QUOTE
(x)

	)

229 i‡(
«me
[0] == '/') {

230 i‡(
	`a•rötf
(&
so_«me
,

231 "%s-" 
	`IBV_QUOTE
(
IBV_DEVICE_LIBRARY_EXTENSION
) ".so",

232 
«me
) < 0)

233 
out_a•rötf
;

234 
dlh™dÀ
 = 
	`dl›í
(
so_«me
, 
RTLD_NOW
);

235 
	`‰ì
(
so_«me
);

236 i‡(!
dlh™dÀ
) {

238 i‡(
	`a•rötf
(&
îr‹
, "%s", 
	`dÀº‹
()) < 0)

239 
out_a•rötf
;

240 
out_dl›í
;

246 i‡(
	`a•rötf
(&
so_«me
,

247 "lib%s-" 
	`IBV_QUOTE
(
IBV_DEVICE_LIBRARY_EXTENSION
) ".so",

248 
«me
) < 0)

249 
out_a•rötf
;

250 
dlh™dÀ
 = 
	`dl›í
(
so_«me
, 
RTLD_NOW
);

251 
	`‰ì
(
so_«me
);

252 i‡(
dlh™dÀ
)

254 i‡(
	`a•rötf
(&
îr‹
, "%s", 
	`dÀº‹
()) < 0)

255 
out_a•rötf
;

262 i‡((
MLX_VERBS_PROVIDER_DIR
) > 1) {

263 i‡(
	`a•rötf
(&
so_«me
,

264 
MLX_VERBS_PROVIDER_DIR
 "/lib%s-" 
	`IBV_QUOTE
(
IBV_DEVICE_LIBRARY_EXTENSION
) ".so",

265 
«me
) < 0)

266 
out_a•rötf
;

267 
dlh™dÀ
 = 
	`dl›í
(
so_«me
, 
RTLD_NOW
);

268 
	`‰ì
(
so_«me
);

269 i‡(
dlh™dÀ
)

274 
out_dl›í
;

276 
out_a•rötf
:

277 
	`Ârötf
(
°dîr
, 
PFX
 "W¨nög: couldn'àlﬂd drivî '%s'.\n", 
«me
);

279 
out_dl›í
:

280 
	`Ârötf
(
°dîr
, 
PFX
 "W¨nög: couldn'àlﬂd drivî '%s': %s\n", 
«me
,

281 
îr‹
);

282 
	`‰ì
(
îr‹
);

284 
	}
}

286 
	$lﬂd_drivîs
()

288 
ibv_drivî_«me
 *
«me
, *
√xt_«me
;

289 c⁄° *
ív
;

290 *
li°
, *
ív_«me
;

296 i‡(
	`gëuid
(Ë=
	`gëeuid
()) {

297 i‡((
ív
 = 
	`gëív
("RDMAV_DRIVERS"))) {

298 
li°
 = 
	`°rdu∑
(
ív
);

299 (
ív_«me
 = 
	`°r£p
(&
li°
, ":;")))

300 
	`lﬂd_drivî
(
ív_«me
);

301 } i‡((
ív
 = 
	`gëív
("IBV_DRIVERS"))) {

302 
li°
 = 
	`°rdu∑
(
ív
);

303 (
ív_«me
 = 
	`°r£p
(&
li°
, ":;")))

304 
	`lﬂd_drivî
(
ív_«me
);

308 
«me
 = 
drivî_«me_li°
, 
√xt_«me
 =Çamê?Çame->
√xt
 : 
NULL
;

309 
«me
;

310 
«me
 = 
√xt_«me
,Çext_«mê«mê?Çame->
√xt
 : 
NULL
) {

311 
	`lﬂd_drivî
(
«me
->name);

312 
	`‰ì
(
«me
->name);

313 
	`‰ì
(
«me
);

315 
	}
}

317 
	$ªad_c⁄fig_fûe
(c⁄° *
∑th
)

319 
FILE
 *
c⁄f
;

320 *
löe
 = 
NULL
;

321 *
c⁄fig
;

322 *
fõld
;

323 
size_t
 
buÊí
 = 0;

324 
ssize_t
 
Àn
;

326 
c⁄f
 = 
	`f›í
(
∑th
, "r");

327 i‡(!
c⁄f
) {

328 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: couldn'tÑead config file %s.\n",

329 
∑th
);

333 (
Àn
 = 
	`gëlöe
(&
löe
, &
buÊí
, 
c⁄f
)) != -1) {

334 
c⁄fig
 = 
löe
 + 
	`°r•n
(line, "\t ");

335 i‡(
c⁄fig
[0] == '\n' || config[0] == '#')

338 
fõld
 = 
	`°r£p
(&
c⁄fig
, "\n\t ");

340 i‡(
	`°rcmp
(
fõld
, "drivî"Ë=0 && 
c⁄fig
 !
NULL
) {

341 
ibv_drivî_«me
 *
drivî_«me
;

343 
c⁄fig
 +
	`°r•n
(config, "\t ");

344 
fõld
 = 
	`°r£p
(&
c⁄fig
, "\n\t ");

346 
drivî_«me
 = 
	`mÆloc
( *driver_name);

347 i‡(!
drivî_«me
) {

348 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: couldn'tállocate "

349 "drivîÇamê'%s'.\n", 
fõld
);

353 
drivî_«me
->
«me
 = 
	`°rdup
(
fõld
);

354 i‡(!
drivî_«me
->
«me
) {

355 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: couldn'tállocate "

356 "drivîÇamê'%s'.\n", 
fõld
);

357 
	`‰ì
(
drivî_«me
);

361 
drivî_«me
->
√xt
 = 
drivî_«me_li°
;

362 
drivî_«me_li°
 = 
drivî_«me
;

364 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: ignoring bad config directive "

365 "'%s' i¿fûê'%s'.\n", 
fõld
, 
∑th
);

368 i‡(
löe
)

369 
	`‰ì
(
löe
);

370 
	`f˛o£
(
c⁄f
);

371 
	}
}

373 
	$ªad_c⁄fig
()

375 
DIR
 *
c⁄f_dú
;

376 
dúít
 *
dít
;

377 *
∑th
;

379 
c⁄f_dú
 = 
	`›ídú
(
IBV_CONFIG_DIR
);

380 i‡(!
c⁄f_dú
) {

381 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: couldn't open config directory '%s'.\n",

382 
IBV_CONFIG_DIR
);

386 (
dít
 = 
	`ªaddú
(
c⁄f_dú
))) {

387 
°©
 
buf
;

389 i‡(
	`a•rötf
(&
∑th
, "%s/%s", 
IBV_CONFIG_DIR
, 
dít
->
d_«me
) < 0) {

390 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: couldn'tÑead config file %s/%s.\n",

391 
IBV_CONFIG_DIR
, 
dít
->
d_«me
);

392 
out
;

395 i‡(
	`°©
(
∑th
, &
buf
)) {

396 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: couldn't stat config file '%s'.\n",

397 
∑th
);

398 
√xt
;

401 i‡(!
	`S_ISREG
(
buf
.
°_mode
))

402 
√xt
;

404 
	`ªad_c⁄fig_fûe
(
∑th
);

405 
√xt
:

406 
	`‰ì
(
∑th
);

409 
out
:

410 
	`˛o£dú
(
c⁄f_dú
);

411 
	}
}

413 
ibv_devi˚
 *
	$åy_drivî
(
ibv_drivî
 *
drivî
,

414 
ibv_sysfs_dev
 *
sysfs_dev
)

416 
vîbs_devi˚
 *
vdev
;

417 
ibv_devi˚
 *
dev
;

418 
vÆue
[8];

420 i‡(
drivî
->
öô_func
) {

421 
dev
 = 
drivî
->
	`öô_func
(
sysfs_dev
->
sysfs_∑th
, sysfs_dev->
abi_vî
);

422 i‡(!
dev
)

423  
NULL
;

425 
vdev
 = 
drivî
->
	`vîbs_öô_func
(
sysfs_dev
->
sysfs_∑th
, sysfs_dev->
abi_vî
);

426 i‡(!
vdev
)

427  
NULL
;

429 
vdev
->
ªfcou¡
 = 1;

430 
	`±hªad_muãx_öô
(&
vdev
->
ªÊock
, 
NULL
);

432 
dev
 = &
vdev
->
devi˚
;

433 
dev
->
›s
.
Æloc_c⁄ãxt
 = 
NULL
;

434 
dev
->
›s
.
‰ì_c⁄ãxt
 = 
NULL
;

437 i‡(
	`ibv_ªad_sysfs_fûe
(
sysfs_dev
->
ibdev_∑th
, "node_ty≥", 
vÆue
,  value) < 0) {

438 
	`Ârötf
(
°dîr
, 
PFX
 "Warning:ÇoÇode_typeáttr under %s.\n",

439 
sysfs_dev
->
ibdev_∑th
);

440 
dev
->
node_ty≥
 = 
IBV_NODE_UNKNOWN
;

442 
dev
->
node_ty≥
 = 
	`°πﬁ
(
vÆue
, 
NULL
, 10);

443 i‡(
dev
->
node_ty≥
 < 
IBV_EXP_NODE_TYPE_START
) {

444 i‡(
dev
->
node_ty≥
 < 
IBV_NODE_CA
 || dev->node_ty≥ > 
IBV_NODE_RNIC
)

445 
dev
->
node_ty≥
 = 
IBV_NODE_UNKNOWN
;

447 i‡(
dev
->
node_ty≥
 > 
IBV_EXP_NODE_MIC
)

448 
dev
->
node_ty≥
 = 
IBV_NODE_UNKNOWN
;

452 
dev
->
node_ty≥
) {

453 
IBV_NODE_CA
:

454 
IBV_NODE_SWITCH
:

455 
IBV_NODE_ROUTER
:

456 
dev
->
å™•‹t_ty≥
 = 
IBV_TRANSPORT_IB
;

458 
IBV_NODE_RNIC
:

459 
dev
->
å™•‹t_ty≥
 = 
IBV_TRANSPORT_IWARP
;

461 
IBV_EXP_NODE_MIC
:

462 
dev
->
å™•‹t_ty≥
 = 
IBV_EXP_TRANSPORT_SCIF
;

465 
dev
->
å™•‹t_ty≥
 = 
IBV_TRANSPORT_UNKNOWN
;

469 
	`°r˝y
(
dev
->
dev_«me
, 
sysfs_dev
->
sysfs_«me
);

470 
	`°r˝y
(
dev
->
dev_∑th
, 
sysfs_dev
->
sysfs_∑th
);

471 
	`°r˝y
(
dev
->
«me
, 
sysfs_dev
->
ibdev_«me
);

472 
	`°r˝y
(
dev
->
ibdev_∑th
, 
sysfs_dev
->ibdev_path);

474  
dev
;

475 
	}
}

477 
ibv_devi˚
 *
	$åy_drivîs
(
ibv_sysfs_dev
 *
sysfs_dev
)

479 
ibv_drivî
 *
drivî
;

480 
ibv_devi˚
 *
dev
;

482 
drivî
 = 
hód_drivî
; drivî; drivî = drivî->
√xt
) {

483 
dev
 = 
	`åy_drivî
(
drivî
, 
sysfs_dev
);

484 i‡(
dev
)

485  
dev
;

488  
NULL
;

489 
	}
}

491 
	$check_abi_vîsi⁄
(c⁄° *
∑th
)

493 
vÆue
[8];

495 i‡(
	`ibv_ªad_sysfs_fûe
(
∑th
, "class/infiniband_verbs/abi_version",

496 
vÆue
,  value) < 0) {

497  
ENOSYS
;

500 
abi_vî
 = 
	`°πﬁ
(
vÆue
, 
NULL
, 10);

502 i‡(
abi_vî
 < 
IB_USER_VERBS_MIN_ABI_VERSION
 ||

503 
abi_vî
 > 
IB_USER_VERBS_MAX_ABI_VERSION
) {

504 
	`Ârötf
(
°dîr
, 
PFX
 "Fatal: kernel ABI version %d "

506 
abi_vî
, 
IB_USER_VERBS_MAX_ABI_VERSION
);

507  
ENOSYS
;

511 
	}
}

513 
	$check_memlock_limô
()

515 
æimô
 
æim
;

517 i‡(!
	`gëeuid
())

520 i‡(
	`gëæimô
(
RLIMIT_MEMLOCK
, &
æim
)) {

521 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: getrlimit(RLIMIT_MEMLOCK) failed.");

525 i‡(
æim
.
æim_cur
 <= 32768)

526 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: RLIMIT_MEMLOCK is %lu bytes.\n"

528 
æim
.
æim_cur
);

529 
	}
}

531 
	$add_devi˚
(
ibv_devi˚
 *
dev
,

532 
ibv_devi˚
 ***
dev_li°
,

533 *
num_devi˚s
,

534 *
li°_size
)

536 
ibv_devi˚
 **
√w_li°
;

538 i‡(*
li°_size
 <*
num_devi˚s
) {

539 *
li°_size
 = *list_size ? *list_size * 2 : 1;

540 
√w_li°
 = 
	`ªÆloc
(*
dev_li°
, *
li°_size
 *  (
ibv_devi˚
 *));

541 i‡(!
√w_li°
)

543 *
dev_li°
 = 
√w_li°
;

546 (*
dev_li°
)[(*
num_devi˚s
)++] = 
dev
;

547 
	}
}

549 
HIDDEN
 
	$ibvîbs_öô
()

551 c⁄° *
sysfs_∑th
;

552 
ªt
;

554 i‡(
	`gëív
("RDMAV_FORK_SAFE") || getenv("IBV_FORK_SAFE"))

555 i‡(
	`ibv_f‹k_öô
())

556 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: fork()-safetyÑequested "

559 
sysfs_∑th
 = 
	`ibv_gë_sysfs_∑th
();

560 i‡(!
sysfs_∑th
)

561  -
ENOSYS
;

563 
ªt
 = 
	`check_abi_vîsi⁄
(
sysfs_∑th
);

564 i‡(
ªt
)

565  -
ªt
;

567 
	`check_memlock_limô
();

569 
	`ªad_c⁄fig
();

571  
ªt
;

572 
	}
}

574 
HIDDEN
 
	$ibvîbs_gë_devi˚_li°
(
ibv_devi˚
 ***
li°
)

576 
ibv_sysfs_dev
 *
sysfs_dev
, *
√xt_dev
;

577 
ibv_devi˚
 *
devi˚
;

578 
num_devi˚s
 = 0;

579 
li°_size
 = 0;

580 
°©iˇŒy_löked
 = 0;

581 
no_drivî
 = 0;

582 
ªt
;

584 *
li°
 = 
NULL
;

586 
	`±hªad_muãx_lock
(&
dev_li°_lock
);

587 
ªt
 = 
	`föd_sysfs_devs
();

588 i‡(
ªt
) {

589 
	`±hªad_muãx_u∆ock
(&
dev_li°_lock
);

590  -
ªt
;

593 
sysfs_dev
 = 
sysfs_dev_li°
; sysfs_dev; sysfs_dev = sysfs_dev->
√xt
) {

594 
devi˚
 = 
	`åy_drivîs
(
sysfs_dev
);

595 i‡(
devi˚
) {

596 
	`add_devi˚
(
devi˚
, 
li°
, &
num_devi˚s
, &
li°_size
);

597 
sysfs_dev
->
have_drivî
 = 1;

599 
no_drivî
 = 1;

602 i‡(!
no_drivî
)

603 
out
;

615 *
h™d
 = 
	`dl›í
(
NULL
, 
RTLD_NOW
);

616 i‡(!
h™d
) {

617 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: dlopen(NULL) failed, "

619 
°©iˇŒy_löked
 = 1;

620 
out
;

622 
	`dl˛o£
(
h™d
);

625 
	`lﬂd_drivîs
();

627 
sysfs_dev
 = 
sysfs_dev_li°
; sysfs_dev; sysfs_dev = sysfs_dev->
√xt
) {

628 i‡(
sysfs_dev
->
have_drivî
)

631 
devi˚
 = 
	`åy_drivîs
(
sysfs_dev
);

632 i‡(
devi˚
) {

633 
	`add_devi˚
(
devi˚
, 
li°
, &
num_devi˚s
, &
li°_size
);

634 
sysfs_dev
->
have_drivî
 = 1;

638 
out
:

639 
sysfs_dev
 = 
sysfs_dev_li°
,

640 
√xt_dev
 = 
sysfs_dev
 ? sysfs_dev->
√xt
 : 
NULL
;

641 
sysfs_dev
;

642 
sysfs_dev
 = 
√xt_dev
,Çext_dev = sysfs_dev ? sysfs_dev->
√xt
 : 
NULL
) {

643 i‡(!
sysfs_dev
->
have_drivî
) {

644 
	`Ârötf
(
°dîr
, 
PFX
 "Warning:Ço userspace device-specific "

645 "drivî found f‹ %s\n", 
sysfs_dev
->
sysfs_∑th
);

646 i‡(
°©iˇŒy_löked
)

647 
	`Ârötf
(
°dîr
, " WhenÜinkingÜibibverbs statically, "

650 
	`‰ì
(
sysfs_dev
);

652 
sysfs_dev_li°
 = 
NULL
;

654 
	`±hªad_muãx_u∆ock
(&
dev_li°_lock
);

655  
num_devi˚s
;

656 
	}
}

	@libibverbs-41mlnx1/src/marshall.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°rög.h
>

39 
	~<öföib™d/m¨shÆl.h
>

41 
	$ibv_c›y_ah_©å_‰om_kîn
(
ibv_ah_©å
 *
d°
,

42 
ibv_kîn_ah_©å
 *
§c
)

44 
	`mem˝y
(
d°
->
grh
.
dgid
.
øw
, 
§c
->grh.dgid,  dst->grh.dgid);

45 
d°
->
grh
.
Êow_œbñ
 = 
§c
->grh.flow_label;

46 
d°
->
grh
.
sgid_ödex
 = 
§c
->grh.sgid_index;

47 
d°
->
grh
.
h›_limô
 = 
§c
->grh.hop_limit;

48 
d°
->
grh
.
åaffic_˛ass
 = 
§c
->grh.traffic_class;

50 
d°
->
dlid
 = 
§c
->dlid;

51 
d°
->
¶
 = 
§c
->sl;

52 
d°
->
§c_∑th_bôs
 = 
§c
->src_path_bits;

53 
d°
->
°©ic_øã
 = 
§c
->static_rate;

54 
d°
->
is_globÆ
 = 
§c
->is_global;

55 
d°
->
p‹t_num
 = 
§c
->port_num;

56 
	}
}

58 
	$ibv_c›y_qp_©å_‰om_kîn
(
ibv_qp_©å
 *
d°
,

59 
ibv_kîn_qp_©å
 *
§c
)

61 
d°
->
cur_qp_°©e
 = 
§c
->cur_qp_state;

62 
d°
->
∑th_mtu
 = 
§c
->path_mtu;

63 
d°
->
∑th_mig_°©e
 = 
§c
->path_mig_state;

64 
d°
->
qkey
 = 
§c
->qkey;

65 
d°
->
rq_p¢
 = 
§c
->rq_psn;

66 
d°
->
sq_p¢
 = 
§c
->sq_psn;

67 
d°
->
de°_qp_num
 = 
§c
->dest_qp_num;

68 
d°
->
qp_ac˚ss_Êags
 = 
§c
->qp_access_flags;

70 
d°
->
ˇp
.
max_£nd_wr
 = 
§c
->max_send_wr;

71 
d°
->
ˇp
.
max_ªcv_wr
 = 
§c
->max_recv_wr;

72 
d°
->
ˇp
.
max_£nd_sge
 = 
§c
->max_send_sge;

73 
d°
->
ˇp
.
max_ªcv_sge
 = 
§c
->max_recv_sge;

74 
d°
->
ˇp
.
max_ölöe_d©a
 = 
§c
->max_inline_data;

76 
	`ibv_c›y_ah_©å_‰om_kîn
(&
d°
->
ah_©å
, &
§c
->ah_attr);

77 
	`ibv_c›y_ah_©å_‰om_kîn
(&
d°
->
Æt_ah_©å
, &
§c
->alt_ah_attr);

79 
d°
->
pkey_ödex
 = 
§c
->pkey_index;

80 
d°
->
Æt_pkey_ödex
 = 
§c
->alt_pkey_index;

81 
d°
->
í_sqd_async_nŸify
 = 
§c
->en_sqd_async_notify;

82 
d°
->
sq_døöög
 = 
§c
->sq_draining;

83 
d°
->
max_rd_©omic
 = 
§c
->max_rd_atomic;

84 
d°
->
max_de°_rd_©omic
 = 
§c
->max_dest_rd_atomic;

85 
d°
->
mö_∫r_timî
 = 
§c
->min_rnr_timer;

86 
d°
->
p‹t_num
 = 
§c
->port_num;

87 
d°
->
timeout
 = 
§c
->timeout;

88 
d°
->
ªåy_˙t
 = 
§c
->retry_cnt;

89 
d°
->
∫r_ªåy
 = 
§c
->rnr_retry;

90 
d°
->
Æt_p‹t_num
 = 
§c
->alt_port_num;

91 
d°
->
Æt_timeout
 = 
§c
->alt_timeout;

92 
	}
}

94 
	$ibv_c›y_∑th_ªc_‰om_kîn
(
ibv_ß_∑th_ªc
 *
d°
,

95 
ibv_kîn_∑th_ªc
 *
§c
)

97 
	`mem˝y
(
d°
->
dgid
.
øw
, 
§c
->dgid,  dst->dgid);

98 
	`mem˝y
(
d°
->
sgid
.
øw
, 
§c
->sgid,  dst->sgid);

100 
d°
->
dlid
 = 
§c
->dlid;

101 
d°
->
¶id
 = 
§c
->slid;

102 
d°
->
øw_åaffic
 = 
§c
->raw_traffic;

103 
d°
->
Êow_œbñ
 = 
§c
->flow_label;

104 
d°
->
h›_limô
 = 
§c
->hop_limit;

105 
d°
->
åaffic_˛ass
 = 
§c
->traffic_class;

106 
d°
->
ªvîsibÀ
 = 
§c
->reversible;

107 
d°
->
numb_∑th
 = 
§c
->numb_path;

108 
d°
->
pkey
 = 
§c
->pkey;

109 
d°
->
¶
 = 
§c
->sl;

110 
d°
->
mtu_£À˘‹
 = 
§c
->mtu_selector;

111 
d°
->
mtu
 = 
§c
->mtu;

112 
d°
->
øã_£À˘‹
 = 
§c
->rate_selector;

113 
d°
->
øã
 = 
§c
->rate;

114 
d°
->
∑ckë_li„_time
 = 
§c
->packet_life_time;

115 
d°
->
¥e„ªn˚
 = 
§c
->preference;

116 
d°
->
∑ckë_li„_time_£À˘‹
 = 
§c
->packet_life_time_selector;

117 
	}
}

119 
	$ibv_c›y_∑th_ªc_to_kîn
(
ibv_kîn_∑th_ªc
 *
d°
,

120 
ibv_ß_∑th_ªc
 *
§c
)

122 
	`mem˝y
(
d°
->
dgid
, 
§c
->dgid.
øw
,  src->dgid);

123 
	`mem˝y
(
d°
->
sgid
, 
§c
->sgid.
øw
,  src->sgid);

125 
d°
->
dlid
 = 
§c
->dlid;

126 
d°
->
¶id
 = 
§c
->slid;

127 
d°
->
øw_åaffic
 = 
§c
->raw_traffic;

128 
d°
->
Êow_œbñ
 = 
§c
->flow_label;

129 
d°
->
h›_limô
 = 
§c
->hop_limit;

130 
d°
->
åaffic_˛ass
 = 
§c
->traffic_class;

131 
d°
->
ªvîsibÀ
 = 
§c
->reversible;

132 
d°
->
numb_∑th
 = 
§c
->numb_path;

133 
d°
->
pkey
 = 
§c
->pkey;

134 
d°
->
¶
 = 
§c
->sl;

135 
d°
->
mtu_£À˘‹
 = 
§c
->mtu_selector;

136 
d°
->
mtu
 = 
§c
->mtu;

137 
d°
->
øã_£À˘‹
 = 
§c
->rate_selector;

138 
d°
->
øã
 = 
§c
->rate;

139 
d°
->
∑ckë_li„_time
 = 
§c
->packet_life_time;

140 
d°
->
¥e„ªn˚
 = 
§c
->preference;

141 
d°
->
∑ckë_li„_time_£À˘‹
 = 
§c
->packet_life_time_selector;

142 
	}
}

	@libibverbs-41mlnx1/src/memory.c

34 #i‡
HAVE_CONFIG_H


35 
	~<c⁄fig.h
>

38 
	~<î∫o.h
>

39 
	~<sys/mm™.h
>

40 
	~<uni°d.h
>

41 
	~<öây≥s.h
>

42 
	~<°dlib.h
>

43 
	~<°döt.h
>

44 
	~<°dio.h
>

45 
	~<°rög.h
>

46 
	~<dúít.h
>

47 
	~<limôs.h
>

49 
	~"ibvîbs.h
"

54 #i‚de‡
MADV_DONTFORK


55 
	#MADV_DONTFORK
 10

	)

58 #i‚de‡
MADV_DOFORK


59 
	#MADV_DOFORK
 11

	)

62 
	sibv_mem_node
 {

64 
	mIBV_RED
,

65 
	mIBV_BLACK


66 } 
	mcﬁ‹
;

67 
ibv_mem_node
 *
	m∑ª¡
;

68 
ibv_mem_node
 *
	mÀ·
, *
	mright
;

69 
uöçå_t
 
	m°¨t
, 
	míd
;

70 
	mªf˙t
;

73 
ibv_mem_node
 *
	gmm_roŸ
;

74 
±hªad_muãx_t
 
	gmm_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

75 
	g∑ge_size
;

76 
	ghuge_∑ge_íabÀd
;

77 
	gtoo_œã
;

79 
	$sm≠s_∑ge_size
(
FILE
 *
fûe
)

81 
n
;

82 
size
 = 
∑ge_size
;

83 
buf
[1024];

85 
	`fgës
(
buf
, (buf), 
fûe
Ë!
NULL
) {

86 i‡(!
	`°r°r
(
buf
, "KernelPageSize:"))

89 
n
 = 
	`ssˇnf
(
buf
, "%*†%lu", &
size
);

90 i‡(
n
 < 1)

94 
size
 = size * 1024;

99  
size
;

100 
	}
}

102 
	$gë_∑ge_size
(*
ba£
)

104 
ªt
 = 
∑ge_size
;

105 
pid_t
 
pid
;

106 
FILE
 *
fûe
;

107 
buf
[1024];

109 
pid
 = 
	`gëpid
();

110 
	`¢¥ötf
(
buf
, (buf), "/¥oc/%d/sm≠s", 
pid
);

112 
fûe
 = 
	`f›í
(
buf
, "r");

113 i‡(!
fûe
)

114 
out
;

116 
	`fgës
(
buf
, (buf), 
fûe
Ë!
NULL
) {

117 
n
;

118 
uöçå_t
 
ønge_°¨t
, 
ønge_íd
;

120 
n
 = 
	`ssˇnf
(
buf
, "%" 
SCNxPTR
 "-%"SCNxPTR, &
ønge_°¨t
, &
ønge_íd
);

122 i‡(
n
 < 2)

125 i‡((
uöçå_t
Ë
ba£
 >
ønge_°¨t
 && (uöçå_tËba£ < 
ønge_íd
) {

126 
ªt
 = 
	`sm≠s_∑ge_size
(
fûe
);

131 
	`f˛o£
(
fûe
);

133 
out
:

134  
ªt
;

135 
	}
}

137 
	$ibv_f‹k_öô
()

139 *
tmp
, *
tmp_Æig√d
;

140 
ªt
;

141 
size
;

143 i‡(
mm_roŸ
)

146 i‡(
too_œã
)

147  
EINVAL
;

149 
∑ge_size
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

150 i‡(
∑ge_size
 < 0)

151  
î∫o
;

153 i‡(
	`posix_memÆign
(&
tmp
, 
∑ge_size
,Öage_size))

154  
ENOMEM
;

156 i‡(
	`gëív
("RDMAV_HUGEPAGES_SAFE"))

157 
huge_∑ge_íabÀd
 = 1;

159 
huge_∑ge_íabÀd
 = 0;

161 i‡(
huge_∑ge_íabÀd
) {

162 
size
 = 
	`gë_∑ge_size
(
tmp
);

163 
tmp_Æig√d
 = (*)((
uöçå_t
Ë
tmp
 & ~(
size
 - 1));

165 
size
 = 
∑ge_size
;

166 
tmp_Æig√d
 = 
tmp
;

169 
ªt
 = 
	`madvi£
(
tmp_Æig√d
, 
size
, 
MADV_DONTFORK
) ||

170 
	`madvi£
(
tmp_Æig√d
, 
size
, 
MADV_DOFORK
);

172 
	`‰ì
(
tmp
);

174 i‡(
ªt
)

175  
ENOSYS
;

177 
mm_roŸ
 = 
	`mÆloc
( *mm_root);

178 i‡(!
mm_roŸ
)

179  
ENOMEM
;

181 
mm_roŸ
->
∑ª¡
 = 
NULL
;

182 
mm_roŸ
->
À·
 = 
NULL
;

183 
mm_roŸ
->
right
 = 
NULL
;

184 
mm_roŸ
->
cﬁ‹
 = 
IBV_BLACK
;

185 
mm_roŸ
->
°¨t
 = 0;

186 
mm_roŸ
->
íd
 = 
UINTPTR_MAX
;

187 
mm_roŸ
->
ªf˙t
 = 0;

190 
	}
}

192 
ibv_mem_node
 *
	$__mm_¥ev
(
ibv_mem_node
 *
node
)

194 i‡(
node
->
À·
) {

195 
node
 =Çode->
À·
;

196 
node
->
right
)

197 
node
 =Çode->
right
;

199 
node
->
∑ª¡
 &&Çodê=node->∑ª¡->
À·
)

200 
node
 =Çode->
∑ª¡
;

202 
node
 =Çode->
∑ª¡
;

205  
node
;

206 
	}
}

208 
ibv_mem_node
 *
	$__mm_√xt
(
ibv_mem_node
 *
node
)

210 i‡(
node
->
right
) {

211 
node
 =Çode->
right
;

212 
node
->
À·
)

213 
node
 =Çode->
À·
;

215 
node
->
∑ª¡
 &&Çodê=node->∑ª¡->
right
)

216 
node
 =Çode->
∑ª¡
;

218 
node
 =Çode->
∑ª¡
;

221  
node
;

222 
	}
}

224 
	$__mm_rŸ©e_right
(
ibv_mem_node
 *
node
)

226 
ibv_mem_node
 *
tmp
;

228 
tmp
 = 
node
->
À·
;

230 
node
->
À·
 = 
tmp
->
right
;

231 i‡(
node
->
À·
)

232 
node
->
À·
->
∑ª¡
 =Çode;

234 i‡(
node
->
∑ª¡
) {

235 i‡(
node
->
∑ª¡
->
right
 ==Çode)

236 
node
->
∑ª¡
->
right
 = 
tmp
;

238 
node
->
∑ª¡
->
À·
 = 
tmp
;

240 
mm_roŸ
 = 
tmp
;

242 
tmp
->
∑ª¡
 = 
node
->parent;

244 
tmp
->
right
 = 
node
;

245 
node
->
∑ª¡
 = 
tmp
;

246 
	}
}

248 
	$__mm_rŸ©e_À·
(
ibv_mem_node
 *
node
)

250 
ibv_mem_node
 *
tmp
;

252 
tmp
 = 
node
->
right
;

254 
node
->
right
 = 
tmp
->
À·
;

255 i‡(
node
->
right
)

256 
node
->
right
->
∑ª¡
 =Çode;

258 i‡(
node
->
∑ª¡
) {

259 i‡(
node
->
∑ª¡
->
right
 ==Çode)

260 
node
->
∑ª¡
->
right
 = 
tmp
;

262 
node
->
∑ª¡
->
À·
 = 
tmp
;

264 
mm_roŸ
 = 
tmp
;

266 
tmp
->
∑ª¡
 = 
node
->parent;

268 
tmp
->
À·
 = 
node
;

269 
node
->
∑ª¡
 = 
tmp
;

270 
	}
}

273 
	$__mm_add_ªbÆ™˚
(
ibv_mem_node
 *
node
)

275 
ibv_mem_node
 *
∑ª¡
, *
gp
, *
un˛e
;

277 
node
->
∑ª¡
 &&Çode->∑ª¡->
cﬁ‹
 =
IBV_RED
) {

278 
∑ª¡
 = 
node
->parent;

279 
gp
 = 
node
->
∑ª¡
->parent;

281 i‡(
∑ª¡
 =
gp
->
À·
) {

282 
un˛e
 = 
gp
->
right
;

284 i‡(
un˛e
 && un˛e->
cﬁ‹
 =
IBV_RED
) {

285 
∑ª¡
->
cﬁ‹
 = 
IBV_BLACK
;

286 
un˛e
->
cﬁ‹
 = 
IBV_BLACK
;

287 
gp
->
cﬁ‹
 = 
IBV_RED
;

289 
node
 = 
gp
;

291 i‡(
node
 =
∑ª¡
->
right
) {

292 
	`__mm_rŸ©e_À·
(
∑ª¡
);

293 
node
 = 
∑ª¡
;

294 
∑ª¡
 = 
node
->parent;

297 
∑ª¡
->
cﬁ‹
 = 
IBV_BLACK
;

298 
gp
->
cﬁ‹
 = 
IBV_RED
;

300 
	`__mm_rŸ©e_right
(
gp
);

303 
un˛e
 = 
gp
->
À·
;

305 i‡(
un˛e
 && un˛e->
cﬁ‹
 =
IBV_RED
) {

306 
∑ª¡
->
cﬁ‹
 = 
IBV_BLACK
;

307 
un˛e
->
cﬁ‹
 = 
IBV_BLACK
;

308 
gp
->
cﬁ‹
 = 
IBV_RED
;

310 
node
 = 
gp
;

312 i‡(
node
 =
∑ª¡
->
À·
) {

313 
	`__mm_rŸ©e_right
(
∑ª¡
);

314 
node
 = 
∑ª¡
;

315 
∑ª¡
 = 
node
->parent;

318 
∑ª¡
->
cﬁ‹
 = 
IBV_BLACK
;

319 
gp
->
cﬁ‹
 = 
IBV_RED
;

321 
	`__mm_rŸ©e_À·
(
gp
);

326 
mm_roŸ
->
cﬁ‹
 = 
IBV_BLACK
;

327 
	}
}

329 
	$__mm_add
(
ibv_mem_node
 *
√w
)

331 
ibv_mem_node
 *
node
, *
∑ª¡
 = 
NULL
;

333 
node
 = 
mm_roŸ
;

334 
node
) {

335 
∑ª¡
 = 
node
;

336 i‡(
node
->
°¨t
 < 
√w
->start)

337 
node
 =Çode->
right
;

339 
node
 =Çode->
À·
;

342 i‡(
∑ª¡
->
°¨t
 < 
√w
->start)

343 
∑ª¡
->
right
 = 
√w
;

345 
∑ª¡
->
À·
 = 
√w
;

347 
√w
->
∑ª¡
 =Öarent;

348 
√w
->
À·
 = 
NULL
;

349 
√w
->
right
 = 
NULL
;

351 
√w
->
cﬁ‹
 = 
IBV_RED
;

352 
	`__mm_add_ªbÆ™˚
(
√w
);

353 
	}
}

355 
	$__mm_ªmove
(
ibv_mem_node
 *
node
)

357 
ibv_mem_node
 *
chûd
, *
∑ª¡
, *
sib
, *
tmp
;

358 
nodecﬁ
;

360 i‡(
node
->
À·
 &&Çode->
right
) {

361 
tmp
 = 
node
->
À·
;

362 
tmp
->
right
)

363 
tmp
 =Åmp->
right
;

365 
nodecﬁ
 = 
tmp
->
cﬁ‹
;

366 
chûd
 = 
tmp
->
À·
;

367 
tmp
->
cﬁ‹
 = 
node
->color;

369 i‡(
tmp
->
∑ª¡
 !
node
) {

370 
∑ª¡
 = 
tmp
->parent;

371 
∑ª¡
->
right
 = 
tmp
->
À·
;

372 i‡(
tmp
->
À·
)

373 
tmp
->
À·
->
∑ª¡
 =Öarent;

375 
tmp
->
À·
 = 
node
->left;

376 
node
->
À·
->
∑ª¡
 = 
tmp
;

378 
∑ª¡
 = 
tmp
;

380 
tmp
->
right
 = 
node
->right;

381 
node
->
right
->
∑ª¡
 = 
tmp
;

383 
tmp
->
∑ª¡
 = 
node
->parent;

384 i‡(
node
->
∑ª¡
) {

385 i‡(
node
->
∑ª¡
->
À·
 ==Çode)

386 
node
->
∑ª¡
->
À·
 = 
tmp
;

388 
node
->
∑ª¡
->
right
 = 
tmp
;

390 
mm_roŸ
 = 
tmp
;

392 
nodecﬁ
 = 
node
->
cﬁ‹
;

394 
chûd
 = 
node
->
À·
 ?Çode->À· :Çode->
right
;

395 
∑ª¡
 = 
node
->parent;

397 i‡(
chûd
)

398 
chûd
->
∑ª¡
 =Öarent;

399 i‡(
∑ª¡
) {

400 i‡(
∑ª¡
->
À·
 =
node
)

401 
∑ª¡
->
À·
 = 
chûd
;

403 
∑ª¡
->
right
 = 
chûd
;

405 
mm_roŸ
 = 
chûd
;

408 
	`‰ì
(
node
);

410 i‡(
nodecﬁ
 =
IBV_RED
)

413 (!
chûd
 || chûd->
cﬁ‹
 =
IBV_BLACK
Ë&& chûd !
mm_roŸ
) {

414 i‡(
∑ª¡
->
À·
 =
chûd
) {

415 
sib
 = 
∑ª¡
->
right
;

417 i‡(
sib
->
cﬁ‹
 =
IBV_RED
) {

418 
∑ª¡
->
cﬁ‹
 = 
IBV_RED
;

419 
sib
->
cﬁ‹
 = 
IBV_BLACK
;

420 
	`__mm_rŸ©e_À·
(
∑ª¡
);

421 
sib
 = 
∑ª¡
->
right
;

424 i‡((!
sib
->
À·
 || sib->À·->
cﬁ‹
 =
IBV_BLACK
) &&

425 (!
sib
->
right
 || sib->right->
cﬁ‹
 =
IBV_BLACK
)) {

426 
sib
->
cﬁ‹
 = 
IBV_RED
;

427 
chûd
 = 
∑ª¡
;

428 
∑ª¡
 = 
chûd
->parent;

430 i‡(!
sib
->
right
 || sib->right->
cﬁ‹
 =
IBV_BLACK
) {

431 i‡(
sib
->
À·
)

432 
sib
->
À·
->
cﬁ‹
 = 
IBV_BLACK
;

433 
sib
->
cﬁ‹
 = 
IBV_RED
;

434 
	`__mm_rŸ©e_right
(
sib
);

435 
sib
 = 
∑ª¡
->
right
;

438 
sib
->
cﬁ‹
 = 
∑ª¡
->color;

439 
∑ª¡
->
cﬁ‹
 = 
IBV_BLACK
;

440 i‡(
sib
->
right
)

441 
sib
->
right
->
cﬁ‹
 = 
IBV_BLACK
;

442 
	`__mm_rŸ©e_À·
(
∑ª¡
);

443 
chûd
 = 
mm_roŸ
;

447 
sib
 = 
∑ª¡
->
À·
;

449 i‡(
sib
->
cﬁ‹
 =
IBV_RED
) {

450 
∑ª¡
->
cﬁ‹
 = 
IBV_RED
;

451 
sib
->
cﬁ‹
 = 
IBV_BLACK
;

452 
	`__mm_rŸ©e_right
(
∑ª¡
);

453 
sib
 = 
∑ª¡
->
À·
;

456 i‡((!
sib
->
À·
 || sib->À·->
cﬁ‹
 =
IBV_BLACK
) &&

457 (!
sib
->
right
 || sib->right->
cﬁ‹
 =
IBV_BLACK
)) {

458 
sib
->
cﬁ‹
 = 
IBV_RED
;

459 
chûd
 = 
∑ª¡
;

460 
∑ª¡
 = 
chûd
->parent;

462 i‡(!
sib
->
À·
 || sib->À·->
cﬁ‹
 =
IBV_BLACK
) {

463 i‡(
sib
->
right
)

464 
sib
->
right
->
cﬁ‹
 = 
IBV_BLACK
;

465 
sib
->
cﬁ‹
 = 
IBV_RED
;

466 
	`__mm_rŸ©e_À·
(
sib
);

467 
sib
 = 
∑ª¡
->
À·
;

470 
sib
->
cﬁ‹
 = 
∑ª¡
->color;

471 
∑ª¡
->
cﬁ‹
 = 
IBV_BLACK
;

472 i‡(
sib
->
À·
)

473 
sib
->
À·
->
cﬁ‹
 = 
IBV_BLACK
;

474 
	`__mm_rŸ©e_right
(
∑ª¡
);

475 
chûd
 = 
mm_roŸ
;

481 i‡(
chûd
)

482 
chûd
->
cﬁ‹
 = 
IBV_BLACK
;

483 
	}
}

485 
ibv_mem_node
 *
	$__mm_föd_°¨t
(
uöçå_t
 
°¨t
, uöçå_à
íd
)

487 
ibv_mem_node
 *
node
 = 
mm_roŸ
;

489 
node
) {

490 i‡(
node
->
°¨t
 <°¨à&&Çode->
íd
 >= start)

493 i‡(
node
->
°¨t
 < start)

494 
node
 =Çode->
right
;

496 
node
 =Çode->
À·
;

499  
node
;

500 
	}
}

502 
ibv_mem_node
 *
	$mîge_ønges
(
ibv_mem_node
 *
node
,

503 
ibv_mem_node
 *
¥ev
)

505 
¥ev
->
íd
 = 
node
->end;

506 
¥ev
->
ªf˙t
 = 
node
->refcnt;

507 
	`__mm_ªmove
(
node
);

509  
¥ev
;

510 
	}
}

512 
ibv_mem_node
 *
	$•lô_ønge
(
ibv_mem_node
 *
node
,

513 
uöçå_t
 
cut_löe
)

515 
ibv_mem_node
 *
√w_node
 = 
NULL
;

517 
√w_node
 = 
	`mÆloc
( *new_node);

518 i‡(!
√w_node
)

519  
NULL
;

520 
√w_node
->
°¨t
 = 
cut_löe
;

521 
√w_node
->
íd
 = 
node
->end;

522 
√w_node
->
ªf˙t
 = 
node
->refcnt;

523 
node
->
íd
 = 
cut_löe
 - 1;

524 
	`__mm_add
(
√w_node
);

526  
√w_node
;

527 
	}
}

529 
ibv_mem_node
 *
	$gë_°¨t_node
(
uöçå_t
 
°¨t
, uöçå_à
íd
,

530 
öc
)

532 
ibv_mem_node
 *
node
, *
tmp
 = 
NULL
;

534 
node
 = 
	`__mm_föd_°¨t
(
°¨t
, 
íd
);

535 i‡(
node
->
°¨t
 < start)

536 
node
 = 
	`•lô_ønge
“ode, 
°¨t
);

538 
tmp
 = 
	`__mm_¥ev
(
node
);

539 i‡(
tmp
 &&Åmp->
ªf˙t
 =
node
->ªf˙à+ 
öc
)

540 
node
 = 
	`mîge_ønges
“ode, 
tmp
);

542  
node
;

543 
	}
}

549 
ibv_mem_node
 *
	$undo_node
(
ibv_mem_node
 *
node
,

550 
uöçå_t
 
°¨t
, 
öc
)

552 
ibv_mem_node
 *
tmp
 = 
NULL
;

558 i‡(
°¨t
 > 
node
->start) {

559 
tmp
 = 
	`•lô_ønge
(
node
, 
°¨t
);

560 i‡(
tmp
) {

561 
node
->
ªf˙t
 +
öc
;

562 
node
 = 
tmp
;

564  
NULL
;

567 
tmp
 = 
	`__mm_¥ev
(
node
);

568 i‡(
tmp
 &&Åmp->
ªf˙t
 =
node
->refcnt)

569 
node
 = 
	`mîge_ønges
“ode, 
tmp
);

571 
tmp
 = 
	`__mm_√xt
(
node
);

572 i‡(
tmp
 &&Åmp->
ªf˙t
 =
node
->refcnt)

573 
node
 = 
	`mîge_ønges
(
tmp
,Çode);

575  
node
;

576 
	}
}

578 
	$ibv_madvi£_ønge
(*
ba£
, 
size_t
 
size
, 
advi˚
)

580 
uöçå_t
 
°¨t
, 
íd
;

581 
ibv_mem_node
 *
node
, *
tmp
;

582 
öc
;

583 
rﬁlög_back
 = 0;

584 
ªt
 = 0;

585 
ønge_∑ge_size
;

587 i‡(!
size
)

590 i‡(
huge_∑ge_íabÀd
)

591 
ønge_∑ge_size
 = 
	`gë_∑ge_size
(
ba£
);

593 
ønge_∑ge_size
 = 
∑ge_size
;

595 
°¨t
 = (
uöçå_t
Ë
ba£
 & ~(
ønge_∑ge_size
 - 1);

596 
íd
 = ((
uöçå_t
Ë(
ba£
 + 
size
 + 
ønge_∑ge_size
 - 1) &

597 ~(
ønge_∑ge_size
 - 1)) - 1;

599 
	`±hªad_muãx_lock
(&
mm_muãx
);

600 
agaö
:

601 
öc
 = 
advi˚
 =
MADV_DONTFORK
 ? 1 : -1;

603 
node
 = 
	`gë_°¨t_node
(
°¨t
, 
íd
, 
öc
);

604 i‡(!
node
) {

605 
ªt
 = -1;

606 
out
;

609 
node
 &&Çode->
°¨t
 <
íd
) {

610 i‡(
node
->
íd
 >Énd) {

611 i‡(!
	`•lô_ønge
(
node
, 
íd
 + 1)) {

612 
ªt
 = -1;

613 
out
;

617 i‡((
öc
 =-1 && 
node
->
ªf˙t
 == 1) ||

618 (
öc
 =1 && 
node
->
ªf˙t
 == 0)) {

630 i‡(
°¨t
 > 
node
->start)

631 
ªt
 = 
	`madvi£
((*Ë
°¨t
, 
node
->
íd
 - start + 1,

632 
advi˚
);

634 
ªt
 = 
	`madvi£
((*Ë
node
->
°¨t
,

635 
node
->
íd
 -Çode->
°¨t
 + 1,

636 
advi˚
);

637 i‡(
ªt
) {

638 
node
 = 
	`undo_node
“ode, 
°¨t
, 
öc
);

640 i‡(
rﬁlög_back
 || !
node
)

641 
out
;

644 
rﬁlög_back
 = 1;

645 
advi˚
 =ádvi˚ =
MADV_DONTFORK
 ?

646 
MADV_DOFORK
 : 
MADV_DONTFORK
;

647 
tmp
 = 
	`__mm_¥ev
(
node
);

648 i‡(!
tmp
 || 
°¨t
 >Åmp->
íd
)

649 
out
;

650 
íd
 = 
tmp
->end;

651 
agaö
;

655 
node
->
ªf˙t
 +
öc
;

656 
node
 = 
	`__mm_√xt
(node);

659 i‡(
node
) {

660 
tmp
 = 
	`__mm_¥ev
(
node
);

661 i‡(
tmp
 && 
node
->
ªf˙t
 ==Åmp->refcnt)

662 
node
 = 
	`mîge_ønges
“ode, 
tmp
);

665 
out
:

666 i‡(
rﬁlög_back
)

667 
ªt
 = -1;

669 
	`±hªad_muãx_u∆ock
(&
mm_muãx
);

671  
ªt
;

672 
	}
}

674 
	$ibv_d⁄tf‹k_ønge
(*
ba£
, 
size_t
 
size
)

676 i‡(
mm_roŸ
)

677  
	`ibv_madvi£_ønge
(
ba£
, 
size
, 
MADV_DONTFORK
);

679 
too_œã
 = 1;

682 
	}
}

684 
	$ibv_dof‹k_ønge
(*
ba£
, 
size_t
 
size
)

686 i‡(
mm_roŸ
)

687  
	`ibv_madvi£_ønge
(
ba£
, 
size
, 
MADV_DOFORK
);

689 
too_œã
 = 1;

692 
	}
}

	@libibverbs-41mlnx1/src/neigh.c

2 
	~"c⁄fig.h
"

3 
	~<√t/if_∑ckë.h
>

4 
	~<löux/√éök.h
>

5 
	~<löux/π√éök.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<√éök/rouã/π∆.h
>

9 
	~<√éök/rouã/lök.h
>

10 
	~<√éök/rouã/rouã.h
>

11 
	~<√éök/rouã/√ighbour.h
>

12 #i‚de‡
HAVE_LIBNL1


13 
	~<√éök/rouã/lök/vœn.h
>

17 
	~<sys/ty≥s.h
>

18 
	~<sys/sockë.h
>

19 
	~<sys/timîfd.h
>

20 
	~<√töë/ö.h
>

21 
	~<î∫o.h
>

22 
	~<uni°d.h
>

23 
	~<iÁddrs.h
>

24 
	~<√tdb.h
>

25 #i‚de‡
_LINUX_IF_H


26 
	~<√t/if.h
>

29 
	$if_«mëoödex
(
__c⁄°
 *
__i‚ame
Ë
__THROW
;

33 
	~"ibvîbs.h
"

35 
	~"√igh.h
"

37 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

38 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

39 
	#¥öt_hdr
 
PFX
 "ªsﬁvî: "

	)

40 
	#¥öt_îr
(...Ë
	`Ârötf
(
°dîr
, 
¥öt_hdr
 
__VA_ARGS__
)

	)

41 #ifde‡
_DEBUG_


42 
	#¥öt_dbg_s
(
°ªam
, ...Ë
	`Ârötf
((°ªam), 
__VA_ARGS__
)

	)

43 
	#¥öt_addªss
(
°ªam
, 
msg
, 
addr
) \

45 
buff
[100]; \

46 
	`¥öt_dbg_s
((
°ªam
), (
msg
), 
	`∆_addr2°r
((
addr
), 
buff
,\

47 (
buff
))); \

48 
	}

	)
}

50 
	#¥öt_dbg_s
(
°ªam
, 
¨gs
...)

	)

51 
	#¥öt_addªss
(
°ªam
, 
msg
, ...)

	)

53 
	#¥öt_dbg
(...Ë
	`¥öt_dbg_s
(
°dîr
, 
¥öt_hdr
 
__VA_ARGS__
)

	)

55 #ifde‡
HAVE_LIBNL1


56 
	#∆_gëîr‹
(
x
Ë
	`∆_gëîr‹
()

	)

60 
π∆_lök_vœn_gë_id
(
π∆_lök
 *);

62 
±hªad_⁄˚_t
 
	gdevi˚_√igh_Æloc
 = 
PTHREAD_ONCE_INIT
;

63 #ifde‡
HAVE_LIBNL1


64 
∆_h™dÀ
 *
	gzîo_sockë
;

66 
∆_sock
 *
	gzîo_sockë
;

69 
	uskèddr
 {

70 
sockaddr
 
	ms
;

71 
sockaddr_ö
 
	ms4
;

72 
sockaddr_ö6
 
	ms6
;

75 
	sskt
 {

76 
skèddr
 
	mskèddr
;

77 
sockÀn_t
 
	mÀn
;

81 
π∆_√igh
 *
	$mπ∆_√igh_gë
(
∆_ˇche
 *
ˇche
, 
ifödex
,

82 
∆_addr
 *
d°
)

84 
π∆_√igh
 *
√igh
;

86 
√igh
 = (
π∆_√igh
 *)
	`∆_ˇche_gë_fú°
(
ˇche
);

87 
√igh
) {

88 i‡(
	`π∆_√igh_gë_ifödex
(
√igh
Ë=
ifödex
 &&

89 !
	`∆_addr_cmp
(
	`π∆_√igh_gë_d°
(
√igh
), 
d°
)) {

90 
	`∆_obje˘_gë
((
∆_obje˘
 *)
√igh
);

91  
√igh
;

94 
√igh
 = (
π∆_√igh
 *)
	`∆_ˇche_gë_√xt
((
∆_obje˘
 *)neigh);

97  
NULL
;

98 
	}
}

100 
	$£t_lök_p‹t
(
skèddr
 *
s
, 
p‹t
, 
oif
)

102 
s
->s.
ß_Ámûy
) {

103 
AF_INET
:

104 
s
->
s4
.
sö_p‹t
 = 
p‹t
;

106 
AF_INET6
:

107 
s
->
s6
.
sö6_p‹t
 = 
p‹t
;

108 
s
->
s6
.
sö6_sc›e_id
 = 
oif
;

111  -
EINVAL
;

115 
	}
}

117 
	$cmp_addªss
(c⁄° 
sockaddr
 *
s1
,

118 c⁄° 
sockaddr
 *
s2
) {

119 i‡(
s1
->
ß_Ámûy
 !
s2
->sa_family)

120  
s1
->
ß_Ámûy
 ^ 
s2
->sa_family;

122 
s1
->
ß_Ámûy
) {

123 
AF_INET
:

124  ((
sockaddr_ö
 *)
s1
)->
sö_addr
.
s_addr
 ^

125 ((
sockaddr_ö
 *)
s2
)->
sö_addr
.
s_addr
;

126 
AF_INET6
:

127  
	`memcmp
(

128 ((
sockaddr_ö6
 *)
s1
)->
sö6_addr
.
s6_addr
,

129 ((
sockaddr_ö6
 *)
s2
)->
sö6_addr
.
s6_addr
,

130 (((
sockaddr_ö6
 *)
s1
)->
sö6_addr
.
s6_addr
));

132  -
ENOTSUP
;

134 
	}
}

137 
	$gë_ifödex
(c⁄° 
sockaddr
 *
s
)

139 
iÁddrs
 *
iÁddr
, *
iÁ
;

140 
«me2ödex
 = -
ENODEV
;

142 i‡(-1 =
	`gëiÁddrs
(&
iÁddr
))

143  
î∫o
;

145 
iÁ
 = 
iÁddr
; iÁ !
NULL
; iÁ = iÁ->
iÁ_√xt
) {

146 i‡(
NULL
 =
iÁ
->
iÁ_addr
)

149 i‡(!
	`cmp_addªss
(
iÁ
->
iÁ_addr
, 
s
)) {

150 
«me2ödex
 = 
	`if_«mëoödex
(
iÁ
->
iÁ_«me
);

155 
	`‰ìiÁddrs
(
iÁddr
);

157  
«me2ödex
;

158 
	}
}

160 
∆_addr
 *
	$gë_√igh_mac
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
)

162 
π∆_√igh
 *
√igh
;

163 
∆_addr
 *
Œ_addr
 = 
NULL
;

167 #ifde‡
HAVE_LIBNL3_BUG


168 
√igh
 = 
	`mπ∆_√igh_gë
(
√igh_h™dÀr
->
√igh_ˇche
,

169 
√igh_h™dÀr
->
oif
,

170 
√igh_h™dÀr
->
d°
);

172 
√igh
 = 
	`π∆_√igh_gë
(
√igh_h™dÀr
->
√igh_ˇche
,

173 
√igh_h™dÀr
->
oif
,

174 
√igh_h™dÀr
->
d°
);

177 i‡(
NULL
 =
√igh
) {

178 
	`¥öt_dbg
("Neigh isn'tát cache\n");

179  
NULL
;

182 
Œ_addr
 = 
	`π∆_√igh_gë_Œaddr
(
√igh
);

183 i‡(
NULL
 =
Œ_addr
)

184 
	`¥öt_dbg
("FailedÅo get hwáddress fromÇeighbour\n");

186 
Œ_addr
 = 
	`∆_addr_˛⁄e
(ll_addr);

188 
	`π∆_√igh_put
(
√igh
);

189  
Œ_addr
;

190 
	}
}

192 
	$gë_√igh_cb_evít
(
∆_obje˘
 *
obj
, *
¨g
)

194 
gë_√igh_h™dÀr
 *
√igh_h™dÀr
 =

195 (
gë_√igh_h™dÀr
 *)
¨g
;

197 i‡(
	`∆_obje˘_m©ch_fûãr
(

198 
obj
,

199 (
∆_obje˘
 *)
√igh_h™dÀr
->
fûãr_√igh
)) {

200 
π∆_√igh
 *
√igh
 = (π∆_√igh *)
obj
;

201 
	`¥öt_dbg
("Foundá match forÇeighbour\n");

203 i‡(
NULL
 =
√igh_h™dÀr
->
found_Œ_addr
) {

204 i‡(
NULL
 =
	`π∆_√igh_gë_Œaddr
(
√igh
)) {

205 
	`¥öt_îr
("Neighbour doesn't haveá hwáddr\n");

208 
√igh_h™dÀr
->
found_Œ_addr
 =

209 
	`∆_addr_˛⁄e
(
	`π∆_√igh_gë_Œaddr
(
√igh
));

210 i‡(
NULL
 =
√igh_h™dÀr
->
found_Œ_addr
)

211 
	`¥öt_îr
("Couldn't copyÇeighbour hwáddr\n");

214 
	}
}

216 
	$gë_√igh_cb
(
∆_msg
 *
msg
, *
¨g
)

218 
gë_√igh_h™dÀr
 *
√igh_h™dÀr
 =

219 (
gë_√igh_h™dÀr
 *)
¨g
;

221 i‡(
	`∆_msg_∑r£
(
msg
, &
gë_√igh_cb_evít
, 
√igh_h™dÀr
) < 0)

222 
	`¥öt_îr
("UnknownÉvent\n");

224  
NL_OK
;

225 
	}
}

227 
	$£t_√igh_fûãr
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
,

228 
π∆_√igh
 *
fûãr
) {

229 
√igh_h™dÀr
->
fûãr_√igh
 = 
fûãr
;

230 
	}
}

232 
π∆_√igh
 *
	$¸óã_fûãr_√igh_f‹_d°
(
∆_addr
 *
d°_addr
,

233 
oif
)

235 
π∆_√igh
 *
fûãr_√igh
;

237 
fûãr_√igh
 = 
	`π∆_√igh_Æloc
();

238 i‡(
NULL
 =
fûãr_√igh
) {

239 
	`¥öt_îr
("Couldn'tállocate filterÇeigh\n");

240  
NULL
;

242 
	`π∆_√igh_£t_ifödex
(
fûãr_√igh
, 
oif
);

243 
	`π∆_√igh_£t_d°
(
fûãr_√igh
, 
d°_addr
);

245  
fûãr_√igh
;

246 
	}
}

248 
	#PORT_DISCARD
 
	`ht⁄s
(9)

	)

249 
	#SEND_PAYLOAD
 "H"

	)

251 
	$¸óã_sockë
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
,

252 
skt
 *
addr_d°
, *
psock_fd
)

254 
îr
;

255 
skt
 
addr_§c
;

256 
sock_fd
;

258 
	`mem£t
(
addr_d°
, 0, (*addr_dst));

259 
	`mem£t
(&
addr_§c
, 0, (addr_src));

260 
addr_§c
.
Àn
 = ◊ddr_§c.
skèddr
);

262 
îr
 = 
	`∆_addr_fûl_sockaddr
(
√igh_h™dÀr
->
§c
,

263 &
addr_§c
.
skèddr
.
s
,

264 &
addr_§c
.
Àn
);

265 i‡(
îr
) {

266 
	`¥öt_îr
("couldn't convert srcÅo sockaddr\n");

267  
îr
;

270 
addr_d°
->
Àn
 = ◊ddr_d°->
skèddr
);

271 
îr
 = 
	`∆_addr_fûl_sockaddr
(
√igh_h™dÀr
->
d°
,

272 &
addr_d°
->
skèddr
.
s
,

273 &
addr_d°
->
Àn
);

274 i‡(
îr
) {

275 
	`¥öt_îr
("couldn't convert dstÅo sockaddr\n");

276  
îr
;

279 
îr
 = 
	`£t_lök_p‹t
(&
addr_d°
->
skèddr
, 
PORT_DISCARD
,

280 
√igh_h™dÀr
->
oif
);

281 i‡(
îr
)

282  
îr
;

284 
sock_fd
 = 
	`sockë
(
addr_d°
->
skèddr
.
s
.
ß_Ámûy
,

285 
SOCK_DGRAM
 | 
SOCK_CLOEXEC
, 0);

286 i‡(
sock_fd
 == -1)

287  
î∫o
 ? -errno : -1;

288 
îr
 = 
	`böd
(
sock_fd
, &
addr_§c
.
skèddr
.
s
,áddr_§c.
Àn
);

289 i‡(
îr
) {

290 
böd_îr
 = -
î∫o
;

291 
	`¥öt_îr
("Couldn't bind socket\n");

292 
	`˛o£
(
sock_fd
);

293  
böd_îr
 ?: 
îr
;

296 *
psock_fd
 = 
sock_fd
;

299 
	}
}

301 
	#NUM_OF_RETRIES
 10

	)

302 
	#NUM_OF_TRIES
 ((
NUM_OF_RETRIES
Ë+ 1)

	)

303 #i‡
NUM_OF_TRIES
 < 1

306 
	$¸óã_timî
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
)

308 
u£r_timeout
 = 
√igh_h™dÀr
->
timeout
/
NUM_OF_TRIES
;

309 
time•ec
 
timeout
 = {

310 .
tv_£c
 = 
u£r_timeout
 / 1000,

311 .
tv_n£c
 = (
u£r_timeout
 % 1000) * 1000000

313 
ôimî•ec
 
timî_time
 = {.
ô_vÆue
 = 
timeout
};

314 
timî_fd
;

316 
timî_fd
 = 
	`timîfd_¸óã
(
CLOCK_MONOTONIC
, 
TFD_NONBLOCK
 | 
TFD_CLOEXEC
);

317 i‡(-1 =
timî_fd
) {

318 
	`¥öt_îr
("Couldn't createÅimer\n");

319  
timî_fd
;

322 i‡(
√igh_h™dÀr
->
timeout
) {

323 i‡(
NUM_OF_TRIES
 <= 1)

324 
	`bzîo
(&
timî_time
.
ô_öãrvÆ
,

325 (
timî_time
.
ô_öãrvÆ
));

327 
timî_time
.
ô_öãrvÆ
 = 
timeout
;

328 i‡(
	`timîfd_£âime
(
timî_fd
, 0, &
timî_time
, 
NULL
)) {

329 
	`¥öt_îr
("Couldn't setÅimer\n");

334  
timî_fd
;

335 
	}
}

337 
	#UDP_SOCKET_MAX_SENDTO
 100000ULL

	)

339 
∆_addr
 *
	$¥o˚ss_gë_√igh_mac
(

340 
gë_√igh_h™dÀr
 *
√igh_h™dÀr
)

342 
îr
;

343 
∆_addr
 *
Œ_addr
 = 
	`gë_√igh_mac
(
√igh_h™dÀr
);

344 
π∆_√igh
 *
√igh_fûãr
;

345 
fd_£t
 
fd£t
;

346 
	`unöôülized_v¨
(
sock_fd
);

347 
fd
;

348 
nfds
;

349 
timî_fd
;

350 
ªt
;

351 
skt
 
addr_d°
;

352 
buff
[(
SEND_PAYLOAD
)] = SEND_PAYLOAD;

353 
ªåõs
 = 0;

354 
uöt64_t
 
max_cou¡
 = 
UDP_SOCKET_MAX_SENDTO
;

356 i‡(
NULL
 !
Œ_addr
)

357  
Œ_addr
;

359 
îr
 = 
	`∆_sockë_add_membîshù
(
√igh_h™dÀr
->
sock
,

360 
RTNLGRP_NEIGH
);

361 i‡(
îr
 < 0) {

362 
	`¥öt_îr
("%s\n", 
	`∆_gëîr‹
(
îr
));

363  
NULL
;

366 
√igh_fûãr
 = 
	`¸óã_fûãr_√igh_f‹_d°
(
√igh_h™dÀr
->
d°
,

367 
√igh_h™dÀr
->
oif
);

368 i‡(
NULL
 =
√igh_fûãr
)

369  
NULL
;

371 
	`£t_√igh_fûãr
(
√igh_h™dÀr
, 
√igh_fûãr
);

373 #ifde‡
HAVE_LIBNL1


374 
	`∆_dißbÀ_£quí˚_check
(
√igh_h™dÀr
->
sock
);

376 
	`∆_sockë_dißbÀ_£q_check
(
√igh_h™dÀr
->
sock
);

378 
	`∆_sockë_modify_cb
(
√igh_h™dÀr
->
sock
, 
NL_CB_VALID
, 
NL_CB_CUSTOM
,

379 &
gë_√igh_cb
, 
√igh_h™dÀr
);

381 
fd
 = 
	`∆_sockë_gë_fd
(
√igh_h™dÀr
->
sock
);

383 
îr
 = 
	`¸óã_sockë
(
√igh_h™dÀr
, &
addr_d°
, &
sock_fd
);

385 i‡(
îr
)

386  
NULL
;

389 
îr
 = 
	`£ndto
(
sock_fd
, 
buff
, (buff), 0,

390 &
addr_d°
.
skèddr
.
s
,

391 
addr_d°
.
Àn
);

392 i‡(
îr
 > 0)

393 
îr
 = 0;

394 } -1 =
îr
 && 
EADDRNOTAVAIL
 =
î∫o
 && --
max_cou¡
);

396 i‡(
îr
) {

397 
	`¥öt_îr
("FaûedÅÿ£ndÖackë %d", 
îr
);

398 
˛o£_sockë
;

400 
timî_fd
 = 
	`¸óã_timî
(
√igh_h™dÀr
);

401 i‡(
timî_fd
 < 0)

402 
˛o£_sockë
;

404 
nfds
 = 
	`MAX
(
fd
, 
timî_fd
) + 1;

408 
	`FD_ZERO
(&
fd£t
);

409 
	`FD_SET
(
fd
, &
fd£t
);

410 
	`FD_SET
(
timî_fd
, &
fd£t
);

413 
ªt
 = 
	`£À˘
(
nfds
, &
fd£t
, 
NULL
, NULL, NULL);

415 i‡(
ªt
) {

416 i‡(
	`FD_ISSET
(
fd
, &
fd£t
)) {

417 
	`∆_ªcvmsgs_deÁu…
(
√igh_h™dÀr
->
sock
);

418 i‡(
√igh_h™dÀr
->
found_Œ_addr
)

421 
	`∆_ˇche_ªfûl
(
√igh_h™dÀr
->
sock
,

422 
√igh_h™dÀr
->
√igh_ˇche
);

423 
Œ_addr
 = 
	`gë_√igh_mac
(
√igh_h™dÀr
);

424 i‡(
NULL
 !
Œ_addr
) {

426 } i‡(
	`FD_ISSET
(
timî_fd
, &
fd£t
) &&

427 
ªåõs
 < 
NUM_OF_RETRIES
) {

428 i‡(
	`£ndto
(
sock_fd
, 
buff
, (buff),

429 0, &
addr_d°
.
skèddr
.
s
,

430 
addr_d°
.
Àn
) < 0)

431 
	`¥öt_îr
("FailedÅo send "

437 i‡(
	`FD_ISSET
(
timî_fd
, &
fd£t
)) {

438 
uöt64_t
 
ªad_vÆ
;

439 i‡(
	`ªad
(
timî_fd
, &
ªad_vÆ
, (read_val))

441 
	`¥öt_dbg
("ReadÅimer_fd failed\n");

442 i‡(++
ªåõs
 >
NUM_OF_TRIES
) {

443 
	`¥öt_dbg
("Timeout whileÅryingÅo fetch "

450 
	`˛o£
(
timî_fd
);

451 
˛o£_sockë
:

452 
	`˛o£
(
sock_fd
);

453  
Œ_addr
 ?Ül_add∏: 
√igh_h™dÀr
->
found_Œ_addr
;

454 
	}
}

457 
	$gë_mˇ°_mac_ùv4
(
∆_addr
 *
d°
, ∆_add∏**
Œ_addr
)

459 
mac_addr
[6] = {0x01, 0x00, 0x5E};

460 
uöt32_t
 
addr
 = 
	`¡ohl
(*(uöt32_à*)
	`∆_addr_gë_bö¨y_addr
(
d°
));

461 
mac_addr
[5] = 
addr
 & 0xFF;

462 
addr
 >>= 8;

463 
mac_addr
[4] = 
addr
 & 0xFF;

464 
addr
 >>= 8;

465 
mac_addr
[3] = 
addr
 & 0x7F;

467 *
Œ_addr
 = 
	`∆_addr_buûd
(
AF_LLC
, 
mac_addr
, (mac_addr));

469  *
Œ_addr
 =
NULL
 ? -
EINVAL
 : 0;

470 
	}
}

472 
	$gë_mˇ°_mac_ùv6
(
∆_addr
 *
d°
, ∆_add∏**
Œ_addr
)

474 
mac_addr
[6] = {0x33, 0x33};

475 
	`mem˝y
(
mac_addr
 + 2, (*)
	`∆_addr_gë_bö¨y_addr
(
d°
) + 12, 4);

477 *
Œ_addr
 = 
	`∆_addr_buûd
(
AF_LLC
, 
mac_addr
, (mac_addr));

479  *
Œ_addr
 =
NULL
 ? -
EINVAL
 : 0;

480 
	}
}

482 
	$gë_lök_loˇl_mac_ùv6
(
∆_addr
 *
d°
,

483 
∆_addr
 **
Œ_addr
)

485 
mac_addr
[6];

486 
dev_id_zîo
 =

487 (
uöt16_t
)(

488 (*((
uöt8_t
 *)(
	`∆_addr_gë_bö¨y_addr
(
d°
) + 11)) << 8) +

489 *(
uöt8_t
 *)(
	`∆_addr_gë_bö¨y_addr
(
d°
) + 12)) == 0xfffe;

491 
	`mem˝y
(
mac_addr
 + 3, (*)
	`∆_addr_gë_bö¨y_addr
(
d°
) + 13, 3);

492 
	`mem˝y
(
mac_addr
, (*)
	`∆_addr_gë_bö¨y_addr
(
d°
) + 8, 3);

493 i‡(
dev_id_zîo
)

494 
mac_addr
[0] ^= 2;

496 *
Œ_addr
 = 
	`∆_addr_buûd
(
AF_LLC
, 
mac_addr
, (mac_addr));

497  *
Œ_addr
 =
NULL
 ? -
EINVAL
 : 0;

498 
	}
}

500 c⁄° 
	sícoded_l3_addr
 {

501 
	mÁmûy
;

502 
uöt8_t
 
	m¥efix_bôs
;

503 c⁄° 
	md©a
[16];

504 (*
	mgëãr
)(
∆_addr
 *
	md°
, ∆_add∏**
	mŒ_addr
);

505 } 
	gícoded_¥efixes
[] = {

506 {.
Ámûy
 = 
AF_INET
,

507 .
	g¥efix_bôs
 = 4,

508 .
	gd©a
 = {0xe0},

509 .
	ggëãr
 = &
gë_mˇ°_mac_ùv4
},

510 {.
	gÁmûy
 = 
AF_INET6
,

511 .
	g¥efix_bôs
 = 8,

512 .
	gd©a
 = {0xff},

513 .
	ggëãr
 = &
gë_mˇ°_mac_ùv6
},

514 {.
	gÁmûy
 = 
AF_INET6
,

515 .
	g¥efix_bôs
 = 64,

516 .
	gd©a
 = {0xfe, 0x80},

517 .
	ggëãr
 = 
gë_lök_loˇl_mac_ùv6
},

520 
	$∆_addr_cmp_¥efix_msb
(*
addr1
, 
Àn1
, *
addr2
, 
Àn2
)

522 
Àn
 = 
	`MIN
(
Àn1
, 
Àn2
);

523 
byãs
 = 
Àn
 / 8;

524 
d
 = 
	`memcmp
(
addr1
, 
addr2
, 
byãs
);

526 i‡(
d
 == 0) {

527 
mask
 = ((1UL << (
Àn
 % 8)) - 1UL) << (8 -Üen);

529 
d
 = (((*)
addr1
)[
byãs
] & 
mask
) -

530 (((*)
addr2
)[
byãs
] & 
mask
);

533  
d
;

534 
	}
}

535 
	$h™dÀ_ícoded_mac
(
∆_addr
 *
d°
, ∆_add∏**
Œ_addr
)

537 
uöt32_t
 
Ámûy
 = 
	`∆_addr_gë_Ámûy
(
d°
);

538 
∆_addr
 *
¥efix
 = 
NULL
;

539 
i
;

540 
ªt
 = 1;

542 
i
 = 0;

543 
i
 < (
ícoded_¥efixes
)/(encoded_prefixes[0]) &&

544 
ªt
; 
¥efix
 = 
NULL
, 
i
++) {

545 i‡(
ícoded_¥efixes
[
i
].
Ámûy
 != family)

548 
¥efix
 = 
	`∆_addr_buûd
(

549 
Ámûy
,

550 (*)
ícoded_¥efixes
[
i
].
d©a
,

551 
	`MIN
(
ícoded_¥efixes
[
i
].
¥efix_bôs
/8 +

552 !!(
ícoded_¥efixes
[
i
].
¥efix_bôs
 % 8),

553 (
ícoded_¥efixes
[
i
].
d©a
)));

555 i‡(
NULL
 =
¥efix
)

556  -
ENOMEM
;

557 
	`∆_addr_£t_¥efixÀn
(
¥efix
,

558 
ícoded_¥efixes
[
i
].
¥efix_bôs
);

560 i‡(!
	`∆_addr_cmp_¥efix_msb
(
	`∆_addr_gë_bö¨y_addr
(
d°
),

561 
	`∆_addr_gë_¥efixÀn
(
d°
),

562 
	`∆_addr_gë_bö¨y_addr
(
¥efix
),

563 
	`∆_addr_gë_¥efixÀn
(
¥efix
)))

564 
ªt
 = 
ícoded_¥efixes
[
i
].
	`gëãr
(
d°
, 
Œ_addr
);

565 #ifde‡
HAVE_LIBNL1


566 
	`∆_addr_de°roy
(
¥efix
);

568 
	`∆_addr_put
(
¥efix
);

572  
ªt
;

573 
	}
}

575 
	$gë_rouã_cb_∑r£r
(
∆_obje˘
 *
obj
, *
¨g
)

577 
gë_√igh_h™dÀr
 *
√igh_h™dÀr
 =

578 (
gë_√igh_h™dÀr
 *)
¨g
;

580 
π∆_rouã
 *
rouã
 = (π∆_rouã *)
obj
;

581 
∆_addr
 *
g©eway
;

582 
∆_addr
 *
§c
 = 
	`π∆_rouã_gë_¥ef_§c
(
rouã
);

583 
oif
;

584 
ty≥
 = 
	`π∆_rouã_gë_ty≥
(
rouã
);

585 
π∆_lök
 *
lök
;

587 #ifde‡
HAVE_LIBNL1


588 
g©eway
 = 
	`π∆_rouã_gë_g©eway
(
rouã
);

589 
oif
 = 
	`π∆_rouã_gë_oif
(
rouã
);

591 
π∆_√xth›
 *
nh
 = 
	`π∆_rouã_√xth›_n
(
rouã
, 0);

592 i‡(!
nh
)

593 
	`¥öt_îr
("Out of memory\n");

594 
g©eway
 = 
	`π∆_rouã_nh_gë_g©eway
(
nh
);

595 
oif
 = 
	`π∆_rouã_nh_gë_ifödex
(
nh
);

598 i‡(
g©eway
) {

599 #ifde‡
HAVE_LIBNL1


600 
	`∆_addr_de°roy
(
√igh_h™dÀr
->
d°
);

602 
	`∆_addr_put
(
√igh_h™dÀr
->
d°
);

604 
√igh_h™dÀr
->
d°
 = 
	`∆_addr_˛⁄e
(
g©eway
);

605 
	`¥öt_dbg
("Found gateway\n");

608 i‡(
RTN_BLACKHOLE
 =
ty≥
 ||

609 
RTN_UNREACHABLE
 =
ty≥
 ||

610 
RTN_PROHIBIT
 =
ty≥
 ||

611 
RTN_THROW
 =
ty≥
) {

612 
	`¥öt_îr
("De°ö©i⁄ uƒechabÀ (ty≥ %d)\n", 
ty≥
);

613 
îr
;

616 i‡(!
√igh_h™dÀr
->
§c
 && src)

617 
√igh_h™dÀr
->
§c
 = 
	`∆_addr_˛⁄e
(src);

619 i‡(
√igh_h™dÀr
->
oif
 < 0 && oif > 0)

620 
√igh_h™dÀr
->
oif
 = oif;

623 i‡(
RTN_LOCAL
 =
ty≥
) {

624 
∆_addr
 *
Œaddr
;

626 
lök
 = 
	`π∆_lök_gë
(
√igh_h™dÀr
->
lök_ˇche
,

627 
√igh_h™dÀr
->
oif
);

629 i‡(
NULL
 =
lök
)

630 
îr
;

632 
Œaddr
 = 
	`π∆_lök_gë_addr
(
lök
);

634 i‡(
NULL
 =
Œaddr
)

635 
îr_lök
;

637 
√igh_h™dÀr
->
found_Œ_addr
 = 
	`∆_addr_˛⁄e
(
Œaddr
);

638 
	`π∆_lök_put
(
lök
);

640 i‡(!
	`h™dÀ_ícoded_mac
(

641 
√igh_h™dÀr
->
d°
,

642 &
√igh_h™dÀr
->
found_Œ_addr
))

643 
	`¥öt_addªss
(
°dîr
, "calculatedáddress %s\n",

644 
√igh_h™dÀr
->
found_Œ_addr
);

647 
	`¥öt_addªss
(
°dîr
, "Cuºíàd° %s\n", 
√igh_h™dÀr
->
d°
);

650 
îr_lök
:

651 
	`π∆_lök_put
(
lök
);

652 
îr
:

653 i‡(
√igh_h™dÀr
->
§c
) {

654 #ifde‡
HAVE_LIBNL1


655 
	`∆_addr_put
(
√igh_h™dÀr
->
§c
);

657 
	`∆_addr_put
(
√igh_h™dÀr
->
§c
);

659 
√igh_h™dÀr
->
§c
 = 
NULL
;

661 
	}
}

663 
	$gë_rouã_cb
(
∆_msg
 *
msg
, *
¨g
)

665 
gë_√igh_h™dÀr
 *
√igh_h™dÀr
 =

666 (
gë_√igh_h™dÀr
 *)
¨g
;

667 
îr
;

669 
îr
 = 
	`∆_msg_∑r£
(
msg
, &
gë_rouã_cb_∑r£r
, 
√igh_h™dÀr
);

670 i‡(
îr
 < 0) {

671 
	`¥öt_îr
("U«bÀÅÿ∑r£ obje˘: %s", 
	`∆_gëîr‹
(
îr
));

672  
îr
;

675 i‡(!
√igh_h™dÀr
->
d°
 || !√igh_h™dÀr->
§c
 ||

676 
√igh_h™dÀr
->
oif
 <= 0) {

677 
	`¥öt_îr
("MissingÖarams\n");

681 i‡(
NULL
 !
√igh_h™dÀr
->
found_Œ_addr
)

682 
found
;

684 
√igh_h™dÀr
->
found_Œ_addr
 =

685 
	`¥o˚ss_gë_√igh_mac
(
√igh_h™dÀr
);

686 i‡(
√igh_h™dÀr
->
found_Œ_addr
)

687 
	`¥öt_addªss
(
°dîr
, "Neigh is %s\n",

688 
√igh_h™dÀr
->
found_Œ_addr
);

690 
found
:

691  
√igh_h™dÀr
->
found_Œ_addr
 ? 0 : -1;

692 
	}
}

694 
	$√igh_gë_oif_‰om_§c
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
)

696 
oif
 = -
ENODEV
;

697 
addröfo
 *
§c_öfo
;

699 #ifde‡
HAVE_LIBNL1


700 
§c_öfo
 = 
	`∆_addr_öfo
(
√igh_h™dÀr
->
§c
);

701 i‡(
NULL
 =
§c_öfo
) {

703 
îr
;

704 
îr
 = 
	`∆_addr_öfo
(
√igh_h™dÀr
->
§c
, &
§c_öfo
);

705 i‡(
îr
) {

707 
	`¥öt_îr
("UnableÅo getáddress info %s\n",

708 
	`∆_gëîr‹
(
îr
));

709  
oif
;

712 
oif
 = 
	`gë_ifödex
(
§c_öfo
->
ai_addr
);

713 i‡(
oif
 <= 0)

714 
‰ì
;

716 
	`¥öt_dbg
("IF index i†%d\n", 
oif
);

718 
‰ì
:

719 
	`‰ìaddröfo
(
§c_öfo
);

720  
oif
;

721 
	}
}

723 
	$de°roy_zîo_ba£d_sockë
()

725 i‡(
NULL
 !
zîo_sockë
) {

726 
	`¥öt_dbg
("destroying zero based socket\n");

727 #ifde‡
HAVE_LIBNL1


728 
	`∆_h™dÀ_de°roy
(
zîo_sockë
);

730 
	`∆_sockë_‰ì
(
zîo_sockë
);

733 
	}
}

735 
	$Æloc_zîo_ba£d_sockë
()

737 #ifde‡
HAVE_LIBNL1


738 
zîo_sockë
 = 
	`∆_h™dÀ_Æloc
();

740 
zîo_sockë
 = 
	`∆_sockë_Æloc
();

742 
	`¥öt_dbg
("creating zero based socket\n");

743 
	`©exô
(&
de°roy_zîo_ba£d_sockë
);

744 
	}
}

746 
	$√igh_öô_ªsour˚s
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
, 
timeout
)

748 
îr
;

750 
	`±hªad_⁄˚
(&
devi˚_√igh_Æloc
, &
Æloc_zîo_ba£d_sockë
);

751 #ifde‡
HAVE_LIBNL1


752 
√igh_h™dÀr
->
sock
 = 
	`∆_h™dÀ_Æloc
();

754 
√igh_h™dÀr
->
sock
 = 
	`∆_sockë_Æloc
();

756 i‡(
NULL
 =
√igh_h™dÀr
->
sock
) {

757 
	`¥öt_îr
("UnableÅoállocateÇetlink socket\n");

758  -
ENOMEM
;

761 
îr
 = 
	`∆_c⁄√˘
(
√igh_h™dÀr
->
sock
, 
NETLINK_ROUTE
);

762 i‡(
îr
 < 0) {

763 
	`¥öt_îr
("UnableÅo connectÇetlink socket: %s\n",

764 
	`∆_gëîr‹
(
îr
));

765 
‰ì_sockë
;

768 #ifde‡
HAVE_LIBNL1


769 
√igh_h™dÀr
->
lök_ˇche
 =

770 
	`π∆_lök_Æloc_ˇche
(
√igh_h™dÀr
->
sock
);

771 i‡(
NULL
 =
√igh_h™dÀr
->
lök_ˇche
) {

772 
îr
 = -
ENOMEM
;

775 
îr
 = 
	`π∆_lök_Æloc_ˇche
(
√igh_h™dÀr
->
sock
, 
AF_UNSPEC
,

776 &
√igh_h™dÀr
->
lök_ˇche
);

777 i‡(
îr
) {

779 
	`¥öt_îr
("UnableÅoállocateÜink cache: %s\n",

780 
	`∆_gëîr‹
(
îr
));

781 
îr
 = -
ENOMEM
;

782 
˛o£_c⁄√˘i⁄
;

785 
	`∆_ˇche_mngt_¥ovide
(
√igh_h™dÀr
->
lök_ˇche
);

787 #ifde‡
HAVE_LIBNL1


788 
√igh_h™dÀr
->
rouã_ˇche
 =

789 
	`π∆_rouã_Æloc_ˇche
(
√igh_h™dÀr
->
sock
);

790 i‡(
NULL
 =
√igh_h™dÀr
->
rouã_ˇche
) {

791 
îr
 = -
ENOMEM
;

793 
îr
 = 
	`π∆_rouã_Æloc_ˇche
(
√igh_h™dÀr
->
sock
, 
AF_UNSPEC
, 0,

794 &
√igh_h™dÀr
->
rouã_ˇche
);

795 i‡(
îr
) {

797 
	`¥öt_îr
("UnableÅoállocateÑoute cache: %s\n",

798 
	`∆_gëîr‹
(
îr
));

799 
‰ì_lök_ˇche
;

802 
	`∆_ˇche_mngt_¥ovide
(
√igh_h™dÀr
->
rouã_ˇche
);

804 #ifde‡
HAVE_LIBNL1


805 
√igh_h™dÀr
->
√igh_ˇche
 =

806 
	`π∆_√igh_Æloc_ˇche
(
√igh_h™dÀr
->
sock
);

807 i‡(
NULL
 =
√igh_h™dÀr
->
√igh_ˇche
) {

808 
îr
 = -
ENOMEM
;

810 
îr
 = 
	`π∆_√igh_Æloc_ˇche
(
√igh_h™dÀr
->
sock
,

811 &
√igh_h™dÀr
->
√igh_ˇche
);

812 i‡(
îr
) {

814 
	`¥öt_îr
("Couldn'tállocateÇeigh cache %s\n",

815 
	`∆_gëîr‹
(
îr
));

816 
‰ì_rouã_ˇche
;

819 
	`∆_ˇche_mngt_¥ovide
(
√igh_h™dÀr
->
√igh_ˇche
);

822 
√igh_h™dÀr
->
timeout
 =Åimeout;

823 
√igh_h™dÀr
->
oif
 = -1;

824 
√igh_h™dÀr
->
fûãr_√igh
 = 
NULL
;

825 
√igh_h™dÀr
->
found_Œ_addr
 = 
NULL
;

826 
√igh_h™dÀr
->
d°
 = 
NULL
;

827 
√igh_h™dÀr
->
§c
 = 
NULL
;

828 
√igh_h™dÀr
->
vid
 = -1;

829 
√igh_h™dÀr
->
√igh_°©us
 = 
GET_NEIGH_STATUS_OK
;

833 
‰ì_rouã_ˇche
:

834 
	`∆_ˇche_mngt_u≈rovide
(
√igh_h™dÀr
->
rouã_ˇche
);

835 
	`∆_ˇche_‰ì
(
√igh_h™dÀr
->
rouã_ˇche
);

836 
√igh_h™dÀr
->
rouã_ˇche
 = 
NULL
;

837 
‰ì_lök_ˇche
:

838 
	`∆_ˇche_mngt_u≈rovide
(
√igh_h™dÀr
->
lök_ˇche
);

839 
	`∆_ˇche_‰ì
(
√igh_h™dÀr
->
lök_ˇche
);

840 
√igh_h™dÀr
->
lök_ˇche
 = 
NULL
;

841 
˛o£_c⁄√˘i⁄
:

842 
	`∆_˛o£
(
√igh_h™dÀr
->
sock
);

843 
‰ì_sockë
:

844 #ifde‡
HAVE_LIBNL1


845 
	`∆_h™dÀ_de°roy
(
√igh_h™dÀr
->
sock
);

846 
	`∆_h™dÀ_de°roy
(
zîo_sockë
);

848 
	`∆_sockë_‰ì
(
√igh_h™dÀr
->
sock
);

850 
√igh_h™dÀr
->
sock
 = 
NULL
;

851  
îr
;

852 
	}
}

854 
uöt16_t
 
	$√igh_gë_vœn_id_‰om_dev
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
)

856 
π∆_lök
 *
lök
;

857 
vid
 = 0xffff;

859 
lök
 = 
	`π∆_lök_gë
(
√igh_h™dÀr
->
lök_ˇche
,Çeigh_h™dÀr->
oif
);

860 i‡(
NULL
 =
lök
) {

861 
	`¥öt_îr
("Can't findÜink in cache\n");

862  -
EINVAL
;

865 #i‚de‡
HAVE_LIBNL1


866 i‡(
	`π∆_lök_is_vœn
(
lök
))

868 
vid
 = 
	`π∆_lök_vœn_gë_id
(
lök
);

869 
	`π∆_lök_put
(
lök
);

870  
vid
 >= 0 && vid <= 0xfff ? vid : 0xffff;

871 
	}
}

873 
	$√igh_£t_vœn_id
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
, 
uöt16_t
 
vid
)

875 i‡(
vid
 <= 0xfff)

876 
√igh_h™dÀr
->
vid
 = vid;

877 
	}
}

879 
	$√igh_£t_d°
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
,

880 
Ámûy
, *
buf
, 
size_t
 
size
)

882 
√igh_h™dÀr
->
d°
 = 
	`∆_addr_buûd
(
Ámûy
, 
buf
, 
size
);

883  
NULL
 =
√igh_h™dÀr
->
d°
;

884 
	}
}

886 
	$√igh_£t_§c
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
,

887 
Ámûy
, *
buf
, 
size_t
 
size
)

889 
√igh_h™dÀr
->
§c
 = 
	`∆_addr_buûd
(
Ámûy
, 
buf
, 
size
);

890  
NULL
 =
√igh_h™dÀr
->
§c
;

891 
	}
}

893 
	$√igh_£t_oif
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
, 
oif
)

895 
√igh_h™dÀr
->
oif
 = oif;

896 
	}
}

898 
	$√igh_gë_Œ
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
, *
addr_buff
,

899 
addr_size
) {

900 
√igh_Àn
;

902 i‡(
NULL
 =
√igh_h™dÀr
->
found_Œ_addr
)

903  -
EINVAL
;

905 
√igh_Àn
 = 
	`∆_addr_gë_Àn
(
√igh_h™dÀr
->
found_Œ_addr
);

907 i‡(
√igh_Àn
 > 
addr_size
)

908  -
EINVAL
;

910 
	`mem˝y
(
addr_buff
, 
	`∆_addr_gë_bö¨y_addr
(
√igh_h™dÀr
->
found_Œ_addr
),

911 
√igh_Àn
);

913  
√igh_Àn
;

914 
	}
}

916 
	$√igh_‰ì_ªsour˚s
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
)

919 i‡(
NULL
 !
√igh_h™dÀr
->
fûãr_√igh
) {

920 
	`π∆_√igh_put
(
√igh_h™dÀr
->
fûãr_√igh
);

921 
√igh_h™dÀr
->
fûãr_√igh
 = 
NULL
;

924 i‡(
NULL
 !
√igh_h™dÀr
->
§c
) {

925 #ifde‡
HAVE_LIBNL1


926 
	`∆_addr_put
(
√igh_h™dÀr
->
§c
);

928 
	`∆_addr_put
(
√igh_h™dÀr
->
§c
);

930 
√igh_h™dÀr
->
§c
 = 
NULL
;

933 i‡(
NULL
 !
√igh_h™dÀr
->
d°
) {

934 #ifde‡
HAVE_LIBNL1


935 
	`∆_addr_de°roy
(
√igh_h™dÀr
->
d°
);

937 
	`∆_addr_put
(
√igh_h™dÀr
->
d°
);

939 
√igh_h™dÀr
->
d°
 = 
NULL
;

942 i‡(
NULL
 !
√igh_h™dÀr
->
found_Œ_addr
) {

943 #ifde‡
HAVE_LIBNL1


944 
	`∆_addr_de°roy
(
√igh_h™dÀr
->
found_Œ_addr
);

946 
	`∆_addr_put
(
√igh_h™dÀr
->
found_Œ_addr
);

948 
√igh_h™dÀr
->
found_Œ_addr
 = 
NULL
;

951 i‡(
NULL
 !
√igh_h™dÀr
->
√igh_ˇche
) {

952 
	`∆_ˇche_mngt_u≈rovide
(
√igh_h™dÀr
->
√igh_ˇche
);

953 
	`∆_ˇche_‰ì
(
√igh_h™dÀr
->
√igh_ˇche
);

954 
√igh_h™dÀr
->
√igh_ˇche
 = 
NULL
;

957 i‡(
NULL
 !
√igh_h™dÀr
->
rouã_ˇche
) {

958 
	`∆_ˇche_mngt_u≈rovide
(
√igh_h™dÀr
->
rouã_ˇche
);

959 
	`∆_ˇche_‰ì
(
√igh_h™dÀr
->
rouã_ˇche
);

960 
√igh_h™dÀr
->
rouã_ˇche
 = 
NULL
;

963 i‡(
NULL
 !
√igh_h™dÀr
->
lök_ˇche
) {

964 
	`∆_ˇche_mngt_u≈rovide
(
√igh_h™dÀr
->
lök_ˇche
);

965 
	`∆_ˇche_‰ì
(
√igh_h™dÀr
->
lök_ˇche
);

966 
√igh_h™dÀr
->
lök_ˇche
 = 
NULL
;

969 i‡(
NULL
 !
√igh_h™dÀr
->
sock
) {

970 
	`∆_˛o£
(
√igh_h™dÀr
->
sock
);

971 #ifde‡
HAVE_LIBNL1


972 
	`∆_h™dÀ_de°roy
(
√igh_h™dÀr
->
sock
);

974 
	`∆_sockë_‰ì
(
√igh_h™dÀr
->
sock
);

976 
√igh_h™dÀr
->
sock
 = 
NULL
;

978 
	}
}

980 
	$¥o˚ss_gë_√igh
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
)

982 
∆_msg
 *
m
;

983 
πmsg
 
rmsg
 = {

984 .
πm_Ámûy
 = 
	`∆_addr_gë_Ámûy
(
√igh_h™dÀr
->
d°
),

985 .
πm_d°_Àn
 = 
	`∆_addr_gë_¥efixÀn
(
√igh_h™dÀr
->
d°
),

987 
îr
;

988 
œ°_°©us
;

990 
œ°_°©us
 = 
	`__sync_„tch_™d_‹
(

991 &
√igh_h™dÀr
->
√igh_°©us
,

992 
GET_NEIGH_STATUS_IN_PROCESS
);

994 i‡(
œ°_°©us
 !
GET_NEIGH_STATUS_OK
)

995  -
EINPROGRESS
;

997 
m
 = 
	`∆msg_Æloc_sim∂e
(
RTM_GETROUTE
, 0);

999 i‡(
NULL
 =
m
)

1000  -
ENOMEM
;

1002 
	`∆msg_≠≥nd
(
m
, &
rmsg
, ‘msg), 
NLMSG_ALIGNTO
);

1004 
	`∆a_put_addr
(
m
, 
RTA_DST
, 
√igh_h™dÀr
->
d°
);

1006 i‡(
√igh_h™dÀr
->
oif
 > 0)

1007 
	`∆a_put_u32
(
m
, 
RTA_OIF
, 
√igh_h™dÀr
->
oif
);

1009 
îr
 = 
	`∆_£nd_auto_com∂ëe
(
√igh_h™dÀr
->
sock
, 
m
);

1010 
	`∆msg_‰ì
(
m
);

1011 i‡(
îr
 < 0) {

1012 
	`¥öt_îr
("%s", 
	`∆_gëîr‹
(
îr
));

1013  
îr
;

1016 
	`∆_sockë_modify_cb
(
√igh_h™dÀr
->
sock
, 
NL_CB_VALID
,

1017 
NL_CB_CUSTOM
, &
gë_rouã_cb
, 
√igh_h™dÀr
);

1019 
îr
 = 
	`∆_ªcvmsgs_deÁu…
(
√igh_h™dÀr
->
sock
);

1020 i‡(
îr
 < 0) {

1021 
	`¥öt_îr
("%s", 
	`∆_gëîr‹
(
îr
));

1022 
	`__sync_„tch_™d_‹
(

1023 &
√igh_h™dÀr
->
√igh_°©us
,

1024 
GET_NEIGH_STATUS_ERR
);

1027 
	`__sync_„tch_™d_™d
(

1028 &
√igh_h™dÀr
->
√igh_°©us
,

1029 ~
GET_NEIGH_STATUS_IN_PROCESS
);

1031  
îr
;

1032 
	}
}

	@libibverbs-41mlnx1/src/neigh.h

1 #i‚de‡
_GET_NEIGH_


2 
	#_GET_NEIGH_


	)

4 
	~<°ddef.h
>

5 
	~<°döt.h
>

6 
	~"c⁄fig.h
"

7 #ifde‡
HAVE_LIBNL1


8 
	~<√éök/obje˘.h
>

10 
	~<√éök/obje˘-≠i.h
>

13 
	egë_√igh_°©us
 {

14 
	mGET_NEIGH_STATUS_OK
 = 0,

15 
	mGET_NEIGH_STATUS_IN_PROCESS
 = 1 << 0,

16 
	mGET_NEIGH_STATUS_ERR
 = 1 << 1,

19 
	sgë_√igh_h™dÀr
 {

20 #ifde‡
HAVE_LIBNL1


21 
∆_h™dÀ
 *
	msock
;

23 
∆_sock
 *
	msock
;

25 
∆_ˇche
 *
	mlök_ˇche
;

26 
∆_ˇche
 *
	m√igh_ˇche
;

27 
∆_ˇche
 *
	mrouã_ˇche
;

28 
öt32_t
 
	moif
;

29 
	mvid
;

30 
π∆_√igh
 *
	mfûãr_√igh
;

31 
∆_addr
 *
	mfound_Œ_addr
;

32 
∆_addr
 *
	md°
;

33 
∆_addr
 *
	m§c
;

34 
gë_√igh_°©us
 
	m√igh_°©us
;

35 
uöt64_t
 
	mtimeout
;

38 
¥o˚ss_gë_√igh
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
);

39 
√igh_‰ì_ªsour˚s
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
);

40 
√igh_£t_vœn_id
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
, 
uöt16_t
 
vid
);

41 
uöt16_t
 
√igh_gë_vœn_id_‰om_dev
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
);

42 
√igh_öô_ªsour˚s
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
, 
timeout
);

44 
√igh_£t_§c
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
,

45 
Ámûy
, *
buf
, 
size_t
 
size
);

46 
√igh_£t_oif
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
, 
oif
);

47 
√igh_£t_d°
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
,

48 
Ámûy
, *
buf
, 
size_t
 
size
);

49 
√igh_gë_oif_‰om_§c
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
);

50 
√igh_gë_Œ
(
gë_√igh_h™dÀr
 *
√igh_h™dÀr
, *
addr_buf
,

51 
addr_size
);

	@libibverbs-41mlnx1/src/sysfs.c

33 #i‡
HAVE_CONFIG_H


34 
	~<c⁄fig.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<uni°d.h
>

40 
	~<sys/ty≥s.h
>

41 
	~<sys/°©.h
>

42 
	~<f˙é.h
>

43 
	~<°rög.h
>

45 
	~"ibvîbs.h
"

47 *
	gsysfs_∑th
;

49 c⁄° *
	$ibv_gë_sysfs_∑th
()

51 *
ív
 = 
NULL
;

53 i‡(
sysfs_∑th
)

54  
sysfs_∑th
;

60 i‡(
	`gëuid
(Ë=
	`gëeuid
())

61 
ív
 = 
	`gëív
("SYSFS_PATH");

63 i‡(
ív
) {

64 
Àn
;

66 
sysfs_∑th
 = 
	`°∫dup
(
ív
, 
IBV_SYSFS_PATH_MAX
);

67 
Àn
 = 
	`°æí
(
sysfs_∑th
);

68 
Àn
 > 0 && 
sysfs_∑th
[len - 1] == '/') {

69 --
Àn
;

70 
sysfs_∑th
[
Àn
] = '\0';

73 
sysfs_∑th
 = "/sys";

75  
sysfs_∑th
;

76 
	}
}

78 
	$ibv_ªad_sysfs_fûe
(c⁄° *
dú
, c⁄° *
fûe
,

79 *
buf
, 
size_t
 
size
)

81 *
∑th
;

82 
fd
;

83 
Àn
;

85 i‡(
	`a•rötf
(&
∑th
, "%s/%s", 
dú
, 
fûe
) < 0)

88 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

89 i‡(
fd
 < 0) {

90 
	`‰ì
(
∑th
);

94 
Àn
 = 
	`ªad
(
fd
, 
buf
, 
size
);

96 
	`˛o£
(
fd
);

97 
	`‰ì
(
∑th
);

99 i‡(
Àn
 > 0 && 
buf
[len - 1] == '\n')

100 
buf
[--
Àn
] = '\0';

102  
Àn
;

103 
	}
}

	@libibverbs-41mlnx1/src/verbs.c

34 #i‡
HAVE_CONFIG_H


35 
	~<c⁄fig.h
>

38 
	~<°dio.h
>

39 
	~<√töë/ö.h
>

40 
	~<uni°d.h
>

41 
	~<°dlib.h
>

42 
	~<î∫o.h
>

43 
	~<°rög.h
>

44 
	~<£¨ch.h
>

45 
	~<löux/ù.h
>

47 
	~"ibvîbs.h
"

48 
	~"öföib™d/vîbs_exp.h
"

49 #i‚de‡
NRESOLVE_NEIGH


50 
	~"√igh.h
"

53 
	$ibv_øã_to_mu…
(
ibv_øã
 
øã
)

55 
øã
) {

56 
IBV_RATE_2_5_GBPS
:  1;

57 
IBV_RATE_5_GBPS
:  2;

58 
IBV_RATE_10_GBPS
:  4;

59 
IBV_RATE_20_GBPS
:  8;

60 
IBV_RATE_30_GBPS
:  12;

61 
IBV_RATE_40_GBPS
:  16;

62 
IBV_RATE_60_GBPS
:  24;

63 
IBV_RATE_80_GBPS
:  32;

64 
IBV_RATE_120_GBPS
:  48;

67 
	}
}

69 
ibv_øã
 
	$mu…_to_ibv_øã
(
mu…
)

71 
mu…
) {

72 1:  
IBV_RATE_2_5_GBPS
;

73 2:  
IBV_RATE_5_GBPS
;

74 4:  
IBV_RATE_10_GBPS
;

75 8:  
IBV_RATE_20_GBPS
;

76 12:  
IBV_RATE_30_GBPS
;

77 16:  
IBV_RATE_40_GBPS
;

78 24:  
IBV_RATE_60_GBPS
;

79 32:  
IBV_RATE_80_GBPS
;

80 48:  
IBV_RATE_120_GBPS
;

81 :  
IBV_RATE_MAX
;

83 
	}
}

85 
	$ibv_øã_to_mbps
(
ibv_øã
 
øã
)

87 
øã
) {

88 
IBV_RATE_2_5_GBPS
:  2500;

89 
IBV_RATE_5_GBPS
:  5000;

90 
IBV_RATE_10_GBPS
:  10000;

91 
IBV_RATE_20_GBPS
:  20000;

92 
IBV_RATE_30_GBPS
:  30000;

93 
IBV_RATE_40_GBPS
:  40000;

94 
IBV_RATE_60_GBPS
:  60000;

95 
IBV_RATE_80_GBPS
:  80000;

96 
IBV_RATE_120_GBPS
:  120000;

97 
IBV_RATE_14_GBPS
:  14062;

98 
IBV_RATE_56_GBPS
:  56250;

99 
IBV_RATE_112_GBPS
:  112500;

100 
IBV_RATE_168_GBPS
:  168750;

101 
IBV_RATE_25_GBPS
:  25781;

102 
IBV_RATE_100_GBPS
:  103125;

103 
IBV_RATE_200_GBPS
:  206250;

104 
IBV_RATE_300_GBPS
:  309375;

107 
	}
}

109 
ibv_øã
 
	$mbps_to_ibv_øã
(
mbps
)

111 
mbps
) {

112 2500:  
IBV_RATE_2_5_GBPS
;

113 5000:  
IBV_RATE_5_GBPS
;

114 10000:  
IBV_RATE_10_GBPS
;

115 20000:  
IBV_RATE_20_GBPS
;

116 30000:  
IBV_RATE_30_GBPS
;

117 40000:  
IBV_RATE_40_GBPS
;

118 60000:  
IBV_RATE_60_GBPS
;

119 80000:  
IBV_RATE_80_GBPS
;

120 120000:  
IBV_RATE_120_GBPS
;

121 14062:  
IBV_RATE_14_GBPS
;

122 56250:  
IBV_RATE_56_GBPS
;

123 112500:  
IBV_RATE_112_GBPS
;

124 168750:  
IBV_RATE_168_GBPS
;

125 25781:  
IBV_RATE_25_GBPS
;

126 103125:  
IBV_RATE_100_GBPS
;

127 206250:  
IBV_RATE_200_GBPS
;

128 309375:  
IBV_RATE_300_GBPS
;

129 :  
IBV_RATE_MAX
;

131 
	}
}

133 
	$__ibv_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

134 
ibv_devi˚_©å
 *
devi˚_©å
)

136  
c⁄ãxt
->
›s
.
	`quîy_devi˚
(c⁄ãxt, 
devi˚_©å
);

137 
	}
}

138 
deÁu…_symvî
(
__ibv_quîy_devi˚
, 
ibv_quîy_devi˚
);

140 
	$__ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

141 
ibv_p‹t_©å
 *
p‹t_©å
)

143  
c⁄ãxt
->
›s
.
	`quîy_p‹t
(c⁄ãxt, 
p‹t_num
, 
p‹t_©å
);

144 
	}
}

145 
deÁu…_symvî
(
__ibv_quîy_p‹t
, 
ibv_quîy_p‹t
);

147 
	$__ibv_quîy_gid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

148 
ödex
, 
ibv_gid
 *
gid
)

150 
«me
[24];

151 
©å
[41];

152 
uöt16_t
 
vÆ
;

153 
i
;

155 
	`¢¥ötf
(
«me
, Çame, "p‹ts/%d/gids/%d", 
p‹t_num
, 
ödex
);

157 i‡(
	`ibv_ªad_sysfs_fûe
(
c⁄ãxt
->
devi˚
->
ibdev_∑th
, 
«me
,

158 
©å
, áttr) < 0)

161 
i
 = 0; i < 8; ++i) {

162 i‡(
	`ssˇnf
(
©å
 + 
i
 * 5, "%hx", &
vÆ
) != 1)

164 
gid
->
øw
[
i
 * 2 ] = 
vÆ
 >> 8;

165 
gid
->
øw
[
i
 * 2 + 1] = 
vÆ
 & 0xff;

169 
	}
}

170 
deÁu…_symvî
(
__ibv_quîy_gid
, 
ibv_quîy_gid
);

172 
	$__ibv_quîy_pkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

173 
ödex
, 
uöt16_t
 *
pkey
)

175 
«me
[24];

176 
©å
[8];

177 
uöt16_t
 
vÆ
;

179 
	`¢¥ötf
(
«me
, Çame, "p‹ts/%d/pkeys/%d", 
p‹t_num
, 
ödex
);

181 i‡(
	`ibv_ªad_sysfs_fûe
(
c⁄ãxt
->
devi˚
->
ibdev_∑th
, 
«me
,

182 
©å
, áttr) < 0)

185 i‡(
	`ssˇnf
(
©å
, "%hx", &
vÆ
) != 1)

188 *
pkey
 = 
	`ht⁄s
(
vÆ
);

190 
	}
}

191 
deÁu…_symvî
(
__ibv_quîy_pkey
, 
ibv_quîy_pkey
);

193 
ibv_pd
 *
	$__ibv_Æloc_pd
(
ibv_c⁄ãxt
 *
c⁄ãxt
)

195 
ibv_pd
 *
pd
;

197 
pd
 = 
c⁄ãxt
->
›s
.
	`Æloc_pd
(context);

198 i‡(
pd
)

199 
pd
->
c⁄ãxt
 = context;

201  
pd
;

202 
	}
}

203 
deÁu…_symvî
(
__ibv_Æloc_pd
, 
ibv_Æloc_pd
);

205 
	$__ibv_dóŒoc_pd
(
ibv_pd
 *
pd
)

207  
pd
->
c⁄ãxt
->
›s
.
	`dóŒoc_pd
(pd);

208 
	}
}

209 
deÁu…_symvî
(
__ibv_dóŒoc_pd
, 
ibv_dóŒoc_pd
);

212 
ibv_mr
 *
	$__ibv_ªg_sh¨ed_mr
(
ibv_exp_ªg_sh¨ed_mr_ö
 *
ö
)

214 
	`Ârötf
(
°dîr
, "ibv_exp_reg_shared_mr isÇot supported\n");

216 
î∫o
 = 
ENOSYS
;

217  
NULL
;

218 
	}
}

220 
	$is_sh¨ed_mr
(
uöt64_t
 
ac˚ss_Êags
)

225  !!(
ac˚ss_Êags
 & (
IBV_EXP_ACCESS_SHARED_MR_USER_READ
 |

226 
IBV_EXP_ACCESS_SHARED_MR_USER_WRITE
 |

227 
IBV_EXP_ACCESS_SHARED_MR_GROUP_READ
 |

228 
IBV_EXP_ACCESS_SHARED_MR_GROUP_WRITE
 |

229 
IBV_EXP_ACCESS_SHARED_MR_OTHER_READ
 |

230 
IBV_EXP_ACCESS_SHARED_MR_OTHER_WRITE
));

231 
	}
}

233 
ibv_mr
 *
	$__ibv_comm⁄_ªg_mr
(
ibv_exp_ªg_mr_ö
 *
ö
,

234 
vîbs_c⁄ãxt_exp
 *
c⁄ãxt_exp
)

236 
ibv_mr
 *
mr
;

237 
is_c⁄tig
;

238 
is_odp
;

239 
is_∑
;

240 
is_dm
;

242 i‡(
	`is_sh¨ed_mr
(
ö
->
exp_ac˚ss
)) {

243 
	`Ârötf
(
°dîr
, "shared_mr flagsáreÇot supported\n");

244  
NULL
;

247 i‡((
ö
->
exp_ac˚ss
 & 
IBV_EXP_ACCESS_ALLOCATE_MR
Ë&& in->
addr
 !
NULL
)

248  
NULL
;

250 i‡((
ö
->
comp_mask
 & 
IBV_EXP_REG_MR_DM
Ë&& !ö->
dm
)

251  
NULL
;

253 
is_dm
 = !!(
ö
->
comp_mask
 & 
IBV_EXP_REG_MR_DM
);

255 
is_c⁄tig
 = !!((
ö
->
exp_ac˚ss
 & 
IBV_EXP_ACCESS_ALLOCATE_MR
) ||

256 ((
ö
->
comp_mask
 & 
IBV_EXP_REG_MR_CREATE_FLAGS
) &&

257 (
ö
->
¸óã_Êags
 & 
IBV_EXP_REG_MR_CREATE_CONTIG
)));

259 
is_odp
 = !!(
ö
->
exp_ac˚ss
 & 
IBV_EXP_ACCESS_ON_DEMAND
);

260 
is_∑
 = !!(
ö
->
exp_ac˚ss
 & 
IBV_EXP_ACCESS_PHYSICAL_ADDR
);

267 i‡(!
is_odp
 && !
is_c⁄tig
 && !
is_∑
 && !
is_dm
) {

268 i‡(
	`ibv_d⁄tf‹k_ønge
(
ö
->
addr
, in->
Àngth
))

269  
NULL
;

271 i‡(
c⁄ãxt_exp
)

272 
mr
 = 
c⁄ãxt_exp
->
	`drv_exp_ªg_mr
(
ö
);

274 
mr
 = 
ö
->
pd
->
c⁄ãxt
->
›s
.
	`ªg_mr
(ö->pd, in->
addr
, in->
Àngth
,

275 
ö
->
exp_ac˚ss
);

276 i‡(
mr
) {

277 
mr
->
c⁄ãxt
 = 
ö
->
pd
->context;

278 
mr
->
pd
 = 
ö
->pd;

279 i‡(
ö
->
exp_ac˚ss
 & 
IBV_EXP_ACCESS_ALLOCATE_MR
)

284 i‡(!(
ö
->
exp_ac˚ss
 & 
IBV_EXP_ACCESS_RELAXED
))

285 
mr
->
addr
 = 
ö
->addr;

286 i‡(!(
ö
->
exp_ac˚ss
 & 
IBV_EXP_ACCESS_RELAXED
))

287 
mr
->
Àngth
 = 
ö
->length;

288 } i‡(!
is_odp
 && !
is_c⁄tig
 && !
is_∑
) {

289 
	`ibv_dof‹k_ønge
(
ö
->
addr
, in->
Àngth
);

292  
mr
;

293 
	}
}

295 
ibv_mr
 *
	$__ibv_exp_ªg_mr
(
ibv_exp_ªg_mr_ö
 *
ö
)

297 
vîbs_c⁄ãxt_exp
 *
˘x
 = 
	`vîbs_gë_exp_˘x
(
ö
->
pd
->
c⁄ãxt
);

299 i‡(!
˘x
->
drv_exp_ªg_mr
) {

300 
î∫o
 = 
ENOSYS
;

301  
NULL
;

303  
	`__ibv_comm⁄_ªg_mr
(
ö
, 
˘x
);

304 
	}
}

306 
ibv_mr
 *
	$__ibv_ªg_mr
(
ibv_pd
 *
pd
, *
addr
,

307 
size_t
 
Àngth
, 
ac˚ss
)

309 
ibv_exp_ªg_mr_ö
 
ö
;

311 
	`mem£t
(&
ö
, 0, (in));

312 
ö
.
pd
 =Öd;

313 
ö
.
addr
 =áddr;

314 
ö
.
Àngth
 =Üength;

315 
ö
.
exp_ac˚ss
 = 
ac˚ss
;

317  
	`__ibv_comm⁄_ªg_mr
(&
ö
, 
NULL
);

318 
	}
}

319 
deÁu…_symvî
(
__ibv_ªg_mr
, 
ibv_ªg_mr
);

321 
	$__ibv_ªªg_mr
(
ibv_mr
 *
mr
, 
Êags
,

322 
ibv_pd
 *
pd
, *
addr
,

323 
size_t
 
Àngth
, 
ac˚ss
)

325 
dof‹k_⁄Áû
 = 0;

326 
îr
;

327 *
ﬁd_addr
;

328 
size_t
 
ﬁd_Àn
;

330 i‡(
Êags
 & ~
IBV_REREG_MR_FLAGS_SUPPORTED
) {

331 
î∫o
 = 
EINVAL
;

332  
IBV_REREG_MR_ERR_INPUT
;

335 i‡((
Êags
 & 
IBV_REREG_MR_CHANGE_TRANSLATION
) &&

336 (!
Àngth
 || !
addr
)) {

337 
î∫o
 = 
EINVAL
;

338  
IBV_REREG_MR_ERR_INPUT
;

341 i‡(
ac˚ss
 && !(
Êags
 & 
IBV_REREG_MR_CHANGE_ACCESS
)) {

342 
î∫o
 = 
EINVAL
;

343  
IBV_REREG_MR_ERR_INPUT
;

346 i‡(!
mr
->
c⁄ãxt
->
›s
.
ªªg_mr
) {

347 
î∫o
 = 
ENOSYS
;

348  
IBV_REREG_MR_ERR_INPUT
;

351 i‡(
Êags
 & 
IBV_REREG_MR_CHANGE_TRANSLATION
) {

352 
îr
 = 
	`ibv_d⁄tf‹k_ønge
(
addr
, 
Àngth
);

353 i‡(
îr
)

354  
IBV_REREG_MR_ERR_DONT_FORK_NEW
;

355 
dof‹k_⁄Áû
 = 1;

358 
ﬁd_addr
 = 
mr
->
addr
;

359 
ﬁd_Àn
 = 
mr
->
Àngth
;

360 
îr
 = 
mr
->
c⁄ãxt
->
›s
.
	`ªªg_mr
(mr, 
Êags
, 
pd
, 
addr
, 
Àngth
, 
ac˚ss
);

361 i‡(!
îr
) {

362 i‡(
Êags
 & 
IBV_REREG_MR_CHANGE_PD
)

363 
mr
->
pd
 =Öd;

364 i‡(
Êags
 & 
IBV_REREG_MR_CHANGE_TRANSLATION
) {

365 
mr
->
addr
 =áddr;

366 
mr
->
Àngth
 =Üength;

367 
îr
 = 
	`ibv_dof‹k_ønge
(
ﬁd_addr
, 
ﬁd_Àn
);

368 i‡(
îr
)

369  
IBV_REREG_MR_ERR_DO_FORK_OLD
;

372 
îr
 = 
IBV_REREG_MR_ERR_CMD
;

373 i‡(
dof‹k_⁄Áû
) {

374 i‡(
	`ibv_dof‹k_ønge
(
addr
, 
Àngth
))

375 
îr
 = 
IBV_REREG_MR_ERR_CMD_AND_DO_FORK_NEW
;

379  
îr
;

380 
	}
}

381 
deÁu…_symvî
(
__ibv_ªªg_mr
, 
ibv_ªªg_mr
);

383 
	$__ibv_dîeg_mr
(
ibv_mr
 *
mr
)

385 
ªt
;

386 
vîbs_c⁄ãxt_exp
 *
v˘x
;

387 
ibv_exp_dîeg_out
 
out
;

388 *
addr
 = 
mr
->addr;

389 
size_t
 
Àngth
 = 
mr
->length;

391 
	`mem£t
(&
out
, 0, (out));

392 
out
.
√ed_dof‹k
 = 1;

394 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr
->
c⁄ãxt
, 
drv_exp_dîeg_mr
);

395 i‡(
v˘x
)

396 
ªt
 = 
v˘x
->
	`drv_exp_dîeg_mr
(
mr
, &
out
);

398 
ªt
 = 
mr
->
c⁄ãxt
->
›s
.
	`dîeg_mr
(mr);

400 i‡(!
ªt
) {

401 i‡(
out
.
√ed_dof‹k
)

402 
	`ibv_dof‹k_ønge
(
addr
, 
Àngth
);

405  
ªt
;

406 
	}
}

407 
deÁu…_symvî
(
__ibv_dîeg_mr
, 
ibv_dîeg_mr
);

409 
ibv_comp_ch™√l
 *
	$ibv_¸óã_comp_ch™√l_v2
(
ibv_c⁄ãxt
 *
c⁄ãxt
)

411 
ibv_abi_com∑t_v2
 *
t
 = 
c⁄ãxt
->
abi_com∑t
;

412 
w¨√d
;

414 i‡(!
	`±hªad_muãx_åylock
(&
t
->
ö_u£
))

415  &
t
->
ch™√l
;

417 i‡(!
w¨√d
) {

418 
	`Ârötf
(
°dîr
, 
PFX
 "Warning: kernel's ABI version %dÜimits capacity.\n"

420 
abi_vî
);

421 ++
w¨√d
;

424  
NULL
;

425 
	}
}

427 
ibv_comp_ch™√l
 *
	$ibv_¸óã_comp_ch™√l
(
ibv_c⁄ãxt
 *
c⁄ãxt
)

429 
ibv_comp_ch™√l
 *
ch™√l
;

430 
ibv_¸óã_comp_ch™√l
 
cmd
;

431 
ibv_¸óã_comp_ch™√l_ª•
 
ª•
;

433 i‡(
abi_vî
 <= 2)

434  
	`ibv_¸óã_comp_ch™√l_v2
(
c⁄ãxt
);

436 
ch™√l
 = 
	`mÆloc
( *channel);

437 i‡(!
ch™√l
)

438  
NULL
;

440 
	`IBV_INIT_CMD_RESP
(&
cmd
,  cmd, 
CREATE_COMP_CHANNEL
, &
ª•
, Ñesp);

441 i‡(
	`wrôe
(
c⁄ãxt
->
cmd_fd
, &
cmd
,  cmd) !=  cmd) {

442 
	`‰ì
(
ch™√l
);

443  
NULL
;

446 
	`VALGRIND_MAKE_MEM_DEFINED
(&
ª•
, Ñesp);

448 
ch™√l
->
c⁄ãxt
 = context;

449 
ch™√l
->
fd
 = 
ª•
.fd;

450 
ch™√l
->
ªf˙t
 = 0;

452  
ch™√l
;

453 
	}
}

455 
	$ibv_de°roy_comp_ch™√l_v2
(
ibv_comp_ch™√l
 *
ch™√l
)

457 
ibv_abi_com∑t_v2
 *
t
 = (ibv_abi_com∑t_v2 *Ë
ch™√l
;

458 
	`±hªad_muãx_u∆ock
(&
t
->
ö_u£
);

460 
	}
}

462 
	$ibv_de°roy_comp_ch™√l
(
ibv_comp_ch™√l
 *
ch™√l
)

464 
ibv_c⁄ãxt
 *
c⁄ãxt
;

465 
ªt
;

467 
c⁄ãxt
 = 
ch™√l
->context;

468 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

470 i‡(
ch™√l
->
ªf˙t
) {

471 
ªt
 = 
EBUSY
;

472 
out
;

475 i‡(
abi_vî
 <= 2) {

476 
ªt
 = 
	`ibv_de°roy_comp_ch™√l_v2
(
ch™√l
);

477 
out
;

480 
	`˛o£
(
ch™√l
->
fd
);

481 
	`‰ì
(
ch™√l
);

482 
ªt
 = 0;

484 
out
:

485 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

487  
ªt
;

488 
	}
}

490 
ibv_cq
 *
	$__ibv_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
, *
cq_c⁄ãxt
,

491 
ibv_comp_ch™√l
 *
ch™√l
, 
comp_ve˘‹
)

493 
ibv_cq
 *
cq
;

495 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

497 
cq
 = 
c⁄ãxt
->
›s
.
	`¸óã_cq
(c⁄ãxt, 
cqe
, 
ch™√l
, 
comp_ve˘‹
);

499 i‡(
cq
) {

500 
cq
->
c⁄ãxt
 = context;

501 
cq
->
ch™√l
 = channel;

502 i‡(
ch™√l
)

503 ++
ch™√l
->
ªf˙t
;

504 
cq
->
cq_c⁄ãxt
 = cq_context;

505 
cq
->
comp_evíts_com∂ëed
 = 0;

506 
cq
->
async_evíts_com∂ëed
 = 0;

507 
	`±hªad_muãx_öô
(&
cq
->
muãx
, 
NULL
);

508 
	`±hªad_c⁄d_öô
(&
cq
->
c⁄d
, 
NULL
);

511 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

513  
cq
;

514 
	}
}

515 
deÁu…_symvî
(
__ibv_¸óã_cq
, 
ibv_¸óã_cq
);

517 
	$__ibv_ªsize_cq
(
ibv_cq
 *
cq
, 
cqe
)

519 i‡(!
cq
->
c⁄ãxt
->
›s
.
ªsize_cq
)

520  
ENOSYS
;

522  
cq
->
c⁄ãxt
->
›s
.
	`ªsize_cq
(cq, 
cqe
);

523 
	}
}

524 
deÁu…_symvî
(
__ibv_ªsize_cq
, 
ibv_ªsize_cq
);

526 
	$__ibv_de°roy_cq
(
ibv_cq
 *
cq
)

528 
ibv_comp_ch™√l
 *
ch™√l
 = 
cq
->channel;

529 
ªt
;

531 i‡(
ch™√l
)

532 
	`±hªad_muãx_lock
(&
ch™√l
->
c⁄ãxt
->
muãx
);

534 
ªt
 = 
cq
->
c⁄ãxt
->
›s
.
	`de°roy_cq
(cq);

536 i‡(
ch™√l
) {

537 i‡(!
ªt
)

538 --
ch™√l
->
ªf˙t
;

539 
	`±hªad_muãx_u∆ock
(&
ch™√l
->
c⁄ãxt
->
muãx
);

542  
ªt
;

543 
	}
}

544 
deÁu…_symvî
(
__ibv_de°roy_cq
, 
ibv_de°roy_cq
);

546 
	$__ibv_gë_cq_evít
(
ibv_comp_ch™√l
 *
ch™√l
,

547 
ibv_cq
 **
cq
, **
cq_c⁄ãxt
)

549 
ibv_comp_evít
 
ev
;

551 i‡(
	`ªad
(
ch™√l
->
fd
, &
ev
, Év) != Év)

554 *
cq
 = (
ibv_cq
 *Ë(
uöçå_t
Ë
ev
.
cq_h™dÀ
;

555 *
cq_c⁄ãxt
 = (*
cq
)->cq_context;

557 i‡((*
cq
)->
c⁄ãxt
->
›s
.
cq_evít
)

558 (*
cq
)->
c⁄ãxt
->
›s
.
	`cq_evít
(*cq);

561 
	}
}

562 
deÁu…_symvî
(
__ibv_gë_cq_evít
, 
ibv_gë_cq_evít
);

564 
	$__ibv_ack_cq_evíts
(
ibv_cq
 *
cq
, 
√víts
)

566 
	`±hªad_muãx_lock
(&
cq
->
muãx
);

567 
cq
->
comp_evíts_com∂ëed
 +
√víts
;

568 
	`±hªad_c⁄d_sig«l
(&
cq
->
c⁄d
);

569 
	`±hªad_muãx_u∆ock
(&
cq
->
muãx
);

570 
	}
}

571 
deÁu…_symvî
(
__ibv_ack_cq_evíts
, 
ibv_ack_cq_evíts
);

573 
ibv_§q
 *
	$__ibv_¸óã_§q
(
ibv_pd
 *
pd
,

574 
ibv_§q_öô_©å
 *
§q_öô_©å
)

576 
ibv_§q
 *
§q
;

578 i‡(!
pd
->
c⁄ãxt
->
›s
.
¸óã_§q
)

579  
NULL
;

581 
§q
 = 
pd
->
c⁄ãxt
->
›s
.
	`¸óã_§q
’d, 
§q_öô_©å
);

582 i‡(
§q
) {

583 
§q
->
c⁄ãxt
 = 
pd
->context;

584 
§q
->
§q_c⁄ãxt
 = 
§q_öô_©å
->srq_context;

585 
§q
->
pd
 =Öd;

586 
§q
->
evíts_com∂ëed
 = 0;

587 
	`±hªad_muãx_öô
(&
§q
->
muãx
, 
NULL
);

588 
	`±hªad_c⁄d_öô
(&
§q
->
c⁄d
, 
NULL
);

591  
§q
;

592 
	}
}

593 
deÁu…_symvî
(
__ibv_¸óã_§q
, 
ibv_¸óã_§q
);

595 
	$__ibv_modify_§q
(
ibv_§q
 *
§q
,

596 
ibv_§q_©å
 *
§q_©å
,

597 
§q_©å_mask
)

599  
§q
->
c⁄ãxt
->
›s
.
	`modify_§q
(§q, 
§q_©å
, 
§q_©å_mask
);

600 
	}
}

601 
deÁu…_symvî
(
__ibv_modify_§q
, 
ibv_modify_§q
);

603 
	$__ibv_quîy_§q
(
ibv_§q
 *
§q
, 
ibv_§q_©å
 *
§q_©å
)

605  
§q
->
c⁄ãxt
->
›s
.
	`quîy_§q
(§q, 
§q_©å
);

606 
	}
}

607 
deÁu…_symvî
(
__ibv_quîy_§q
, 
ibv_quîy_§q
);

609 
	$__ibv_de°roy_§q
(
ibv_§q
 *
§q
)

611  
§q
->
c⁄ãxt
->
›s
.
	`de°roy_§q
(srq);

612 
	}
}

613 
deÁu…_symvî
(
__ibv_de°roy_§q
, 
ibv_de°roy_§q
);

615 
ibv_qp
 *
	$__ibv_¸óã_qp
(
ibv_pd
 *
pd
,

616 
ibv_qp_öô_©å
 *
qp_öô_©å
)

618 
ibv_qp
 *
qp
 = 
pd
->
c⁄ãxt
->
›s
.
	`¸óã_qp
’d, 
qp_öô_©å
);

620 i‡(
qp
) {

621 
qp
->
c⁄ãxt
 = 
pd
->context;

622 
qp
->
qp_c⁄ãxt
 = 
qp_öô_©å
->qp_context;

623 
qp
->
pd
 =Öd;

624 
qp
->
£nd_cq
 = 
qp_öô_©å
->send_cq;

625 
qp
->
ªcv_cq
 = 
qp_öô_©å
->recv_cq;

626 
qp
->
§q
 = 
qp_öô_©å
->srq;

627 
qp
->
qp_ty≥
 = 
qp_öô_©å
->qp_type;

628 
qp
->
°©e
 = 
IBV_QPS_RESET
;

629 
qp
->
evíts_com∂ëed
 = 0;

630 
	`±hªad_muãx_öô
(&
qp
->
muãx
, 
NULL
);

631 
	`±hªad_c⁄d_öô
(&
qp
->
c⁄d
, 
NULL
);

634  
qp
;

635 
	}
}

636 
deÁu…_symvî
(
__ibv_¸óã_qp
, 
ibv_¸óã_qp
);

638 
	$__ibv_quîy_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

639 
©å_mask
,

640 
ibv_qp_öô_©å
 *
öô_©å
)

642 
ªt
;

644 
ªt
 = 
qp
->
c⁄ãxt
->
›s
.
	`quîy_qp
(qp, 
©å
, 
©å_mask
, 
öô_©å
);

645 i‡(
ªt
)

646  
ªt
;

648 i‡(
©å_mask
 & 
IBV_QP_STATE
)

649 
qp
->
°©e
 = 
©å
->
qp_°©e
;

652 
	}
}

653 
deÁu…_symvî
(
__ibv_quîy_qp
, 
ibv_quîy_qp
);

655 
	$__ibv_modify_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

656 
©å_mask
)

658 
ªt
;

660 
ªt
 = 
qp
->
c⁄ãxt
->
›s
.
	`modify_qp
(qp, 
©å
, 
©å_mask
);

661 i‡(
ªt
)

662  
ªt
;

664 i‡(
©å_mask
 & 
IBV_QP_STATE
)

665 
qp
->
°©e
 = 
©å
->
qp_°©e
;

668 
	}
}

669 
deÁu…_symvî
(
__ibv_modify_qp
, 
ibv_modify_qp
);

671 
	$__ibv_de°roy_qp
(
ibv_qp
 *
qp
)

673  
qp
->
c⁄ãxt
->
›s
.
	`de°roy_qp
(qp);

674 
	}
}

675 
deÁu…_symvî
(
__ibv_de°roy_qp
, 
ibv_de°roy_qp
);

677 
ölöe
 
	$ùv6_addr_v4m≠≥d
(c⁄° 
ö6_addr
 *
a
)

679  ((
a
->
s6_addr32
[0] |á->s6_addr32[1]) |

680 (
a
->
s6_addr32
[2] ^ 
	`ht⁄l
(0x0000ffff))) == 0UL ||

682 (
a
->
s6_addr32
[0] =
	`ht⁄l
(0xff0e0000) &&

683 ((
a
->
s6_addr32
[1] |

684 (
a
->
s6_addr32
[2] ^ 
	`ht⁄l
(0x0000ffff))) == 0UL));

685 
	}
}

688 
	s≥î_addªss
 {

689 *
	maddªss
;

690 
uöt32_t
 
	msize
;

693 
ölöe
 
	$¸óã_≥î_‰om_gid
(
Ámûy
, *
øw_gid
,

694 
≥î_addªss
 *peer_address)

696 
Ámûy
) {

697 
AF_INET
:

698 
≥î_addªss
->
addªss
 = 
øw_gid
 + 12;

699 
≥î_addªss
->
size
 = 4;

701 
AF_INET6
:

702 
≥î_addªss
->
addªss
 = 
øw_gid
;

703 
≥î_addªss
->
size
 = 16;

710 
	}
}

712 
	#NEIGH_GET_DEFAULT_TIMEOUT_MS
 3000

	)

713 
ibv_ah
 *
	$__ibv_¸óã_ah_∆
(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
)

715 
ibv_ah
 *
ah
 = 
NULL
;

716 #i‚de‡
NRESOLVE_NEIGH


717 
îr
;

718 
d°_Ámûy
;

719 
§c_Ámûy
;

720 
oif
;

721 
gë_√igh_h™dÀr
 
√igh_h™dÀr
;

722 
ibv_gid
 
sgid
;

723 
ibv_exp_ah_©å
 
©å_ex
;

724 
ëhî√t_Œ
[
ETHERNET_LL_SIZE
];

725 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
pd
->
c⁄ãxt
,

726 
drv_exp_ibv_¸óã_ah
);

727 
≥î_addªss
 
§c
;

728 
≥î_addªss
 
d°
;

730 i‡(!
v˘x
) {

732 
ah
 = 
pd
->
c⁄ãxt
->
›s
.
	`¸óã_ah
’d, 
©å
);

733 #i‚de‡
NRESOLVE_NEIGH


734  
ah
;

737 
	`mem£t
(&
©å_ex
, 0, (attr_ex));

739 
	`mem˝y
(&
©å_ex
, 
©å
, (*attr));

740 
	`mem£t
((*)&
©å_ex
 + (*
©å
), 0,

741 (
©å_ex
Ë- (*
©å
));

743 
îr
 = 
	`ibv_quîy_gid
(
pd
->
c⁄ãxt
, 
©å
->
p‹t_num
,

744 
©å
->
grh
.
sgid_ödex
, &
sgid
);

746 i‡(
îr
) {

747 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_ah failedÅo query sgid.\n");

748  
NULL
;

751 i‡(
	`√igh_öô_ªsour˚s
(&
√igh_h™dÀr
, 
NEIGH_GET_DEFAULT_TIMEOUT_MS
))

752  
NULL
;

754 
d°_Ámûy
 = 
	`ùv6_addr_v4m≠≥d
((
ö6_addr
 *)
©å
->
grh
.
dgid
.
øw
) ?

755 
AF_INET
 : 
AF_INET6
;

756 
§c_Ámûy
 = 
	`ùv6_addr_v4m≠≥d
((
ö6_addr
 *)
sgid
.
øw
) ?

757 
AF_INET
 : 
AF_INET6
;

759 i‡(
	`¸óã_≥î_‰om_gid
(
d°_Ámûy
, 
©å
->
grh
.
dgid
.
øw
, &
d°
)) {

760 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_ah failedÅo create dst "

762 
‰ì_ªsour˚s
;

764 i‡(
	`¸óã_≥î_‰om_gid
(
§c_Ámûy
, &
sgid
.
øw
, &
§c
)) {

765 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_ah failedÅo create src "

767 
‰ì_ªsour˚s
;

769 i‡(
	`√igh_£t_d°
(&
√igh_h™dÀr
, 
d°_Ámûy
, 
d°
.
addªss
,

770 
d°
.
size
)) {

771 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_ah failedÅo create dst "

773 
‰ì_ªsour˚s
;

776 i‡(
	`√igh_£t_§c
(&
√igh_h™dÀr
, 
§c_Ámûy
, 
§c
.
addªss
,

777 
§c
.
size
)) {

778 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_ah failedÅo create src "

780 
‰ì_ªsour˚s
;

783 
oif
 = 
	`√igh_gë_oif_‰om_§c
(&
√igh_h™dÀr
);

785 i‡(
oif
 > 0) {

786 
	`√igh_£t_oif
(&
√igh_h™dÀr
, 
oif
);

788 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_ah failedÅo get output IF\n");

789 
‰ì_ªsour˚s
;

794 i‡(
	`¥o˚ss_gë_√igh
(&
√igh_h™dÀr
)) {

795 
	`Ârötf
(
°dîr
, 
PFX
 "NeighÑesolutionÖrocess failed\n");

796 
‰ì_ªsour˚s
;

799 
©å_ex
.
vid
 = 
	`√igh_gë_vœn_id_‰om_dev
(&
√igh_h™dÀr
);

801 i‡(
©å_ex
.
vid
 <= 0xfff) {

802 
	`√igh_£t_vœn_id
(&
√igh_h™dÀr
, 
©å_ex
.
vid
);

803 
©å_ex
.
comp_mask
 |
IBV_EXP_AH_ATTR_VID
;

806 
©å_ex
.
Œ_addªss
.
Àn
 = 
	`√igh_gë_Œ
(&
√igh_h™dÀr
, 
ëhî√t_Œ
,

807 (
ëhî√t_Œ
));

809 i‡(
©å_ex
.
Œ_addªss
.
Àn
 <= 0)

810 
‰ì_ªsour˚s
;

812 
©å_ex
.
comp_mask
 |
IBV_EXP_AH_ATTR_LL
;

813 
©å_ex
.
Œ_addªss
.
ty≥
 = 
LL_ADDRESS_ETH
;

814 
©å_ex
.
Œ_addªss
.
addªss
 = 
ëhî√t_Œ
;

816 
ah
 = 
v˘x
->
	`drv_exp_ibv_¸óã_ah
(
pd
, &
©å_ex
);

818 
‰ì_ªsour˚s
:

819 
	`√igh_‰ì_ªsour˚s
(&
√igh_h™dÀr
);

822  
ah
;

823 
	}
}

825 
ibv_ah
 *
	$__ibv_¸óã_ah
(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
)

827 
ibv_exp_p‹t_©å
 
p‹t_©å
;

828 
ibv_exp_ah_©å
 
©å_ex
 = {};

829 
ibv_ah
 *
ah
;

830 
îr
;

831 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
pd
->
c⁄ãxt
,

832 
drv_exp_ibv_¸óã_kah
);

834 
p‹t_©å
.
comp_mask
 = 
IBV_EXP_QUERY_PORT_ATTR_MASK1
;

835 
p‹t_©å
.
mask1
 = 
IBV_EXP_QUERY_PORT_LINK_LAYER
;

836 
îr
 = 
	`ibv_exp_quîy_p‹t
(
pd
->
c⁄ãxt
, 
©å
->
p‹t_num
, &
p‹t_©å
);

838 i‡(
îr
) {

839 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_ah failedÅo queryÖort.\n");

840  
NULL
;

843 i‡((
p‹t_©å
.
lök_œyî
 =
IBV_LINK_LAYER_ETHERNET
) &&

844 !
©å
->
is_globÆ
) {

845 
	`Ârötf
(
°dîr
, 
PFX
 "GRH is mandatory For RoCEáddress handle\n");

846  
NULL
;

849 i‡(
p‹t_©å
.
lök_œyî
 !
IBV_LINK_LAYER_ETHERNET
) {

850 
ah
 = 
pd
->
c⁄ãxt
->
›s
.
	`¸óã_ah
’d, 
©å
);

852 i‡(!
v˘x
) {

853 
ah
 = 
	`__ibv_¸óã_ah_∆
(
pd
, 
©å
);

855 
	`mem˝y
(&
©å_ex
, 
©å
, (*attr));

856 
ah
 = 
v˘x
->
	`drv_exp_ibv_¸óã_kah
(
pd
, &
©å_ex
);

857 i‡(!
ah
)

858 
ah
 = 
	`__ibv_¸óã_ah_∆
(
pd
, 
©å
);

862 i‡(
ah
) {

863 
ah
->
c⁄ãxt
 = 
pd
->context;

864 
ah
->
pd
 =Öd;

866  
ah
;

867 
	}
}

868 
deÁu…_symvî
(
__ibv_¸óã_ah
, 
ibv_¸óã_ah
);

870 
	$ibv_föd_gid_ödex
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

871 
ibv_gid
 *
gid
, 
uöt32_t
 
gid_ty≥
)

873 
ibv_exp_gid_©å
 
gid_©å
;

874 
ibv_gid
 
sgid
;

875 
i
 = 0, 
ªt
;

877 
gid_©å
.
comp_mask
 = 
IBV_EXP_QUERY_GID_ATTR_TYPE
;

880 
ªt
 = 
	`ibv_quîy_gid
(
c⁄ãxt
, 
p‹t_num
, 
i
, &
sgid
);

881 i‡(!
ªt
)

882 
ªt
 = 
	`ibv_exp_quîy_gid_©å
(
c⁄ãxt
, 
p‹t_num
, 
i
,

883 &
gid_©å
);

884 
i
++;

885 } !
ªt
 && (
	`memcmp
(&
sgid
, 
gid
,  *gidË|| (
gid_ty≥
 !
gid_©å
.
ty≥
)));

887  
ªt
 ?Ñë : 
i
 - 1;

888 
	}
}

890 
ölöe
 
	$m≠_ùv4_addr_to_ùv6
(
__be32
 
ùv4
, 
ö6_addr
 *
ùv6
)

892 
__be32
 
tmp
 = 0;

894 
	`mem˝y
(&
ùv6
->
s6_addr32
[0], &
tmp
, 4);

895 
	`mem˝y
(&
ùv6
->
s6_addr32
[1], &
tmp
, 4);

896 
tmp
 = 
	`ht⁄l
(0x0000FFFF);

897 
	`mem˝y
(&
ùv6
->
s6_addr32
[2], &
tmp
, 4);

898 
	`mem˝y
(&
ùv6
->
s6_addr32
[3], &
ùv4
, 4);

899 
	}
}

901 
ölöe
 
uöt16_t
 
	$ùv4_ˇlc_hdr_csum
(
uöt16_t
 *
d©a
, 
num_hw‹ds
)

903 
i
 = 0;

904 
uöt32_t
 
sum
 = 0;

906 
i
 = 0; i < 
num_hw‹ds
; i++)

907 
sum
 +*(
d©a
++);

909 
sum
 = (sum & 0xffff) + (sum >> 16);

911  ~
sum
;

912 
	}
}

914 
ölöe
 
	$gë_grh_hódî_vîsi⁄
(
ibv_grh
 *
grh
)

916 
ù6h_vîsi⁄
 = (
	`¡ohl
(
grh
->
vîsi⁄_t˛ass_Êow
) >> 28) & 0xf;

917 
ùhdr
 *
ù4h
 = (ùhd∏*)((*)
grh
 + 20);

918 
ùhdr
 
ù4h_checked
;

920 i‡(
ù6h_vîsi⁄
 != 6) {

921 i‡(
ù4h
->
vîsi⁄
 == 4)

923 
î∫o
 = 
EPROTONOSUPPORT
;

927 i‡(
ù4h
->
ihl
 != 5)

934 
	`mem˝y
(&
ù4h_checked
, 
ù4h
, (ip4h_checked));

938 
ù4h_checked
.
check
 = 0;

939 
ù4h_checked
.
check
 = 
	`ùv4_ˇlc_hdr_csum
((
uöt16_t
 *)&ip4h_checked, 10);

941 i‡(
ù4h
->
check
 =
ù4h_checked
.check)

944 
	}
}

946 
ölöe
 
	$£t_ah_©å_gíîic_fõlds
(
ibv_ah_©å
 *
ah_©å
,

947 
ibv_wc
 *
wc
,

948 
ibv_grh
 *
grh
,

949 
uöt8_t
 
p‹t_num
)

951 
uöt32_t
 
Êow_˛ass
;

953 
Êow_˛ass
 = 
	`¡ohl
(
grh
->
vîsi⁄_t˛ass_Êow
);

954 
ah_©å
->
grh
.
Êow_œbñ
 = 
Êow_˛ass
 & 0xFFFFF;

955 
ah_©å
->
dlid
 = 
wc
->
¶id
;

956 
ah_©å
->
¶
 = 
wc
->sl;

957 
ah_©å
->
§c_∑th_bôs
 = 
wc
->
dlid_∑th_bôs
;

958 
ah_©å
->
p‹t_num
 =Öort_num;

959 
	}
}

961 
ölöe
 
	$£t_ah_©å_by_ùv4
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

962 
ibv_ah_©å
 *
ah_©å
,

963 
ùhdr
 *
ù4h
, 
uöt8_t
 
p‹t_num
)

965 
ibv_gid
 
sgid
;

966 
ªt
;

969 i‡(
	`IN_CLASSD
(
	`¡ohl
(
ù4h
->
daddr
))) {

970 
î∫o
 = 
EINVAL
;

974 
	`m≠_ùv4_addr_to_ùv6
(
ù4h
->
daddr
, (
ö6_addr
 *)&
sgid
);

975 
ªt
 = 
	`ibv_föd_gid_ödex
(
c⁄ãxt
, 
p‹t_num
, &
sgid
,

976 
IBV_EXP_ROCE_V2_GID_TYPE
);

977 i‡(
ªt
 < 0)

978  
ªt
;

979 
	`m≠_ùv4_addr_to_ùv6
(
ù4h
->
ßddr
,

980 (
ö6_addr
 *)&
ah_©å
->
grh
.
dgid
);

981 
ah_©å
->
grh
.
sgid_ödex
 = (
uöt8_t
Ë
ªt
;

982 
ah_©å
->
grh
.
h›_limô
 = 
ù4h
->
âl
;

983 
ah_©å
->
grh
.
åaffic_˛ass
 = 
ù4h
->
tos
;

986 
	}
}

988 
	#IB_NEXT_HDR
 0x1b

	)

989 
ölöe
 
	$£t_ah_©å_by_ùv6
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

990 
ibv_ah_©å
 *
ah_©å
,

991 
ibv_grh
 *
grh
, 
uöt8_t
 
p‹t_num
)

993 
uöt32_t
 
Êow_˛ass
;

994 
uöt32_t
 
sgid_ty≥
;

995 
ªt
;

998 i‡(
grh
->
dgid
.
øw
[0] == 0xFF) {

999 
î∫o
 = 
EINVAL
;

1003 
ah_©å
->
grh
.
dgid
 = grh->
sgid
;

1004 i‡(
grh
->
√xt_hdr
 =
IPPROTO_UDP
) {

1005 
sgid_ty≥
 = 
IBV_EXP_ROCE_V2_GID_TYPE
;

1006 } i‡(
grh
->
√xt_hdr
 =
IB_NEXT_HDR
) {

1007 
sgid_ty≥
 = 
IBV_EXP_IB_ROCE_V1_GID_TYPE
;

1009 
î∫o
 = 
EPROTONOSUPPORT
;

1013 
ªt
 = 
	`ibv_föd_gid_ödex
(
c⁄ãxt
, 
p‹t_num
, &
grh
->
dgid
,

1014 
sgid_ty≥
);

1015 i‡(
ªt
 < 0)

1016  
ªt
;

1018 
ah_©å
->
grh
.
sgid_ödex
 = (
uöt8_t
Ë
ªt
;

1019 
Êow_˛ass
 = 
	`¡ohl
(
grh
->
vîsi⁄_t˛ass_Êow
);

1020 
ah_©å
->
grh
.
h›_limô
 = grh->hop_limit;

1021 
ah_©å
->
grh
.
åaffic_˛ass
 = (
Êow_˛ass
 >> 20) & 0xFF;

1024 
	}
}

1026 
	#CLASS_D_ADDR
 (0xeUL << 28)

	)

1027 
	#CLASS_D_MASK
 (0xfUL << 28)

	)

1028 
	$ibv_öô_ah_‰om_wc
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1029 
ibv_wc
 *
wc
, 
ibv_grh
 *
grh
,

1030 
ibv_ah_©å
 *
ah_©å
)

1032 
vîsi⁄
;

1033 
ªt
 = 0;

1034 
ùhdr
 *
ùh
;

1036 
	`mem£t
(
ah_©å
, 0,  *ah_attr);

1037 
	`£t_ah_©å_gíîic_fõlds
(
ah_©å
, 
wc
, 
grh
, 
p‹t_num
);

1039 i‡(
wc
->
wc_Êags
 & 
IBV_WC_GRH
) {

1040 
ah_©å
->
is_globÆ
 = 1;

1041 
vîsi⁄
 = 
	`gë_grh_hódî_vîsi⁄
(
grh
);

1043 i‡(
vîsi⁄
 == 4) {

1044 
ùh
 = (
ùhdr
 *)((*)
grh
 + 20);

1045 i‡(((
¡ohl
)(
ùh
->
daddr
Ë& 
CLASS_D_MASK
Ë=
CLASS_D_ADDR
)

1046  
EINVAL
;

1047 
ªt
 = 
	`£t_ah_©å_by_ùv4
(
c⁄ãxt
, 
ah_©å
,

1048 
ùh
,

1049 
p‹t_num
);

1051 i‡(
vîsi⁄
 == 6) {

1052 i‡(
grh
->
dgid
.
øw
[0] == 0xFF)

1053  
EINVAL
;

1054 
ªt
 = 
	`£t_ah_©å_by_ùv6
(
c⁄ãxt
, 
ah_©å
, 
grh
,

1055 
p‹t_num
);

1058 
ªt
 = -1;

1061  
ªt
;

1062 
	}
}

1064 
ibv_ah
 *
	$ibv_¸óã_ah_‰om_wc
(
ibv_pd
 *
pd
, 
ibv_wc
 *
wc
,

1065 
ibv_grh
 *
grh
, 
uöt8_t
 
p‹t_num
)

1067 
ibv_ah_©å
 
ah_©å
;

1068 
ªt
;

1070 
ªt
 = 
	`ibv_öô_ah_‰om_wc
(
pd
->
c⁄ãxt
, 
p‹t_num
, 
wc
, 
grh
, &
ah_©å
);

1071 i‡(
ªt
)

1072  
NULL
;

1074  
	`ibv_¸óã_ah
(
pd
, &
ah_©å
);

1075 
	}
}

1077 
	$__ibv_de°roy_ah
(
ibv_ah
 *
ah
)

1079  
ah
->
c⁄ãxt
->
›s
.
	`de°roy_ah
(ah);

1080 
	}
}

1081 
deÁu…_symvî
(
__ibv_de°roy_ah
, 
ibv_de°roy_ah
);

1083 
	$__ibv_©èch_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
)

1085  
qp
->
c⁄ãxt
->
›s
.
	`©èch_mˇ°
(qp, 
gid
, 
lid
);

1086 
	}
}

1087 
deÁu…_symvî
(
__ibv_©èch_mˇ°
, 
ibv_©èch_mˇ°
);

1089 
	$__ibv_dëach_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
)

1091  
qp
->
c⁄ãxt
->
›s
.
	`dëach_mˇ°
(qp, 
gid
, 
lid
);

1092 
	}
}

1093 
deÁu…_symvî
(
__ibv_dëach_mˇ°
, 
ibv_dëach_mˇ°
);

1097 
ibv_xrc_domaö
 *
	$ibv_›í_xrc_domaö
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1098 
fd
, 
oÊag
)

1101 
ibv_xrcd
 *ibv_xrcd;

1102 
ibv_xrcd_öô_©å
 
xrcd_öô_©å
;

1104 
	`mem£t
(&
xrcd_öô_©å
, 0, (xrcd_init_attr));

1106 
xrcd_öô_©å
.
fd
 = fd;

1107 
xrcd_öô_©å
.
oÊags
 = 
oÊag
;

1109 
xrcd_öô_©å
.
comp_mask
 = 
IBV_XRCD_INIT_ATTR_FD
 |

1110 
IBV_XRCD_INIT_ATTR_OFLAGS
;

1112 
ibv_xrcd
 = 
	`ibv_›í_xrcd
(
c⁄ãxt
, &
xrcd_öô_©å
);

1113 i‡(!
ibv_xrcd
)

1114  
NULL
;

1119  (
ibv_xrc_domaö
 *)
ibv_xrcd
;

1121 
	}
}

1124 
ibv_§q
 *
	$ibv_¸óã_xrc_§q
(
ibv_pd
 *
pd
,

1125 
ibv_xrc_domaö
 *
xrc_domaö
,

1126 
ibv_cq
 *
xrc_cq
,

1127 
ibv_§q_öô_©å
 *
§q_öô_©å
)

1130 
ibv_§q_öô_©å_ex
 ibv_srq_init_attr_ex;

1131 
ibv_§q_Àgacy
 *ibv_srq_legacy;

1132 
ibv_§q
 *ibv_srq;

1133 
uöt32_t
 
xrc_§q_num
;

1134 
vîbs_c⁄ãxt_exp
 *
v˘x
;

1136 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
pd
->
c⁄ãxt
, 
drv_exp_£t_Àgacy_xrc
);

1137 i‡(!
v˘x
) {

1138 
î∫o
 = 
ENOSYS
;

1139  
NULL
;

1141 
	`mem£t
(&
ibv_§q_öô_©å_ex
, 0,  ibv_srq_init_attr_ex);

1143 
ibv_§q_öô_©å_ex
.
xrcd
 = (
ibv_xrcd
 *)
xrc_domaö
;

1144 
ibv_§q_öô_©å_ex
.
comp_mask
 = 
IBV_SRQ_INIT_ATTR_XRCD
 |

1145 
IBV_SRQ_INIT_ATTR_TYPE
 |

1146 
IBV_SRQ_INIT_ATTR_CQ
 | 
IBV_SRQ_INIT_ATTR_PD
;

1148 
ibv_§q_öô_©å_ex
.
cq
 = 
xrc_cq
;

1149 
ibv_§q_öô_©å_ex
.
pd
 =Öd;

1150 
ibv_§q_öô_©å_ex
.
§q_ty≥
 = 
IBV_SRQT_XRC
;

1152 
ibv_§q_öô_©å_ex
.
©å
.
max_sge
 = 
§q_öô_©å
->attr.max_sge;

1153 
ibv_§q_öô_©å_ex
.
©å
.
max_wr
 = 
§q_öô_©å
->attr.max_wr;

1154 
ibv_§q_öô_©å_ex
.
©å
.
§q_limô
 = 
§q_öô_©å
->attr.srq_limit;

1155 
ibv_§q_öô_©å_ex
.
§q_c⁄ãxt
 = 
§q_öô_©å
->srq_context;

1157 
ibv_§q
 = 
	`ibv_¸óã_§q_ex
(
pd
->
c⁄ãxt
, &
ibv_§q_öô_©å_ex
);

1158 i‡(!
ibv_§q
)

1159  
NULL
;

1164 i‡(
ibv_§q
->
h™dÀ
 =
LEGACY_XRC_SRQ_HANDLE
) {

1166 
ibv_§q
 *
ibv_§q_tmp
 = ibv_srq;

1167 
ªt
;

1169 
ibv_§q
 = 
	`ibv_¸óã_§q_ex
(
pd
->
c⁄ãxt
, &
ibv_§q_öô_©å_ex
);

1171 
ªt
 = 
	`ibv_de°roy_§q
(
ibv_§q_tmp
);

1172 i‡(
ªt
) {

1173 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_xrc_srq, failÅo destroy intermediate srq\n");

1174  
NULL
;

1177 i‡(!
ibv_§q
)

1178  
NULL
;

1181 i‡(
ibv_§q
->
h™dÀ
 =
LEGACY_XRC_SRQ_HANDLE
) {

1182 
ªt
 = 
	`ibv_de°roy_§q
(
ibv_§q
);

1183 i‡(
ªt
)

1184 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_create_xrc_srq, failÅo destroy intermediate srq\n");

1185 
î∫o
 = 
EAGAIN
;

1186  
NULL
;

1190 
ibv_§q_Àgacy
 = 
	`ˇŒoc
(1, (*ibv_srq_legacy));

1191 i‡(!
ibv_§q_Àgacy
) {

1192 
î∫o
 = 
ENOMEM
;

1193 
îr
;

1196 i‡(
	`ibv_gë_§q_num
(
ibv_§q
, &
xrc_§q_num
))

1197 
îr_‰ì
;

1199 
ibv_§q_Àgacy
->
ibv_§q
 = ibv_srq;

1200 
ibv_§q_Àgacy
->
xrc_§q_num
 = xrc_srq_num;

1203 
ibv_§q_Àgacy
->
xrc_§q_num_bö_com∑t
 = 
xrc_§q_num
;

1204 
ibv_§q_Àgacy
->
xrc_domaö_bö_com∑t
 = 
xrc_domaö
;

1205 
ibv_§q_Àgacy
->
xrc_cq_bö_com∑t
 = 
xrc_cq
;

1206 
ibv_§q_Àgacy
->
c⁄ãxt
 = 
pd
->context;

1207 
ibv_§q_Àgacy
->
§q_c⁄ãxt
 = 
§q_öô_©å
->srq_context;

1208 
ibv_§q_Àgacy
->
pd
 =Öd;

1213 
ibv_§q_Àgacy
->
h™dÀ
 = 
LEGACY_XRC_SRQ_HANDLE
;

1214 
ibv_§q_Àgacy
->
xrc_domaö
 = xrc_domain;

1215 
ibv_§q_Àgacy
->
xrc_cq
 = xrc_cq;

1219 
ibv_§q_Àgacy
->
evíts_com∂ëed
 = 0;

1221 
v˘x
->
	`drv_exp_£t_Àgacy_xrc
(
ibv_§q
, 
ibv_§q_Àgacy
);

1222  (
ibv_§q
 *)(
ibv_§q_Àgacy
);

1224 
îr_‰ì
:

1225 
	`‰ì
(
ibv_§q_Àgacy
);

1226 
îr
:

1227 
	`ibv_de°roy_§q
(
ibv_§q
);

1228  
NULL
;

1230 
	}
}

1234 
±hªad_muãx_t
 
	gxrc_åì_muãx
 = 
PTHREAD_MUTEX_INITIALIZER
;

1235 *
	gibv_xrc_qp_åì
;

1237 
	$xrc_qp_com∑ª
(c⁄° *
a
, c⁄° *
b
)

1240 i‡((*(
uöt32_t
 *Ë
a
Ë< (*(uöt32_à*Ë
b
))

1242 i‡((*(
uöt32_t
 *Ë
a
Ë> (*(uöt32_à*Ë
b
))

1247 
	}
}

1249 
ibv_qp
 *
	$ibv_föd_xrc_qp
(
uöt32_t
 
q≤
)

1251 
uöt32_t
 **
q≤_±r
;

1252 
ibv_qp
 *ibv_q∞
NULL
;

1254 
	`±hªad_muãx_lock
(&
xrc_åì_muãx
);

1255 
q≤_±r
 = 
	`tföd
(&
q≤
, &
ibv_xrc_qp_åì
, 
xrc_qp_com∑ª
);

1256 i‡(!
q≤_±r
)

1257 
íd
;

1259 
ibv_qp
 = 
	`c⁄èöî_of
(*
q≤_±r
, ibv_qp, 
qp_num
);

1261 
íd
:

1262 
	`±hªad_muãx_u∆ock
(&
xrc_åì_muãx
);

1263  
ibv_qp
;

1264 
	}
}

1266 
	$ibv_˛ór_xrc_qp
(
uöt32_t
 
q≤
)

1268 
uöt32_t
 **
q≤_±r
;

1269 
ªt
 = 0;

1271 
	`±hªad_muãx_lock
(&
xrc_åì_muãx
);

1272 
q≤_±r
 = 
	`tdñëe
(&
q≤
, &
ibv_xrc_qp_åì
, 
xrc_qp_com∑ª
);

1273 i‡(!
q≤_±r
)

1274 
ªt
 = 
EINVAL
;

1276 
	`±hªad_muãx_u∆ock
(&
xrc_åì_muãx
);

1277  
ªt
;

1278 
	}
}

1280 
	$ibv_°‹e_xrc_qp
(
ibv_qp
 *
qp
)

1282 
uöt32_t
 **
q≤_±r
;

1283 
ªt
 = 0;

1285 i‡(
	`ibv_föd_xrc_qp
(
qp
->
qp_num
)) {

1287 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_store_xrc_qp failed, qpn=%u isálready stored\n",

1288 
qp
->
qp_num
);

1289  
EEXIST
;

1292 
	`±hªad_muãx_lock
(&
xrc_åì_muãx
);

1293 
q≤_±r
 = 
	`t£¨ch
(&
qp
->
qp_num
, &
ibv_xrc_qp_åì
, 
xrc_qp_com∑ª
);

1294 i‡(!
q≤_±r
)

1295 
ªt
 = 
EINVAL
;

1297 
	`±hªad_muãx_u∆ock
(&
xrc_åì_muãx
);

1298  
ªt
;

1300 
	}
}

1302 
	$ibv_˛o£_xrc_domaö
(
ibv_xrc_domaö
 *
d
)

1304 
ibv_xrcd
 *ibv_xrcd = (ibv_xrcd *)
d
;

1305  
	`ibv_˛o£_xrcd
(
ibv_xrcd
);

1306 
	}
}

1308 
	$ibv_¸óã_xrc_rcv_qp
(
ibv_qp_öô_©å
 *
öô_©å
,

1309 
uöt32_t
 *
xrc_rcv_q≤
)

1311 
ibv_xrcd
 *ibv_xrcd;

1312 
ibv_qp_öô_©å_ex
 
qp_öô_©å_ex
;

1313 
ibv_qp
 *ibv_qp;

1314 
ªt
;

1316 i‡(!
öô_©å
 || !(öô_©å->
xrc_domaö
))

1317  
EINVAL
;

1319 
ibv_xrcd
 = (ibv_xrcd *Ë
öô_©å
->
xrc_domaö
;

1320 
	`mem£t
(&
qp_öô_©å_ex
, 0, (qp_init_attr_ex));

1321 
qp_öô_©å_ex
.
qp_ty≥
 = 
IBV_QPT_XRC_RECV
;

1322 
qp_öô_©å_ex
.
comp_mask
 = 
IBV_QP_INIT_ATTR_XRCD
;

1323 
qp_öô_©å_ex
.
xrcd
 = 
ibv_xrcd
;

1325 
ibv_qp
 = 
	`ibv_¸óã_qp_ex
(
ibv_xrcd
->
c⁄ãxt
, &
qp_öô_©å_ex
);

1326 i‡(!
ibv_qp
)

1327  
î∫o
;

1330 *
xrc_rcv_q≤
 = 
ibv_qp
->
qp_num
;

1331 
ªt
 = 
	`ibv_°‹e_xrc_qp
(
ibv_qp
);

1332 i‡(
ªt
) {

1333 
îr
;

1334 
îr
 = 
	`ibv_de°roy_qp
(
ibv_qp
);

1335 i‡(
îr
)

1336 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_¸óã_xrc_rcv_qp, ibv_de°roy_q∞Áûed,Éº=%d\n", 
îr
);

1337  
ªt
;

1341 
	}
}

1344 
	$ibv_modify_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

1345 
uöt32_t
 
xrc_qp_num
,

1346 
ibv_qp_©å
 *
©å
, 
©å_mask
)

1348 
ibv_qp
 *
qp
;

1350 
qp
 = 
	`ibv_föd_xrc_qp
(
xrc_qp_num
);

1351 i‡(!
qp
)

1352  
EINVAL
;

1355  
	`ibv_modify_qp
(
qp
, 
©å
, 
©å_mask
);

1357 
	}
}

1359 
	$ibv_quîy_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
, 
uöt32_t
 
xrc_qp_num
,

1360 
ibv_qp_©å
 *
©å
, 
©å_mask
,

1361 
ibv_qp_öô_©å
 *
öô_©å
)

1363 
ibv_qp
 *
qp
;

1365 
qp
 = 
	`ibv_föd_xrc_qp
(
xrc_qp_num
);

1366 i‡(!
qp
)

1367  
EINVAL
;

1370  
	`ibv_quîy_qp
(
qp
, 
©å
, 
©å_mask
, 
öô_©å
);

1372 
	}
}

1373 
	$ibv_ªg_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
, 
uöt32_t
 
xrc_qp_num
)

1376 
ibv_qp
 *
qp
;

1377 
ibv_qp_›í_©å
 
©å
;

1378 
ibv_xrcd
 *ibv_xrcd = (ibv_xrcd *)
xrc_domaö
;

1379 
ªt
;

1381 
	`mem£t
(&
©å
, '\0', (attr));

1383 
©å
.
qp_num
 = 
xrc_qp_num
;

1384 
©å
.
qp_ty≥
 = 
IBV_QPT_XRC_RECV
;

1385 
©å
.
xrcd
 = 
ibv_xrcd
;

1386 
©å
.
comp_mask
 = 
IBV_QP_OPEN_ATTR_XRCD
 | 
IBV_QP_OPEN_ATTR_NUM
 |

1387 
IBV_QP_OPEN_ATTR_TYPE
;

1389 
qp
 = 
	`ibv_›í_qp
(
ibv_xrcd
->
c⁄ãxt
, &
©å
);

1390 i‡(!
qp
)

1391  
î∫o
;

1396 
ªt
 = 
	`ibv_°‹e_xrc_qp
(
qp
);

1397 i‡(
ªt
) {

1398 
îr
;

1399 
îr
 = 
	`ibv_de°roy_qp
(
qp
);

1400 i‡(
îr
)

1401 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_ªg_xrc_rcv_qp, ibv_de°roy_q∞Áûed,Éº=%d\n", 
îr
);

1403  
ªt
;

1408 
	}
}

1410 
	$ibv_uƒeg_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

1411 
uöt32_t
 
xrc_qp_num
)

1414 
ibv_qp
 *
qp
;

1415 
ªt
;

1417 
qp
 = 
	`ibv_föd_xrc_qp
(
xrc_qp_num
);

1418 i‡(!
qp
)

1419  
EINVAL
;

1421 
ªt
 = 
	`ibv_˛ór_xrc_qp
(
xrc_qp_num
);

1422 i‡(
ªt
) {

1423 
	`Ârötf
(
°dîr
, 
PFX
 "ibv_unreg_xrc_rcv_qp, fail via clear, qpn=%u,Érr=%d\n",

1424 
xrc_qp_num
, 
ªt
);

1425  
ªt
;

1428  
	`ibv_de°roy_qp
(
qp
);

1430 
	}
}

	@libibverbs-41mlnx1/util/util.h

2 #i‚de‡
UTIL_UTIL_H


3 
	#UTIL_UTIL_H


	)

7 
	#check_¢¥ötf
(
buf
, 
Àn
, 
fmt
, ...) \

9 
rc
 = 
	`¢¥ötf
(
buf
, 
Àn
, 
fmt
, ##
__VA_ARGS__
); \

10 (
rc
 < 
Àn
 &&Ñc >= 0); \

11 })

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

23 #ifdef 
_ASSERT_H


25 #unde‡
_ASSERT_H


26 #unde‡
as£π


27 #unde‡
__ASSERT_VOID_CAST


29 #ifdef 
__USE_GNU


30 #unde‡
as£π_≥º‹


35 
	#_ASSERT_H
 1

	)

36 
	~<„©uªs.h
>

38 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

39 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

41 
	#__ASSERT_VOID_CAST
 ()

	)

49 #ifdef 
NDEBUG


51 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

59 #ifdef 
__USE_GNU


60 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

65 
__BEGIN_DECLS


68 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

69 
__löe
, c⁄° *
__fun˘i⁄
)

70 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

73 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

74 
__löe
, c⁄° *
__fun˘i⁄
)

75 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

80 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

81 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
__END_DECLS


86 
	#as£π
(
ex¥
) \

87 ((
ex¥
) \

88 ? 
	`__ASSERT_VOID_CAST
 (0) \

89 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

91 #ifdef 
__USE_GNU


92 
	#as£π_≥º‹
(
î∫um
) \

93 (!(
î∫um
) \

94 ? 
	`__ASSERT_VOID_CAST
 (0) \

95 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

103 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

104 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

106 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

107 
	#__ASSERT_FUNCTION
 
__func__


	)

109 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

116 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


118 #unde‡
°©ic_as£π


119 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/byteswap.h

18 #i‚de‡
_BYTESWAP_H


19 
	#_BYTESWAP_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/byãsw≠.h
>

31 
	#bsw≠_16
(
x
Ë
	`__bsw≠_16
 (x)

	)

34 
	#bsw≠_32
(
x
Ë
	`__bsw≠_32
 (x)

	)

36 #i‡
__GLIBC_HAVE_LONG_LONG


38 
	#bsw≠_64
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/dirent.h

23 #i‚def 
_DIRENT_H


24 
	#_DIRENT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifde‡
__USE_XOPEN


33 #i‚de‡
__öo_t_deföed


34 #i‚de‡
__USE_FILE_OFFSET64


35 
__öo_t
 
	töo_t
;

37 
__öo64_t
 
	töo_t
;

39 
	#__öo_t_deföed


	)

41 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


42 
__öo64_t
 
	töo64_t
;

43 
	#__öo64_t_deföed


	)

62 
	~<bôs/dúít.h
>

64 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


65 
	#d_öo
 
d_fûío


	)

82 #ifde‡
_DIRENT_HAVE_D_NAMLEN


83 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

84 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

86 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

87 #ifde‡
_DIRENT_HAVE_D_RECLEN


88 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

90 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

91 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

96 #ifde‡
__USE_BSD


100 
	mDT_UNKNOWN
 = 0,

101 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

102 
	mDT_FIFO
 = 1,

103 
	#DT_FIFO
 
DT_FIFO


	)

104 
	mDT_CHR
 = 2,

105 
	#DT_CHR
 
DT_CHR


	)

106 
	mDT_DIR
 = 4,

107 
	#DT_DIR
 
DT_DIR


	)

108 
	mDT_BLK
 = 6,

109 
	#DT_BLK
 
DT_BLK


	)

110 
	mDT_REG
 = 8,

111 
	#DT_REG
 
DT_REG


	)

112 
	mDT_LNK
 = 10,

113 
	#DT_LNK
 
DT_LNK


	)

114 
	mDT_SOCK
 = 12,

115 
	#DT_SOCK
 
DT_SOCK


	)

116 
	mDT_WHT
 = 14

117 
	#DT_WHT
 
DT_WHT


	)

121 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

122 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

128 
__dú°ªam
 
	tDIR
;

135 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

137 #ifde‡
__USE_XOPEN2K8


142 
DIR
 *
	`fd›ídú
 (
__fd
);

150 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

162 #i‚de‡
__USE_FILE_OFFSET64


163 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

165 #ifde‡
__REDIRECT


166 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

167 
	`__n⁄nuŒ
 ((1));

169 
	#ªaddú
 
ªaddú64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

177 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


183 #i‚de‡
__USE_FILE_OFFSET64


184 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

185 
dúít
 *
__ª°ri˘
 
__íåy
,

186 
dúít
 **
__ª°ri˘
 
__ªsu…
)

187 
	`__n⁄nuŒ
 ((1, 2, 3));

189 #ifde‡
__REDIRECT


190 
	`__REDIRECT
 (
ªaddú_r
,

191 (
DIR
 *
__ª°ri˘
 
__dúp
,

192 
dúít
 *
__ª°ri˘
 
__íåy
,

193 
dúít
 **
__ª°ri˘
 
__ªsu…
),

194 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3));

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 c⁄° *
__ª°ri˘
 
__«me
,

76 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 c⁄° *
dli_‚ame
;

92 *
dli_fba£
;

93 c⁄° *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 #i‡
__GLIBC_HAVE_LONG_LONG


74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

81 
	#htobe16
(
x
Ë(x)

	)

82 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

83 
	#be16toh
(
x
Ë(x)

	)

84 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

86 
	#htobe32
(
x
Ë(x)

	)

87 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

88 
	#be32toh
(
x
Ë(x)

	)

89 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

91 #i‡
__GLIBC_HAVE_LONG_LONG


92 
	#htobe64
(
x
Ë(x)

	)

93 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

94 
	#be64toh
(
x
Ë(x)

	)

95 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

141 #ifde‡
__USE_ATFILE


142 
	#AT_FDCWD
 -100

	)

145 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

146 
	#AT_REMOVEDIR
 0x200

	)

148 
	#AT_SYMLINK_FOLLOW
 0x400

	)

149 #ifde‡
__USE_GNU


150 
	#AT_NO_AUTOMOUNT
 0x800

	)

152 
	#AT_EMPTY_PATH
 0x1000

	)

154 
	#AT_EACCESS
 0x200

	)

163 
f˙é
 (
__fd
, 
__cmd
, ...);

172 #i‚de‡
__USE_FILE_OFFSET64


173 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

175 #ifde‡
__REDIRECT


176 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

177 
	`__n⁄nuŒ
 ((1));

179 
	#›í
 
›í64


	)

182 #ifde‡
__USE_LARGEFILE64


183 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

186 #ifde‡
__USE_ATFILE


196 #i‚de‡
__USE_FILE_OFFSET64


197 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

198 
	`__n⁄nuŒ
 ((2));

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

202 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

204 
	#›í©
 
›í©64


	)

207 #ifde‡
__USE_LARGEFILE64


208 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

209 
	`__n⁄nuŒ
 ((2));

218 #i‚de‡
__USE_FILE_OFFSET64


219 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__REDIRECT


222 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

223 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

225 
	#¸ót
 
¸ót64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

232 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

233 && !
deföed
 
__USE_POSIX
))

242 
	#F_ULOCK
 0

	)

243 
	#F_LOCK
 1

	)

244 
	#F_TLOCK
 2

	)

245 
	#F_TEST
 3

	)

247 #i‚de‡
__USE_FILE_OFFSET64


248 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

250 #ifde‡
__REDIRECT


251 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

253 
	#lockf
 
lockf64


	)

256 #ifde‡
__USE_LARGEFILE64


257 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

261 #ifde‡
__USE_XOPEN2K


264 #i‚de‡
__USE_FILE_OFFSET64


265 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

266 
__advi£
Ë
__THROW
;

268 #ifde‡
__REDIRECT_NTH


269 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

270 
__off64_t
 
__Àn
, 
__advi£
),

271 
posix_Ádvi£64
);

273 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

278 
__advi£
Ë
__THROW
;

286 #i‚de‡
__USE_FILE_OFFSET64


287 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

289 #ifde‡
__REDIRECT


290 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

291 
__off64_t
 
__Àn
),

292 
posix_ÁŒoˇã64
);

294 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

297 #ifde‡
__USE_LARGEFILE64


298 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

304 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

305 && 
deföed
 
__va_¨g_∑ck_Àn


306 
	~<bôs/f˙é2.h
>

309 
__END_DECLS


	@/usr/include/getopt.h

20 #i‚de‡
_GETOPT_H


22 #i‚de‡
__√ed_gë›t


23 
	#_GETOPT_H
 1

	)

33 #i‡!
deföed
 
__GNU_LIBRARY__


34 
	~<˘y≥.h
>

37 #i‚de‡
__THROW


38 #i‚de‡
__GNUC_PREREQ


39 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

41 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

42 
	#__THROW
 
	`throw
 ()

	)

44 
	#__THROW


	)

48 #ifdef 
__˝lu•lus


58 *
›èrg
;

72 
›töd
;

77 
›ãº
;

81 
›t›t
;

83 #i‚de‡
__√ed_gë›t


105 
	s›ti⁄


107 c⁄° *
	g«me
;

110 
	ghas_¨g
;

111 *
	gÊag
;

112 
	gvÆ
;

117 
	#no_¨gumít
 0

	)

118 
	#ªquúed_¨gumít
 1

	)

119 
	#›ti⁄Æ_¨gumít
 2

	)

147 #ifde‡
__GNU_LIBRARY__


151 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

152 
__THROW
;

154 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

155 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


159 #ifde‡
__REDIRECT


160 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

161 c⁄° *
__sh‹t›ts
),

162 
__posix_gë›t
);

164 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

165 c⁄° *
__sh‹t›ts
Ë
__THROW
;

166 
	#gë›t
 
__posix_gë›t


	)

170 
gë›t
 ();

173 #i‚de‡
__√ed_gë›t


174 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

175 c⁄° *
__sh‹t›ts
,

176 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

177 
__THROW
;

178 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

179 c⁄° *
__sh‹t›ts
,

180 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

181 
__THROW
;

185 #ifdef 
__˝lu•lus


190 #unde‡
__√ed_gë›t


	@/usr/include/glob.h

19 #i‚def 
_GLOB_H


20 
	#_GLOB_H
 1

	)

22 
	~<sys/cdefs.h
>

24 
	g__BEGIN_DECLS


27 #i‚de‡
__size_t


28 
__SIZE_TYPE__
 
	t__size_t
;

29 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


30 
__SIZE_TYPE__
 
	tsize_t
;

35 #unde‡
__size_t


36 
	#__size_t
 
size_t


	)

40 
	#GLOB_ERR
 (1 << 0)

	)

41 
	#GLOB_MARK
 (1 << 1)

	)

42 
	#GLOB_NOSORT
 (1 << 2)

	)

43 
	#GLOB_DOOFFS
 (1 << 3)

	)

44 
	#GLOB_NOCHECK
 (1 << 4)

	)

45 
	#GLOB_APPEND
 (1 << 5)

	)

46 
	#GLOB_NOESCAPE
 (1 << 6)

	)

47 
	#GLOB_PERIOD
 (1 << 7)

	)

49 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_BSD
 || deföed 
__USE_GNU


50 
	#GLOB_MAGCHAR
 (1 << 8)

	)

51 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

52 
	#GLOB_BRACE
 (1 << 10)

	)

53 
	#GLOB_NOMAGIC
 (1 << 11)

	)

54 
	#GLOB_TILDE
 (1 << 12)

	)

55 
	#GLOB_ONLYDIR
 (1 << 13)

	)

56 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

58 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

59 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

60 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

61 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

63 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

64 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

65 
GLOB_PERIOD
)

	)

69 
	#GLOB_NOSPACE
 1

	)

70 
	#GLOB_ABORTED
 2

	)

71 
	#GLOB_NOMATCH
 3

	)

72 
	#GLOB_NOSYS
 4

	)

73 #ifde‡
__USE_GNU


76 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

80 #ifde‡
__USE_GNU


81 
	g°©
;

85 
__size_t
 
	mgl_∑thc
;

86 **
	mgl_∑thv
;

87 
__size_t
 
	mgl_offs
;

88 
	mgl_Êags
;

92 (*
	mgl_˛o£dú
) (*);

93 #ifde‡
__USE_GNU


94 
	mdúít
 *(*
	mgl_ªaddú
) (*);

96 *(*
	mgl_ªaddú
) (*);

98 *(*
	mgl_›ídú
) (const *);

99 #ifde‡
__USE_GNU


100 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

101 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

103 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

104 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

106 } 
	tglob_t
;

108 #ifde‡
__USE_LARGEFILE64


109 #ifde‡
__USE_GNU


110 
	g°©64
;

114 
__size_t
 
	mgl_∑thc
;

115 **
	mgl_∑thv
;

116 
__size_t
 
	mgl_offs
;

117 
	mgl_Êags
;

121 (*
	mgl_˛o£dú
) (*);

122 #ifde‡
__USE_GNU


123 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

125 *(*
	mgl_ªaddú
) (*);

127 *(*
	mgl_›ídú
) (const *);

128 #ifde‡
__USE_GNU


129 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

130 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

132 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

133 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

135 } 
	tglob64_t
;

146 #i‡!
deföed
 
__USE_FILE_OFFSET64


147 
glob
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

148 (*
__îrfunc
) (const *, ),

149 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

152 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

154 
	`__REDIRECT_NTH
 (
glob
, (c⁄° *
__ª°ri˘
 
__∑âîn
,

155 
__Êags
,

156 (*
__îrfunc
) (const *, ),

157 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

159 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

162 #ifde‡
__USE_LARGEFILE64


163 
	`glob64
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

164 (*
__îrfunc
) (const *, ),

165 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

167 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

171 #ifde‡
__USE_GNU


177 
	$glob_∑âîn_p
 (c⁄° *
__∑âîn
, 
__quŸe
Ë
__THROW
;

180 
__END_DECLS


	@/usr/include/ifaddrs.h

19 #i‚de‡
_IFADDRS_H


20 
	#_IFADDRS_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/sockë.h
>

25 
__BEGIN_DECLS


29 
	siÁddrs


31 
iÁddrs
 *
	miÁ_√xt
;

33 *
	miÁ_«me
;

34 
	miÁ_Êags
;

36 
sockaddr
 *
	miÁ_addr
;

37 
sockaddr
 *
	miÁ_√tmask
;

44 
sockaddr
 *
	mifu_brﬂdaddr
;

45 
sockaddr
 *
	mifu_d°addr
;

46 } 
	miÁ_ifu
;

49 #i‚de‡
iÁ_brﬂdaddr


50 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

52 #i‚de‡
iÁ_d°addr


53 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

56 *
	miÁ_d©a
;

66 
	$gëiÁddrs
 (
iÁddrs
 **
__iÁp
Ë
__THROW
;

69 
	$‰ìiÁddrs
 (
iÁddrs
 *
__iÁ
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/infiniband/arch.h

33 #i‚de‡
INFINIBAND_ARCH_H


34 
	#INFINIBAND_ARCH_H


	)

36 
	~<°döt.h
>

37 
	~<ídün.h
>

38 
	~<byãsw≠.h
>

40 #ifde‡
ht⁄Œ


41 #unde‡
ht⁄Œ


44 #ifde‡
¡ohŒ


45 #unde‡
¡ohŒ


48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
ölöe
 
uöt64_t
 
	$ht⁄Œ
(
uöt64_t
 
x
Ë{  
	`bsw≠_64
(x); 
	}
}

50 
ölöe
 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
Ë{  
	`bsw≠_64
(x); 
	}
}

51 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


52 
ölöe
 
uöt64_t
 
	$ht⁄Œ
(
uöt64_t
 
x
Ë{  x; 
	}
}

53 
ölöe
 
uöt64_t
 
	$¡ohŒ
(
uöt64_t
 
x
Ë{  x; 
	}
}

55 #îr‹ 
__BYTE_ORDER
 
is
 
√ôhî
 
__LITTLE_ENDIAN
 
n‹
 
__BIG_ENDIAN


58 #i‚de‡
htobe64


59 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


60 
	#htobe64
(
x
Ë
	`bsw≠_64
(x)

	)

61 
	#be64toh
(
x
Ë
	`bsw≠_64
(x)

	)

63 
	#htobe64
(
x
Ë((
uöt64_t
)x)

	)

64 
	#be64toh
(
x
Ë((
uöt64_t
)x)

	)

83 #i‡
deföed
(
__i386__
)

85 
	#mb
(Ë
asm
 vﬁ©ûe("lock;ádd»$0,0(%%e•Ë" ::: "mem‹y")

	)

86 
	#rmb
(Ë
	`mb
()

	)

87 
	#wmb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

88 
	#wc_wmb
(Ë
	`mb
()

	)

89 
	#nc_wmb
(Ë
	`wmb
()

	)

91 #ñi‡
deföed
(
__x86_64__
)

93 
	#mb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

94 
	#rmb
(Ë
	`mb
()

	)

95 
	#wmb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

96 
	#wc_wmb
(Ë
asm
 vﬁ©ûe("s„n˚" ::: "mem‹y")

	)

97 
	#nc_wmb
(Ë
	`wmb
()

	)

98 
	#WC_AUTO_EVICT_SIZE
 64

	)

100 #ñi‡
deföed
(
__PPC64__
)

102 
	#mb
(Ë
asm
 vﬁ©ûe("sync" ::: "mem‹y")

	)

103 
	#rmb
(Ë
asm
 vﬁ©ûe("lwsync" ::: "mem‹y")

	)

104 
	#wmb
(Ë
	`mb
()

	)

105 
	#wc_wmb
(Ë
	`mb
()

	)

106 
	#nc_wmb
(Ë
	`mb
()

	)

107 
	#WC_AUTO_EVICT_SIZE
 64

	)

109 #ñi‡
deföed
(
__ü64__
)

111 
	#mb
(Ë
asm
 vﬁ©ûe("mf" ::: "mem‹y")

	)

112 
	#rmb
(Ë
	`mb
()

	)

113 
	#wmb
(Ë
	`mb
()

	)

114 
	#wc_wmb
(Ë
asm
 vﬁ©ûe("fwb" ::: "mem‹y")

	)

115 
	#nc_wmb
(Ë
	`wmb
()

	)

117 #ñi‡
deföed
(
__PPC__
)

119 
	#mb
(Ë
asm
 vﬁ©ûe("sync" ::: "mem‹y")

	)

120 
	#rmb
(Ë
	`mb
()

	)

121 
	#wmb
(Ë
	`mb
()

	)

122 
	#wc_wmb
(Ë
	`wmb
()

	)

123 
	#nc_wmb
(Ë
	`wmb
()

	)

125 #ñi‡
deföed
(
__•¨c_v9__
)

127 
	#mb
(Ë
asm
 vﬁ©ûe("memb¨ #LﬂdLﬂd | #LﬂdSt‹ê| #St‹eSt‹ê| #St‹eLﬂd" ::: "mem‹y")

	)

128 
	#rmb
(Ë
asm
 vﬁ©ûe("memb¨ #LﬂdLﬂd" ::: "mem‹y")

	)

129 
	#wmb
(Ë
asm
 vﬁ©ûe("memb¨ #St‹eSt‹e" ::: "mem‹y")

	)

130 
	#wc_wmb
(Ë
	`wmb
()

	)

131 
	#nc_wmb
(Ë
	`wmb
()

	)

133 #ñi‡
deföed
(
__•¨c__
)

135 
	#mb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

136 
	#rmb
(Ë
	`mb
()

	)

137 
	#wmb
(Ë
	`mb
()

	)

138 
	#wc_wmb
(Ë
	`wmb
()

	)

139 
	#nc_wmb
(Ë
	`wmb
()

	)

141 #ñi‡
deföed
(
__Ørch64__
)

144 
	#mb
(Ë
asm
 vﬁ©ûe("dsb sy" ::: "mem‹y")

	)

145 
	#rmb
(Ë
asm
 vﬁ©ûe("dsbÜd" ::: "mem‹y")

	)

146 
	#wmb
(Ë
asm
 vﬁ©ûe("dsb st" ::: "mem‹y")

	)

147 
	#wc_wmb
(Ë
	`wmb
()

	)

148 
	#nc_wmb
(Ë
	`wmb
()

	)

150 #ñi‡
deföed
(
__s390x__
)

152 
	#mb
(Ë
asm
 vﬁ©ûe("" ::: "mem‹y")

	)

153 
	#rmb
(Ë
	`mb
()

	)

154 
	#wmb
(Ë
	`mb
()

	)

155 
	#wc_wmb
(Ë
	`wmb
()

	)

156 
	#nc_wmb
(Ë
	`wmb
()

	)

160 #îr‹ 
No
 
¨chôe˘uª
 
•ecific
 
mem‹y
 
b¨rõr
 
deföes
 
found
!

164 #i‡
deföed
(
__x86_64__
Ë|| deföed(
__i386__
)

165 
ölöe
 
	$˝u_ªœx
()

167 
__asm__
 
	`__vﬁ©ûe__
("rep;nop":::"memory");

168 
	}
}

169 #ñi‡
deföed
(
__PPC64__
)

170 
ölöe
 
	$˝u_ªœx
()

172 
__asm__
 
	`__vﬁ©ûe__
("or 1,1,1 #ÜowÖriority");

173 
__asm__
 
	`__vﬁ©ûe__
("or 2,2,2 # mediumÖriority");

174 
	`mb
();

175 
	}
}

176 #ñi‡
deföed
(
__PPC__
)

177 
ölöe
 
	$˝u_ªœx
()

179 
	`mb
();

180 
	}
}

182 
ölöe
 
	$˝u_ªœx
()

184 
	}
}

187 #ifde‡
WC_AUTO_EVICT_SIZE


188 
ölöe
 
	$wc_auto_evi˘_size
(Ë{  
WC_AUTO_EVICT_SIZE
; 
	}
};

190 
ölöe
 
	$wc_auto_evi˘_size
(Ë{  0; 
	}
};

	@/usr/include/infiniband/driver.h

35 #i‚de‡
INFINIBAND_DRIVER_H


36 
	#INFINIBAND_DRIVER_H


	)

38 
	~<öföib™d/vîbs.h
>

39 
	~<öföib™d/kîn-abi.h
>

41 #ifde‡
__˝lu•lus


42 
	#BEGIN_C_DECLS
 "C" {

	)

43 
	#END_C_DECLS
 }

	)

45 
	#BEGIN_C_DECLS


	)

46 
	#END_C_DECLS


	)

54 
	#IBV_DEVICE_LIBRARY_EXTENSION
 
rdmav2


	)

56 
	evîbs_xrcd_mask
 {

57 
VERBS_XRCD_HANDLE
 = 1 << 0,

58 
VERBS_XRCD_RESERVED
 = 1 << 1

61 
	svîbs_xrcd
 {

62 
ibv_xrcd
 
	mxrcd
;

63 
uöt32_t
 
	mcomp_mask
;

64 
uöt32_t
 
	mh™dÀ
;

67 
	evîbs_§q_mask
 {

68 
	mVERBS_SRQ_TYPE
 = 1 << 0,

69 
	mVERBS_SRQ_XRCD
 = 1 << 1,

70 
	mVERBS_SRQ_CQ
 = 1 << 2,

71 
	mVERBS_SRQ_NUM
 = 1 << 3,

72 
	mVERBS_SRQ_RESERVED
 = 1 << 4

75 
	svîbs_§q
 {

76 
ibv_§q
 
	m§q
;

77 
uöt32_t
 
	mcomp_mask
;

78 
ibv_§q_ty≥
 
	m§q_ty≥
;

79 
vîbs_xrcd
 *
	mxrcd
;

80 
ibv_cq
 *
	mcq
;

81 
uöt32_t
 
	m§q_num
;

84 
	evîbs_qp_mask
 {

85 
	mVERBS_QP_XRCD
 = 1 << 0,

86 
	mVERBS_QP_RESERVED
 = 1 << 1

89 
	svîbs_qp
 {

90 
ibv_qp
 
	mqp
;

91 
uöt32_t
 
	mcomp_mask
;

92 
vîbs_xrcd
 *
	mxrcd
;

94 
	gibv_devi˚
 *(*
	tibv_drivî_öô_func
)(c⁄° *
	tuvîbs_sys_∑th
,

95 
	tabi_vîsi⁄
);

96 
	gvîbs_devi˚
 *(*
	tvîbs_drivî_öô_func
)(c⁄° *
	tuvîbs_sys_∑th
,

97 
	tabi_vîsi⁄
);

99 
ibv_ªgi°î_drivî
(c⁄° *
«me
, 
ibv_drivî_öô_func
 
öô_func
);

100 
vîbs_ªgi°î_drivî
(c⁄° *
«me
, 
vîbs_drivî_öô_func
 
öô_func
);

101 
ibv_cmd_gë_c⁄ãxt
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_gë_c⁄ãxt
 *
cmd
,

102 
size_t
 
cmd_size
, 
ibv_gë_c⁄ãxt_ª•
 *
ª•
,

103 
size_t
 
ª•_size
);

104 
ibv_cmd_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

105 
ibv_devi˚_©å
 *
devi˚_©å
,

106 
uöt64_t
 *
øw_fw_vî
,

107 
ibv_quîy_devi˚
 *
cmd
, 
size_t
 
cmd_size
);

108 
ibv_cmd_quîy_devi˚_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

109 c⁄° 
ibv_quîy_devi˚_ex_öput
 *
öput
,

110 
ibv_devi˚_©å_ex
 *
©å
, 
size_t
 
©å_size
,

111 
uöt64_t
 *
øw_fw_vî
,

112 
ibv_quîy_devi˚_ex
 *
cmd
,

113 
size_t
 
cmd_c‹e_size
,

114 
size_t
 
cmd_size
,

115 
ibv_quîy_devi˚_ª•_ex
 *
ª•
,

116 
size_t
 
ª•_c‹e_size
,

117 
size_t
 
ª•_size
);

118 
ibv_cmd_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

119 
ibv_p‹t_©å
 *
p‹t_©å
,

120 
ibv_quîy_p‹t
 *
cmd
, 
size_t
 
cmd_size
);

121 
ibv_cmd_quîy_gid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

122 
ödex
, 
ibv_gid
 *
gid
);

123 
ibv_cmd_quîy_pkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

124 
ödex
, 
uöt16_t
 *
pkey
);

125 
ibv_cmd_Æloc_pd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_pd
 *
pd
,

126 
ibv_Æloc_pd
 *
cmd
, 
size_t
 
cmd_size
,

127 
ibv_Æloc_pd_ª•
 *
ª•
, 
size_t
 
ª•_size
);

128 
ibv_cmd_dóŒoc_pd
(
ibv_pd
 *
pd
);

129 
ibv_cmd_›í_xrcd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
vîbs_xrcd
 *
xrcd
,

130 
vxrcd_size
,

131 
ibv_xrcd_öô_©å
 *
©å
,

132 
ibv_›í_xrcd
 *
cmd
, 
size_t
 
cmd_size
,

133 
ibv_›í_xrcd_ª•
 *
ª•
,

134 
size_t
 
ª•_size
);

135 
ibv_cmd_˛o£_xrcd
(
vîbs_xrcd
 *
xrcd
);

136 
	#IBV_CMD_REG_MR_HAS_RESP_PARAMS


	)

137 
ibv_cmd_ªg_mr
(
ibv_pd
 *
pd
, *
addr
, 
size_t
 
Àngth
,

138 
uöt64_t
 
hˇ_va
, 
ac˚ss
,

139 
ibv_mr
 *
mr
, 
ibv_ªg_mr
 *
cmd
,

140 
size_t
 
cmd_size
,

141 
ibv_ªg_mr_ª•
 *
ª•
, 
size_t
 
ª•_size
);

142 
ibv_cmd_ªªg_mr
(
ibv_mr
 *
mr
, 
uöt32_t
 
Êags
, *
addr
,

143 
size_t
 
Àngth
, 
uöt64_t
 
hˇ_va
, 
ac˚ss
,

144 
ibv_pd
 *
pd
, 
ibv_ªªg_mr
 *
cmd
,

145 
size_t
 
cmd_sz
, 
ibv_ªªg_mr_ª•
 *
ª•
,

146 
size_t
 
ª•_sz
);

147 
ibv_cmd_dîeg_mr
(
ibv_mr
 *
mr
);

148 
ibv_cmd_Æloc_mw
(
ibv_pd
 *
pd
, 
ibv_mw_ty≥
 
ty≥
,

149 
ibv_mw
 *
mw
, 
ibv_Æloc_mw
 *
cmd
,

150 
size_t
 
cmd_size
,

151 
ibv_Æloc_mw_ª•
 *
ª•
, 
size_t
 
ª•_size
);

152 
ibv_cmd_dóŒoc_mw
(
ibv_mw
 *
mw
,

153 
ibv_dóŒoc_mw
 *
cmd
, 
size_t
 
cmd_size
);

154 
ibv_cmd_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

155 
ibv_comp_ch™√l
 *
ch™√l
,

156 
comp_ve˘‹
, 
ibv_cq
 *
cq
,

157 
ibv_¸óã_cq
 *
cmd
, 
size_t
 
cmd_size
,

158 
ibv_¸óã_cq_ª•
 *
ª•
, 
size_t
 
ª•_size
);

159 
ibv_cmd_pﬁl_cq
(
ibv_cq
 *
cq
, 
√
, 
ibv_wc
 *
wc
);

160 
ibv_cmd_ªq_nŸify_cq
(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
);

161 
	#IBV_CMD_RESIZE_CQ_HAS_RESP_PARAMS


	)

162 
ibv_cmd_ªsize_cq
(
ibv_cq
 *
cq
, 
cqe
,

163 
ibv_ªsize_cq
 *
cmd
, 
size_t
 
cmd_size
,

164 
ibv_ªsize_cq_ª•
 *
ª•
, 
size_t
 
ª•_size
);

165 
ibv_cmd_de°roy_cq
(
ibv_cq
 *
cq
);

167 
ibv_cmd_¸óã_§q
(
ibv_pd
 *
pd
,

168 
ibv_§q
 *
§q
, 
ibv_§q_öô_©å
 *
©å
,

169 
ibv_¸óã_§q
 *
cmd
, 
size_t
 
cmd_size
,

170 
ibv_¸óã_§q_ª•
 *
ª•
, 
size_t
 
ª•_size
);

171 
ibv_cmd_¸óã_§q_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

172 
vîbs_§q
 *
§q
, 
v§q_sz
,

173 
ibv_§q_öô_©å_ex
 *
©å_ex
,

174 
ibv_¸óã_x§q
 *
cmd
, 
size_t
 
cmd_size
,

175 
ibv_¸óã_§q_ª•
 *
ª•
, 
size_t
 
ª•_size
);

176 
ibv_cmd_modify_§q
(
ibv_§q
 *
§q
,

177 
ibv_§q_©å
 *
§q_©å
,

178 
§q_©å_mask
,

179 
ibv_modify_§q
 *
cmd
, 
size_t
 
cmd_size
);

180 
ibv_cmd_quîy_§q
(
ibv_§q
 *
§q
,

181 
ibv_§q_©å
 *
§q_©å
,

182 
ibv_quîy_§q
 *
cmd
, 
size_t
 
cmd_size
);

183 
ibv_cmd_de°roy_§q
(
ibv_§q
 *
§q
);

185 
ibv_cmd_¸óã_qp
(
ibv_pd
 *
pd
,

186 
ibv_qp
 *
qp
, 
ibv_qp_öô_©å
 *
©å
,

187 
ibv_¸óã_qp
 *
cmd
, 
size_t
 
cmd_size
,

188 
ibv_¸óã_qp_ª•
 *
ª•
, 
size_t
 
ª•_size
);

189 
ibv_cmd_›í_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

190 
vîbs_qp
 *
qp
, 
vqp_sz
,

191 
ibv_qp_›í_©å
 *
©å
,

192 
ibv_›í_qp
 *
cmd
, 
size_t
 
cmd_size
,

193 
ibv_¸óã_qp_ª•
 *
ª•
, 
size_t
 
ª•_size
);

194 
ibv_cmd_quîy_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
qp_©å
,

195 
©å_mask
,

196 
ibv_qp_öô_©å
 *
qp_öô_©å
,

197 
ibv_quîy_qp
 *
cmd
, 
size_t
 
cmd_size
);

198 
ibv_cmd_modify_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

199 
©å_mask
,

200 
ibv_modify_qp
 *
cmd
, 
size_t
 
cmd_size
);

201 
ibv_cmd_de°roy_qp
(
ibv_qp
 *
qp
);

202 
ibv_cmd_po°_£nd
(
ibv_qp
 *
ibqp
, 
ibv_£nd_wr
 *
wr
,

203 
ibv_£nd_wr
 **
bad_wr
);

204 
ibv_cmd_po°_ªcv
(
ibv_qp
 *
ibqp
, 
ibv_ªcv_wr
 *
wr
,

205 
ibv_ªcv_wr
 **
bad_wr
);

206 
ibv_cmd_po°_§q_ªcv
(
ibv_§q
 *
§q
, 
ibv_ªcv_wr
 *
wr
,

207 
ibv_ªcv_wr
 **
bad_wr
);

208 
ibv_cmd_¸óã_ah
(
ibv_pd
 *
pd
, 
ibv_ah
 *
ah
,

209 
ibv_ah_©å
 *
©å
,

210 
ibv_¸óã_ah_ª•
 *
ª•
,

211 
size_t
 
ª•_size
);

212 
ibv_cmd_de°roy_ah
(
ibv_ah
 *
ah
);

213 
ibv_cmd_©èch_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

214 
ibv_cmd_dëach_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

216 
ibv_exp_Êow
 *
ibv_exp_cmd_¸óã_Êow
(
ibv_qp
 *
qp
,

217 
ibv_exp_Êow_©å
 *
Êow_©å
);

218 
ibv_exp_cmd_de°roy_Êow
(
ibv_exp_Êow
 *
Êow_id
);

219 
ibv_Êow
 *
ibv_cmd_¸óã_Êow
(
ibv_qp
 *
qp
,

220 
ibv_Êow_©å
 *
Êow_©å
);

221 
ibv_cmd_de°roy_Êow
(
ibv_Êow
 *
Êow_id
);

223 
ibv_d⁄tf‹k_ønge
(*
ba£
, 
size_t
 
size
);

224 
ibv_dof‹k_ønge
(*
ba£
, 
size_t
 
size
);

226 
c›y_quîy_dev_fõlds
(
ibv_devi˚_©å
 *
devi˚_©å
,

227 
ibv_quîy_devi˚_ª•
 *
ª•
,

228 
uöt64_t
 *
øw_fw_vî
);

232 c⁄° *
ibv_gë_sysfs_∑th
();

234 
ibv_ªad_sysfs_fûe
(c⁄° *
dú
, c⁄° *
fûe
,

235 *
buf
, 
size_t
 
size
);

237 
ölöe
 
	$vîbs_gë_§q_num
(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
)

239 
vîbs_§q
 *
v§q
 = 
	`c⁄èöî_of
(
§q
, verbs_srq, srq);

240 i‡(
v§q
->
comp_mask
 & 
VERBS_SRQ_NUM
) {

241 *
§q_num
 = 
v§q
->srq_num;

244  
ENOSYS
;

245 
	}
}

	@/usr/include/infiniband/driver_exp.h

35 #i‚de‡
INFINIBAND_DRIVER_EXP_H


36 
	#INFINIBAND_DRIVER_EXP_H


	)

38 
	~<öföib™d/vîbs_exp.h
>

39 
	~<öföib™d/drivî.h
>

40 
	~<öföib™d/kîn-abi_exp.h
>

42 
ibv_exp_cmd_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

43 
ibv_exp_devi˚_©å
 *
devi˚_©å
,

44 
uöt64_t
 *
øw_fw_vî
,

45 
ibv_exp_quîy_devi˚
 *
cmd
, 
size_t
 
cmd_size
);

46 
ibv_exp_cmd_¸óã_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

47 
vîbs_qp
 *
qp
, 
vqp_sz
,

48 
ibv_exp_qp_öô_©å
 *
©å_exp
,

49 *
cmd_buf
, 
size_t
 
lib_cmd_size
, size_à
drv_cmd_size
,

50 *
ª•_buf
, 
size_t
 
lib_ª•_size
, size_à
drv_ª•_size
,

51 
f‹˚_exp
);

52 
ibv_exp_cmd_¸óã_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

53 
ibv_exp_d˘
 *
d˘
,

54 
ibv_exp_d˘_öô_©å
 *
©å
,

55 
ibv_exp_¸óã_d˘
 *
cmd
,

56 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

57 
ibv_exp_¸óã_d˘_ª•
 *
ª•
,

58 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

59 
ibv_exp_cmd_de°roy_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

60 
ibv_exp_d˘
 *
d˘
,

61 
ibv_exp_de°roy_d˘
 *
cmd
,

62 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

63 
ibv_exp_de°roy_d˘_ª•
 *
ª•
,

64 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

65 
ibv_exp_cmd_quîy_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

66 
ibv_exp_quîy_d˘
 *
cmd
,

67 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

68 
ibv_exp_quîy_d˘_ª•
 *
ª•
,

69 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
,

70 
ibv_exp_d˘_©å
 *
©å
);

71 
ibv_exp_cmd_¨m_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

72 
ibv_exp_¨m_©å
 *
©å
,

73 
ibv_exp_¨m_d˘
 *
cmd
,

74 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

75 
ibv_exp_¨m_d˘_ª•
 *
ª•
,

76 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

77 
ibv_exp_cmd_modify_cq
(
ibv_cq
 *
cq
,

78 
ibv_exp_cq_©å
 *
©å
,

79 
©å_mask
,

80 
ibv_exp_modify_cq
 *
cmd
, 
size_t
 
cmd_size
);

81 
ibv_exp_cmd_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

82 
ibv_comp_ch™√l
 *
ch™√l
,

83 
comp_ve˘‹
, 
ibv_cq
 *
cq
,

84 
ibv_exp_¸óã_cq
 *
cmd
, 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

85 
ibv_¸óã_cq_ª•
 *
ª•
, 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
,

86 
ibv_exp_cq_öô_©å
 *
©å
);

87 
ibv_exp_cmd_modify_qp
(
ibv_qp
 *
qp
, 
ibv_exp_qp_©å
 *
©å
,

88 
uöt64_t
 
©å_mask
, 
ibv_exp_modify_qp
 *
cmd
,

89 
size_t
 
cmd_size
);

90 
ibv_exp_cmd_¸óã_mr
(
ibv_exp_¸óã_mr_ö
 *
ö
, 
ibv_mr
 *
mr
,

91 
ibv_exp_¸óã_mr
 *
cmd
, 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

92 
ibv_exp_¸óã_mr_ª•
 *
ª•
, 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

93 
ibv_exp_cmd_quîy_mkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

94 
ibv_mr
 *
mr
,

95 
ibv_exp_mkey_©å
 *
mkey_©å
,

96 
ibv_exp_quîy_mkey
 *
cmd
, 
size_t
 
lib_cmd_sz
, size_à
drv_cmd_sz
,

97 
ibv_exp_quîy_mkey_ª•
 *
ª•
, 
size_t
 
lib_ª•_sz
, size_à
drv_ª•_sz
);

98 
ibv_cmd_exp_ªg_mr
(c⁄° 
ibv_exp_ªg_mr_ö
 *
mr_öô_©å
,

99 
uöt64_t
 
hˇ_va
, 
ibv_mr
 *
mr
,

100 
ibv_exp_ªg_mr
 *
cmd
,

101 
size_t
 
cmd_size
,

102 
ibv_exp_ªg_mr_ª•
 *
ª•
,

103 
size_t
 
ª•_size
);

104 
ibv_cmd_exp_¥e„tch_mr
(
ibv_mr
 *
mr
,

105 
ibv_exp_¥e„tch_©å
 *
©å
);

106 
ibv_exp_cmd_¸óã_wq
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

107 
ibv_exp_wq_öô_©å
 *
wq_öô_©å
,

108 
ibv_exp_wq
 *
wq
,

109 
ibv_exp_¸óã_wq
 *
cmd
,

110 
size_t
 
cmd_c‹e_size
,

111 
size_t
 
cmd_size
,

112 
ibv_exp_¸óã_wq_ª•
 *
ª•
,

113 
size_t
 
ª•_c‹e_size
,

114 
size_t
 
ª•_size
);

115 
ibv_exp_cmd_de°roy_wq
(
ibv_exp_wq
 *
wq
);

116 
ibv_exp_cmd_modify_wq
(
ibv_exp_wq
 *
wq
, 
ibv_exp_wq_©å
 *
©å
,

117 
ib_exp_modify_wq
 *
cmd
, 
size_t
 
cmd_size
);

118 
ibv_exp_cmd_¸óã_rwq_öd_èbÀ
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

119 
ibv_exp_rwq_öd_èbÀ_öô_©å
 *
öô_©å
,

120 
ibv_exp_rwq_öd_èbÀ
 *
rwq_öd_èbÀ
,

121 
ibv_exp_¸óã_rwq_öd_èbÀ
 *
cmd
,

122 
size_t
 
cmd_c‹e_size
,

123 
size_t
 
cmd_size
,

124 
ibv_exp_¸óã_rwq_öd_èbÀ_ª•
 *
ª•
,

125 
size_t
 
ª•_c‹e_size
,

126 
size_t
 
ª•_size
);

127 
ibv_exp_cmd_de°roy_rwq_öd_èbÀ
(
ibv_exp_rwq_öd_èbÀ
 *
rwq_öd_èbÀ
);

128 
ibv_exp_cmd_¸óã_§q
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
vîbs_§q
 *
§q
,

129 
ibv_exp_¸óã_§q_©å
 *
©å
,

130 
ibv_exp_¸óã_§q
 *
cmd
,

131 
size_t
 
cmd_c‹e_size
, size_à
cmd_size
,

132 
ibv_exp_¸óã_§q_ª•
 *
ª•
,

133 
size_t
 
ª•_c‹e_size
, size_à
ª•_size
);

146 
ibv_exp_cmd_gëív
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

147 c⁄° *
«me
, *
vÆue
, 
size_t
 
n
);

149 
ibv_exp_cmd_£t_c⁄ãxt_©å
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

150 
ibv_exp_›í_devi˚_©å
 *
©å
,

151 
ibv_exp_cmd_£t_c⁄ãxt_©å
 *
cmd
,

152 
size_t
 
cmd_size
);

153 
ibv_exp_cmd_Æloc_dm
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

154 
ibv_exp_Æloc_dm_©å
 *
©å
,

155 
ibv_exp_dm
 *
dm
, *
°¨t_addr
,

156 
ibv_exp_Æloc_dm
 *
cmd
,

157 
size_t
 
cmd_c‹e_size
,

158 
size_t
 
cmd_size
,

159 
ibv_exp_Æloc_dm_ª•
 *
ª•
,

160 
size_t
 
ª•_c‹e_size
,

161 
size_t
 
ª•_size
);

162 
ibv_exp_cmd_‰ì_dm
(
ibv_exp_dm
 *
dm
);

	@/usr/include/infiniband/kern-abi.h

35 #i‚de‡
KERN_ABI_H


36 
	#KERN_ABI_H


	)

38 
	~<löux/ty≥s.h
>

48 
	#IB_USER_VERBS_MIN_ABI_VERSION
 3

	)

49 
	#IB_USER_VERBS_MAX_ABI_VERSION
 6

	)

51 
	#IB_USER_VERBS_CMD_THRESHOLD
 50

	)

54 
	mIB_USER_VERBS_CMD_GET_CONTEXT
,

55 
	mIB_USER_VERBS_CMD_QUERY_DEVICE
,

56 
	mIB_USER_VERBS_CMD_QUERY_PORT
,

57 
	mIB_USER_VERBS_CMD_ALLOC_PD
,

58 
	mIB_USER_VERBS_CMD_DEALLOC_PD
,

59 
	mIB_USER_VERBS_CMD_CREATE_AH
,

60 
	mIB_USER_VERBS_CMD_MODIFY_AH
,

61 
	mIB_USER_VERBS_CMD_QUERY_AH
,

62 
	mIB_USER_VERBS_CMD_DESTROY_AH
,

63 
	mIB_USER_VERBS_CMD_REG_MR
,

64 
	mIB_USER_VERBS_CMD_REG_SMR
,

65 
	mIB_USER_VERBS_CMD_REREG_MR
,

66 
	mIB_USER_VERBS_CMD_QUERY_MR
,

67 
	mIB_USER_VERBS_CMD_DEREG_MR
,

68 
	mIB_USER_VERBS_CMD_ALLOC_MW
,

69 
	mIB_USER_VERBS_CMD_BIND_MW
,

70 
	mIB_USER_VERBS_CMD_DEALLOC_MW
,

71 
	mIB_USER_VERBS_CMD_CREATE_COMP_CHANNEL
,

72 
	mIB_USER_VERBS_CMD_CREATE_CQ
,

73 
	mIB_USER_VERBS_CMD_RESIZE_CQ
,

74 
	mIB_USER_VERBS_CMD_DESTROY_CQ
,

75 
	mIB_USER_VERBS_CMD_POLL_CQ
,

76 
	mIB_USER_VERBS_CMD_PEEK_CQ
,

77 
	mIB_USER_VERBS_CMD_REQ_NOTIFY_CQ
,

78 
	mIB_USER_VERBS_CMD_CREATE_QP
,

79 
	mIB_USER_VERBS_CMD_QUERY_QP
,

80 
	mIB_USER_VERBS_CMD_MODIFY_QP
,

81 
	mIB_USER_VERBS_CMD_DESTROY_QP
,

82 
	mIB_USER_VERBS_CMD_POST_SEND
,

83 
	mIB_USER_VERBS_CMD_POST_RECV
,

84 
	mIB_USER_VERBS_CMD_ATTACH_MCAST
,

85 
	mIB_USER_VERBS_CMD_DETACH_MCAST
,

86 
	mIB_USER_VERBS_CMD_CREATE_SRQ
,

87 
	mIB_USER_VERBS_CMD_MODIFY_SRQ
,

88 
	mIB_USER_VERBS_CMD_QUERY_SRQ
,

89 
	mIB_USER_VERBS_CMD_DESTROY_SRQ
,

90 
	mIB_USER_VERBS_CMD_POST_SRQ_RECV
,

91 
	mIB_USER_VERBS_CMD_OPEN_XRCD
,

92 
	mIB_USER_VERBS_CMD_CLOSE_XRCD
,

93 
	mIB_USER_VERBS_CMD_CREATE_XSRQ
,

94 
	mIB_USER_VERBS_CMD_OPEN_QP
,

98 
	#IB_USER_VERBS_CMD_COMMAND_MASK
 0xff

	)

99 
	#IB_USER_VERBS_CMD_FLAGS_MASK
 0xff000000u

	)

100 
	#IB_USER_VERBS_CMD_FLAGS_SHIFT
 24

	)

103 
	#IB_USER_VERBS_CMD_FLAG_EXTENDED
 0x80ul

	)

106 
	#IB_USER_VERBS_CMD_EXTENDED_MASK
 \

107 (
IB_USER_VERBS_CMD_FLAG_EXTENDED
 << \

108 
IB_USER_VERBS_CMD_FLAGS_SHIFT
)

	)

112 
	mIB_USER_VERBS_CMD_QUERY_DEVICE_EX
 = 
IB_USER_VERBS_CMD_EXTENDED_MASK
 |

113 
IB_USER_VERBS_CMD_QUERY_DEVICE
,

114 
	mIB_USER_VERBS_CMD_CREATE_FLOW
 = 
IB_USER_VERBS_CMD_EXTENDED_MASK
 +

115 
IB_USER_VERBS_CMD_THRESHOLD
,

116 
	mIB_USER_VERBS_CMD_DESTROY_FLOW


130 
	shdr
 {

131 
__u32
 
	mcomm™d
;

132 
__u16
 
	mö_w‹ds
;

133 
__u16
 
	mout_w‹ds
;

136 
	sª•⁄£_hdr
 {

137 
__u64
 
	mª•⁄£
;

140 
	sex_hdr
 {

142 
__u32
 
	mcomm™d
;

143 
__u16
 
	mö_w‹ds
;

144 
__u16
 
	mout_w‹ds
;

147 
__u64
 
	mª•⁄£
;

150 
__u16
 
	m¥ovidî_ö_w‹ds
;

151 
__u16
 
	m¥ovidî_out_w‹ds
;

152 
__u32
 
	mª£rved
;

156 
	sibv_kîn_async_evít
 {

157 
__u64
 
	mñemít
;

158 
__u32
 
	mevít_ty≥
;

159 
__u32
 
	mª£rved
;

162 
	sibv_comp_evít
 {

163 
__u64
 
	mcq_h™dÀ
;

174 
	#IBV_RESP_TO_VERBS_RESP_EX_RAW
(
ex_±r
, 
ex_ty≥
, 
ibv_ty≥
, 
fõld
) \

175 ((
ibv_ty≥
 *)((*)(
ex_±r
Ë+ 
	`off£tof
(
ex_ty≥
, \

176 
fõld
Ë+ ((
ex_±r
)->fõld)))

	)

178 
	#IBV_RESP_TO_VERBS_RESP_EX
(
ex_±r
, 
ex_ty≥
, 
ibv_ty≥
) \

179 
	`IBV_RESP_TO_VERBS_RESP_EX_RAW
(
ex_±r
, 
ex_ty≥
, 
ibv_ty≥
, 
comp_mask
)

	)

181 
	sibv_quîy_∑øms
 {

182 
__u32
 
	mcomm™d
;

183 
__u16
 
	mö_w‹ds
;

184 
__u16
 
	mout_w‹ds
;

185 
__u64
 
	mª•⁄£
;

188 
	sibv_quîy_∑øms_ª•
 {

189 
__u32
 
	mnum_cq_evíts
;

192 
	sibv_gë_c⁄ãxt
 {

193 
__u32
 
	mcomm™d
;

194 
__u16
 
	mö_w‹ds
;

195 
__u16
 
	mout_w‹ds
;

196 
__u64
 
	mª•⁄£
;

197 
__u64
 
	mdrivî_d©a
[0];

200 
	sibv_gë_c⁄ãxt_ª•
 {

201 
__u32
 
	masync_fd
;

202 
__u32
 
	mnum_comp_ve˘‹s
;

205 
	sibv_quîy_devi˚
 {

206 
__u32
 
	mcomm™d
;

207 
__u16
 
	mö_w‹ds
;

208 
__u16
 
	mout_w‹ds
;

209 
__u64
 
	mª•⁄£
;

210 
__u64
 
	mdrivî_d©a
[0];

213 
	sibv_quîy_devi˚_ª•
 {

214 
__u64
 
	mfw_vî
;

215 
__u64
 
	mnode_guid
;

216 
__u64
 
	msys_image_guid
;

217 
__u64
 
	mmax_mr_size
;

218 
__u64
 
	m∑ge_size_ˇp
;

219 
__u32
 
	mvíd‹_id
;

220 
__u32
 
	mvíd‹_∑π_id
;

221 
__u32
 
	mhw_vî
;

222 
__u32
 
	mmax_qp
;

223 
__u32
 
	mmax_qp_wr
;

224 
__u32
 
	mdevi˚_ˇp_Êags
;

225 
__u32
 
	mmax_sge
;

226 
__u32
 
	mmax_sge_rd
;

227 
__u32
 
	mmax_cq
;

228 
__u32
 
	mmax_cqe
;

229 
__u32
 
	mmax_mr
;

230 
__u32
 
	mmax_pd
;

231 
__u32
 
	mmax_qp_rd_©om
;

232 
__u32
 
	mmax_ì_rd_©om
;

233 
__u32
 
	mmax_ªs_rd_©om
;

234 
__u32
 
	mmax_qp_öô_rd_©om
;

235 
__u32
 
	mmax_ì_öô_rd_©om
;

236 
__u32
 
	m©omic_ˇp
;

237 
__u32
 
	mmax_ì
;

238 
__u32
 
	mmax_rdd
;

239 
__u32
 
	mmax_mw
;

240 
__u32
 
	mmax_øw_ùv6_qp
;

241 
__u32
 
	mmax_øw_ëhy_qp
;

242 
__u32
 
	mmax_mˇ°_gΩ
;

243 
__u32
 
	mmax_mˇ°_qp_©èch
;

244 
__u32
 
	mmax_tŸÆ_mˇ°_qp_©èch
;

245 
__u32
 
	mmax_ah
;

246 
__u32
 
	mmax_fmr
;

247 
__u32
 
	mmax_m≠_≥r_fmr
;

248 
__u32
 
	mmax_§q
;

249 
__u32
 
	mmax_§q_wr
;

250 
__u32
 
	mmax_§q_sge
;

251 
__u16
 
	mmax_pkeys
;

252 
__u8
 
	mloˇl_ˇ_ack_dñay
;

253 
__u8
 
	mphys_p‹t_˙t
;

254 
__u8
 
	mª£rved
[4];

257 
	sibv_quîy_devi˚_ex
 {

258 
ex_hdr
 
	mhdr
;

259 
__u32
 
	mcomp_mask
;

260 
__u32
 
	mª£rved
;

263 
	sibv_odp_ˇps_ª•
 {

264 
__u64
 
	mgíîÆ_ˇps
;

266 
__u32
 
	mrc_odp_ˇps
;

267 
__u32
 
	muc_odp_ˇps
;

268 
__u32
 
	mud_odp_ˇps
;

269 } 
	m≥r_å™•‹t_ˇps
;

270 
__u32
 
	mª£rved
;

273 
	sibv_quîy_devi˚_ª•_ex
 {

274 
ibv_quîy_devi˚_ª•
 
	mba£
;

275 
__u32
 
	mcomp_mask
;

276 
__u32
 
	mª•⁄£_Àngth
;

277 
ibv_odp_ˇps_ª•
 
	modp_ˇps
;

280 
	sibv_quîy_p‹t
 {

281 
__u32
 
	mcomm™d
;

282 
__u16
 
	mö_w‹ds
;

283 
__u16
 
	mout_w‹ds
;

284 
__u64
 
	mª•⁄£
;

285 
__u8
 
	mp‹t_num
;

286 
__u8
 
	mª£rved
[7];

287 
__u64
 
	mdrivî_d©a
[0];

290 
	sibv_quîy_p‹t_ª•
 {

291 
__u32
 
	mp‹t_ˇp_Êags
;

292 
__u32
 
	mmax_msg_sz
;

293 
__u32
 
	mbad_pkey_˙å
;

294 
__u32
 
	mqkey_viﬁ_˙å
;

295 
__u32
 
	mgid_tbl_Àn
;

296 
__u16
 
	mpkey_tbl_Àn
;

297 
__u16
 
	mlid
;

298 
__u16
 
	msm_lid
;

299 
__u8
 
	m°©e
;

300 
__u8
 
	mmax_mtu
;

301 
__u8
 
	ma˘ive_mtu
;

302 
__u8
 
	mlmc
;

303 
__u8
 
	mmax_vl_num
;

304 
__u8
 
	msm_¶
;

305 
__u8
 
	msub√t_timeout
;

306 
__u8
 
	möô_ty≥_ª∂y
;

307 
__u8
 
	ma˘ive_width
;

308 
__u8
 
	ma˘ive_•ìd
;

309 
__u8
 
	mphys_°©e
;

310 
__u8
 
	mlök_œyî
;

311 
__u8
 
	mª£rved
[2];

314 
	sibv_Æloc_pd
 {

315 
__u32
 
	mcomm™d
;

316 
__u16
 
	mö_w‹ds
;

317 
__u16
 
	mout_w‹ds
;

318 
__u64
 
	mª•⁄£
;

319 
__u64
 
	mdrivî_d©a
[0];

322 
	sibv_Æloc_pd_ª•
 {

323 
__u32
 
	mpd_h™dÀ
;

326 
	sibv_dóŒoc_pd
 {

327 
__u32
 
	mcomm™d
;

328 
__u16
 
	mö_w‹ds
;

329 
__u16
 
	mout_w‹ds
;

330 
__u32
 
	mpd_h™dÀ
;

333 
	sibv_›í_xrcd
 {

334 
__u32
 
	mcomm™d
;

335 
__u16
 
	mö_w‹ds
;

336 
__u16
 
	mout_w‹ds
;

337 
__u64
 
	mª•⁄£
;

338 
__u32
 
	mfd
;

339 
__u32
 
	moÊags
;

340 
__u64
 
	mdrivî_d©a
[0];

343 
	sibv_›í_xrcd_ª•
 {

344 
__u32
 
	mxrcd_h™dÀ
;

347 
	sibv_˛o£_xrcd
 {

348 
__u32
 
	mcomm™d
;

349 
__u16
 
	mö_w‹ds
;

350 
__u16
 
	mout_w‹ds
;

351 
__u32
 
	mxrcd_h™dÀ
;

354 
	sibv_ªg_mr
 {

355 
__u32
 
	mcomm™d
;

356 
__u16
 
	mö_w‹ds
;

357 
__u16
 
	mout_w‹ds
;

358 
__u64
 
	mª•⁄£
;

359 
__u64
 
	m°¨t
;

360 
__u64
 
	mÀngth
;

361 
__u64
 
	mhˇ_va
;

362 
__u32
 
	mpd_h™dÀ
;

363 
__u32
 
	mac˚ss_Êags
;

364 
__u64
 
	mdrivî_d©a
[0];

367 
	sibv_ªg_mr_ª•
 {

368 
__u32
 
	mmr_h™dÀ
;

369 
__u32
 
	mlkey
;

370 
__u32
 
	mrkey
;

373 
	sibv_ªªg_mr
 {

374 
__u32
 
	mcomm™d
;

375 
__u16
 
	mö_w‹ds
;

376 
__u16
 
	mout_w‹ds
;

377 
__u64
 
	mª•⁄£
;

378 
__u32
 
	mmr_h™dÀ
;

379 
__u32
 
	mÊags
;

380 
__u64
 
	m°¨t
;

381 
__u64
 
	mÀngth
;

382 
__u64
 
	mhˇ_va
;

383 
__u32
 
	mpd_h™dÀ
;

384 
__u32
 
	mac˚ss_Êags
;

385 
__u64
 
	mdrivî_d©a
[0];

388 
	sibv_ªªg_mr_ª•
 {

389 
__u32
 
	mlkey
;

390 
__u32
 
	mrkey
;

393 
	sibv_dîeg_mr
 {

394 
__u32
 
	mcomm™d
;

395 
__u16
 
	mö_w‹ds
;

396 
__u16
 
	mout_w‹ds
;

397 
__u32
 
	mmr_h™dÀ
;

400 
	sibv_Æloc_mw
 {

401 
__u32
 
	mcomm™d
;

402 
__u16
 
	mö_w‹ds
;

403 
__u16
 
	mout_w‹ds
;

404 
__u64
 
	mª•⁄£
;

405 
__u32
 
	mpd_h™dÀ
;

406 
__u8
 
	mmw_ty≥
;

407 
__u8
 
	mª£rved
[3];

410 
	sibv_Æloc_mw_ª•
 {

411 
__u32
 
	mmw_h™dÀ
;

412 
__u32
 
	mrkey
;

415 
	sibv_dóŒoc_mw
 {

416 
__u32
 
	mcomm™d
;

417 
__u16
 
	mö_w‹ds
;

418 
__u16
 
	mout_w‹ds
;

419 
__u32
 
	mmw_h™dÀ
;

420 
__u32
 
	mª£rved
;

423 
	sibv_¸óã_comp_ch™√l
 {

424 
__u32
 
	mcomm™d
;

425 
__u16
 
	mö_w‹ds
;

426 
__u16
 
	mout_w‹ds
;

427 
__u64
 
	mª•⁄£
;

430 
	sibv_¸óã_comp_ch™√l_ª•
 {

431 
__u32
 
	mfd
;

434 
	sibv_¸óã_cq
 {

435 
__u32
 
	mcomm™d
;

436 
__u16
 
	mö_w‹ds
;

437 
__u16
 
	mout_w‹ds
;

438 
__u64
 
	mª•⁄£
;

439 
__u64
 
	mu£r_h™dÀ
;

440 
__u32
 
	mcqe
;

441 
__u32
 
	mcomp_ve˘‹
;

442 
__s32
 
	mcomp_ch™√l
;

443 
__u32
 
	mª£rved
;

444 
__u64
 
	mdrivî_d©a
[0];

447 
	sibv_¸óã_cq_ª•
 {

448 
__u32
 
	mcq_h™dÀ
;

449 
__u32
 
	mcqe
;

452 
	sibv_kîn_wc
 {

453 
__u64
 
	mwr_id
;

454 
__u32
 
	m°©us
;

455 
__u32
 
	m›code
;

456 
__u32
 
	mvíd‹_îr
;

457 
__u32
 
	mbyã_Àn
;

458 
__u32
 
	mimm_d©a
;

459 
__u32
 
	mqp_num
;

460 
__u32
 
	m§c_qp
;

461 
__u32
 
	mwc_Êags
;

462 
__u16
 
	mpkey_ödex
;

463 
__u16
 
	m¶id
;

464 
__u8
 
	m¶
;

465 
__u8
 
	mdlid_∑th_bôs
;

466 
__u8
 
	mp‹t_num
;

467 
__u8
 
	mª£rved
;

470 
	sibv_pﬁl_cq
 {

471 
__u32
 
	mcomm™d
;

472 
__u16
 
	mö_w‹ds
;

473 
__u16
 
	mout_w‹ds
;

474 
__u64
 
	mª•⁄£
;

475 
__u32
 
	mcq_h™dÀ
;

476 
__u32
 
	m√
;

479 
	sibv_pﬁl_cq_ª•
 {

480 
__u32
 
	mcou¡
;

481 
__u32
 
	mª£rved
;

482 
ibv_kîn_wc
 
	mwc
[0];

485 
	sibv_ªq_nŸify_cq
 {

486 
__u32
 
	mcomm™d
;

487 
__u16
 
	mö_w‹ds
;

488 
__u16
 
	mout_w‹ds
;

489 
__u32
 
	mcq_h™dÀ
;

490 
__u32
 
	msﬁicôed
;

493 
	sibv_ªsize_cq
 {

494 
__u32
 
	mcomm™d
;

495 
__u16
 
	mö_w‹ds
;

496 
__u16
 
	mout_w‹ds
;

497 
__u64
 
	mª•⁄£
;

498 
__u32
 
	mcq_h™dÀ
;

499 
__u32
 
	mcqe
;

500 
__u64
 
	mdrivî_d©a
[0];

503 
	sibv_ªsize_cq_ª•
 {

504 
__u32
 
	mcqe
;

505 
__u32
 
	mª£rved
;

506 
__u64
 
	mdrivî_d©a
[0];

509 
	sibv_de°roy_cq
 {

510 
__u32
 
	mcomm™d
;

511 
__u16
 
	mö_w‹ds
;

512 
__u16
 
	mout_w‹ds
;

513 
__u64
 
	mª•⁄£
;

514 
__u32
 
	mcq_h™dÀ
;

515 
__u32
 
	mª£rved
;

518 
	sibv_de°roy_cq_ª•
 {

519 
__u32
 
	mcomp_evíts_ªp‹ãd
;

520 
__u32
 
	masync_evíts_ªp‹ãd
;

523 
	sibv_kîn_globÆ_rouã
 {

524 
__u8
 
	mdgid
[16];

525 
__u32
 
	mÊow_œbñ
;

526 
__u8
 
	msgid_ödex
;

527 
__u8
 
	mh›_limô
;

528 
__u8
 
	måaffic_˛ass
;

529 
__u8
 
	mª£rved
;

532 
	sibv_kîn_ah_©å
 {

533 
ibv_kîn_globÆ_rouã
 
	mgrh
;

534 
__u16
 
	mdlid
;

535 
__u8
 
	m¶
;

536 
__u8
 
	m§c_∑th_bôs
;

537 
__u8
 
	m°©ic_øã
;

538 
__u8
 
	mis_globÆ
;

539 
__u8
 
	mp‹t_num
;

540 
__u8
 
	mª£rved
;

543 
	sibv_kîn_qp_©å
 {

544 
__u32
 
	mqp_©å_mask
;

545 
__u32
 
	mqp_°©e
;

546 
__u32
 
	mcur_qp_°©e
;

547 
__u32
 
	m∑th_mtu
;

548 
__u32
 
	m∑th_mig_°©e
;

549 
__u32
 
	mqkey
;

550 
__u32
 
	mrq_p¢
;

551 
__u32
 
	msq_p¢
;

552 
__u32
 
	mde°_qp_num
;

553 
__u32
 
	mqp_ac˚ss_Êags
;

555 
ibv_kîn_ah_©å
 
	mah_©å
;

556 
ibv_kîn_ah_©å
 
	mÆt_ah_©å
;

559 
__u32
 
	mmax_£nd_wr
;

560 
__u32
 
	mmax_ªcv_wr
;

561 
__u32
 
	mmax_£nd_sge
;

562 
__u32
 
	mmax_ªcv_sge
;

563 
__u32
 
	mmax_ölöe_d©a
;

565 
__u16
 
	mpkey_ödex
;

566 
__u16
 
	mÆt_pkey_ödex
;

567 
__u8
 
	mí_sqd_async_nŸify
;

568 
__u8
 
	msq_døöög
;

569 
__u8
 
	mmax_rd_©omic
;

570 
__u8
 
	mmax_de°_rd_©omic
;

571 
__u8
 
	mmö_∫r_timî
;

572 
__u8
 
	mp‹t_num
;

573 
__u8
 
	mtimeout
;

574 
__u8
 
	mªåy_˙t
;

575 
__u8
 
	m∫r_ªåy
;

576 
__u8
 
	mÆt_p‹t_num
;

577 
__u8
 
	mÆt_timeout
;

578 
__u8
 
	mª£rved
[5];

581 
	sibv_¸óã_qp
 {

582 
__u32
 
	mcomm™d
;

583 
__u16
 
	mö_w‹ds
;

584 
__u16
 
	mout_w‹ds
;

585 
__u64
 
	mª•⁄£
;

586 
__u64
 
	mu£r_h™dÀ
;

587 
__u32
 
	mpd_h™dÀ
;

588 
__u32
 
	m£nd_cq_h™dÀ
;

589 
__u32
 
	mªcv_cq_h™dÀ
;

590 
__u32
 
	m§q_h™dÀ
;

591 
__u32
 
	mmax_£nd_wr
;

592 
__u32
 
	mmax_ªcv_wr
;

593 
__u32
 
	mmax_£nd_sge
;

594 
__u32
 
	mmax_ªcv_sge
;

595 
__u32
 
	mmax_ölöe_d©a
;

596 
__u8
 
	msq_sig_Æl
;

597 
__u8
 
	mqp_ty≥
;

598 
__u8
 
	mis_§q
;

599 
__u8
 
	mª£rved
;

600 
__u64
 
	mdrivî_d©a
[0];

603 
	sibv_›í_qp
 {

604 
__u32
 
	mcomm™d
;

605 
__u16
 
	mö_w‹ds
;

606 
__u16
 
	mout_w‹ds
;

607 
__u64
 
	mª•⁄£
;

608 
__u64
 
	mu£r_h™dÀ
;

609 
__u32
 
	mpd_h™dÀ
;

610 
__u32
 
	mq≤
;

611 
__u8
 
	mqp_ty≥
;

612 
__u8
 
	mª£rved
[7];

613 
__u64
 
	mdrivî_d©a
[0];

617 
	sibv_¸óã_qp_ª•
 {

618 
__u32
 
	mqp_h™dÀ
;

619 
__u32
 
	mq≤
;

620 
__u32
 
	mmax_£nd_wr
;

621 
__u32
 
	mmax_ªcv_wr
;

622 
__u32
 
	mmax_£nd_sge
;

623 
__u32
 
	mmax_ªcv_sge
;

624 
__u32
 
	mmax_ölöe_d©a
;

625 
__u32
 
	mª£rved
;

628 
	eibv_¸óã_qp_ex_comp_mask
 {

629 
	mIBV_CREATE_QP_EX_CAP_FLAGS
 = (1ULL << 0)

632 
	sibv_¸óã_qp_ex
 {

633 
__u32
 
	mcomm™d
;

634 
__u16
 
	mö_w‹ds
;

635 
__u16
 
	mout_w‹ds
;

636 
__u16
 
	m¥ovidî_ö_w‹ds
;

637 
__u16
 
	m¥ovidî_out_w‹ds
;

638 
__u32
 
	mcmd_hdr_ª£rved
;

639 
__u64
 
	mcomp_mask
;

640 
__u64
 
	mª•⁄£
;

641 
__u64
 
	mu£r_h™dÀ
;

642 
__u32
 
	mpd_h™dÀ
;

643 
__u32
 
	m£nd_cq_h™dÀ
;

644 
__u32
 
	mªcv_cq_h™dÀ
;

645 
__u32
 
	m§q_h™dÀ
;

646 
__u32
 
	mmax_£nd_wr
;

647 
__u32
 
	mmax_ªcv_wr
;

648 
__u32
 
	mmax_£nd_sge
;

649 
__u32
 
	mmax_ªcv_sge
;

650 
__u32
 
	mmax_ölöe_d©a
;

651 
__u8
 
	msq_sig_Æl
;

652 
__u8
 
	mqp_ty≥
;

653 
__u8
 
	mis_§q
;

654 
__u8
 
	mª£rved
;

655 
__u64
 
	mqp_ˇp_Êags
;

656 
__u64
 
	mdrivî_d©a
[0];

659 
	sibv_¸óã_qp_ª•_ex
 {

660 
__u64
 
	mcomp_mask
;

661 
__u32
 
	mqp_h™dÀ
;

662 
__u32
 
	mq≤
;

663 
__u32
 
	mmax_£nd_wr
;

664 
__u32
 
	mmax_ªcv_wr
;

665 
__u32
 
	mmax_£nd_sge
;

666 
__u32
 
	mmax_ªcv_sge
;

667 
__u32
 
	mmax_ölöe_d©a
;

668 
__u32
 
	mª£rved
;

671 
	sibv_qp_de°
 {

672 
__u8
 
	mdgid
[16];

673 
__u32
 
	mÊow_œbñ
;

674 
__u16
 
	mdlid
;

675 
__u16
 
	mª£rved
;

676 
__u8
 
	msgid_ödex
;

677 
__u8
 
	mh›_limô
;

678 
__u8
 
	måaffic_˛ass
;

679 
__u8
 
	m¶
;

680 
__u8
 
	m§c_∑th_bôs
;

681 
__u8
 
	m°©ic_øã
;

682 
__u8
 
	mis_globÆ
;

683 
__u8
 
	mp‹t_num
;

686 
	sibv_quîy_qp
 {

687 
__u32
 
	mcomm™d
;

688 
__u16
 
	mö_w‹ds
;

689 
__u16
 
	mout_w‹ds
;

690 
__u64
 
	mª•⁄£
;

691 
__u32
 
	mqp_h™dÀ
;

692 
__u32
 
	m©å_mask
;

693 
__u64
 
	mdrivî_d©a
[0];

696 
	sibv_quîy_qp_ª•
 {

697 
ibv_qp_de°
 
	mde°
;

698 
ibv_qp_de°
 
	mÆt_de°
;

699 
__u32
 
	mmax_£nd_wr
;

700 
__u32
 
	mmax_ªcv_wr
;

701 
__u32
 
	mmax_£nd_sge
;

702 
__u32
 
	mmax_ªcv_sge
;

703 
__u32
 
	mmax_ölöe_d©a
;

704 
__u32
 
	mqkey
;

705 
__u32
 
	mrq_p¢
;

706 
__u32
 
	msq_p¢
;

707 
__u32
 
	mde°_qp_num
;

708 
__u32
 
	mqp_ac˚ss_Êags
;

709 
__u16
 
	mpkey_ödex
;

710 
__u16
 
	mÆt_pkey_ödex
;

711 
__u8
 
	mqp_°©e
;

712 
__u8
 
	mcur_qp_°©e
;

713 
__u8
 
	m∑th_mtu
;

714 
__u8
 
	m∑th_mig_°©e
;

715 
__u8
 
	msq_døöög
;

716 
__u8
 
	mmax_rd_©omic
;

717 
__u8
 
	mmax_de°_rd_©omic
;

718 
__u8
 
	mmö_∫r_timî
;

719 
__u8
 
	mp‹t_num
;

720 
__u8
 
	mtimeout
;

721 
__u8
 
	mªåy_˙t
;

722 
__u8
 
	m∫r_ªåy
;

723 
__u8
 
	mÆt_p‹t_num
;

724 
__u8
 
	mÆt_timeout
;

725 
__u8
 
	msq_sig_Æl
;

726 
__u8
 
	mª£rved
[5];

727 
__u64
 
	mdrivî_d©a
[0];

730 
	sibv_modify_qp
 {

731 
__u32
 
	mcomm™d
;

732 
__u16
 
	mö_w‹ds
;

733 
__u16
 
	mout_w‹ds
;

734 
ibv_qp_de°
 
	mde°
;

735 
ibv_qp_de°
 
	mÆt_de°
;

736 
__u32
 
	mqp_h™dÀ
;

737 
__u32
 
	m©å_mask
;

738 
__u32
 
	mqkey
;

739 
__u32
 
	mrq_p¢
;

740 
__u32
 
	msq_p¢
;

741 
__u32
 
	mde°_qp_num
;

742 
__u32
 
	mqp_ac˚ss_Êags
;

743 
__u16
 
	mpkey_ödex
;

744 
__u16
 
	mÆt_pkey_ödex
;

745 
__u8
 
	mqp_°©e
;

746 
__u8
 
	mcur_qp_°©e
;

747 
__u8
 
	m∑th_mtu
;

748 
__u8
 
	m∑th_mig_°©e
;

749 
__u8
 
	mí_sqd_async_nŸify
;

750 
__u8
 
	mmax_rd_©omic
;

751 
__u8
 
	mmax_de°_rd_©omic
;

752 
__u8
 
	mmö_∫r_timî
;

753 
__u8
 
	mp‹t_num
;

754 
__u8
 
	mtimeout
;

755 
__u8
 
	mªåy_˙t
;

756 
__u8
 
	m∫r_ªåy
;

757 
__u8
 
	mÆt_p‹t_num
;

758 
__u8
 
	mÆt_timeout
;

759 
__u8
 
	mª£rved
[2];

760 
__u64
 
	mdrivî_d©a
[0];

763 
	sibv_de°roy_qp
 {

764 
__u32
 
	mcomm™d
;

765 
__u16
 
	mö_w‹ds
;

766 
__u16
 
	mout_w‹ds
;

767 
__u64
 
	mª•⁄£
;

768 
__u32
 
	mqp_h™dÀ
;

769 
__u32
 
	mª£rved
;

772 
	sibv_de°roy_qp_ª•
 {

773 
__u32
 
	mevíts_ªp‹ãd
;

776 
	sibv_kîn_£nd_wr
 {

777 
__u64
 
	mwr_id
;

778 
__u32
 
	mnum_sge
;

779 
__u32
 
	m›code
;

780 
__u32
 
	m£nd_Êags
;

781 
__u32
 
	mimm_d©a
;

784 
__u64
 
	mªmŸe_addr
;

785 
__u32
 
	mrkey
;

786 
__u32
 
	mª£rved
;

787 } 
	mrdma
;

789 
__u64
 
	mªmŸe_addr
;

790 
__u64
 
	mcom∑ª_add
;

791 
__u64
 
	msw≠
;

792 
__u32
 
	mrkey
;

793 
__u32
 
	mª£rved
;

794 } 
	m©omic
;

796 
__u32
 
	mah
;

797 
__u32
 
	mªmŸe_q≤
;

798 
__u32
 
	mªmŸe_qkey
;

799 
__u32
 
	mª£rved
;

800 } 
	mud
;

801 } 
	mwr
;

804 
__u32
 
	mªmŸe_§qn
;

805 } 
	mxrc
;

806 } 
	mqp_ty≥
;

809 
	sibv_kîn_ëh_fûãr
 {

810 
__u8
 
	md°_mac
[6];

811 
__u8
 
	m§c_mac
[6];

812 
__u16
 
	mëhî_ty≥
;

813 
__u16
 
	mvœn_èg
;

816 
	sibv_kîn_•ec_ëh
 {

817 
__u32
 
	mty≥
;

818 
__u16
 
	msize
;

819 
__u16
 
	mª£rved
;

820 
ibv_kîn_ëh_fûãr
 
	mvÆ
;

821 
ibv_kîn_ëh_fûãr
 
	mmask
;

824 
	sibv_kîn_ib_fûãr
 {

825 
__u32
 
	mq≤
;

826 
__u8
 
	md°_gid
[16];

829 
	sibv_kîn_•ec_ib
 {

830 
__u32
 
	mty≥
;

831 
__u16
 
	msize
;

832 
__u16
 
	mª£rved
;

833 
ibv_kîn_ib_fûãr
 
	mvÆ
;

834 
ibv_kîn_ib_fûãr
 
	mmask
;

837 
	sibv_kîn_ùv4_fûãr
 {

838 
__u32
 
	m§c_ù
;

839 
__u32
 
	md°_ù
;

842 
	sibv_kîn_•ec_ùv4
 {

843 
__u32
 
	mty≥
;

844 
__u16
 
	msize
;

845 
__u16
 
	mª£rved
;

846 
ibv_kîn_ùv4_fûãr
 
	mvÆ
;

847 
ibv_kîn_ùv4_fûãr
 
	mmask
;

850 
	sibv_kîn_t˝_udp_fûãr
 {

851 
__u16
 
	md°_p‹t
;

852 
__u16
 
	m§c_p‹t
;

855 
	sibv_kîn_•ec_t˝_udp
 {

856 
__u32
 
	mty≥
;

857 
__u16
 
	msize
;

858 
__u16
 
	mª£rved
;

859 
ibv_kîn_t˝_udp_fûãr
 
	mvÆ
;

860 
ibv_kîn_t˝_udp_fûãr
 
	mmask
;

864 
	sibv_kîn_•ec
 {

867 
__u32
 
	mty≥
;

868 
__u16
 
	msize
;

869 
__u16
 
	mª£rved
;

870 } 
	mhdr
;

871 
ibv_kîn_•ec_ib
 
	mib
;

872 
ibv_kîn_•ec_ëh
 
	mëh
;

873 
ibv_kîn_•ec_ùv4
 
	mùv4
;

874 
ibv_kîn_•ec_t˝_udp
 
	mt˝_udp
;

879 
	sibv_kîn_Êow_©å
 {

880 
__u32
 
	mty≥
;

881 
__u16
 
	msize
;

882 
__u16
 
	m¥i‹ôy
;

883 
__u8
 
	mnum_of_•ecs
;

884 
__u8
 
	mª£rved
[2];

885 
__u8
 
	mp‹t
;

886 
__u32
 
	mÊags
;

893 
	sibv_po°_£nd
 {

894 
__u32
 
	mcomm™d
;

895 
__u16
 
	mö_w‹ds
;

896 
__u16
 
	mout_w‹ds
;

897 
__u64
 
	mª•⁄£
;

898 
__u32
 
	mqp_h™dÀ
;

899 
__u32
 
	mwr_cou¡
;

900 
__u32
 
	msge_cou¡
;

901 
__u32
 
	mwqe_size
;

902 
ibv_kîn_£nd_wr
 
	m£nd_wr
[0];

905 
	sibv_po°_£nd_ª•
 {

906 
__u32
 
	mbad_wr
;

909 
	sibv_kîn_ªcv_wr
 {

910 
__u64
 
	mwr_id
;

911 
__u32
 
	mnum_sge
;

912 
__u32
 
	mª£rved
;

915 
	sibv_po°_ªcv
 {

916 
__u32
 
	mcomm™d
;

917 
__u16
 
	mö_w‹ds
;

918 
__u16
 
	mout_w‹ds
;

919 
__u64
 
	mª•⁄£
;

920 
__u32
 
	mqp_h™dÀ
;

921 
__u32
 
	mwr_cou¡
;

922 
__u32
 
	msge_cou¡
;

923 
__u32
 
	mwqe_size
;

924 
ibv_kîn_ªcv_wr
 
	mªcv_wr
[0];

927 
	sibv_po°_ªcv_ª•
 {

928 
__u32
 
	mbad_wr
;

931 
	sibv_po°_§q_ªcv
 {

932 
__u32
 
	mcomm™d
;

933 
__u16
 
	mö_w‹ds
;

934 
__u16
 
	mout_w‹ds
;

935 
__u64
 
	mª•⁄£
;

936 
__u32
 
	m§q_h™dÀ
;

937 
__u32
 
	mwr_cou¡
;

938 
__u32
 
	msge_cou¡
;

939 
__u32
 
	mwqe_size
;

940 
ibv_kîn_ªcv_wr
 
	mªcv_wr
[0];

943 
	sibv_po°_§q_ªcv_ª•
 {

944 
__u32
 
	mbad_wr
;

947 
	sibv_¸óã_ah
 {

948 
__u32
 
	mcomm™d
;

949 
__u16
 
	mö_w‹ds
;

950 
__u16
 
	mout_w‹ds
;

951 
__u64
 
	mª•⁄£
;

952 
__u64
 
	mu£r_h™dÀ
;

953 
__u32
 
	mpd_h™dÀ
;

954 
__u32
 
	mª£rved
;

955 
ibv_kîn_ah_©å
 
	m©å
;

958 
	sibv_¸óã_ah_ª•
 {

959 
__u32
 
	mh™dÀ
;

962 
	sibv_de°roy_ah
 {

963 
__u32
 
	mcomm™d
;

964 
__u16
 
	mö_w‹ds
;

965 
__u16
 
	mout_w‹ds
;

966 
__u32
 
	mah_h™dÀ
;

969 
	sibv_©èch_mˇ°
 {

970 
__u32
 
	mcomm™d
;

971 
__u16
 
	mö_w‹ds
;

972 
__u16
 
	mout_w‹ds
;

973 
__u8
 
	mgid
[16];

974 
__u32
 
	mqp_h™dÀ
;

975 
__u16
 
	mmlid
;

976 
__u16
 
	mª£rved
;

977 
__u64
 
	mdrivî_d©a
[0];

980 
	sibv_dëach_mˇ°
 {

981 
__u32
 
	mcomm™d
;

982 
__u16
 
	mö_w‹ds
;

983 
__u16
 
	mout_w‹ds
;

984 
__u8
 
	mgid
[16];

985 
__u32
 
	mqp_h™dÀ
;

986 
__u16
 
	mmlid
;

987 
__u16
 
	mª£rved
;

988 
__u64
 
	mdrivî_d©a
[0];

991 
	sibv_¸óã_Êow
 {

992 
ex_hdr
 
	mhdr
;

993 
__u32
 
	mcomp_mask
;

994 
__u32
 
	mqp_h™dÀ
;

995 
ibv_kîn_Êow_©å
 
	mÊow_©å
;

998 
	sibv_¸óã_Êow_ª•
 {

999 
__u32
 
	mcomp_mask
;

1000 
__u32
 
	mÊow_h™dÀ
;

1003 
	sibv_de°roy_Êow
 {

1004 
ex_hdr
 
	mhdr
;

1005 
__u32
 
	mcomp_mask
;

1006 
__u32
 
	mÊow_h™dÀ
;

1009 
	sibv_¸óã_§q
 {

1010 
__u32
 
	mcomm™d
;

1011 
__u16
 
	mö_w‹ds
;

1012 
__u16
 
	mout_w‹ds
;

1013 
__u64
 
	mª•⁄£
;

1014 
__u64
 
	mu£r_h™dÀ
;

1015 
__u32
 
	mpd_h™dÀ
;

1016 
__u32
 
	mmax_wr
;

1017 
__u32
 
	mmax_sge
;

1018 
__u32
 
	m§q_limô
;

1019 
__u64
 
	mdrivî_d©a
[0];

1022 
	sibv_¸óã_x§q
 {

1023 
__u32
 
	mcomm™d
;

1024 
__u16
 
	mö_w‹ds
;

1025 
__u16
 
	mout_w‹ds
;

1026 
__u64
 
	mª•⁄£
;

1027 
__u64
 
	mu£r_h™dÀ
;

1028 
__u32
 
	m§q_ty≥
;

1029 
__u32
 
	mpd_h™dÀ
;

1030 
__u32
 
	mmax_wr
;

1031 
__u32
 
	mmax_sge
;

1032 
__u32
 
	m§q_limô
;

1033 
__u32
 
	mª£rved
;

1034 
__u32
 
	mxrcd_h™dÀ
;

1035 
__u32
 
	mcq_h™dÀ
;

1036 
__u64
 
	mdrivî_d©a
[0];

1039 
	sibv_¸óã_§q_ª•
 {

1040 
__u32
 
	m§q_h™dÀ
;

1041 
__u32
 
	mmax_wr
;

1042 
__u32
 
	mmax_sge
;

1043 
__u32
 
	m§qn
;

1046 
	sibv_modify_§q
 {

1047 
__u32
 
	mcomm™d
;

1048 
__u16
 
	mö_w‹ds
;

1049 
__u16
 
	mout_w‹ds
;

1050 
__u32
 
	m§q_h™dÀ
;

1051 
__u32
 
	m©å_mask
;

1052 
__u32
 
	mmax_wr
;

1053 
__u32
 
	m§q_limô
;

1054 
__u64
 
	mdrivî_d©a
[0];

1057 
	sibv_quîy_§q
 {

1058 
__u32
 
	mcomm™d
;

1059 
__u16
 
	mö_w‹ds
;

1060 
__u16
 
	mout_w‹ds
;

1061 
__u64
 
	mª•⁄£
;

1062 
__u32
 
	m§q_h™dÀ
;

1063 
__u32
 
	mª£rved
;

1064 
__u64
 
	mdrivî_d©a
[0];

1067 
	sibv_quîy_§q_ª•
 {

1068 
__u32
 
	mmax_wr
;

1069 
__u32
 
	mmax_sge
;

1070 
__u32
 
	m§q_limô
;

1071 
__u32
 
	mª£rved
;

1074 
	sibv_de°roy_§q
 {

1075 
__u32
 
	mcomm™d
;

1076 
__u16
 
	mö_w‹ds
;

1077 
__u16
 
	mout_w‹ds
;

1078 
__u64
 
	mª•⁄£
;

1079 
__u32
 
	m§q_h™dÀ
;

1080 
__u32
 
	mª£rved
;

1083 
	sibv_de°roy_§q_ª•
 {

1084 
__u32
 
	mevíts_ªp‹ãd
;

1092 
	mIB_USER_VERBS_CMD_QUERY_PARAMS_V2
,

1093 
	mIB_USER_VERBS_CMD_GET_CONTEXT_V2
,

1094 
	mIB_USER_VERBS_CMD_QUERY_DEVICE_V2
,

1095 
	mIB_USER_VERBS_CMD_QUERY_PORT_V2
,

1096 
	mIB_USER_VERBS_CMD_QUERY_GID_V2
,

1097 
	mIB_USER_VERBS_CMD_QUERY_PKEY_V2
,

1098 
	mIB_USER_VERBS_CMD_ALLOC_PD_V2
,

1099 
	mIB_USER_VERBS_CMD_DEALLOC_PD_V2
,

1100 
	mIB_USER_VERBS_CMD_CREATE_AH_V2
,

1101 
	mIB_USER_VERBS_CMD_MODIFY_AH_V2
,

1102 
	mIB_USER_VERBS_CMD_QUERY_AH_V2
,

1103 
	mIB_USER_VERBS_CMD_DESTROY_AH_V2
,

1104 
	mIB_USER_VERBS_CMD_REG_MR_V2
,

1105 
	mIB_USER_VERBS_CMD_REG_SMR_V2
,

1106 
	mIB_USER_VERBS_CMD_REREG_MR_V2
,

1107 
	mIB_USER_VERBS_CMD_QUERY_MR_V2
,

1108 
	mIB_USER_VERBS_CMD_DEREG_MR_V2
,

1109 
	mIB_USER_VERBS_CMD_ALLOC_MW_V2
,

1110 
	mIB_USER_VERBS_CMD_BIND_MW_V2
,

1111 
	mIB_USER_VERBS_CMD_DEALLOC_MW_V2
,

1112 
	mIB_USER_VERBS_CMD_CREATE_CQ_V2
,

1113 
	mIB_USER_VERBS_CMD_RESIZE_CQ_V2
,

1114 
	mIB_USER_VERBS_CMD_DESTROY_CQ_V2
,

1115 
	mIB_USER_VERBS_CMD_POLL_CQ_V2
,

1116 
	mIB_USER_VERBS_CMD_PEEK_CQ_V2
,

1117 
	mIB_USER_VERBS_CMD_REQ_NOTIFY_CQ_V2
,

1118 
	mIB_USER_VERBS_CMD_CREATE_QP_V2
,

1119 
	mIB_USER_VERBS_CMD_QUERY_QP_V2
,

1120 
	mIB_USER_VERBS_CMD_MODIFY_QP_V2
,

1121 
	mIB_USER_VERBS_CMD_DESTROY_QP_V2
,

1122 
	mIB_USER_VERBS_CMD_POST_SEND_V2
,

1123 
	mIB_USER_VERBS_CMD_POST_RECV_V2
,

1124 
	mIB_USER_VERBS_CMD_ATTACH_MCAST_V2
,

1125 
	mIB_USER_VERBS_CMD_DETACH_MCAST_V2
,

1126 
	mIB_USER_VERBS_CMD_CREATE_SRQ_V2
,

1127 
	mIB_USER_VERBS_CMD_MODIFY_SRQ_V2
,

1128 
	mIB_USER_VERBS_CMD_QUERY_SRQ_V2
,

1129 
	mIB_USER_VERBS_CMD_DESTROY_SRQ_V2
,

1130 
	mIB_USER_VERBS_CMD_POST_SRQ_RECV_V2
,

1135 
	mIB_USER_VERBS_CMD_CREATE_COMP_CHANNEL_V2
 = -1,

1136 
	mIB_USER_VERBS_CMD_CREATE_QP_EX_V2
 = -1,

1137 
	mIB_USER_VERBS_CMD_MODIFY_CQ_EX_V2
 = -1,

1138 
	mIB_USER_VERBS_CMD_CREATE_FLOW_V2
 = -1,

1139 
	mIB_USER_VERBS_CMD_DESTROY_FLOW_V2
 = -1,

1140 
	mIB_USER_VERBS_CMD_OPEN_XRCD_V2
 = -1,

1141 
	mIB_USER_VERBS_CMD_CLOSE_XRCD_V2
 = -1,

1142 
	mIB_USER_VERBS_CMD_CREATE_XSRQ_V2
 = -1,

1143 
	mIB_USER_VERBS_CMD_OPEN_QP_V2
 = -1,

1144 
	mIB_USER_VERBS_CMD_MODIFY_QP_EX_V2
 = -1,

1145 
	mIB_USER_VERBS_CMD_CREATE_CQ_EX_V2
 = -1,

1146 
	mIB_USER_VERBS_CMD_QUERY_DEVICE_EX_V2
 = -1,

1147 
	mIB_USER_VERBS_CMD_CREATE_DCT_V2
 = -1,

1148 
	mIB_USER_VERBS_CMD_DESTROY_DCT_V2
 = -1,

1149 
	mIB_USER_VERBS_CMD_QUERY_DCT_V2
 = -1,

1150 
	mIB_USER_VERBS_CMD_EXP_REG_MR_V2
 = -1,

1151 
	mIB_USER_VERBS_CMD_EXP_PREFETCH_MR_V2
 = -1,

1154 
	sibv_modify_§q_v3
 {

1155 
__u32
 
	mcomm™d
;

1156 
__u16
 
	mö_w‹ds
;

1157 
__u16
 
	mout_w‹ds
;

1158 
__u32
 
	m§q_h™dÀ
;

1159 
__u32
 
	m©å_mask
;

1160 
__u32
 
	mmax_wr
;

1161 
__u32
 
	mmax_sge
;

1162 
__u32
 
	m§q_limô
;

1163 
__u32
 
	mª£rved
;

1164 
__u64
 
	mdrivî_d©a
[0];

1167 
	sibv_¸óã_qp_ª•_v3
 {

1168 
__u32
 
	mqp_h™dÀ
;

1169 
__u32
 
	mq≤
;

1172 
	sibv_¸óã_qp_ª•_v4
 {

1173 
__u32
 
	mqp_h™dÀ
;

1174 
__u32
 
	mq≤
;

1175 
__u32
 
	mmax_£nd_wr
;

1176 
__u32
 
	mmax_ªcv_wr
;

1177 
__u32
 
	mmax_£nd_sge
;

1178 
__u32
 
	mmax_ªcv_sge
;

1179 
__u32
 
	mmax_ölöe_d©a
;

1182 
	sibv_¸óã_§q_ª•_v5
 {

1183 
__u32
 
	m§q_h™dÀ
;

	@/usr/include/infiniband/kern-abi_exp.h

35 #i‚de‡
KERN_ABI_EXP_H


36 
	#KERN_ABI_EXP_H


	)

38 
	~<öföib™d/kîn-abi.h
>

46 
	mIB_USER_VERBS_EXP_CMD_FIRST
 = 64

50 
	mIB_USER_VERBS_EXP_CMD_CREATE_QP
,

51 
	mIB_USER_VERBS_EXP_CMD_MODIFY_CQ
,

52 
	mIB_USER_VERBS_EXP_CMD_MODIFY_QP
,

53 
	mIB_USER_VERBS_EXP_CMD_CREATE_CQ
,

54 
	mIB_USER_VERBS_EXP_CMD_QUERY_DEVICE
,

55 
	mIB_USER_VERBS_EXP_CMD_CREATE_DCT
,

56 
	mIB_USER_VERBS_EXP_CMD_DESTROY_DCT
,

57 
	mIB_USER_VERBS_EXP_CMD_QUERY_DCT
,

58 
	mIB_USER_VERBS_EXP_CMD_ARM_DCT
,

59 
	mIB_USER_VERBS_EXP_CMD_CREATE_MR
,

60 
	mIB_USER_VERBS_EXP_CMD_QUERY_MKEY
,

61 
	mIB_USER_VERBS_EXP_CMD_REG_MR
,

62 
	mIB_USER_VERBS_EXP_CMD_PREFETCH_MR
,

63 
	mIB_USER_VERBS_EXP_CMD_REREG_MR
,

64 
	mIB_USER_VERBS_EXP_CMD_CREATE_WQ
,

65 
	mIB_USER_VERBS_EXP_CMD_MODIFY_WQ
,

66 
	mIB_USER_VERBS_EXP_CMD_DESTROY_WQ
,

67 
	mIB_USER_VERBS_EXP_CMD_CREATE_RWQ_IND_TBL
,

68 
	mIB_USER_VERBS_EXP_CMD_DESTROY_RWQ_IND_TBL
,

69 
	mIB_USER_VERBS_EXP_CMD_CREATE_FLOW
,

70 
	mIB_USER_VERBS_EXP_CMD_SET_CTX_ATTR
,

71 
	mIB_USER_VERBS_EXP_CMD_CREATE_SRQ
,

72 
	mIB_USER_VERBS_EXP_CMD_ALLOC_DM
,

73 
	mIB_USER_VERBS_EXP_CMD_FREE_DM
,

77 
	mIB_USER_VERBS_CMD_EXP_CREATE_WQ
 =

78 
IB_USER_VERBS_EXP_CMD_CREATE_WQ
 +

79 
IB_USER_VERBS_EXP_CMD_FIRST
,

80 
	mIB_USER_VERBS_CMD_EXP_MODIFY_WQ
 =

81 
IB_USER_VERBS_EXP_CMD_MODIFY_WQ
 +

82 
IB_USER_VERBS_EXP_CMD_FIRST
,

83 
	mIB_USER_VERBS_CMD_EXP_DESTROY_WQ
 =

84 
IB_USER_VERBS_EXP_CMD_DESTROY_WQ
 +

85 
IB_USER_VERBS_EXP_CMD_FIRST
,

86 
	mIB_USER_VERBS_CMD_EXP_CREATE_RWQ_IND_TBL
 =

87 
IB_USER_VERBS_EXP_CMD_CREATE_RWQ_IND_TBL
 +

88 
IB_USER_VERBS_EXP_CMD_FIRST
,

89 
	mIB_USER_VERBS_CMD_EXP_DESTROY_RWQ_IND_TBL
 =

90 
IB_USER_VERBS_EXP_CMD_DESTROY_RWQ_IND_TBL
 +

91 
IB_USER_VERBS_EXP_CMD_FIRST
,

92 
	mIB_USER_VERBS_CMD_EXP_SET_CTX_ATTR
 =

93 
IB_USER_VERBS_EXP_CMD_SET_CTX_ATTR
 +

94 
IB_USER_VERBS_EXP_CMD_FIRST
,

95 
	mIB_USER_VERBS_CMD_EXP_CREATE_SRQ
 =

96 
IB_USER_VERBS_EXP_CMD_CREATE_SRQ
 +

97 
IB_USER_VERBS_EXP_CMD_FIRST
,

98 
	mIB_USER_VERBS_CMD_EXP_ALLOC_DM
 =

99 
IB_USER_VERBS_EXP_CMD_ALLOC_DM
 +

100 
IB_USER_VERBS_EXP_CMD_FIRST
,

101 
	mIB_USER_VERBS_CMD_EXP_FREE_DM
 =

102 
IB_USER_VERBS_EXP_CMD_FREE_DM
 +

103 
IB_USER_VERBS_EXP_CMD_FIRST
,

108 
	mIB_USER_VERBS_CMD_EXP_CREATE_WQ_V2
 = -1,

109 
	mIB_USER_VERBS_CMD_EXP_MODIFY_WQ_V2
 = -1,

110 
	mIB_USER_VERBS_CMD_EXP_DESTROY_WQ_V2
 = -1,

111 
	mIB_USER_VERBS_CMD_EXP_CREATE_RWQ_IND_TBL_V2
 = -1,

112 
	mIB_USER_VERBS_CMD_EXP_DESTROY_RWQ_IND_TBL_V2
 = -1,

113 
	mIB_USER_VERBS_CMD_EXP_SET_CTX_ATTR_V2
 = -1,

114 
	mIB_USER_VERBS_CMD_EXP_CREATE_SRQ_V2
 = -1,

115 
	mIB_USER_VERBS_CMD_EXP_ALLOC_DM_V2
 = -1,

116 
	mIB_USER_VERBS_CMD_EXP_FREE_DM_V2
 = -1,

119 
	eibv_exp_¸óã_qp_comp_mask
 {

120 
	mIBV_EXP_CREATE_QP_CAP_FLAGS
 = (1ULL << 0),

121 
	mIBV_EXP_CREATE_QP_INL_RECV
 = (1ULL << 1),

122 
	mIBV_EXP_CREATE_QP_QPG
 = (1ULL << 2),

123 
	mIBV_EXP_CREATE_QP_MAX_INL_KLMS
 = (1ULL << 3)

126 
	sibv_¸óã_qpg_öô_©åib
 {

127 
__u32
 
	mtss_chûd_cou¡
;

128 
__u32
 
	mrss_chûd_cou¡
;

131 
	sibv_¸óã_qpg
 {

132 
__u32
 
	mqpg_ty≥
;

135 
__u32
 
	m∑ª¡_h™dÀ
;

136 
__u32
 
	mª£rved
;

138 
ibv_¸óã_qpg_öô_©åib
 
	m∑ª¡_©åib
;

140 
__u32
 
	mª£rved2
;

143 
	eibv_exp_¸óã_qp_kî√l_Êags
 {

144 
	mIBV_EXP_CREATE_QP_KERNEL_FLAGS
 = 
IBV_EXP_QP_CREATE_CROSS_CHANNEL
 |

145 
IBV_EXP_QP_CREATE_MANAGED_SEND
 |

146 
IBV_EXP_QP_CREATE_MANAGED_RECV
 |

147 
IBV_EXP_QP_CREATE_ATOMIC_BE_REPLY
 |

148 
IBV_EXP_QP_CREATE_RX_END_PADDING
 |

149 
IBV_EXP_QP_CREATE_SCATTER_FCS
 |

150 
IBV_EXP_QP_CREATE_TUNNEL_OFFLOADS
 |

151 
IBV_EXP_QP_CREATE_PACKET_BASED_CREDIT_MODE


154 
	sibv_exp_¸óã_qp
 {

155 
ex_hdr
 
	mhdr
;

156 
__u64
 
	mcomp_mask
;

157 
__u64
 
	mu£r_h™dÀ
;

158 
__u32
 
	mpd_h™dÀ
;

159 
__u32
 
	m£nd_cq_h™dÀ
;

160 
__u32
 
	mªcv_cq_h™dÀ
;

161 
__u32
 
	m§q_h™dÀ
;

162 
__u32
 
	mmax_£nd_wr
;

163 
__u32
 
	mmax_ªcv_wr
;

164 
__u32
 
	mmax_£nd_sge
;

165 
__u32
 
	mmax_ªcv_sge
;

166 
__u32
 
	mmax_ölöe_d©a
;

167 
__u8
 
	msq_sig_Æl
;

168 
__u8
 
	mqp_ty≥
;

169 
__u8
 
	mis_§q
;

170 
__u8
 
	mª£rved
;

171 
__u64
 
	mqp_ˇp_Êags
;

172 
__u32
 
	mmax_öl_ªcv
;

173 
__u32
 
	mª£rved1
;

174 
ibv_¸óã_qpg
 
	mqpg
;

175 
__u64
 
	mmax_öl_£nd_klms
;

177 
__u64
 
	mrx_hash_fõlds_mask
;

178 
__u32
 
	mrwq_öd_tbl_h™dÀ
;

179 
__u8
 
	mrx_hash_fun˘i⁄
;

180 
__u8
 
	mrx_hash_key_Àn
;

181 
__u8
 
	mrx_hash_key
[128];

182 
__u16
 
	mª£rved
;

183 } 
	mrx_hash_öfo
;

184 
__u8
 
	mp‹t_num
;

185 
__u8
 
	mª£rved_2
[7];

186 
__u64
 
	mdrivî_d©a
[0];

189 
	eibv_exp_¸óã_qp_ª•_comp_mask
 {

190 
	mIBV_EXP_CREATE_QP_RESP_INL_RECV
 = (1ULL << 0),

193 
	sibv_exp_¸óã_qp_ª•
 {

194 
__u64
 
	mcomp_mask
;

195 
__u32
 
	mqp_h™dÀ
;

196 
__u32
 
	mq≤
;

197 
__u32
 
	mmax_£nd_wr
;

198 
__u32
 
	mmax_ªcv_wr
;

199 
__u32
 
	mmax_£nd_sge
;

200 
__u32
 
	mmax_ªcv_sge
;

201 
__u32
 
	mmax_ölöe_d©a
;

202 
__u32
 
	mmax_öl_ªcv
;

205 
	sibv_exp_umr_ˇps_ª•
 {

206 
__u32
 
	mmax_klm_li°_size
;

207 
__u32
 
	mmax_£nd_wqe_ölöe_klms
;

208 
__u32
 
	mmax_umr_ªcursi⁄_dïth
;

209 
__u32
 
	mmax_umr_°ride_dimísi⁄
;

212 
	sibv_exp_odp_ˇps_ª•
 {

213 
__u64
 
	mgíîÆ_odp_ˇps
;

215 
__u32
 
	mrc_odp_ˇps
;

216 
__u32
 
	muc_odp_ˇps
;

217 
__u32
 
	mud_odp_ˇps
;

218 
__u32
 
	mdc_odp_ˇps
;

219 
__u32
 
	mxrc_odp_ˇps
;

220 
__u32
 
	møw_ëh_odp_ˇps
;

221 } 
	m≥r_å™•‹t_ˇps
;

224 
	sibv_exp_quîy_devi˚
 {

225 
ex_hdr
 
	mhdr
;

226 
__u64
 
	mcomp_mask
;

227 
__u64
 
	mdrivî_d©a
[0];

230 
	sibv_exp_rx_hash_ˇps_ª•
 {

231 
__u32
 
	mmax_rwq_ödúe˘i⁄_èbÀs
;

232 
__u32
 
	mmax_rwq_ödúe˘i⁄_èbÀ_size
;

233 
__u64
 
	msuµ‹ãd_∑ckë_fõlds
;

234 
__u32
 
	msuµ‹ãd_qps
;

235 
__u8
 
	msuµ‹ãd_hash_fun˘i⁄s
;

236 
__u8
 
	mª£rved
[3];

239 
	sibv_exp_mp_rq_ˇps_ª•
 {

240 
__u32
 
	msuµ‹ãd_qps
;

241 
__u32
 
	mÆlowed_shi·s
;

242 
__u8
 
	mmö_sögÀ_wqe_log_num_of_°rides
;

243 
__u8
 
	mmax_sögÀ_wqe_log_num_of_°rides
;

244 
__u8
 
	mmö_sögÀ_°ride_log_num_of_byãs
;

245 
__u8
 
	mmax_sögÀ_°ride_log_num_of_byãs
;

246 
__u32
 
	mª£rved
;

249 
	sibv_exp_ec_ˇps_ª•
 {

250 
__u32
 
	mmax_ec_d©a_ve˘‹_cou¡
;

251 
__u32
 
	mmax_ec_ˇlc_öÊight_ˇlcs
;

254 
	sibv_exp_masked_©omic_ˇps
 {

255 
__u32
 
	mmax_Á_bô_bound¨y
;

256 
__u32
 
	mlog_max_©omic_ölöe
;

257 
__u64
 
	mmasked_log_©omic_¨g_sizes
;

258 
__u64
 
	mmasked_log_©omic_¨g_sizes_√tw‹k_ídü¬ess
;

261 
	sibv_exp_lso_ˇps_ª•
 {

262 
__u32
 
	mmax_tso
;

263 
__u32
 
	msuµ‹ãd_q±s
;

266 
	sibv_exp_∑ckë_∑cög_ˇps_ª•
 {

267 
__u32
 
	mqp_øã_limô_mö
;

268 
__u32
 
	mqp_øã_limô_max
;

269 
__u32
 
	msuµ‹ãd_q±s
;

270 
__u8
 
	mˇp_Êags
;

271 
__u8
 
	mª£rved
[3];

274 
	sibv_exp_ooo_ˇps_ª•
 {

275 
__u32
 
	mrc_ˇps
;

276 
__u32
 
	mxrc_ˇps
;

277 
__u32
 
	mdc_ˇps
;

278 
__u32
 
	mud_ˇps
;

281 
	sibv_exp_sw_∑rsög_ˇps_ª•
 {

282 
__u32
 
	msw_∑rsög_ofÊﬂds
;

283 
__u32
 
	msuµ‹ãd_q±s
;

286 
	sibv_exp_tm_ˇps_ª•
 {

287 
__u32
 
	mmax_∫dv_hdr_size
;

288 
__u32
 
	mmax_num_ègs
;

289 
__u32
 
	mˇ∑bûôy_Êags
;

290 
__u32
 
	mmax_›s
;

291 
__u32
 
	mmax_sge
;

292 
__u32
 
	mª£rved
;

295 
	sibv_exp_umr_fixed_size_ˇps_ª•
 {

296 
__u64
 
	mmax_ítôy_size
;

299 
	sibv_exp_pci_©omic_ˇps_ª•
 {

300 
__u16
 
	m„tch_add
;

301 
__u16
 
	msw≠
;

302 
__u16
 
	mcom∑ª_sw≠
;

303 
__u16
 
	mª£rved
;

306 
	sibv_exp_quîy_devi˚_ª•
 {

307 
__u64
 
	mcomp_mask
;

308 
__u64
 
	mfw_vî
;

309 
__u64
 
	mnode_guid
;

310 
__u64
 
	msys_image_guid
;

311 
__u64
 
	mmax_mr_size
;

312 
__u64
 
	m∑ge_size_ˇp
;

313 
__u32
 
	mvíd‹_id
;

314 
__u32
 
	mvíd‹_∑π_id
;

315 
__u32
 
	mhw_vî
;

316 
__u32
 
	mmax_qp
;

317 
__u32
 
	mmax_qp_wr
;

318 
__u32
 
	mdevi˚_ˇp_Êags
;

319 
__u32
 
	mmax_sge
;

320 
__u32
 
	mmax_sge_rd
;

321 
__u32
 
	mmax_cq
;

322 
__u32
 
	mmax_cqe
;

323 
__u32
 
	mmax_mr
;

324 
__u32
 
	mmax_pd
;

325 
__u32
 
	mmax_qp_rd_©om
;

326 
__u32
 
	mmax_ì_rd_©om
;

327 
__u32
 
	mmax_ªs_rd_©om
;

328 
__u32
 
	mmax_qp_öô_rd_©om
;

329 
__u32
 
	mmax_ì_öô_rd_©om
;

330 
__u32
 
	mexp_©omic_ˇp
;

331 
__u32
 
	mmax_ì
;

332 
__u32
 
	mmax_rdd
;

333 
__u32
 
	mmax_mw
;

334 
__u32
 
	mmax_øw_ùv6_qp
;

335 
__u32
 
	mmax_øw_ëhy_qp
;

336 
__u32
 
	mmax_mˇ°_gΩ
;

337 
__u32
 
	mmax_mˇ°_qp_©èch
;

338 
__u32
 
	mmax_tŸÆ_mˇ°_qp_©èch
;

339 
__u32
 
	mmax_ah
;

340 
__u32
 
	mmax_fmr
;

341 
__u32
 
	mmax_m≠_≥r_fmr
;

342 
__u32
 
	mmax_§q
;

343 
__u32
 
	mmax_§q_wr
;

344 
__u32
 
	mmax_§q_sge
;

345 
__u16
 
	mmax_pkeys
;

346 
__u8
 
	mloˇl_ˇ_ack_dñay
;

347 
__u8
 
	mphys_p‹t_˙t
;

348 
__u8
 
	mª£rved
[4];

349 
__u64
 
	mtime°amp_mask
;

350 
__u64
 
	mhˇ_c‹e_˛ock
;

351 
__u64
 
	mdevi˚_ˇp_Êags2
;

352 
__u32
 
	mdc_rd_ªq
;

353 
__u32
 
	mdc_rd_ªs
;

354 
__u32
 
	mölöe_ªcv_sz
;

355 
__u32
 
	mmax_rss_tbl_sz
;

356 
__u64
 
	mlog_©omic_¨g_sizes
;

357 
__u32
 
	mmax_Á_bô_bound¨y
;

358 
__u32
 
	mlog_max_©omic_ölöe
;

359 
ibv_exp_umr_ˇps_ª•
 
	mumr_ˇps
;

360 
ibv_exp_odp_ˇps_ª•
 
	modp_ˇps
;

361 
__u32
 
	mmax_d˘
;

362 
__u32
 
	mmax_˘x_ªs_domaö
;

363 
ibv_exp_rx_hash_ˇps_ª•
 
	mrx_hash
;

364 
__u32
 
	mmax_wq_ty≥_rq
;

365 
__u32
 
	mmax_devi˚_˘x
;

366 
ibv_exp_mp_rq_ˇps_ª•
 
	mmp_rq_ˇps
;

367 
__u16
 
	mwq_vœn_ofÊﬂds_ˇp
;

368 
__u8
 
	mª£rved1
[2];

369 
__u32
 
	mec_w_mask
;

370 
ibv_exp_ec_ˇps_ª•
 
	mec_ˇps
;

371 
ibv_exp_masked_©omic_ˇps
 
	mmasked_©omic_ˇps
;

372 
__u16
 
	mrx_∑d_íd_addr_Æign
;

373 
__u8
 
	mª£rved2
[6];

374 
ibv_exp_lso_ˇps_ª•
 
	mtso_ˇps
;

375 
ibv_exp_∑ckë_∑cög_ˇps_ª•
 
	m∑ckë_∑cög_ˇps
;

376 
ibv_exp_ooo_ˇps_ª•
 
	mooo_ˇps
;

377 
ibv_exp_sw_∑rsög_ˇps_ª•
 
	msw_∑rsög_ˇps
;

378 
__u64
 
	modp_mr_max_size
;

379 
ibv_exp_tm_ˇps_ª•
 
	mtm_ˇps
;

380 
__u32
 
	mtu¬ñ_ofÊﬂds_ˇps
;

381 
__u32
 
	mtu¬ñed_©omic_ˇps
;

382 
__u64
 
	mmax_dm_size
;

383 
__u64
 
	mcomp_mask_2
;

384 
ibv_exp_umr_fixed_size_ˇps_ª•
 
	mumr_fixed_size_ˇps
;

385 
ibv_exp_pci_©omic_ˇps_ª•
 
	mpci_©omic_ˇps
;

388 
	sibv_exp_¸óã_d˘
 {

389 
ex_hdr
 
	mhdr
;

390 
__u64
 
	mcomp_mask
;

391 
__u64
 
	mu£r_h™dÀ
;

392 
__u32
 
	mpd_h™dÀ
;

393 
__u32
 
	mcq_h™dÀ
;

394 
__u32
 
	m§q_h™dÀ
;

395 
__u32
 
	mac˚ss_Êags
;

396 
__u64
 
	mdc_key
;

397 
__u32
 
	mÊow_œbñ
;

398 
__u8
 
	mmö_∫r_timî
;

399 
__u8
 
	mt˛ass
;

400 
__u8
 
	mp‹t
;

401 
__u8
 
	mpkey_ödex
;

402 
__u8
 
	mgid_ödex
;

403 
__u8
 
	mh›_limô
;

404 
__u8
 
	mmtu
;

405 
__u8
 
	mrsvd0
;

406 
__u32
 
	m¸óã_Êags
;

407 
__u32
 
	mölöe_size
;

408 
__u32
 
	mrsvd1
;

409 
__u64
 
	mdrivî_d©a
[0];

412 
	sibv_exp_¸óã_d˘_ª•
 {

413 
__u32
 
	md˘_h™dÀ
;

414 
__u32
 
	md˘_num
;

415 
__u32
 
	mölöe_size
;

416 
__u32
 
	mrsvd
;

419 
	sibv_exp_de°roy_d˘
 {

420 
ex_hdr
 
	mhdr
;

421 
__u64
 
	mcomp_mask
;

422 
__u32
 
	md˘_h™dÀ
;

423 
__u32
 
	mrsvd
;

424 
__u64
 
	mdrivî_d©a
[0];

427 
	sibv_exp_de°roy_d˘_ª•
 {

428 
__u32
 
	mevíts_ªp‹ãd
;

429 
__u32
 
	mª£rved
;

432 
	sibv_exp_quîy_d˘
 {

433 
ex_hdr
 
	mhdr
;

434 
__u64
 
	mcomp_mask
;

435 
__u32
 
	md˘_h™dÀ
;

436 
__u32
 
	mª£rved
;

437 
__u64
 
	mdrivî_d©a
[0];

440 
	sibv_exp_quîy_d˘_ª•
 {

441 
__u64
 
	mdc_key
;

442 
__u32
 
	mac˚ss_Êags
;

443 
__u32
 
	mÊow_œbñ
;

444 
__u32
 
	mkey_viﬁ©i⁄s
;

445 
__u8
 
	mp‹t
;

446 
__u8
 
	mmö_∫r_timî
;

447 
__u8
 
	mt˛ass
;

448 
__u8
 
	mmtu
;

449 
__u8
 
	mpkey_ödex
;

450 
__u8
 
	mgid_ödex
;

451 
__u8
 
	mh›_limô
;

452 
__u8
 
	m°©e
;

453 
__u32
 
	mrsvd
;

454 
__u64
 
	mdrivî_d©a
[0];

457 
	sibv_exp_¨m_d˘
 {

458 
ex_hdr
 
	mhdr
;

459 
__u64
 
	mcomp_mask
;

460 
__u32
 
	md˘_h™dÀ
;

461 
__u32
 
	mª£rved
;

462 
__u64
 
	mdrivî_d©a
[0];

465 
	sibv_exp_¨m_d˘_ª•
 {

466 
__u64
 
	mª£rved
;

469 
	sibv_exp_cmd_£t_c⁄ãxt_©å
 {

470 
ex_hdr
 
	mhdr
;

471 
__u64
 
	m≥î_id
;

472 
__u8
 
	m≥î_«me
[64];

473 
__u32
 
	mcomp_mask
;

474 
__u32
 
	mª£rved
;

477 
	sibv_exp_modify_cq
 {

478 
ex_hdr
 
	mhdr
;

479 
__u32
 
	mcq_h™dÀ
;

480 
__u32
 
	m©å_mask
;

481 
__u16
 
	mcq_cou¡
;

482 
__u16
 
	mcq_≥riod
;

483 
__u32
 
	mcq_ˇp_Êags
;

484 
__u32
 
	mcomp_mask
;

485 
__u32
 
	mrsvd
;

488 
	sibv_exp_modify_qp
 {

489 
ex_hdr
 
	mhdr
;

490 
__u32
 
	mcomp_mask
;

491 
ibv_qp_de°
 
	mde°
;

492 
ibv_qp_de°
 
	mÆt_de°
;

493 
__u32
 
	mqp_h™dÀ
;

494 
__u32
 
	m©å_mask
;

495 
__u32
 
	mqkey
;

496 
__u32
 
	mrq_p¢
;

497 
__u32
 
	msq_p¢
;

498 
__u32
 
	mde°_qp_num
;

499 
__u32
 
	mqp_ac˚ss_Êags
;

500 
__u16
 
	mpkey_ödex
;

501 
__u16
 
	mÆt_pkey_ödex
;

502 
__u8
 
	mqp_°©e
;

503 
__u8
 
	mcur_qp_°©e
;

504 
__u8
 
	m∑th_mtu
;

505 
__u8
 
	m∑th_mig_°©e
;

506 
__u8
 
	mí_sqd_async_nŸify
;

507 
__u8
 
	mmax_rd_©omic
;

508 
__u8
 
	mmax_de°_rd_©omic
;

509 
__u8
 
	mmö_∫r_timî
;

510 
__u8
 
	mp‹t_num
;

511 
__u8
 
	mtimeout
;

512 
__u8
 
	mªåy_˙t
;

513 
__u8
 
	m∫r_ªåy
;

514 
__u8
 
	mÆt_p‹t_num
;

515 
__u8
 
	mÆt_timeout
;

516 
__u8
 
	mª£rved
[6];

517 
__u64
 
	md˘_key
;

518 
__u32
 
	mexp_©å_mask
;

519 
__u32
 
	mÊow_íå›y
;

520 
__u32
 
	møã_limô
;

522 
__u32
 
	mmax_bur°_sz
;

523 
__u16
 
	mtypiˇl_pkt_sz
;

524 
__u16
 
	mª£rved
;

525 } 
	mbur°_öfo
;

526 
__u32
 
	mª£rved1
;

527 
__u64
 
	mdrivî_d©a
[0];

530 
	eibv_exp_¸óã_cq_comp_mask
 {

531 
	mIBV_EXP_CREATE_CQ_CAP_FLAGS
 = (
uöt64_t
)1 << 0,

534 
	sibv_exp_¸óã_cq
 {

535 
ex_hdr
 
	mhdr
;

536 
__u64
 
	mcomp_mask
;

537 
__u64
 
	mu£r_h™dÀ
;

538 
__u32
 
	mcqe
;

539 
__u32
 
	mcomp_ve˘‹
;

540 
__s32
 
	mcomp_ch™√l
;

541 
__u32
 
	mª£rved
;

542 
__u64
 
	m¸óã_Êags
;

543 
__u64
 
	mdrivî_d©a
[0];

546 
	sibv_exp_¸óã_mr
 {

547 
ex_hdr
 
	mhdr
;

548 
__u64
 
	mcomp_mask
;

549 
__u32
 
	mpd_h™dÀ
;

550 
__u32
 
	mmax_klm_li°_size
;

551 
__u64
 
	mexp_ac˚ss_Êags
;

552 
__u32
 
	m¸óã_Êags
;

553 
__u32
 
	mª£rved
;

554 
__u64
 
	mdrivî_d©a
[0];

557 
	sibv_exp_¸óã_mr_ª•
 {

558 
__u64
 
	mcomp_mask
;

559 
__u32
 
	mh™dÀ
;

560 
__u32
 
	mlkey
;

561 
__u32
 
	mrkey
;

562 
__u32
 
	mª£rved
;

563 
__u64
 
	mdrivî_d©a
[0];

566 
	sibv_exp_quîy_mkey
 {

567 
ex_hdr
 
	mhdr
;

568 
__u64
 
	mcomp_mask
;

569 
__u32
 
	mh™dÀ
;

570 
__u32
 
	mlkey
;

571 
__u32
 
	mrkey
;

572 
__u32
 
	mª£rved
;

573 
__u64
 
	mdrivî_d©a
[0];

576 
	sibv_exp_quîy_mkey_ª•
 {

577 
__u64
 
	mcomp_mask
;

578 
__u32
 
	mmax_klm_li°_size
;

579 
__u32
 
	mª£rved
;

580 
__u64
 
	mdrivî_d©a
[0];

583 
	eibv_exp_ªg_mr_comp_mask
 {

584 
	mIBV_EXP_REG_MR_EXP_ACCESS_FLAGS
 = 1ULL << 0,

585 
	mIBV_EXP_REG_MR_DM_HANDLE
 = 1ULL << 1,

588 
	sibv_exp_ªg_mr
 {

589 
ex_hdr
 
	mhdr
;

590 
__u64
 
	m°¨t
;

591 
__u64
 
	mÀngth
;

592 
__u64
 
	mhˇ_va
;

593 
__u32
 
	mpd_h™dÀ
;

594 
__u32
 
	mª£rved
;

595 
__u64
 
	mexp_ac˚ss_Êags
;

596 
__u64
 
	mcomp_mask
;

597 
__u32
 
	mdm_h™dÀ
;

598 
__u32
 
	mª£rved1
;

601 
	sibv_exp_¥e„tch_mr
 {

602 
ex_hdr
 
	mhdr
;

603 
__u64
 
	mcomp_mask
;

604 
__u32
 
	mmr_h™dÀ
;

605 
__u32
 
	mÊags
;

606 
__u64
 
	m°¨t
;

607 
__u64
 
	mÀngth
;

610 
	sibv_exp_ªg_mr_ª•
 {

611 
__u32
 
	mmr_h™dÀ
;

612 
__u32
 
	mlkey
;

613 
__u32
 
	mrkey
;

614 
__u32
 
	mª£rved
;

615 
__u64
 
	mcomp_mask
;

618 
	sibv_exp_ªªg_mr
 {

619 
ex_hdr
 
	mhdr
;

620 
__u32
 
	mcomp_mask
;

621 
__u32
 
	mmr_h™dÀ
;

622 
__u32
 
	mÊags
;

623 
__u32
 
	mª£rved
;

624 
__u64
 
	m°¨t
;

625 
__u64
 
	mÀngth
;

626 
__u64
 
	mhˇ_va
;

627 
__u32
 
	mpd_h™dÀ
;

628 
__u32
 
	mac˚ss_Êags
;

631 
	sibv_exp_ªªg_mr_ª•
 {

632 
__u32
 
	mcomp_mask
;

633 
__u32
 
	mlkey
;

634 
__u32
 
	mrkey
;

635 
__u32
 
	mª£rved
;

638 
	sibv_exp_cmd_wq_mp_rq
 {

639 
__u32
 
	mu£_shi·
;

640 
__u8
 
	msögÀ_wqe_log_num_of_°rides
;

641 
__u8
 
	msögÀ_°ride_log_num_of_byãs
;

642 
__u16
 
	mª£rved
;

645 
	eibv_exp_cmd_¸óã_wq_comp_mask
 {

646 
	mIBV_EXP_CMD_CREATE_WQ_MP_RQ
 = 1 << 0,

647 
	mIBV_EXP_CMD_CREATE_WQ_VLAN_OFFLOADS
 = 1 << 1,

648 
	mIBV_EXP_CMD_CREATE_WQ_FLAGS
 = 1 << 2,

651 
	sibv_exp_¸óã_wq
 {

652 
ex_hdr
 
	mhdr
;

653 
__u32
 
	mcomp_mask
;

654 
__u32
 
	mwq_ty≥
;

655 
__u64
 
	mu£r_h™dÀ
;

656 
__u32
 
	mpd_h™dÀ
;

657 
__u32
 
	mcq_h™dÀ
;

658 
__u32
 
	mmax_ªcv_wr
;

659 
__u32
 
	mmax_ªcv_sge
;

662 
	sibv_exp_¸óã_wq_ª•
 {

663 
__u32
 
	mcomp_mask
;

664 
__u32
 
	mª•⁄£_Àngth
;

665 
__u32
 
	mwq_h™dÀ
;

666 
__u32
 
	mmax_ªcv_wr
;

667 
__u32
 
	mmax_ªcv_sge
;

668 
__u32
 
	mwqn
;

671 
	sib_exp_de°roy_wq
 {

672 
ex_hdr
 
	mhdr
;

673 
__u32
 
	mcomp_mask
;

674 
__u32
 
	mwq_h™dÀ
;

677 
	sibv_de°roy_wq_ª•
 {

678 
__u32
 
	mcomp_mask
;

679 
__u32
 
	mª•⁄£_Àngth
;

680 
__u32
 
	mevíts_ªp‹ãd
;

681 
__u32
 
	mª£rved
;

684 
	sib_exp_modify_wq
 {

685 
ex_hdr
 
	mhdr
;

686 
__u32
 
	mcomp_mask
;

687 
__u32
 
	mwq_h™dÀ
;

688 
__u32
 
	mwq_°©e
;

689 
__u32
 
	mcuº_wq_°©e
;

692 
	sibv_exp_¸óã_§q
 {

693 
ex_hdr
 
	mhdr
;

694 
__u64
 
	mcomp_mask
;

695 
__u64
 
	mu£r_h™dÀ
;

696 
__u32
 
	m§q_ty≥
;

697 
__u32
 
	mpd_h™dÀ
;

698 
__u32
 
	mmax_wr
;

699 
__u32
 
	mmax_sge
;

700 
__u32
 
	m§q_limô
;

701 
__u32
 
	mcq_h™dÀ
;

702 
__u32
 
	mxrcd_h™dÀ
;

703 
__u32
 
	mª£rved
;

704 
__u64
 
	mdrivî_d©a
[0];

707 
	sibv_exp_¸óã_§q_ª•
 {

708 
ibv_¸óã_§q_ª•
 
	mba£
;

709 
__u32
 
	mcomp_mask
;

710 
__u32
 
	mª•⁄£_Àngth
;

713 
	sibv_exp_¸óã_rwq_öd_èbÀ
 {

714 
ex_hdr
 
	mhdr
;

715 
__u32
 
	mcomp_mask
;

716 
__u32
 
	mlog_öd_tbl_size
;

723 
	sibv_exp_¸óã_rwq_öd_èbÀ_ª•
 {

724 
__u32
 
	mcomp_mask
;

725 
__u32
 
	mª•⁄£_Àngth
;

726 
__u32
 
	möd_tbl_h™dÀ
;

727 
__u32
 
	möd_tbl_num
;

730 
	sibv_exp_de°roy_rwq_öd_èbÀ
 {

731 
ex_hdr
 
	mhdr
;

732 
__u32
 
	mcomp_mask
;

733 
__u32
 
	möd_tbl_h™dÀ
;

736 
	sibv_exp_kîn_ùv6_fûãr
 {

737 
__u8
 
	m§c_ù
[16];

738 
__u8
 
	md°_ù
[16];

741 
	sibv_exp_kîn_•ec_ùv6
 {

742 
__u32
 
	mty≥
;

743 
__u16
 
	msize
;

744 
__u16
 
	mª£rved
;

745 
ibv_exp_kîn_ùv6_fûãr
 
	mvÆ
;

746 
ibv_exp_kîn_ùv6_fûãr
 
	mmask
;

749 
	sibv_exp_kîn_ùv6_ext_fûãr
 {

750 
__u8
 
	m§c_ù
[16];

751 
__u8
 
	md°_ù
[16];

752 
__u32
 
	mÊow_œbñ
;

753 
__u8
 
	m√xt_hdr
;

754 
__u8
 
	måaffic_˛ass
;

755 
__u8
 
	mh›_limô
;

756 
__u8
 
	mª£rved
;

759 
	sibv_exp_kîn_•ec_ùv6_ext
 {

760 
__u32
 
	mty≥
;

761 
__u16
 
	msize
;

762 
__u16
 
	mª£rved
;

763 
ibv_exp_kîn_ùv6_ext_fûãr
 
	mvÆ
;

764 
ibv_exp_kîn_ùv6_ext_fûãr
 
	mmask
;

767 
	sibv_exp_kîn_ùv4_ext_fûãr
 {

768 
__u32
 
	m§c_ù
;

769 
__u32
 
	md°_ù
;

770 
__u8
 
	m¥Ÿo
;

771 
__u8
 
	mtos
;

772 
__u8
 
	mâl
;

773 
__u8
 
	mÊags
;

776 
	sibv_exp_kîn_•ec_ùv4_ext
 {

777 
__u32
 
	mty≥
;

778 
__u16
 
	msize
;

779 
__u16
 
	mª£rved
;

780 
ibv_exp_kîn_ùv4_ext_fûãr
 
	mvÆ
;

781 
ibv_exp_kîn_ùv4_ext_fûãr
 
	mmask
;

784 
	sibv_exp_kîn_tu¬ñ_fûãr
 {

785 
__u32
 
	mtu¬ñ_id
;

788 
	sibv_exp_kîn_•ec_tu¬ñ
 {

789 
__u32
 
	mty≥
;

790 
__u16
 
	msize
;

791 
__u16
 
	mª£rved
;

792 
ibv_exp_kîn_tu¬ñ_fûãr
 
	mvÆ
;

793 
ibv_exp_kîn_tu¬ñ_fûãr
 
	mmask
;

796 
	sibv_exp_kîn_•ec_a˘i⁄_èg
 {

797 
__u32
 
	mty≥
;

798 
__u16
 
	msize
;

799 
__u16
 
	mª£rved
;

800 
__u32
 
	mèg_id
;

801 
__u32
 
	mª£rved1
;

804 
	sibv_exp_kîn_•ec_a˘i⁄_dr›
 {

805 
__u32
 
	mty≥
;

806 
__u16
 
	msize
;

807 
__u16
 
	mª£rved
;

810 
	sibv_exp_kîn_•ec
 {

813 
__u32
 
	mty≥
;

814 
__u16
 
	msize
;

815 
__u16
 
	mª£rved
;

816 } 
	mhdr
;

817 
ibv_kîn_•ec_ib
 
	mib
;

818 
ibv_kîn_•ec_ëh
 
	mëh
;

819 
ibv_kîn_•ec_ùv4
 
	mùv4
;

820 
ibv_exp_kîn_•ec_ùv4_ext
 
	mùv4_ext
;

821 
ibv_kîn_•ec_t˝_udp
 
	mt˝_udp
;

822 
ibv_exp_kîn_•ec_ùv6
 
	mùv6
;

823 
ibv_exp_kîn_•ec_ùv6_ext
 
	mùv6_ext
;

824 
ibv_exp_kîn_•ec_tu¬ñ
 
	mtu¬ñ
;

825 
ibv_exp_kîn_•ec_a˘i⁄_èg
 
	mÊow_èg
;

826 
ibv_exp_kîn_•ec_a˘i⁄_dr›
 
	mdr›
;

830 
	sibv_exp_Æloc_dm
 {

831 
ex_hdr
 
	mhdr
;

832 
__u32
 
	mcomp_mask
;

833 
__u32
 
	mª£rved
;

834 
__u64
 
	muaddr
;

835 
__u64
 
	mÀngth
;

836 
__u64
 
	mdrivî_d©a
[0];

839 
	sibv_exp_Æloc_dm_ª•
 {

840 
__u32
 
	mcomp_mask
;

841 
__u32
 
	mª•⁄£_Àngth
;

842 
__u32
 
	mdm_h™dÀ
;

843 
__u32
 
	mª£rved
;

844 
__u64
 
	m°¨t_off£t
;

847 
	sibv_exp_‰ì_dm
 {

848 
ex_hdr
 
	mhdr
;

849 
__u32
 
	mdm_h™dÀ
;

850 
__u32
 
	mª£rved
;

	@/usr/include/infiniband/marshall.h

33 #i‚de‡
INFINIBAND_MARSHALL_H


34 
	#INFINIBAND_MARSHALL_H


	)

36 
	~<öföib™d/vîbs.h
>

37 
	~<öföib™d/ß.h
>

38 
	~<öföib™d/kîn-abi.h
>

39 
	~<öföib™d/ß-kîn-abi.h
>

41 #ifde‡
__˝lu•lus


42 
	#BEGIN_C_DECLS
 "C" {

	)

43 
	#END_C_DECLS
 }

	)

45 
	#BEGIN_C_DECLS


	)

46 
	#END_C_DECLS


	)

49 
BEGIN_C_DECLS


51 
ibv_c›y_qp_©å_‰om_kîn
(
ibv_qp_©å
 *
d°
,

52 
ibv_kîn_qp_©å
 *
§c
);

54 
ibv_c›y_ah_©å_‰om_kîn
(
ibv_ah_©å
 *
d°
,

55 
ibv_kîn_ah_©å
 *
§c
);

57 
ibv_c›y_∑th_ªc_‰om_kîn
(
ibv_ß_∑th_ªc
 *
d°
,

58 
ibv_kîn_∑th_ªc
 *
§c
);

60 
ibv_c›y_∑th_ªc_to_kîn
(
ibv_kîn_∑th_ªc
 *
d°
,

61 
ibv_ß_∑th_ªc
 *
§c
);

63 
	gEND_C_DECLS


	@/usr/include/infiniband/ofa_verbs.h

1 #i‚de‡
INFINIBAND_OFA_VERBS_H


2 
	#INFINIBAND_OFA_VERBS_H


	)

4 
	gibv_§q_öô_©å
;

5 
	gibv_cq
;

6 
	gibv_pd
;

7 
	gibv_qp_öô_©å
;

8 
	gibv_qp_©å
;

11 #ifde‡
__GNUC__


12 
	#DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

14 
	#DEPRECATED


	)

18 
	#LEGACY_XRC_SRQ_HANDLE
 0xffffffff

	)

20 
	sibv_xrc_domaö
 {

21 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

22 
uöt32_t
 
	mh™dÀ
;

25 
	sibv_§q_Àgacy
 {

26 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

27 *
	m§q_c⁄ãxt
;

28 
ibv_pd
 *
	mpd
;

29 
uöt32_t
 
	mh™dÀ
;

31 
uöt32_t
 
	mevíts_com∂ëed
;

33 
uöt32_t
 
	mxrc_§q_num_bö_com∑t
;

34 
ibv_xrc_domaö
 *
	mxrc_domaö_bö_com∑t
;

35 
ibv_cq
 *
	mxrc_cq_bö_com∑t
;

37 
±hªad_muãx_t
 
	mmuãx
;

38 
±hªad_c⁄d_t
 
	mc⁄d
;

40 *
	mibv_§q
;

44 
uöt32_t
 
	mxrc_§q_num
;

45 
ibv_xrc_domaö
 *
	mxrc_domaö
;

46 
ibv_cq
 *
	mxrc_cq
;

72 
ibv_xrc_domaö
 *
	$ibv_›í_xrc_domaö
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

73 
fd
, 
oÊag
Ë
DEPRECATED
;

89 
ibv_§q
 *
	$ibv_¸óã_xrc_§q
(
ibv_pd
 *
pd
,

90 
ibv_xrc_domaö
 *
xrc_domaö
,

91 
ibv_cq
 *
xrc_cq
,

92 
ibv_§q_öô_©å
 *
§q_öô_©å
Ë
DEPRECATED
;

102 
	$ibv_˛o£_xrc_domaö
(
ibv_xrc_domaö
 *
d
Ë
DEPRECATED
;

126 
	$ibv_¸óã_xrc_rcv_qp
(
ibv_qp_öô_©å
 *
öô_©å
,

127 
uöt32_t
 *
xrc_rcv_q≤
Ë
DEPRECATED
;

152 
	$ibv_modify_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

153 
uöt32_t
 
xrc_qp_num
,

154 
ibv_qp_©å
 *
©å
, 
©å_mask
Ë
DEPRECATED
;

168 
	$ibv_quîy_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
, 
uöt32_t
 
xrc_qp_num
,

169 
ibv_qp_©å
 *
©å
, 
©å_mask
,

170 
ibv_qp_öô_©å
 *
öô_©å
Ë
DEPRECATED
;

185 
	$ibv_ªg_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

186 
uöt32_t
 
xrc_qp_num
Ë
DEPRECATED
;

204 
	$ibv_uƒeg_xrc_rcv_qp
(
ibv_xrc_domaö
 *
xrc_domaö
,

205 
uöt32_t
 
xrc_qp_num
Ë
DEPRECATED
;

	@/usr/include/infiniband/sa-kern-abi.h

33 #i‚de‡
INFINIBAND_SA_KERN_ABI_H


34 
	#INFINIBAND_SA_KERN_ABI_H


	)

36 
	~<löux/ty≥s.h
>

41 
	#ib_kîn_∑th_ªc
 
ibv_kîn_∑th_ªc


	)

43 
	sibv_kîn_∑th_ªc
 {

44 
__u8
 
	mdgid
[16];

45 
__u8
 
	msgid
[16];

46 
__u16
 
	mdlid
;

47 
__u16
 
	m¶id
;

48 
__u32
 
	møw_åaffic
;

49 
__u32
 
	mÊow_œbñ
;

50 
__u32
 
	mªvîsibÀ
;

51 
__u32
 
	mmtu
;

52 
__u16
 
	mpkey
;

53 
__u8
 
	mh›_limô
;

54 
__u8
 
	måaffic_˛ass
;

55 
__u8
 
	mnumb_∑th
;

56 
__u8
 
	m¶
;

57 
__u8
 
	mmtu_£À˘‹
;

58 
__u8
 
	møã_£À˘‹
;

59 
__u8
 
	møã
;

60 
__u8
 
	m∑ckë_li„_time_£À˘‹
;

61 
__u8
 
	m∑ckë_li„_time
;

62 
__u8
 
	m¥e„ªn˚
;

	@/usr/include/infiniband/sa.h

34 #i‚de‡
INFINIBAND_SA_H


35 
	#INFINIBAND_SA_H


	)

37 
	~<öföib™d/vîbs.h
>

39 
	sibv_ß_∑th_ªc
 {

42 
ibv_gid
 
	mdgid
;

43 
ibv_gid
 
	msgid
;

44 
uöt16_t
 
	mdlid
;

45 
uöt16_t
 
	m¶id
;

46 
	møw_åaffic
;

48 
uöt32_t
 
	mÊow_œbñ
;

49 
uöt8_t
 
	mh›_limô
;

50 
uöt8_t
 
	måaffic_˛ass
;

51 
	mªvîsibÀ
;

52 
uöt8_t
 
	mnumb_∑th
;

53 
uöt16_t
 
	mpkey
;

55 
uöt8_t
 
	m¶
;

56 
uöt8_t
 
	mmtu_£À˘‹
;

57 
uöt8_t
 
	mmtu
;

58 
uöt8_t
 
	møã_£À˘‹
;

59 
uöt8_t
 
	møã
;

60 
uöt8_t
 
	m∑ckë_li„_time_£À˘‹
;

61 
uöt8_t
 
	m∑ckë_li„_time
;

62 
uöt8_t
 
	m¥e„ªn˚
;

65 
	sibv_ß_mcmembî_ªc
 {

66 
ibv_gid
 
	mmgid
;

67 
ibv_gid
 
	mp‹t_gid
;

68 
uöt32_t
 
	mqkey
;

69 
uöt16_t
 
	mmlid
;

70 
uöt8_t
 
	mmtu_£À˘‹
;

71 
uöt8_t
 
	mmtu
;

72 
uöt8_t
 
	måaffic_˛ass
;

73 
uöt16_t
 
	mpkey
;

74 
uöt8_t
 
	møã_£À˘‹
;

75 
uöt8_t
 
	møã
;

76 
uöt8_t
 
	m∑ckë_li„_time_£À˘‹
;

77 
uöt8_t
 
	m∑ckë_li„_time
;

78 
uöt8_t
 
	m¶
;

79 
uöt32_t
 
	mÊow_œbñ
;

80 
uöt8_t
 
	mh›_limô
;

81 
uöt8_t
 
	msc›e
;

82 
uöt8_t
 
	mjoö_°©e
;

83 
	m¥oxy_joö
;

86 
	sibv_ß_£rvi˚_ªc
 {

87 
uöt64_t
 
	mid
;

88 
ibv_gid
 
	mgid
;

89 
uöt16_t
 
	mpkey
;

91 
uöt32_t
 
	mÀa£
;

92 
uöt8_t
 
	mkey
[16];

93 
uöt8_t
 
	m«me
[64];

94 
uöt8_t
 
	md©a8
[16];

95 
uöt16_t
 
	md©a16
[8];

96 
uöt32_t
 
	md©a32
[4];

97 
uöt64_t
 
	md©a64
[2];

100 
	#IBV_PATH_RECORD_REVERSIBLE
 0x80

	)

102 
	sibv_∑th_ªc‹d
 {

103 
uöt64_t
 
	m£rvi˚_id
;

104 
ibv_gid
 
	mdgid
;

105 
ibv_gid
 
	msgid
;

106 
uöt16_t
 
	mdlid
;

107 
uöt16_t
 
	m¶id
;

108 
uöt32_t
 
	mÊowœbñ_h›limô
;

109 
uöt8_t
 
	mt˛ass
;

110 
uöt8_t
 
	mªvîsibÀ_num∑th
;

111 
uöt16_t
 
	mpkey
;

112 
uöt16_t
 
	mqos˛ass_¶
;

113 
uöt8_t
 
	mmtu
;

114 
uöt8_t
 
	møã
;

115 
uöt8_t
 
	m∑ckëli„time
;

116 
uöt8_t
 
	m¥e„ªn˚
;

117 
uöt8_t
 
	mª£rved
[6];

120 
	#IBV_PATH_FLAG_GMP
 (1<<0)

	)

121 
	#IBV_PATH_FLAG_PRIMARY
 (1<<1)

	)

122 
	#IBV_PATH_FLAG_ALTERNATE
 (1<<2)

	)

123 
	#IBV_PATH_FLAG_OUTBOUND
 (1<<3)

	)

124 
	#IBV_PATH_FLAG_INBOUND
 (1<<4)

	)

125 
	#IBV_PATH_FLAG_INBOUND_REVERSE
 (1<<5)

	)

126 
	#IBV_PATH_FLAG_BIDIRECTIONAL
 (
IBV_PATH_FLAG_OUTBOUND
 | \

127 
IBV_PATH_FLAG_INBOUND_REVERSE
)

	)

129 
	sibv_∑th_d©a
 {

130 
uöt32_t
 
	mÊags
;

131 
uöt32_t
 
	mª£rved
;

132 
ibv_∑th_ªc‹d
 
	m∑th
;

	@/usr/include/infiniband/verbs.h

36 #i‚de‡
INFINIBAND_VERBS_H


37 
	#INFINIBAND_VERBS_H


	)

39 
	~<°döt.h
>

40 
	~<±hªad.h
>

41 
	~<°ddef.h
>

42 
	~<î∫o.h
>

43 
	~<öföib™d/oÁ_vîbs.h
>

44 
	~<°rög.h
>

46 #ifde‡
__˝lu•lus


47 
	#BEGIN_C_DECLS
 "C" {

	)

48 
	#END_C_DECLS
 }

	)

50 
	#BEGIN_C_DECLS


	)

51 
	#END_C_DECLS


	)

54 #i‡
__GNUC__
 >= 3

55 
	#__©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

57 
	#__©åibuã_c⁄°


	)

60 
BEGIN_C_DECLS


62 
	uibv_gid
 {

63 
uöt8_t
 
øw
[16];

65 
uöt64_t
 
sub√t_¥efix
;

66 
uöt64_t
 
öãrÁ˚_id
;

67 } 
globÆ
;

70 #i‚de‡
c⁄èöî_of


78 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) \

79 ((
ty≥
 *Ë((
uöt8_t
 *)(
±r
Ë- 
	`off£tof
—y≥, 
membî
)))

	)

82 
	#vext_fõld_avaû
(
ty≥
, 
Êd
, 
sz
Ë(
	`off£tof
—y≥, fldË< (sz))

	)

84 *
	g__VERBS_ABI_IS_EXTENDED
 = ((
uöt8_t
 *)
NULL
) - 1;

86 
	eibv_node_ty≥
 {

87 
	mIBV_NODE_UNKNOWN
 = -1,

88 
	mIBV_NODE_CA
 = 1,

89 
	mIBV_NODE_SWITCH
,

90 
	mIBV_NODE_ROUTER
,

91 
	mIBV_NODE_RNIC
,

96 
	mIBV_EXP_NODE_TYPE_START
 = 32,

97 
	mIBV_EXP_NODE_MIC
 = 
IBV_EXP_NODE_TYPE_START


100 
	eibv_å™•‹t_ty≥
 {

101 
	mIBV_TRANSPORT_UNKNOWN
 = -1,

102 
	mIBV_TRANSPORT_IB
 = 0,

103 
	mIBV_TRANSPORT_IWARP
,

108 
	mIBV_EXP_TRANSPORT_TYPE_START
 = 32,

109 
	mIBV_EXP_TRANSPORT_SCIF
 = 
IBV_EXP_TRANSPORT_TYPE_START


112 
	eibv_devi˚_ˇp_Êags
 {

113 
	mIBV_DEVICE_RESIZE_MAX_WR
 = 1,

114 
	mIBV_DEVICE_BAD_PKEY_CNTR
 = 1 << 1,

115 
	mIBV_DEVICE_BAD_QKEY_CNTR
 = 1 << 2,

116 
	mIBV_DEVICE_RAW_MULTI
 = 1 << 3,

117 
	mIBV_DEVICE_AUTO_PATH_MIG
 = 1 << 4,

118 
	mIBV_DEVICE_CHANGE_PHY_PORT
 = 1 << 5,

119 
	mIBV_DEVICE_UD_AV_PORT_ENFORCE
 = 1 << 6,

120 
	mIBV_DEVICE_CURR_QP_STATE_MOD
 = 1 << 7,

121 
	mIBV_DEVICE_SHUTDOWN_PORT
 = 1 << 8,

122 
	mIBV_DEVICE_INIT_TYPE
 = 1 << 9,

123 
	mIBV_DEVICE_PORT_ACTIVE_EVENT
 = 1 << 10,

124 
	mIBV_DEVICE_SYS_IMAGE_GUID
 = 1 << 11,

125 
	mIBV_DEVICE_RC_RNR_NAK_GEN
 = 1 << 12,

126 
	mIBV_DEVICE_SRQ_RESIZE
 = 1 << 13,

127 
	mIBV_DEVICE_N_NOTIFY_CQ
 = 1 << 14,

128 
	mIBV_DEVICE_MEM_WINDOW
 = 1 << 17,

129 
	mIBV_DEVICE_XRC
 = 1 << 20,

130 
	mIBV_DEVICE_MEM_MGT_EXTENSIONS
 = 1 << 21,

131 
	mIBV_DEVICE_MEM_WINDOW_TYPE_2A
 = 1 << 23,

132 
	mIBV_DEVICE_MEM_WINDOW_TYPE_2B
 = 1 << 24,

133 
	mIBV_DEVICE_MANAGED_FLOW_STEERING
 = 1 << 29

136 
	eibv_©omic_ˇp
 {

137 
	mIBV_ATOMIC_NONE
,

138 
	mIBV_ATOMIC_HCA
,

139 
	mIBV_ATOMIC_GLOB


142 
	sibv_devi˚_©å
 {

143 
	mfw_vî
[64];

144 
uöt64_t
 
	mnode_guid
;

145 
uöt64_t
 
	msys_image_guid
;

146 
uöt64_t
 
	mmax_mr_size
;

147 
uöt64_t
 
	m∑ge_size_ˇp
;

148 
uöt32_t
 
	mvíd‹_id
;

149 
uöt32_t
 
	mvíd‹_∑π_id
;

150 
uöt32_t
 
	mhw_vî
;

151 
	mmax_qp
;

152 
	mmax_qp_wr
;

153 
uöt32_t
 
	mdevi˚_ˇp_Êags
;

154 
	mmax_sge
;

155 
	mmax_sge_rd
;

156 
	mmax_cq
;

157 
	mmax_cqe
;

158 
	mmax_mr
;

159 
	mmax_pd
;

160 
	mmax_qp_rd_©om
;

161 
	mmax_ì_rd_©om
;

162 
	mmax_ªs_rd_©om
;

163 
	mmax_qp_öô_rd_©om
;

164 
	mmax_ì_öô_rd_©om
;

165 
ibv_©omic_ˇp
 
	m©omic_ˇp
;

166 
	mmax_ì
;

167 
	mmax_rdd
;

168 
	mmax_mw
;

169 
	mmax_øw_ùv6_qp
;

170 
	mmax_øw_ëhy_qp
;

171 
	mmax_mˇ°_gΩ
;

172 
	mmax_mˇ°_qp_©èch
;

173 
	mmax_tŸÆ_mˇ°_qp_©èch
;

174 
	mmax_ah
;

175 
	mmax_fmr
;

176 
	mmax_m≠_≥r_fmr
;

177 
	mmax_§q
;

178 
	mmax_§q_wr
;

179 
	mmax_§q_sge
;

180 
uöt16_t
 
	mmax_pkeys
;

181 
uöt8_t
 
	mloˇl_ˇ_ack_dñay
;

182 
uöt8_t
 
	mphys_p‹t_˙t
;

187 
	sibv_quîy_devi˚_ex_öput
 {

188 
uöt32_t
 
	mcomp_mask
;

191 
	eibv_odp_å™•‹t_ˇp_bôs
 {

192 
	mIBV_ODP_SUPPORT_SEND
 = 1 << 0,

193 
	mIBV_ODP_SUPPORT_RECV
 = 1 << 1,

194 
	mIBV_ODP_SUPPORT_WRITE
 = 1 << 2,

195 
	mIBV_ODP_SUPPORT_READ
 = 1 << 3,

196 
	mIBV_ODP_SUPPORT_ATOMIC
 = 1 << 4,

199 
	sibv_odp_ˇps
 {

200 
uöt64_t
 
	mgíîÆ_ˇps
;

202 
uöt32_t
 
	mrc_odp_ˇps
;

203 
uöt32_t
 
	muc_odp_ˇps
;

204 
uöt32_t
 
	mud_odp_ˇps
;

205 } 
	m≥r_å™•‹t_ˇps
;

208 
	eibv_odp_gíîÆ_ˇps
 {

209 
	mIBV_ODP_SUPPORT
 = 1 << 0,

212 
	sibv_devi˚_©å_ex
 {

213 
ibv_devi˚_©å
 
	m‹ig_©å
;

214 
uöt32_t
 
	mcomp_mask
;

215 
ibv_odp_ˇps
 
	modp_ˇps
;

218 
	eibv_mtu
 {

219 
	mIBV_MTU_256
 = 1,

220 
	mIBV_MTU_512
 = 2,

221 
	mIBV_MTU_1024
 = 3,

222 
	mIBV_MTU_2048
 = 4,

223 
	mIBV_MTU_4096
 = 5

226 
	eibv_p‹t_°©e
 {

227 
	mIBV_PORT_NOP
 = 0,

228 
	mIBV_PORT_DOWN
 = 1,

229 
	mIBV_PORT_INIT
 = 2,

230 
	mIBV_PORT_ARMED
 = 3,

231 
	mIBV_PORT_ACTIVE
 = 4,

232 
	mIBV_PORT_ACTIVE_DEFER
 = 5

236 
	mIBV_LINK_LAYER_UNSPECIFIED
,

237 
	mIBV_LINK_LAYER_INFINIBAND
,

238 
	mIBV_LINK_LAYER_ETHERNET
,

243 
	mIBV_EXP_LINK_LAYER_START
 = 32,

244 
	mIBV_EXP_LINK_LAYER_SCIF
 = 
IBV_EXP_LINK_LAYER_START


247 
	eibv_p‹t_ˇp_Êags
 {

248 
	mIBV_PORT_SM
 = 1 << 1,

249 
	mIBV_PORT_NOTICE_SUP
 = 1 << 2,

250 
	mIBV_PORT_TRAP_SUP
 = 1 << 3,

251 
	mIBV_PORT_OPT_IPD_SUP
 = 1 << 4,

252 
	mIBV_PORT_AUTO_MIGR_SUP
 = 1 << 5,

253 
	mIBV_PORT_SL_MAP_SUP
 = 1 << 6,

254 
	mIBV_PORT_MKEY_NVRAM
 = 1 << 7,

255 
	mIBV_PORT_PKEY_NVRAM
 = 1 << 8,

256 
	mIBV_PORT_LED_INFO_SUP
 = 1 << 9,

257 
	mIBV_PORT_SYS_IMAGE_GUID_SUP
 = 1 << 11,

258 
	mIBV_PORT_PKEY_SW_EXT_PORT_TRAP_SUP
 = 1 << 12,

259 
	mIBV_PORT_EXTENDED_SPEEDS_SUP
 = 1 << 14,

260 
	mIBV_PORT_CM_SUP
 = 1 << 16,

261 
	mIBV_PORT_SNMP_TUNNEL_SUP
 = 1 << 17,

262 
	mIBV_PORT_REINIT_SUP
 = 1 << 18,

263 
	mIBV_PORT_DEVICE_MGMT_SUP
 = 1 << 19,

264 
	mIBV_PORT_VENDOR_CLASS
 = 1 << 24,

265 
	mIBV_PORT_CLIENT_REG_SUP
 = 1 << 25,

266 
	mIBV_PORT_IP_BASED_GIDS
 = 1 << 26,

269 
	sibv_p‹t_©å
 {

270 
ibv_p‹t_°©e
 
	m°©e
;

271 
ibv_mtu
 
	mmax_mtu
;

272 
ibv_mtu
 
	ma˘ive_mtu
;

273 
	mgid_tbl_Àn
;

274 
uöt32_t
 
	mp‹t_ˇp_Êags
;

275 
uöt32_t
 
	mmax_msg_sz
;

276 
uöt32_t
 
	mbad_pkey_˙å
;

277 
uöt32_t
 
	mqkey_viﬁ_˙å
;

278 
uöt16_t
 
	mpkey_tbl_Àn
;

279 
uöt16_t
 
	mlid
;

280 
uöt16_t
 
	msm_lid
;

281 
uöt8_t
 
	mlmc
;

282 
uöt8_t
 
	mmax_vl_num
;

283 
uöt8_t
 
	msm_¶
;

284 
uöt8_t
 
	msub√t_timeout
;

285 
uöt8_t
 
	möô_ty≥_ª∂y
;

286 
uöt8_t
 
	ma˘ive_width
;

287 
uöt8_t
 
	ma˘ive_•ìd
;

288 
uöt8_t
 
	mphys_°©e
;

289 
uöt8_t
 
	mlök_œyî
;

290 
uöt8_t
 
	mª£rved
;

293 
	eibv_evít_ty≥
 {

294 
	mIBV_EVENT_CQ_ERR
,

295 
	mIBV_EVENT_QP_FATAL
,

296 
	mIBV_EVENT_QP_REQ_ERR
,

297 
	mIBV_EVENT_QP_ACCESS_ERR
,

298 
	mIBV_EVENT_COMM_EST
,

299 
	mIBV_EVENT_SQ_DRAINED
,

300 
	mIBV_EVENT_PATH_MIG
,

301 
	mIBV_EVENT_PATH_MIG_ERR
,

302 
	mIBV_EVENT_DEVICE_FATAL
,

303 
	mIBV_EVENT_PORT_ACTIVE
,

304 
	mIBV_EVENT_PORT_ERR
,

305 
	mIBV_EVENT_LID_CHANGE
,

306 
	mIBV_EVENT_PKEY_CHANGE
,

307 
	mIBV_EVENT_SM_CHANGE
,

308 
	mIBV_EVENT_SRQ_ERR
,

309 
	mIBV_EVENT_SRQ_LIMIT_REACHED
,

310 
	mIBV_EVENT_QP_LAST_WQE_REACHED
,

311 
	mIBV_EVENT_CLIENT_REREGISTER
,

312 
	mIBV_EVENT_GID_CHANGE
,

317 
	mIBV_EXP_EVENT_DCT_KEY_VIOLATION
 = 32,

318 
	mIBV_EXP_EVENT_DCT_ACCESS_ERR
,

319 
	mIBV_EXP_EVENT_DCT_REQ_ERR
,

322 
	sibv_async_evít
 {

324 
ibv_cq
 *
	mcq
;

325 
ibv_qp
 *
	mqp
;

326 
ibv_§q
 *
	m§q
;

327 
ibv_exp_d˘
 *
	md˘
;

328 
	mp‹t_num
;

330 
uöt32_t
 
	mxrc_qp_num
;

331 } 
	mñemít
;

332 
ibv_evít_ty≥
 
	mevít_ty≥
;

335 
	eibv_wc_°©us
 {

336 
	mIBV_WC_SUCCESS
,

337 
	mIBV_WC_LOC_LEN_ERR
,

338 
	mIBV_WC_LOC_QP_OP_ERR
,

339 
	mIBV_WC_LOC_EEC_OP_ERR
,

340 
	mIBV_WC_LOC_PROT_ERR
,

341 
	mIBV_WC_WR_FLUSH_ERR
,

342 
	mIBV_WC_MW_BIND_ERR
,

343 
	mIBV_WC_BAD_RESP_ERR
,

344 
	mIBV_WC_LOC_ACCESS_ERR
,

345 
	mIBV_WC_REM_INV_REQ_ERR
,

346 
	mIBV_WC_REM_ACCESS_ERR
,

347 
	mIBV_WC_REM_OP_ERR
,

348 
	mIBV_WC_RETRY_EXC_ERR
,

349 
	mIBV_WC_RNR_RETRY_EXC_ERR
,

350 
	mIBV_WC_LOC_RDD_VIOL_ERR
,

351 
	mIBV_WC_REM_INV_RD_REQ_ERR
,

352 
	mIBV_WC_REM_ABORT_ERR
,

353 
	mIBV_WC_INV_EECN_ERR
,

354 
	mIBV_WC_INV_EEC_STATE_ERR
,

355 
	mIBV_WC_FATAL_ERR
,

356 
	mIBV_WC_RESP_TIMEOUT_ERR
,

357 
	mIBV_WC_GENERAL_ERR


359 c⁄° *
ibv_wc_°©us_°r
(
ibv_wc_°©us
 
°©us
);

361 
	eibv_wc_›code
 {

362 
	mIBV_WC_SEND
,

363 
	mIBV_WC_RDMA_WRITE
,

364 
	mIBV_WC_RDMA_READ
,

365 
	mIBV_WC_COMP_SWAP
,

366 
	mIBV_WC_FETCH_ADD
,

367 
	mIBV_WC_BIND_MW
,

368 
	mIBV_WC_LOCAL_INV
,

373 
	mIBV_WC_RECV
 = 1 << 7,

374 
	mIBV_WC_RECV_RDMA_WITH_IMM


377 
	eibv_wc_Êags
 {

378 
	mIBV_WC_GRH
 = 1 << 0,

379 
	mIBV_WC_WITH_IMM
 = 1 << 1,

380 
	mIBV_WC_WITH_INV
 = 1 << 3

383 
	sibv_wc
 {

384 
uöt64_t
 
	mwr_id
;

385 
ibv_wc_°©us
 
	m°©us
;

386 
ibv_wc_›code
 
	m›code
;

387 
uöt32_t
 
	mvíd‹_îr
;

388 
uöt32_t
 
	mbyã_Àn
;

392 
uöt32_t
 
	mimm_d©a
;

393 
uöt32_t
 
	mqp_num
;

394 
uöt32_t
 
	m§c_qp
;

395 
	mwc_Êags
;

396 
uöt16_t
 
	mpkey_ödex
;

397 
uöt16_t
 
	m¶id
;

398 
uöt8_t
 
	m¶
;

399 
uöt8_t
 
	mdlid_∑th_bôs
;

402 
	eibv_ac˚ss_Êags
 {

403 
	mIBV_ACCESS_LOCAL_WRITE
 = 1,

404 
	mIBV_ACCESS_REMOTE_WRITE
 = (1<<1),

405 
	mIBV_ACCESS_REMOTE_READ
 = (1<<2),

406 
	mIBV_ACCESS_REMOTE_ATOMIC
 = (1<<3),

407 
	mIBV_ACCESS_MW_BIND
 = (1<<4),

408 
	mIBV_ACCESS_ZERO_BASED
 = (1<<5),

409 
	mIBV_ACCESS_ON_DEMAND
 = (1<<6),

412 
	sibv_mw_böd_öfo
 {

413 
ibv_mr
 *
	mmr
;

414 
uöt64_t
 
	maddr
;

415 
uöt64_t
 
	mÀngth
;

416 
	mmw_ac˚ss_Êags
;

419 
	sibv_pd
 {

420 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

421 
uöt32_t
 
	mh™dÀ
;

424 
	eibv_xrcd_öô_©å_mask
 {

425 
	mIBV_XRCD_INIT_ATTR_FD
 = 1 << 0,

426 
	mIBV_XRCD_INIT_ATTR_OFLAGS
 = 1 << 1,

427 
	mIBV_XRCD_INIT_ATTR_RESERVED
 = 1 << 2

430 
	sibv_xrcd_öô_©å
 {

431 
uöt32_t
 
	mcomp_mask
;

432 
	mfd
;

433 
	moÊags
;

436 
	sibv_xrcd
 {

437 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

440 
	eibv_ªªg_mr_Êags
 {

441 
	mIBV_REREG_MR_CHANGE_TRANSLATION
 = (1 << 0),

442 
	mIBV_REREG_MR_CHANGE_PD
 = (1 << 1),

443 
	mIBV_REREG_MR_CHANGE_ACCESS
 = (1 << 2),

444 
	mIBV_REREG_MR_KEEP_VALID
 = (1 << 3),

445 
	mIBV_REREG_MR_FLAGS_SUPPORTED
 = ((
IBV_REREG_MR_KEEP_VALID
 << 1) - 1)

448 
	sibv_mr
 {

449 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

450 
ibv_pd
 *
	mpd
;

451 *
	maddr
;

452 
size_t
 
	mÀngth
;

453 
uöt32_t
 
	mh™dÀ
;

454 
uöt32_t
 
	mlkey
;

455 
uöt32_t
 
	mrkey
;

458 
	eibv_mw_ty≥
 {

459 
	mIBV_MW_TYPE_1
 = 1,

460 
	mIBV_MW_TYPE_2
 = 2

463 
	sibv_mw
 {

464 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

465 
ibv_pd
 *
	mpd
;

466 
uöt32_t
 
	mrkey
;

467 
uöt32_t
 
	mh™dÀ
;

468 
ibv_mw_ty≥
 
	mty≥
;

471 
	sibv_globÆ_rouã
 {

472 
ibv_gid
 
	mdgid
;

473 
uöt32_t
 
	mÊow_œbñ
;

474 
uöt8_t
 
	msgid_ödex
;

475 
uöt8_t
 
	mh›_limô
;

476 
uöt8_t
 
	måaffic_˛ass
;

479 
	sibv_grh
 {

480 
uöt32_t
 
	mvîsi⁄_t˛ass_Êow
;

481 
uöt16_t
 
	m∑yÀn
;

482 
uöt8_t
 
	m√xt_hdr
;

483 
uöt8_t
 
	mh›_limô
;

484 
ibv_gid
 
	msgid
;

485 
ibv_gid
 
	mdgid
;

488 
	eibv_øã
 {

489 
	mIBV_RATE_MAX
 = 0,

490 
	mIBV_RATE_2_5_GBPS
 = 2,

491 
	mIBV_RATE_5_GBPS
 = 5,

492 
	mIBV_RATE_10_GBPS
 = 3,

493 
	mIBV_RATE_20_GBPS
 = 6,

494 
	mIBV_RATE_30_GBPS
 = 4,

495 
	mIBV_RATE_40_GBPS
 = 7,

496 
	mIBV_RATE_60_GBPS
 = 8,

497 
	mIBV_RATE_80_GBPS
 = 9,

498 
	mIBV_RATE_120_GBPS
 = 10,

499 
	mIBV_RATE_14_GBPS
 = 11,

500 
	mIBV_RATE_56_GBPS
 = 12,

501 
	mIBV_RATE_112_GBPS
 = 13,

502 
	mIBV_RATE_168_GBPS
 = 14,

503 
	mIBV_RATE_25_GBPS
 = 15,

504 
	mIBV_RATE_100_GBPS
 = 16,

505 
	mIBV_RATE_200_GBPS
 = 17,

506 
	mIBV_RATE_300_GBPS
 = 18

515 
	$ibv_øã_to_mu…
(
ibv_øã
 
øã
Ë
__©åibuã_c⁄°
;

521 
ibv_øã
 
	$mu…_to_ibv_øã
(
mu…
Ë
__©åibuã_c⁄°
;

528 
	$ibv_øã_to_mbps
(
ibv_øã
 
øã
Ë
__©åibuã_c⁄°
;

534 
ibv_øã
 
	$mbps_to_ibv_øã
(
mbps
Ë
__©åibuã_c⁄°
;

536 
	sibv_ah_©å
 {

537 
ibv_globÆ_rouã
 
grh
;

538 
uöt16_t
 
dlid
;

539 
uöt8_t
 
¶
;

540 
uöt8_t
 
§c_∑th_bôs
;

541 
uöt8_t
 
°©ic_øã
;

542 
uöt8_t
 
is_globÆ
;

543 
uöt8_t
 
p‹t_num
;

546 
	eibv_§q_©å_mask
 {

547 
IBV_SRQ_MAX_WR
 = 1 << 0,

548 
IBV_SRQ_LIMIT
 = 1 << 1

551 
	sibv_§q_©å
 {

552 
uöt32_t
 
max_wr
;

553 
uöt32_t
 
max_sge
;

554 
uöt32_t
 
§q_limô
;

557 
	sibv_§q_öô_©å
 {

558 *
§q_c⁄ãxt
;

559 
ibv_§q_©å
 
©å
;

562 
	eibv_§q_ty≥
 {

563 
IBV_SRQT_BASIC
,

564 
IBV_SRQT_XRC


567 
	eibv_§q_öô_©å_mask
 {

568 
IBV_SRQ_INIT_ATTR_TYPE
 = 1 << 0,

569 
IBV_SRQ_INIT_ATTR_PD
 = 1 << 1,

570 
IBV_SRQ_INIT_ATTR_XRCD
 = 1 << 2,

571 
IBV_SRQ_INIT_ATTR_CQ
 = 1 << 3,

572 
IBV_SRQ_INIT_ATTR_RESERVED
 = 1 << 4

575 
	sibv_§q_öô_©å_ex
 {

576 *
§q_c⁄ãxt
;

577 
ibv_§q_©å
 
©å
;

579 
uöt32_t
 
comp_mask
;

580 
ibv_§q_ty≥
 
§q_ty≥
;

581 
ibv_pd
 *
pd
;

582 
ibv_xrcd
 *
xrcd
;

583 
ibv_cq
 *
cq
;

586 
	eibv_qp_ty≥
 {

587 
IBV_QPT_RC
 = 2,

588 
IBV_QPT_UC
,

589 
IBV_QPT_UD
,

591 
IBV_QPT_XRC
,

592 
IBV_QPT_RAW_PACKET
 = 8,

593 
IBV_QPT_RAW_ETH
 = 8,

594 
IBV_QPT_XRC_SEND
 = 9,

595 
IBV_QPT_XRC_RECV
,

600 
IBV_EXP_QP_TYPE_START
 = 32,

601 
IBV_EXP_QPT_DC_INI
 = 
IBV_EXP_QP_TYPE_START


604 
	sibv_qp_ˇp
 {

605 
uöt32_t
 
max_£nd_wr
;

606 
uöt32_t
 
max_ªcv_wr
;

607 
uöt32_t
 
max_£nd_sge
;

608 
uöt32_t
 
max_ªcv_sge
;

609 
uöt32_t
 
max_ölöe_d©a
;

612 
	sibv_qp_öô_©å
 {

613 *
qp_c⁄ãxt
;

614 
ibv_cq
 *
£nd_cq
;

615 
ibv_cq
 *
ªcv_cq
;

616 
ibv_§q
 *
§q
;

617 
ibv_qp_ˇp
 
ˇp
;

618 
ibv_qp_ty≥
 
qp_ty≥
;

619 
sq_sig_Æl
;

621 
ibv_xrc_domaö
 *
xrc_domaö
;

624 
	eibv_qp_öô_©å_mask
 {

625 
IBV_QP_INIT_ATTR_PD
 = 1 << 0,

626 
IBV_QP_INIT_ATTR_XRCD
 = 1 << 1,

627 
IBV_QP_INIT_ATTR_RESERVED
 = 1 << 2

630 
	sibv_qp_öô_©å_ex
 {

631 *
qp_c⁄ãxt
;

632 
ibv_cq
 *
£nd_cq
;

633 
ibv_cq
 *
ªcv_cq
;

634 
ibv_§q
 *
§q
;

635 
ibv_qp_ˇp
 
ˇp
;

636 
ibv_qp_ty≥
 
qp_ty≥
;

637 
sq_sig_Æl
;

639 
uöt32_t
 
comp_mask
;

640 
ibv_pd
 *
pd
;

641 
ibv_xrcd
 *
xrcd
;

644 
	eibv_qp_›í_©å_mask
 {

645 
IBV_QP_OPEN_ATTR_NUM
 = 1 << 0,

646 
IBV_QP_OPEN_ATTR_XRCD
 = 1 << 1,

647 
IBV_QP_OPEN_ATTR_CONTEXT
 = 1 << 2,

648 
IBV_QP_OPEN_ATTR_TYPE
 = 1 << 3,

649 
IBV_QP_OPEN_ATTR_RESERVED
 = 1 << 4

652 
	sibv_qp_›í_©å
 {

653 
uöt32_t
 
comp_mask
;

654 
uöt32_t
 
qp_num
;

655 
ibv_xrcd
 *
xrcd
;

656 *
qp_c⁄ãxt
;

657 
ibv_qp_ty≥
 
qp_ty≥
;

660 
	eibv_qp_©å_mask
 {

661 
IBV_QP_STATE
 = 1 << 0,

662 
IBV_QP_CUR_STATE
 = 1 << 1,

663 
IBV_QP_EN_SQD_ASYNC_NOTIFY
 = 1 << 2,

664 
IBV_QP_ACCESS_FLAGS
 = 1 << 3,

665 
IBV_QP_PKEY_INDEX
 = 1 << 4,

666 
IBV_QP_PORT
 = 1 << 5,

667 
IBV_QP_QKEY
 = 1 << 6,

668 
IBV_QP_AV
 = 1 << 7,

669 
IBV_QP_PATH_MTU
 = 1 << 8,

670 
IBV_QP_TIMEOUT
 = 1 << 9,

671 
IBV_QP_RETRY_CNT
 = 1 << 10,

672 
IBV_QP_RNR_RETRY
 = 1 << 11,

673 
IBV_QP_RQ_PSN
 = 1 << 12,

674 
IBV_QP_MAX_QP_RD_ATOMIC
 = 1 << 13,

675 
IBV_QP_ALT_PATH
 = 1 << 14,

676 
IBV_QP_MIN_RNR_TIMER
 = 1 << 15,

677 
IBV_QP_SQ_PSN
 = 1 << 16,

678 
IBV_QP_MAX_DEST_RD_ATOMIC
 = 1 << 17,

679 
IBV_QP_PATH_MIG_STATE
 = 1 << 18,

680 
IBV_QP_CAP
 = 1 << 19,

681 
IBV_QP_DEST_QPN
 = 1 << 20

684 
	eibv_qp_°©e
 {

685 
IBV_QPS_RESET
,

686 
IBV_QPS_INIT
,

687 
IBV_QPS_RTR
,

688 
IBV_QPS_RTS
,

689 
IBV_QPS_SQD
,

690 
IBV_QPS_SQE
,

691 
IBV_QPS_ERR
,

692 
IBV_QPS_UNKNOWN


695 
	eibv_mig_°©e
 {

696 
IBV_MIG_MIGRATED
,

697 
IBV_MIG_REARM
,

698 
IBV_MIG_ARMED


701 
	sibv_qp_©å
 {

702 
ibv_qp_°©e
 
qp_°©e
;

703 
ibv_qp_°©e
 
cur_qp_°©e
;

704 
ibv_mtu
 
∑th_mtu
;

705 
ibv_mig_°©e
 
∑th_mig_°©e
;

706 
uöt32_t
 
qkey
;

707 
uöt32_t
 
rq_p¢
;

708 
uöt32_t
 
sq_p¢
;

709 
uöt32_t
 
de°_qp_num
;

710 
qp_ac˚ss_Êags
;

711 
ibv_qp_ˇp
 
ˇp
;

712 
ibv_ah_©å
 
ah_©å
;

713 
ibv_ah_©å
 
Æt_ah_©å
;

714 
uöt16_t
 
pkey_ödex
;

715 
uöt16_t
 
Æt_pkey_ödex
;

716 
uöt8_t
 
í_sqd_async_nŸify
;

717 
uöt8_t
 
sq_døöög
;

718 
uöt8_t
 
max_rd_©omic
;

719 
uöt8_t
 
max_de°_rd_©omic
;

720 
uöt8_t
 
mö_∫r_timî
;

721 
uöt8_t
 
p‹t_num
;

722 
uöt8_t
 
timeout
;

723 
uöt8_t
 
ªåy_˙t
;

724 
uöt8_t
 
∫r_ªåy
;

725 
uöt8_t
 
Æt_p‹t_num
;

726 
uöt8_t
 
Æt_timeout
;

729 
	eibv_wr_›code
 {

730 
IBV_WR_RDMA_WRITE
,

731 
IBV_WR_RDMA_WRITE_WITH_IMM
,

732 
IBV_WR_SEND
,

733 
IBV_WR_SEND_WITH_IMM
,

734 
IBV_WR_RDMA_READ
,

735 
IBV_WR_ATOMIC_CMP_AND_SWP
,

736 
IBV_WR_ATOMIC_FETCH_AND_ADD
,

737 
IBV_WR_LOCAL_INV
,

738 
IBV_WR_BIND_MW
,

739 
IBV_WR_SEND_WITH_INV
,

742 
	eibv_£nd_Êags
 {

743 
IBV_SEND_FENCE
 = 1 << 0,

744 
IBV_SEND_SIGNALED
 = 1 << 1,

745 
IBV_SEND_SOLICITED
 = 1 << 2,

746 
IBV_SEND_INLINE
 = 1 << 3

749 
	sibv_sge
 {

750 
uöt64_t
 
addr
;

751 
uöt32_t
 
Àngth
;

752 
uöt32_t
 
lkey
;

755 
	sibv_£nd_wr
 {

756 
uöt64_t
 
wr_id
;

757 
ibv_£nd_wr
 *
√xt
;

758 
ibv_sge
 *
sg_li°
;

759 
num_sge
;

760 
ibv_wr_›code
 
›code
;

761 
£nd_Êags
;

762 
uöt32_t
 
imm_d©a
;

765 
uöt64_t
 
ªmŸe_addr
;

766 
uöt32_t
 
rkey
;

767 } 
rdma
;

769 
uöt64_t
 
ªmŸe_addr
;

770 
uöt64_t
 
com∑ª_add
;

771 
uöt64_t
 
sw≠
;

772 
uöt32_t
 
rkey
;

773 } 
©omic
;

775 
ibv_ah
 *
ah
;

776 
uöt32_t
 
ªmŸe_q≤
;

777 
uöt32_t
 
ªmŸe_qkey
;

778 } 
ud
;

779 } 
wr
;

783 
uöt32_t
 
ªmŸe_§qn
;

784 } 
xrc
;

785 } 
qp_ty≥
;

787 
uöt32_t
 
xrc_ªmŸe_§q_num
;

790 
ibv_mw
 *
mw
;

791 
uöt32_t
 
rkey
;

792 
ibv_mw_böd_öfo
 
böd_öfo
;

793 } 
böd_mw
;

796 
	sibv_ªcv_wr
 {

797 
uöt64_t
 
wr_id
;

798 
ibv_ªcv_wr
 *
√xt
;

799 
ibv_sge
 *
sg_li°
;

800 
num_sge
;

803 
	sibv_mw_böd
 {

804 
uöt64_t
 
wr_id
;

805 
£nd_Êags
;

806 
ibv_mw_böd_öfo
 
böd_öfo
;

809 
	sibv_§q
 {

810 
ibv_c⁄ãxt
 *
c⁄ãxt
;

811 *
§q_c⁄ãxt
;

812 
ibv_pd
 *
pd
;

813 
uöt32_t
 
h™dÀ
;

815 
±hªad_muãx_t
 
muãx
;

816 
±hªad_c⁄d_t
 
c⁄d
;

817 
uöt32_t
 
evíts_com∂ëed
;

822 
uöt32_t
 
xrc_§q_num_bö_com∑t_∑ddög
;

823 
ibv_xrc_domaö
 *
xrc_domaö_bö_com∑t_∑ddög
;

824 
ibv_cq
 *
xrc_cq_bö_com∑t_∑ddög
;

825 *
ibv_§q_∑ddög
;

828 
uöt32_t
 
xrc_§q_num
;

829 
ibv_xrc_domaö
 *
xrc_domaö
;

830 
ibv_cq
 *
xrc_cq
;

834 
	eibv_evít_Êags
 {

835 
IBV_XRC_QP_EVENT_FLAG
 = 0x80000000,

840 
	sibv_qp
 {

841 
ibv_c⁄ãxt
 *
c⁄ãxt
;

842 *
qp_c⁄ãxt
;

843 
ibv_pd
 *
pd
;

844 
ibv_cq
 *
£nd_cq
;

845 
ibv_cq
 *
ªcv_cq
;

846 
ibv_§q
 *
§q
;

847 
uöt32_t
 
h™dÀ
;

848 
uöt32_t
 
qp_num
;

849 
ibv_qp_°©e
 
°©e
;

850 
ibv_qp_ty≥
 
qp_ty≥
;

852 
±hªad_muãx_t
 
muãx
;

853 
±hªad_c⁄d_t
 
c⁄d
;

854 
uöt32_t
 
evíts_com∂ëed
;

857 
	sibv_comp_ch™√l
 {

858 
ibv_c⁄ãxt
 *
c⁄ãxt
;

859 
fd
;

860 
ªf˙t
;

863 
	sibv_cq
 {

864 
ibv_c⁄ãxt
 *
c⁄ãxt
;

865 
ibv_comp_ch™√l
 *
ch™√l
;

866 *
cq_c⁄ãxt
;

867 
uöt32_t
 
h™dÀ
;

868 
cqe
;

870 
±hªad_muãx_t
 
muãx
;

871 
±hªad_c⁄d_t
 
c⁄d
;

872 
uöt32_t
 
comp_evíts_com∂ëed
;

873 
uöt32_t
 
async_evíts_com∂ëed
;

876 
	sibv_ah
 {

877 
ibv_c⁄ãxt
 *
c⁄ãxt
;

878 
ibv_pd
 *
pd
;

879 
uöt32_t
 
h™dÀ
;

882 
	eibv_Êow_Êags
 {

883 
IBV_FLOW_ATTR_FLAGS_ALLOW_LOOP_BACK
 = 1,

884 
IBV_FLOW_ATTR_FLAGS_DONT_TRAP
 = 1 << 1,

887 
	eibv_Êow_©å_ty≥
 {

889 
IBV_FLOW_ATTR_NORMAL
 = 0x0,

893 
IBV_FLOW_ATTR_ALL_DEFAULT
 = 0x1,

897 
IBV_FLOW_ATTR_MC_DEFAULT
 = 0x2,

900 
	eibv_Êow_•ec_ty≥
 {

901 
IBV_FLOW_SPEC_ETH
 = 0x20,

902 
IBV_FLOW_SPEC_IPV4
 = 0x30,

903 
IBV_FLOW_SPEC_TCP
 = 0x40,

904 
IBV_FLOW_SPEC_UDP
 = 0x41,

907 
	sibv_Êow_ëh_fûãr
 {

908 
uöt8_t
 
d°_mac
[6];

909 
uöt8_t
 
§c_mac
[6];

910 
uöt16_t
 
ëhî_ty≥
;

914 
uöt16_t
 
vœn_èg
;

917 
	sibv_Êow_•ec_ëh
 {

918 
ibv_Êow_•ec_ty≥
 
ty≥
;

919 
uöt16_t
 
size
;

920 
ibv_Êow_ëh_fûãr
 
vÆ
;

921 
ibv_Êow_ëh_fûãr
 
mask
;

924 
	sibv_Êow_ùv4_fûãr
 {

925 
uöt32_t
 
§c_ù
;

926 
uöt32_t
 
d°_ù
;

929 
	sibv_Êow_•ec_ùv4
 {

930 
ibv_Êow_•ec_ty≥
 
ty≥
;

931 
uöt16_t
 
size
;

932 
ibv_Êow_ùv4_fûãr
 
vÆ
;

933 
ibv_Êow_ùv4_fûãr
 
mask
;

936 
	sibv_Êow_t˝_udp_fûãr
 {

937 
uöt16_t
 
d°_p‹t
;

938 
uöt16_t
 
§c_p‹t
;

941 
	sibv_Êow_•ec_t˝_udp
 {

942 
ibv_Êow_•ec_ty≥
 
ty≥
;

943 
uöt16_t
 
size
;

944 
ibv_Êow_t˝_udp_fûãr
 
vÆ
;

945 
ibv_Êow_t˝_udp_fûãr
 
mask
;

948 
	sibv_Êow_•ec
 {

951 
ibv_Êow_•ec_ty≥
 
ty≥
;

952 
uöt16_t
 
size
;

953 } 
hdr
;

954 
ibv_Êow_•ec_ëh
 
ëh
;

955 
ibv_Êow_•ec_ùv4
 
ùv4
;

956 
ibv_Êow_•ec_t˝_udp
 
t˝_udp
;

960 
	sibv_Êow_©å
 {

961 
uöt32_t
 
comp_mask
;

962 
ibv_Êow_©å_ty≥
 
ty≥
;

963 
uöt16_t
 
size
;

964 
uöt16_t
 
¥i‹ôy
;

965 
uöt8_t
 
num_of_•ecs
;

966 
uöt8_t
 
p‹t
;

967 
uöt32_t
 
Êags
;

974 
	sibv_Êow
 {

975 
uöt32_t
 
comp_mask
;

976 
ibv_c⁄ãxt
 *
c⁄ãxt
;

977 
uöt32_t
 
h™dÀ
;

980 
ibv_devi˚
;

981 
ibv_c⁄ãxt
;

983 
	sibv_devi˚_›s
 {

984 
ibv_c⁄ãxt
 * (*
Æloc_c⁄ãxt
)(
ibv_devi˚
 *
devi˚
, 
cmd_fd
);

985 (*
‰ì_c⁄ãxt
)(
ibv_c⁄ãxt
 *
c⁄ãxt
);

989 
IBV_SYSFS_NAME_MAX
 = 64,

990 
IBV_SYSFS_PATH_MAX
 = 256

993 
	sibv_devi˚
 {

994 
ibv_devi˚_›s
 
›s
;

995 
ibv_node_ty≥
 
node_ty≥
;

996 
ibv_å™•‹t_ty≥
 
å™•‹t_ty≥
;

998 
«me
[
IBV_SYSFS_NAME_MAX
];

1000 
dev_«me
[
IBV_SYSFS_NAME_MAX
];

1002 
dev_∑th
[
IBV_SYSFS_PATH_MAX
];

1004 
ibdev_∑th
[
IBV_SYSFS_PATH_MAX
];

1007 
	svîbs_devi˚
 {

1008 
ibv_devi˚
 
devi˚
;

1009 
size_t
 
sz
;

1010 
size_t
 
size_of_c⁄ãxt
;

1011 (*
öô_c⁄ãxt
)(
vîbs_devi˚
 *
devi˚
,

1012 
ibv_c⁄ãxt
 *
˘x
, 
cmd_fd
);

1013 (*
unöô_c⁄ãxt
)(
vîbs_devi˚
 *
devi˚
,

1014 
ibv_c⁄ãxt
 *
˘x
);

1016 
ªfcou¡
;

1017 
±hªad_muãx_t
 
ªÊock
;

1018 (*
vîbs_unöô_func
)(
vîbs_devi˚
 *
devi˚
);

1021 
	sibv_c⁄ãxt_›s
 {

1022 (*
quîy_devi˚
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1023 
ibv_devi˚_©å
 *
devi˚_©å
);

1024 (*
quîy_p‹t
)(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1025 
ibv_p‹t_©å
 *
p‹t_©å
);

1026 
ibv_pd
 * (*
Æloc_pd
)(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1027 (*
dóŒoc_pd
)(
ibv_pd
 *
pd
);

1028 
ibv_mr
 * (*
ªg_mr
)(
ibv_pd
 *
pd
, *
addr
, 
size_t
 
Àngth
,

1029 
ac˚ss
);

1030 (*
ªªg_mr
)(
ibv_mr
 *
mr
,

1031 
Êags
,

1032 
ibv_pd
 *
pd
, *
addr
,

1033 
size_t
 
Àngth
,

1034 
ac˚ss
);

1035 (*
dîeg_mr
)(
ibv_mr
 *
mr
);

1036 
ibv_mw
 * (*
Æloc_mw
)(
ibv_pd
 *
pd
, 
ibv_mw_ty≥
 
ty≥
);

1037 (*
böd_mw
)(
ibv_qp
 *
qp
, 
ibv_mw
 *
mw
,

1038 
ibv_mw_böd
 *
mw_böd
);

1039 (*
dóŒoc_mw
)(
ibv_mw
 *
mw
);

1040 
ibv_cq
 * (*
¸óã_cq
)(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

1041 
ibv_comp_ch™√l
 *
ch™√l
,

1042 
comp_ve˘‹
);

1043 (*
pﬁl_cq
)(
ibv_cq
 *
cq
, 
num_íåõs
, 
ibv_wc
 *
wc
);

1044 (*
ªq_nŸify_cq
)(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
);

1045 (*
cq_evít
)(
ibv_cq
 *
cq
);

1046 (*
ªsize_cq
)(
ibv_cq
 *
cq
, 
cqe
);

1047 (*
de°roy_cq
)(
ibv_cq
 *
cq
);

1048 
ibv_§q
 * (*
¸óã_§q
)(
ibv_pd
 *
pd
,

1049 
ibv_§q_öô_©å
 *
§q_öô_©å
);

1050 (*
modify_§q
)(
ibv_§q
 *
§q
,

1051 
ibv_§q_©å
 *
§q_©å
,

1052 
§q_©å_mask
);

1053 (*
quîy_§q
)(
ibv_§q
 *
§q
,

1054 
ibv_§q_©å
 *
§q_©å
);

1055 (*
de°roy_§q
)(
ibv_§q
 *
§q
);

1056 (*
po°_§q_ªcv
)(
ibv_§q
 *
§q
,

1057 
ibv_ªcv_wr
 *
ªcv_wr
,

1058 
ibv_ªcv_wr
 **
bad_ªcv_wr
);

1059 
ibv_qp
 * (*
¸óã_qp
)(
ibv_pd
 *
pd
, 
ibv_qp_öô_©å
 *
©å
);

1060 (*
quîy_qp
)(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1061 
©å_mask
,

1062 
ibv_qp_öô_©å
 *
öô_©å
);

1063 (*
modify_qp
)(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1064 
©å_mask
);

1065 (*
de°roy_qp
)(
ibv_qp
 *
qp
);

1066 (*
po°_£nd
)(
ibv_qp
 *
qp
, 
ibv_£nd_wr
 *
wr
,

1067 
ibv_£nd_wr
 **
bad_wr
);

1068 (*
po°_ªcv
)(
ibv_qp
 *
qp
, 
ibv_ªcv_wr
 *
wr
,

1069 
ibv_ªcv_wr
 **
bad_wr
);

1070 
ibv_ah
 * (*
¸óã_ah
)(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
);

1071 (*
de°roy_ah
)(
ibv_ah
 *
ah
);

1072 (*
©èch_mˇ°
)(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
,

1073 
uöt16_t
 
lid
);

1074 (*
dëach_mˇ°
)(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
,

1075 
uöt16_t
 
lid
);

1076 (*
async_evít
)(
ibv_async_evít
 *
evít
);

1079 
	sibv_c⁄ãxt
 {

1080 
ibv_devi˚
 *
devi˚
;

1081 
ibv_c⁄ãxt_›s
 
›s
;

1082 
cmd_fd
;

1083 
async_fd
;

1084 
num_comp_ve˘‹s
;

1085 
±hªad_muãx_t
 
muãx
;

1086 *
abi_com∑t
;

1089 
	evîbs_c⁄ãxt_mask
 {

1090 
VERBS_CONTEXT_XRCD
 = (
uöt64_t
)1 << 0,

1091 
VERBS_CONTEXT_SRQ
 = (
uöt64_t
)1 << 1,

1092 
VERBS_CONTEXT_QP
 = (
uöt64_t
)1 << 2,

1093 
VERBS_CONTEXT_RESERVED
 = (
uöt64_t
)1 << 3,

1094 
VERBS_CONTEXT_EXP
 = (
uöt64_t
)1 << 62

1097 
	svîbs_c⁄ãxt
 {

1098 (*
quîy_devi˚_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1099 c⁄° 
ibv_quîy_devi˚_ex_öput
 *
öput
,

1100 
ibv_devi˚_©å_ex
 *
©å
,

1101 
size_t
 
©å_size
);

1103 (*
_ª£rved_2
) ();

1104 (*
de°roy_Êow
Ë(
ibv_Êow
 *
Êow
);

1105 (*
_ª£rved_1
) ();

1106 
ibv_Êow
 * (*
¸óã_Êow
Ë(
ibv_qp
 *
qp
,

1107 
ibv_Êow_©å
 *
Êow_©å
);

1108 
ibv_qp
 * (*
›í_qp
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1109 
ibv_qp_›í_©å
 *
©å
);

1110 
ibv_qp
 * (*
¸óã_qp_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1111 
ibv_qp_öô_©å_ex
 *
qp_öô_©å_ex
);

1112 (*
gë_§q_num
)(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
);

1113 
ibv_§q
 * (*
¸óã_§q_ex
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1114 
ibv_§q_öô_©å_ex
 *
§q_öô_©å_ex
);

1115 
ibv_xrcd
 * (*
›í_xrcd
)(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1116 
ibv_xrcd_öô_©å
 *
xrcd_öô_©å
);

1117 (*
˛o£_xrcd
)(
ibv_xrcd
 *
xrcd
);

1118 
uöt64_t
 
has_comp_mask
;

1119 
size_t
 
sz
;

1120 
ibv_c⁄ãxt
 
c⁄ãxt
;

1123 
ölöe
 
vîbs_c⁄ãxt
 *
	$vîbs_gë_˘x
(
ibv_c⁄ãxt
 *
˘x
)

1125  (!
˘x
 || (˘x->
abi_com∑t
 !
__VERBS_ABI_IS_EXTENDED
)) ?

1126 
NULL
 : 
	`c⁄èöî_of
(
˘x
, 
vîbs_c⁄ãxt
, 
c⁄ãxt
);

1127 
	}
}

1129 
	#vîbs_gë_˘x_›
(
˘x
, 
›
) ({ \

1130 
vîbs_c⁄ãxt
 *
_v˘x
 = 
	`vîbs_gë_˘x
(
˘x
); \

1131 (!
_v˘x
 || (_v˘x->
sz
 < (*_v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt
, 
›
)) || \

1132 !
_v˘x
->
›
Ë? 
NULL
 : _v˘x; })

	)

1134 
	#vîbs_£t_˘x_›
(
_v˘x
, 
›
, 
±r
) ({ \

1135 
vîbs_c⁄ãxt
 *
v˘x
 = 
_v˘x
; \

1136 i‡(
v˘x
 && (v˘x->
sz
 >(*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt
, 
›
))) \

1137 
v˘x
->
›
 = 
±r
; })

	)

1139 
ölöe
 
vîbs_devi˚
 *
	$vîbs_gë_devi˚
(
ibv_devi˚
 *
dev
)

1141  (
dev
->
›s
.
Æloc_c⁄ãxt
) ?

1142 
NULL
 : 
	`c⁄èöî_of
(
dev
, 
vîbs_devi˚
, 
devi˚
);

1143 
	}
}

1153 
ibv_devi˚
 **
ibv_gë_devi˚_li°
(*
num_devi˚s
);

1163 
ibv_‰ì_devi˚_li°
(
ibv_devi˚
 **
li°
);

1168 c⁄° *
ibv_gë_devi˚_«me
(
ibv_devi˚
 *
devi˚
);

1173 
uöt64_t
 
ibv_gë_devi˚_guid
(
ibv_devi˚
 *
devi˚
);

1178 
ibv_c⁄ãxt
 *
ibv_›í_devi˚
(
ibv_devi˚
 *
devi˚
);

1183 
ibv_˛o£_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1192 
ibv_gë_async_evít
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1193 
ibv_async_evít
 *
evít
);

1205 
ibv_ack_async_evít
(
ibv_async_evít
 *
evít
);

1210 
ibv_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1211 
ibv_devi˚_©å
 *
devi˚_©å
);

1216 
ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1217 
ibv_p‹t_©å
 *
p‹t_©å
);

1219 
ölöe
 
	$___ibv_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1220 
uöt8_t
 
p‹t_num
,

1221 
ibv_p‹t_©å
 *
p‹t_©å
)

1224 
p‹t_©å
->
lök_œyî
 = 
IBV_LINK_LAYER_UNSPECIFIED
;

1225 
p‹t_©å
->
ª£rved
 = 0;

1227  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
);

1228 
	}
}

1230 
	#ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
) \

1231 
	`___ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
)

	)

1236 
ibv_quîy_gid
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1237 
ödex
, 
ibv_gid
 *
gid
);

1242 
ibv_quîy_pkey
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1243 
ödex
, 
uöt16_t
 *
pkey
);

1248 
ibv_pd
 *
ibv_Æloc_pd
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1253 
ibv_dóŒoc_pd
(
ibv_pd
 *
pd
);

1255 
ölöe
 
ibv_Êow
 *
	$ibv_¸óã_Êow
(
ibv_qp
 *
qp
,

1256 
ibv_Êow_©å
 *
Êow
)

1258 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
qp
->
c⁄ãxt
,

1259 
¸óã_Êow
);

1260 i‡(!
v˘x
)

1261  
NULL
;

1263  
v˘x
->
	`¸óã_Êow
(
qp
, 
Êow
);

1264 
	}
}

1266 
ölöe
 
	$ibv_de°roy_Êow
(
ibv_Êow
 *
Êow_id
)

1268 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
Êow_id
->
c⁄ãxt
,

1269 
de°roy_Êow
);

1270 i‡(!
v˘x
)

1271  -
ENOSYS
;

1272  
v˘x
->
	`de°roy_Êow
(
Êow_id
);

1273 
	}
}

1278 
ölöe
 
ibv_xrcd
 *

1279 
	$ibv_›í_xrcd
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_xrcd_öô_©å
 *
xrcd_öô_©å
)

1281 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
›í_xrcd
);

1282 i‡(!
v˘x
) {

1283 
î∫o
 = 
ENOSYS
;

1284  
NULL
;

1286  
v˘x
->
	`›í_xrcd
(
c⁄ãxt
, 
xrcd_öô_©å
);

1287 
	}
}

1292 
ölöe
 
	$ibv_˛o£_xrcd
(
ibv_xrcd
 *
xrcd
)

1294 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x
(
xrcd
->
c⁄ãxt
);

1295  
v˘x
->
	`˛o£_xrcd
(
xrcd
);

1296 
	}
}

1301 
ibv_mr
 *
ibv_ªg_mr
(
ibv_pd
 *
pd
, *
addr
,

1302 
size_t
 
Àngth
, 
ac˚ss
);

1305 
	eibv_ªªg_mr_îr_code
 {

1307 
	mIBV_REREG_MR_ERR_INPUT
 = -1,

1309 
	mIBV_REREG_MR_ERR_DONT_FORK_NEW
 = -2,

1311 
	mIBV_REREG_MR_ERR_DO_FORK_OLD
 = -3,

1313 
	mIBV_REREG_MR_ERR_CMD
 = -4,

1315 
	mIBV_REREG_MR_ERR_CMD_AND_DO_FORK_NEW
 = -5,

1321 
ibv_ªªg_mr
(
ibv_mr
 *
mr
, 
Êags
,

1322 
ibv_pd
 *
pd
, *
addr
,

1323 
size_t
 
Àngth
, 
ac˚ss
);

1327 
ibv_dîeg_mr
(
ibv_mr
 *
mr
);

1332 
ölöe
 
ibv_mw
 *
	$ibv_Æloc_mw
(
ibv_pd
 *
pd
,

1333 
ibv_mw_ty≥
 
ty≥
)

1335 
ibv_mw
 *
mw
;

1337 i‡(!
pd
->
c⁄ãxt
->
›s
.
Æloc_mw
) {

1338 
î∫o
 = 
ENOSYS
;

1339  
NULL
;

1342 
mw
 = 
pd
->
c⁄ãxt
->
›s
.
	`Æloc_mw
’d, 
ty≥
);

1343  
mw
;

1344 
	}
}

1349 
ölöe
 
	$ibv_dóŒoc_mw
(
ibv_mw
 *
mw
)

1351  
mw
->
c⁄ãxt
->
›s
.
	`dóŒoc_mw
(mw);

1352 
	}
}

1357 
ölöe
 
uöt32_t
 
	$ibv_öc_rkey
(
uöt32_t
 
rkey
)

1359 c⁄° 
uöt32_t
 
mask
 = 0x000000ff;

1360 
uöt8_t
 
√wèg
 = (uöt8_t)((
rkey
 + 1Ë& 
mask
);

1362  (
rkey
 & ~
mask
Ë| 
√wèg
;

1363 
	}
}

1368 
ölöe
 
	$ibv_böd_mw
(
ibv_qp
 *
qp
, 
ibv_mw
 *
mw
,

1369 
ibv_mw_böd
 *
mw_böd
)

1371 i‡(
mw
->
ty≥
 !
IBV_MW_TYPE_1
)

1372  
EINVAL
;

1374  
mw
->
c⁄ãxt
->
›s
.
	`böd_mw
(
qp
, mw, 
mw_böd
);

1375 
	}
}

1380 
ibv_comp_ch™√l
 *
ibv_¸óã_comp_ch™√l
(
ibv_c⁄ãxt
 *
c⁄ãxt
);

1385 
ibv_de°roy_comp_ch™√l
(
ibv_comp_ch™√l
 *
ch™√l
);

1397 
ibv_cq
 *
ibv_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
cqe
,

1398 *
cq_c⁄ãxt
,

1399 
ibv_comp_ch™√l
 *
ch™√l
,

1400 
comp_ve˘‹
);

1409 
ibv_ªsize_cq
(
ibv_cq
 *
cq
, 
cqe
);

1414 
ibv_de°roy_cq
(
ibv_cq
 *
cq
);

1425 
ibv_gë_cq_evít
(
ibv_comp_ch™√l
 *
ch™√l
,

1426 
ibv_cq
 **
cq
, **
cq_c⁄ãxt
);

1441 
ibv_ack_cq_evíts
(
ibv_cq
 *
cq
, 
√víts
);

1456 
ölöe
 
	$ibv_pﬁl_cq
(
ibv_cq
 *
cq
, 
num_íåõs
, 
ibv_wc
 *
wc
)

1458  
cq
->
c⁄ãxt
->
›s
.
	`pﬁl_cq
(cq, 
num_íåõs
, 
wc
);

1459 
	}
}

1470 
ölöe
 
	$ibv_ªq_nŸify_cq
(
ibv_cq
 *
cq
, 
sﬁicôed_⁄ly
)

1472  
cq
->
c⁄ãxt
->
›s
.
	`ªq_nŸify_cq
(cq, 
sﬁicôed_⁄ly
);

1473 
	}
}

1486 
ibv_§q
 *
ibv_¸óã_§q
(
ibv_pd
 *
pd
,

1487 
ibv_§q_öô_©å
 *
§q_öô_©å
);

1489 
ölöe
 
ibv_§q
 *

1490 
	$ibv_¸óã_§q_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1491 
ibv_§q_öô_©å_ex
 *
§q_öô_©å_ex
)

1493 
vîbs_c⁄ãxt
 *
v˘x
;

1494 
uöt32_t
 
mask
 = 
§q_öô_©å_ex
->
comp_mask
;

1496 i‡(!(
mask
 & ~(
IBV_SRQ_INIT_ATTR_PD
 | 
IBV_SRQ_INIT_ATTR_TYPE
)) &&

1497 (
mask
 & 
IBV_SRQ_INIT_ATTR_PD
) &&

1498 (!(
mask
 & 
IBV_SRQ_INIT_ATTR_TYPE
) ||

1499 (
§q_öô_©å_ex
->
§q_ty≥
 =
IBV_SRQT_BASIC
)))

1500  
	`ibv_¸óã_§q
(
§q_öô_©å_ex
->
pd
,

1501 (
ibv_§q_öô_©å
 *Ë
§q_öô_©å_ex
);

1503 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
¸óã_§q_ex
);

1504 i‡(!
v˘x
) {

1505 
î∫o
 = 
ENOSYS
;

1506  
NULL
;

1508  
v˘x
->
	`¸óã_§q_ex
(
c⁄ãxt
, 
§q_öô_©å_ex
);

1509 
	}
}

1523 
ibv_modify_§q
(
ibv_§q
 *
§q
,

1524 
ibv_§q_©å
 *
§q_©å
,

1525 
§q_©å_mask
);

1533 
ibv_quîy_§q
(
ibv_§q
 *
§q
, 
ibv_§q_©å
 *
§q_©å
);

1535 
ölöe
 
	$ibv_gë_§q_num
(
ibv_§q
 *
§q
, 
uöt32_t
 *
§q_num
)

1537 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
§q
->
c⁄ãxt
, 
gë_§q_num
);

1539 i‡(!
v˘x
)

1540  
ENOSYS
;

1542  
v˘x
->
	`gë_§q_num
(
§q
, 
§q_num
);

1543 
	}
}

1549 
ibv_de°roy_§q
(
ibv_§q
 *
§q
);

1558 
ölöe
 
	$ibv_po°_§q_ªcv
(
ibv_§q
 *
§q
,

1559 
ibv_ªcv_wr
 *
ªcv_wr
,

1560 
ibv_ªcv_wr
 **
bad_ªcv_wr
)

1562  
§q
->
c⁄ãxt
->
›s
.
	`po°_§q_ªcv
(§q, 
ªcv_wr
, 
bad_ªcv_wr
);

1563 
	}
}

1568 
ibv_qp
 *
ibv_¸óã_qp
(
ibv_pd
 *
pd
,

1569 
ibv_qp_öô_©å
 *
qp_öô_©å
);

1571 
ölöe
 
ibv_qp
 *

1572 
	$ibv_¸óã_qp_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_qp_öô_©å_ex
 *
qp_öô_©å_ex
)

1574 
vîbs_c⁄ãxt
 *
v˘x
;

1575 
uöt32_t
 
mask
 = 
qp_öô_©å_ex
->
comp_mask
;

1577 i‡(
mask
 =
IBV_QP_INIT_ATTR_PD
)

1578  
	`ibv_¸óã_qp
(
qp_öô_©å_ex
->
pd
,

1579 (
ibv_qp_öô_©å
 *Ë
qp_öô_©å_ex
);

1581 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
¸óã_qp_ex
);

1582 i‡(!
v˘x
) {

1583 
î∫o
 = 
ENOSYS
;

1584  
NULL
;

1586  
v˘x
->
	`¸óã_qp_ex
(
c⁄ãxt
, 
qp_öô_©å_ex
);

1587 
	}
}

1592 
ölöe
 

1593 
	$ibv_quîy_devi˚_ex
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

1594 c⁄° 
ibv_quîy_devi˚_ex_öput
 *
öput
,

1595 
ibv_devi˚_©å_ex
 *
©å
)

1597 
vîbs_c⁄ãxt
 *
v˘x
;

1598 
ªt
;

1600 
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
quîy_devi˚_ex
);

1601 i‡(!
v˘x
)

1602 
Àgacy
;

1604 
ªt
 = 
v˘x
->
	`quîy_devi˚_ex
(
c⁄ãxt
, 
öput
, 
©å
, (*attr));

1605 i‡(
ªt
 =
ENOSYS
)

1606 
Àgacy
;

1608  
ªt
;

1610 
Àgacy
:

1611 
	`mem£t
(
©å
, 0, (*attr));

1612 
ªt
 = 
	`ibv_quîy_devi˚
(
c⁄ãxt
, &
©å
->
‹ig_©å
);

1613  
ªt
;

1614 
	}
}

1619 
ölöe
 
ibv_qp
 *

1620 
	$ibv_›í_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_qp_›í_©å
 *
qp_›í_©å
)

1622 
vîbs_c⁄ãxt
 *
v˘x
 = 
	`vîbs_gë_˘x_›
(
c⁄ãxt
, 
›í_qp
);

1623 i‡(!
v˘x
) {

1624 
î∫o
 = 
ENOSYS
;

1625  
NULL
;

1627  
v˘x
->
	`›í_qp
(
c⁄ãxt
, 
qp_›í_©å
);

1628 
	}
}

1633 
ibv_modify_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1634 
©å_mask
);

1647 
ibv_quîy_qp
(
ibv_qp
 *
qp
, 
ibv_qp_©å
 *
©å
,

1648 
©å_mask
,

1649 
ibv_qp_öô_©å
 *
öô_©å
);

1654 
ibv_de°roy_qp
(
ibv_qp
 *
qp
);

1662 
ölöe
 
	$ibv_po°_£nd
(
ibv_qp
 *
qp
, 
ibv_£nd_wr
 *
wr
,

1663 
ibv_£nd_wr
 **
bad_wr
)

1665  
qp
->
c⁄ãxt
->
›s
.
	`po°_£nd
(qp, 
wr
, 
bad_wr
);

1666 
	}
}

1671 
ölöe
 
	$ibv_po°_ªcv
(
ibv_qp
 *
qp
, 
ibv_ªcv_wr
 *
wr
,

1672 
ibv_ªcv_wr
 **
bad_wr
)

1674  
qp
->
c⁄ãxt
->
›s
.
	`po°_ªcv
(qp, 
wr
, 
bad_wr
);

1675 
	}
}

1680 
ibv_ah
 *
ibv_¸óã_ah
(
ibv_pd
 *
pd
, 
ibv_ah_©å
 *
©å
);

1693 
ibv_öô_ah_‰om_wc
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
uöt8_t
 
p‹t_num
,

1694 
ibv_wc
 *
wc
, 
ibv_grh
 *
grh
,

1695 
ibv_ah_©å
 *
ah_©å
);

1709 
ibv_ah
 *
ibv_¸óã_ah_‰om_wc
(
ibv_pd
 *
pd
, 
ibv_wc
 *
wc
,

1710 
ibv_grh
 *
grh
, 
uöt8_t
 
p‹t_num
);

1715 
ibv_de°roy_ah
(
ibv_ah
 *
ah
);

1728 
ibv_©èch_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

1736 
ibv_dëach_mˇ°
(
ibv_qp
 *
qp
, c⁄° 
ibv_gid
 *
gid
, 
uöt16_t
 
lid
);

1744 
ibv_f‹k_öô
();

1749 c⁄° *
ibv_node_ty≥_°r
(
ibv_node_ty≥
 
node_ty≥
);

1754 c⁄° *
ibv_p‹t_°©e_°r
(
ibv_p‹t_°©e
 
p‹t_°©e
);

1759 c⁄° *
ibv_evít_ty≥_°r
(
ibv_evít_ty≥
 
evít
);

1761 
	gEND_C_DECLS


1763 #unde‡
__©åibuã_c⁄°


1765 
	~<öföib™d/vîbs_exp.h
>

	@/usr/include/infiniband/verbs_exp.h

48 #i‚de‡
INFINIBAND_VERBS_EXP_H


49 
	#INFINIBAND_VERBS_EXP_H


	)

51 
	~<öföib™d/vîbs.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

55 #i‡
__GNUC__
 >= 3

56 
	#__©åibuã_c⁄°
 
	`__©åibuã__
((c⁄°))

	)

58 
	#__©åibuã_c⁄°


	)

61 
	gBEGIN_C_DECLS


63 
	#IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
ªt
) \

64 i‡((
vÆ
Ë> (
vÆid_mask
)) { \

65 
__vÆ
 = 
vÆ
, 
__vÆid_mask
 = 
vÆid_mask
; \

66 
	`Ârötf
(
°dîr
, "%s: invalid comp_mask !!! (comp_mask = 0x%llx valid_mask = 0x%llx)\n", \

67 
__FUNCTION__
, 
__vÆ
, 
__vÆid_mask
); \

68 
î∫o
 = 
EINVAL
; \

69  
ªt
; \

70 }

	)

72 
	#IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
) \

73 
	`IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
NULL
)

	)

75 
	#IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
) \

76 
	`IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 
EINVAL
)

	)

78 
	#IBV_EXP_RET_ZERO_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
) \

79 
	`IBV_EXP_RET_ON_INVALID_COMP_MASK
(
vÆ
, 
vÆid_mask
, 0)

	)

81 
	#IBV_EXP_IMPLICIT_MR_SIZE
 (~((
size_t
)0))

	)

83 
	eibv_exp_func_«me
 {

84 
	mIBV_EXP_POST_SEND_FUNC
,

85 
	mIBV_EXP_POLL_CQ_FUNC
,

86 
	mIBV_POST_SEND_FUNC
,

87 
	mIBV_POLL_CQ_FUNC
,

88 
	mIBV_POST_RECV_FUNC


91 
	eibv_exp_°¨t_vÆues
 {

92 
	mIBV_EXP_START_ENUM
 = 0x40,

93 
	mIBV_EXP_START_FLAG_LOC
 = 0x20,

94 
	mIBV_EXP_START_FLAG
 = (1ULL << 
IBV_EXP_START_FLAG_LOC
),

100 
	eibv_exp_©omic_ˇp
 {

101 
	mIBV_EXP_ATOMIC_NONE
 = 
IBV_ATOMIC_NONE
,

102 
	mIBV_EXP_ATOMIC_HCA
 = 
IBV_ATOMIC_HCA
,

103 
	mIBV_EXP_ATOMIC_GLOB
 = 
IBV_ATOMIC_GLOB
,

105 
	mIBV_EXP_ATOMIC_HCA_REPLY_BE
 = 
IBV_EXP_START_ENUM


111 
	eibv_exp_devi˚_ˇp_Êags
 {

112 
	mIBV_EXP_DEVICE_RESIZE_MAX_WR
 = 
IBV_DEVICE_RESIZE_MAX_WR
,

113 
	mIBV_EXP_DEVICE_BAD_PKEY_CNTR
 = 
IBV_DEVICE_BAD_PKEY_CNTR
,

114 
	mIBV_EXP_DEVICE_BAD_QKEY_CNTR
 = 
IBV_DEVICE_BAD_QKEY_CNTR
,

115 
	mIBV_EXP_DEVICE_RAW_MULTI
 = 
IBV_DEVICE_RAW_MULTI
,

116 
	mIBV_EXP_DEVICE_AUTO_PATH_MIG
 = 
IBV_DEVICE_AUTO_PATH_MIG
,

117 
	mIBV_EXP_DEVICE_CHANGE_PHY_PORT
 = 
IBV_DEVICE_CHANGE_PHY_PORT
,

118 
	mIBV_EXP_DEVICE_UD_AV_PORT_ENFORCE
 = 
IBV_DEVICE_UD_AV_PORT_ENFORCE
,

119 
	mIBV_EXP_DEVICE_CURR_QP_STATE_MOD
 = 
IBV_DEVICE_CURR_QP_STATE_MOD
,

120 
	mIBV_EXP_DEVICE_SHUTDOWN_PORT
 = 
IBV_DEVICE_SHUTDOWN_PORT
,

121 
	mIBV_EXP_DEVICE_INIT_TYPE
 = 
IBV_DEVICE_INIT_TYPE
,

122 
	mIBV_EXP_DEVICE_PORT_ACTIVE_EVENT
 = 
IBV_DEVICE_PORT_ACTIVE_EVENT
,

123 
	mIBV_EXP_DEVICE_SYS_IMAGE_GUID
 = 
IBV_DEVICE_SYS_IMAGE_GUID
,

124 
	mIBV_EXP_DEVICE_RC_RNR_NAK_GEN
 = 
IBV_DEVICE_RC_RNR_NAK_GEN
,

125 
	mIBV_EXP_DEVICE_SRQ_RESIZE
 = 
IBV_DEVICE_SRQ_RESIZE
,

126 
	mIBV_EXP_DEVICE_N_NOTIFY_CQ
 = 
IBV_DEVICE_N_NOTIFY_CQ
,

127 
	mIBV_EXP_DEVICE_XRC
 = 
IBV_DEVICE_XRC
,

129 
	mIBV_EXP_DEVICE_DC_TRANSPORT
 = (
IBV_EXP_START_FLAG
 << 0),

130 
	mIBV_EXP_DEVICE_QPG
 = (
IBV_EXP_START_FLAG
 << 1),

131 
	mIBV_EXP_DEVICE_UD_RSS
 = (
IBV_EXP_START_FLAG
 << 2),

132 
	mIBV_EXP_DEVICE_UD_TSS
 = (
IBV_EXP_START_FLAG
 << 3),

133 
	mIBV_EXP_DEVICE_EXT_ATOMICS
 = (
IBV_EXP_START_FLAG
 << 4),

134 
	mIBV_EXP_DEVICE_NOP
 = (
IBV_EXP_START_FLAG
 << 5),

135 
	mIBV_EXP_DEVICE_UMR
 = (
IBV_EXP_START_FLAG
 << 6),

136 
	mIBV_EXP_DEVICE_ODP
 = (
IBV_EXP_START_FLAG
 << 7),

137 
	mIBV_EXP_DEVICE_VXLAN_SUPPORT
 = (
IBV_EXP_START_FLAG
 << 10),

138 
	mIBV_EXP_DEVICE_RX_CSUM_TCP_UDP_PKT
 = (
IBV_EXP_START_FLAG
 << 11),

139 
	mIBV_EXP_DEVICE_RX_CSUM_IP_PKT
 = (
IBV_EXP_START_FLAG
 << 12),

140 
	mIBV_EXP_DEVICE_EC_OFFLOAD
 = (
IBV_EXP_START_FLAG
 << 13),

141 
	mIBV_EXP_DEVICE_EXT_MASKED_ATOMICS
 = (
IBV_EXP_START_FLAG
 << 14),

142 
	mIBV_EXP_DEVICE_RX_TCP_UDP_PKT_TYPE
 = (
IBV_EXP_START_FLAG
 << 15),

143 
	mIBV_EXP_DEVICE_SCATTER_FCS
 = (
IBV_EXP_START_FLAG
 << 16),

144 
	mIBV_EXP_DEVICE_MEM_WINDOW
 = (
IBV_EXP_START_FLAG
 << 17),

145 
	mIBV_EXP_DEVICE_WQ_DELAY_DROP
 = (
IBV_EXP_START_FLAG
 << 18),

146 
	mIBV_EXP_DEVICE_PHYSICAL_RANGE_MR
 = (
IBV_EXP_START_FLAG
 << 19),

147 
	mIBV_EXP_DEVICE_CAPI
 = (
IBV_EXP_START_FLAG
 << 20),

148 
	mIBV_EXP_DEVICE_MEM_MGT_EXTENSIONS
 = (
IBV_EXP_START_FLAG
 << 21),

149 
	mIBV_EXP_DEVICE_DC_INFO
 = (
IBV_EXP_START_FLAG
 << 22),

151 
	mIBV_EXP_DEVICE_MW_TYPE_2A
 = (
IBV_EXP_START_FLAG
 << 23),

152 
	mIBV_EXP_DEVICE_MW_TYPE_2B
 = (
IBV_EXP_START_FLAG
 << 24),

153 
	mIBV_EXP_DEVICE_UMR_FIXED_SIZE
 = (
IBV_EXP_START_FLAG
 << 25),

154 
	mIBV_EXP_DEVICE_PACKET_BASED_CREDIT_MODE
 = (
IBV_EXP_START_FLAG
 << 26),

155 
	mIBV_EXP_DEVICE_CROSS_CHANNEL
 = (
IBV_EXP_START_FLAG
 << 28),

156 
	mIBV_EXP_DEVICE_MANAGED_FLOW_STEERING
 = (
IBV_EXP_START_FLAG
 << 29),

157 
	mIBV_EXP_DEVICE_MR_ALLOCATE
 = (
IBV_EXP_START_FLAG
 << 30),

158 
	mIBV_EXP_DEVICE_SHARED_MR
 = (
IBV_EXP_START_FLAG
 << 31),

164 
	eibv_exp_devi˚_©å_comp_mask
 {

165 
	mIBV_EXP_DEVICE_ATTR_CALC_CAP
 = (1 << 0),

166 
	mIBV_EXP_DEVICE_ATTR_WITH_TIMESTAMP_MASK
 = (1 << 1),

167 
	mIBV_EXP_DEVICE_ATTR_WITH_HCA_CORE_CLOCK
 = (1 << 2),

168 
	mIBV_EXP_DEVICE_ATTR_EXP_CAP_FLAGS
 = (1 << 3),

169 
	mIBV_EXP_DEVICE_DC_RD_REQ
 = (1 << 4),

170 
	mIBV_EXP_DEVICE_DC_RD_RES
 = (1 << 5),

171 
	mIBV_EXP_DEVICE_ATTR_INLINE_RECV_SZ
 = (1 << 6),

172 
	mIBV_EXP_DEVICE_ATTR_RSS_TBL_SZ
 = (1 << 7),

173 
	mIBV_EXP_DEVICE_ATTR_EXT_ATOMIC_ARGS
 = (1 << 8),

174 
	mIBV_EXP_DEVICE_ATTR_UMR
 = (1 << 9),

175 
	mIBV_EXP_DEVICE_ATTR_ODP
 = (1 << 10),

176 
	mIBV_EXP_DEVICE_ATTR_MAX_DCT
 = (1 << 11),

177 
	mIBV_EXP_DEVICE_ATTR_MAX_CTX_RES_DOMAIN
 = (1 << 12),

178 
	mIBV_EXP_DEVICE_ATTR_RX_HASH
 = (1 << 13),

179 
	mIBV_EXP_DEVICE_ATTR_MAX_WQ_TYPE_RQ
 = (1 << 14),

180 
	mIBV_EXP_DEVICE_ATTR_MAX_DEVICE_CTX
 = (1 << 15),

181 
	mIBV_EXP_DEVICE_ATTR_MP_RQ
 = (1 << 16),

182 
	mIBV_EXP_DEVICE_ATTR_VLAN_OFFLOADS
 = (1 << 17),

183 
	mIBV_EXP_DEVICE_ATTR_EC_CAPS
 = (1 << 18),

184 
	mIBV_EXP_DEVICE_ATTR_MASKED_ATOMICS
 = (1 << 19),

185 
	mIBV_EXP_DEVICE_ATTR_RX_PAD_END_ALIGN
 = (1 << 20),

186 
	mIBV_EXP_DEVICE_ATTR_TSO_CAPS
 = (1 << 21),

187 
	mIBV_EXP_DEVICE_ATTR_PACKET_PACING_CAPS
 = (1 << 22),

188 
	mIBV_EXP_DEVICE_ATTR_EC_GF_BASE
 = (1 << 23),

189 
	mIBV_EXP_DEVICE_ATTR_OOO_CAPS
 = (1 << 24),

190 
	mIBV_EXP_DEVICE_ATTR_SW_PARSING_CAPS
 = (1 << 25),

191 
	mIBV_EXP_DEVICE_ATTR_ODP_MAX_SIZE
 = (1 << 26),

192 
	mIBV_EXP_DEVICE_ATTR_TM_CAPS
 = (1 << 27),

193 
	mIBV_EXP_DEVICE_ATTR_TUNNEL_OFFLOADS_CAPS
 = (1 << 28),

194 
	mIBV_EXP_DEVICE_ATTR_MAX_DM_SIZE
 = (1 << 29),

195 
	mIBV_EXP_DEVICE_ATTR_TUNNELED_ATOMIC
 = (1 << 30),

196 
	mIBV_EXP_DEVICE_ATTR_COMP_MASK_2
 = (1 << 31)

201 
	#IBV_EXP_DEVICE_ATTR_RESERVED
 (1ULL << 32)

	)

203 
	eibv_exp_devi˚_©å_comp_mask_2
 {

204 
	mIBV_EXP_DEVICE_ATTR_UMR_FIXED_SIZE_CAPS
 = (1 << 0),

205 
	mIBV_EXP_DEVICE_ATTR_PCI_ATOMIC_CAPS
 = (1 << 1),

207 
	mIBV_EXP_DEVICE_ATTR_RESERVED_2
 = (1 << 2),

210 
	eibv_exp_tu¬ñ_ofÊﬂds_ˇps
 {

211 
	mIBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_VXLAN
 = 1 << 0,

212 
	mIBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_GRE
 = 1 << 1,

213 
	mIBV_EXP_RAW_PACKET_CAP_TUNNELED_OFFLOAD_GENEVE
 = 1 << 2

216 
	eibv_exp_tu¬ñed_©omic_ˇps
 {

217 
	mIBV_EXP_TUNNELED_ATOMIC_SUPPORTED
 = 1 << 0,

220 
	eibv_exp_dm_mem˝y_dú
 {

221 
	mIBV_EXP_DM_CPY_TO_DEVICE
,

222 
	mIBV_EXP_DM_CPY_TO_HOST


225 
	eibv_exp_dm_©å_comp_mask
 {

226 
	mIBV_EXP_ALLOC_DM_ATTR_RESERVED
 = (1 << 0),

229 
	sibv_exp_Æloc_dm_©å
 {

230 
size_t
 
	mÀngth
;

231 
uöt32_t
 
	mcomp_mask
;

234 
	eibv_exp_dm_comp_mask
 {

235 
	mIBV_EXP_DM_COMP_MASK_RESERVED
 = (1 << 0),

238 
	sibv_exp_dm
 {

239 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

240 
uöt32_t
 
	mh™dÀ
;

241 
uöt32_t
 
	mcomp_mask
;

244 
	eibv_exp_dm_˝y_comp_mask
 {

245 
	mIBV_EXP_DM_CPY_COMP_MASK_RESERVED
 = (1 << 0),

248 
	sibv_exp_mem˝y_dm_©å
 {

249 
ibv_exp_dm_mem˝y_dú
 
	mmem˝y_dú
;

250 *
	mho°_addr
;

251 
uöt64_t
 
	mdm_off£t
;

252 
size_t
 
	mÀngth
;

253 
uöt32_t
 
	mcomp_mask
;

256 
	sibv_exp_devi˚_ˇlc_ˇp
 {

257 
uöt64_t
 
	md©a_ty≥s
;

258 
uöt64_t
 
	md©a_sizes
;

259 
uöt64_t
 
	möt_›s
;

260 
uöt64_t
 
	muöt_›s
;

261 
uöt64_t
 
	mÂ_›s
;

264 
	sibv_exp_ext_©omics_∑øms
 {

268 
uöt64_t
 
	mlog_©omic_¨g_sizes
;

269 
uöt32_t
 
	mmax_Á_bô_bound¨y
;

270 
uöt32_t
 
	mlog_max_©omic_ölöe
;

273 
	sibv_exp_masked_©omic_∑øms
 {

274 
uöt32_t
 
	mmax_Á_bô_bound¨y
;

275 
uöt32_t
 
	mlog_max_©omic_ölöe
;

276 
uöt64_t
 
	mmasked_log_©omic_¨g_sizes
;

277 
uöt64_t
 
	mmasked_log_©omic_¨g_sizes_√tw‹k_ídü¬ess
;

280 
	eibv_odp_gíîÆ_ˇp_bôs
 {

281 
	mIBV_EXP_ODP_SUPPORT
 = 1 << 0,

282 
	mIBV_EXP_ODP_SUPPORT_IMPLICIT
 = 1 << 1,

285 
	eibv_exp_odp_å™•‹t_ˇp_bôs
 {

286 
	mIBV_EXP_ODP_SUPPORT_SEND
 = 1 << 0,

287 
	mIBV_EXP_ODP_SUPPORT_RECV
 = 1 << 1,

288 
	mIBV_EXP_ODP_SUPPORT_WRITE
 = 1 << 2,

289 
	mIBV_EXP_ODP_SUPPORT_READ
 = 1 << 3,

290 
	mIBV_EXP_ODP_SUPPORT_ATOMIC
 = 1 << 4,

291 
	mIBV_EXP_ODP_SUPPORT_SRQ_RECV
 = 1 << 5,

294 
	sibv_exp_umr_ˇps
 {

295 
uöt32_t
 
	mmax_klm_li°_size
;

296 
uöt32_t
 
	mmax_£nd_wqe_ölöe_klms
;

297 
uöt32_t
 
	mmax_umr_ªcursi⁄_dïth
;

298 
uöt32_t
 
	mmax_umr_°ride_dimísi⁄
;

301 
	sibv_exp_odp_ˇps
 {

302 
uöt64_t
 
	mgíîÆ_odp_ˇps
;

304 
uöt32_t
 
	mrc_odp_ˇps
;

305 
uöt32_t
 
	muc_odp_ˇps
;

306 
uöt32_t
 
	mud_odp_ˇps
;

307 
uöt32_t
 
	mdc_odp_ˇps
;

308 
uöt32_t
 
	mxrc_odp_ˇps
;

309 
uöt32_t
 
	møw_ëh_odp_ˇps
;

310 } 
	m≥r_å™•‹t_ˇps
;

313 
	eibv_exp_suµ‹ãd_qp_ty≥s
 {

314 
	mIBV_EXP_QPT_RC
 = 1ULL << 0,

315 
	mIBV_EXP_QPT_UC
 = 1ULL << 1,

316 
	mIBV_EXP_QPT_UD
 = 1ULL << 2,

317 
	mIBV_EXP_QPT_XRC_INIT
 = 1ULL << 3,

318 
	mIBV_EXP_QPT_XRC_TGT
 = 1ULL << 4,

319 
	mIBV_EXP_QPT_RAW_PACKET
 = 1ULL << 5,

320 
	mIBV_EXP_QPT_RESERVED
 = 1ULL << 6

323 
	sibv_exp_rx_hash_ˇps
 {

324 
uöt32_t
 
	mmax_rwq_ödúe˘i⁄_èbÀs
;

325 
uöt32_t
 
	mmax_rwq_ödúe˘i⁄_èbÀ_size
;

326 
uöt8_t
 
	msuµ‹ãd_hash_fun˘i⁄s
;

327 
uöt64_t
 
	msuµ‹ãd_∑ckë_fõlds
;

328 
uöt32_t
 
	msuµ‹ãd_qps
;

331 
	eibv_exp_mp_rq_shi·s
 {

332 
	mIBV_EXP_MP_RQ_NO_SHIFT
 = 0,

333 
	mIBV_EXP_MP_RQ_2BYTES_SHIFT
 = 1 << 0

336 
	sibv_exp_›í_devi˚_©å
 {

337 
uöt32_t
 
	mcomp_mask
;

339 
uöt64_t
 
	m≥î_id
;

340 *
	m≥î_«me
;

341 } 
	m≥î_öfo
;

344 
	eibv_exp_£t_c⁄ãxt_©å
 {

345 
	mIBV_EXP_SET_ATTR_PEER_INFO
 = (1 << 0),

346 
	mIBV_EXP_SET_CONTEXT_ATTR_RESERVED
 = (1 << 1),

349 
	eibv_exp_mp_rq_sup_ty≥s
 {

350 
	mIBV_EXP_MP_RQ_SUP_TYPE_SRQ_TM
 = 1 << 0,

355 
	mIBV_EXP_MP_RQ_SUP_TYPE_WQ_RQ
 = 1 << 5,

358 
	sibv_exp_mp_rq_ˇps
 {

359 
uöt32_t
 
	msuµ‹ãd_qps
;

360 
uöt32_t
 
	mÆlowed_shi·s
;

361 
uöt8_t
 
	mmö_sögÀ_wqe_log_num_of_°rides
;

362 
uöt8_t
 
	mmax_sögÀ_wqe_log_num_of_°rides
;

363 
uöt8_t
 
	mmö_sögÀ_°ride_log_num_of_byãs
;

364 
uöt8_t
 
	mmax_sögÀ_°ride_log_num_of_byãs
;

367 
	sibv_exp_ec_ˇps
 {

368 
uöt32_t
 
	mmax_ec_d©a_ve˘‹_cou¡
;

369 
uöt32_t
 
	mmax_ec_ˇlc_öÊight_ˇlcs
;

372 
	#ibv_is_q±_suµ‹ãd
(
ˇps
, 
q±
Ë((ˇpsË& (1 << (q±)))

	)

374 
	sibv_exp_tso_ˇps
 {

375 
uöt32_t
 
	mmax_tso
;

376 
uöt32_t
 
	msuµ‹ãd_q±s
;

379 
	eibv_exp_∑ckë_∑cög_ˇp_Êags
 {

380 
	mIBV_EXP_QP_SUPPORT_BURST
 = 1 << 0,

383 
	sibv_exp_∑ckë_∑cög_ˇps
 {

384 
uöt32_t
 
	mqp_øã_limô_mö
;

385 
uöt32_t
 
	mqp_øã_limô_max
;

386 
uöt32_t
 
	msuµ‹ãd_q±s
;

387 
uöt8_t
 
	mˇp_Êags
;

388 
uöt8_t
 
	mª£rved
[3];

391 
	eibv_exp_ooo_å™•‹t_ˇp_bôs
 {

392 
	mIBV_EXP_OOO_SUPPORT_RW_DATA_PLACEMENT
 = (1 << 0),

395 
	sibv_exp_ooo_ˇps
 {

396 
uöt32_t
 
	mrc_ˇps
;

397 
uöt32_t
 
	mxrc_ˇps
;

398 
uöt32_t
 
	mdc_ˇps
;

399 
uöt32_t
 
	mud_ˇps
;

402 
	eibv_exp_sw_∑rsög_ofÊﬂds
 {

403 
	mIBV_EXP_SW_PARSING
 = (1 << 0),

404 
	mIBV_EXP_SW_PARSING_CSUM
 = (1 << 1),

405 
	mIBV_EXP_SW_PARSING_LSO
 = (1 << 2),

408 
	sibv_exp_sw_∑rsög_ˇps
 {

409 
uöt32_t
 
	msw_∑rsög_ofÊﬂds
;

410 
uöt32_t
 
	msuµ‹ãd_q±s
;

413 
	eibv_exp_tm_ˇp_Êags
 {

414 
	mIBV_EXP_TM_CAP_RC
 = 1 << 0,

415 
	mIBV_EXP_TM_CAP_DC
 = 1 << 1

418 
	sibv_exp_tm_ˇps
 {

420 
uöt32_t
 
	mmax_∫dv_hdr_size
;

422 
uöt32_t
 
	mmax_num_ègs
;

424 
uöt32_t
 
	mˇ∑bûôy_Êags
;

426 
uöt32_t
 
	mmax_›s
;

428 
uöt32_t
 
	mmax_sge
;

431 
	sibv_exp_umr_fixed_size_ˇps
 {

432 
uöt64_t
 
	mmax_ítôy_size
;

435 
	sibv_exp_pci_©omic_ˇps
 {

436 
uöt16_t
 
	m„tch_add
;

437 
uöt16_t
 
	msw≠
;

438 
uöt16_t
 
	mcom∑ª_sw≠
;

441 
	eibv_exp_pci_©omic_ˇp_›s_suµ‹ãd_sizes
 {

442 
	mIBV_EXP_PCI_ATOMIC_OP_SIZE_SUP_4_BYTES
 = (1ULL << 0),

443 
	mIBV_EXP_PCI_ATOMIC_OP_SIZE_SUP_8_BYTES
 = (1ULL << 1),

444 
	mIBV_EXP_PCI_ATOMIC_OP_SIZE_SUP_16_BYTES
 = (1ULL << 2),

447 
	sibv_exp_devi˚_©å
 {

448 
	mfw_vî
[64];

449 
uöt64_t
 
	mnode_guid
;

450 
uöt64_t
 
	msys_image_guid
;

451 
uöt64_t
 
	mmax_mr_size
;

452 
uöt64_t
 
	m∑ge_size_ˇp
;

453 
uöt32_t
 
	mvíd‹_id
;

454 
uöt32_t
 
	mvíd‹_∑π_id
;

455 
uöt32_t
 
	mhw_vî
;

456 
	mmax_qp
;

457 
	mmax_qp_wr
;

458 
	mª£rved
;

459 
	mmax_sge
;

460 
	mmax_sge_rd
;

461 
	mmax_cq
;

462 
	mmax_cqe
;

463 
	mmax_mr
;

464 
	mmax_pd
;

465 
	mmax_qp_rd_©om
;

466 
	mmax_ì_rd_©om
;

467 
	mmax_ªs_rd_©om
;

468 
	mmax_qp_öô_rd_©om
;

469 
	mmax_ì_öô_rd_©om
;

470 
ibv_exp_©omic_ˇp
 
	mexp_©omic_ˇp
;

471 
	mmax_ì
;

472 
	mmax_rdd
;

473 
	mmax_mw
;

474 
	mmax_øw_ùv6_qp
;

475 
	mmax_øw_ëhy_qp
;

476 
	mmax_mˇ°_gΩ
;

477 
	mmax_mˇ°_qp_©èch
;

478 
	mmax_tŸÆ_mˇ°_qp_©èch
;

479 
	mmax_ah
;

480 
	mmax_fmr
;

481 
	mmax_m≠_≥r_fmr
;

482 
	mmax_§q
;

483 
	mmax_§q_wr
;

484 
	mmax_§q_sge
;

485 
uöt16_t
 
	mmax_pkeys
;

486 
uöt8_t
 
	mloˇl_ˇ_ack_dñay
;

487 
uöt8_t
 
	mphys_p‹t_˙t
;

488 
uöt32_t
 
	mcomp_mask
;

489 
ibv_exp_devi˚_ˇlc_ˇp
 
	mˇlc_ˇp
;

490 
uöt64_t
 
	mtime°amp_mask
;

491 
uöt64_t
 
	mhˇ_c‹e_˛ock
;

492 
uöt64_t
 
	mexp_devi˚_ˇp_Êags
;

493 
	mmax_dc_ªq_rd_©om
;

494 
	mmax_dc_ªs_rd_©om
;

495 
	mölöe_ªcv_sz
;

496 
uöt32_t
 
	mmax_rss_tbl_sz
;

497 
ibv_exp_ext_©omics_∑øms
 
	mext_©om
;

498 
ibv_exp_umr_ˇps
 
	mumr_ˇps
;

499 
ibv_exp_odp_ˇps
 
	modp_ˇps
;

500 
	mmax_d˘
;

501 
	mmax_˘x_ªs_domaö
;

502 
ibv_exp_rx_hash_ˇps
 
	mrx_hash_ˇps
;

503 
uöt32_t
 
	mmax_wq_ty≥_rq
;

504 
	mmax_devi˚_˘x
;

505 
ibv_exp_mp_rq_ˇps
 
	mmp_rq_ˇps
;

506 
uöt16_t
 
	mwq_vœn_ofÊﬂds_ˇp
;

507 
ibv_exp_ec_ˇps
 
	mec_ˇps
;

508 
ibv_exp_masked_©omic_∑øms
 
	mmasked_©omic
;

517 
	mrx_∑d_íd_addr_Æign
;

518 
ibv_exp_tso_ˇps
 
	mtso_ˇps
;

519 
ibv_exp_∑ckë_∑cög_ˇps
 
	m∑ckë_∑cög_ˇps
;

520 
uöt32_t
 
	mec_w_mask
;

521 
ibv_exp_ooo_ˇps
 
	mooo_ˇps
;

522 
ibv_exp_sw_∑rsög_ˇps
 
	msw_∑rsög_ˇps
;

523 
uöt64_t
 
	modp_mr_max_size
;

524 
ibv_exp_tm_ˇps
 
	mtm_ˇps
;

525 
uöt32_t
 
	mtu¬ñ_ofÊﬂds_ˇps
;

526 
uöt64_t
 
	mmax_dm_size
;

527 
uöt32_t
 
	mtu¬ñed_©omic_ˇps
;

528 
uöt64_t
 
	mcomp_mask_2
;

529 
ibv_exp_umr_fixed_size_ˇps
 
	mumr_fixed_size_ˇps
;

530 
ibv_exp_pci_©omic_ˇps
 
	mpci_©omic_ˇps
;

534 
	mIBV_EXP_ACCESS_FLAGS_SHIFT
 = 0x0F

537 
	eibv_exp_ac˚ss_Êags
 {

538 
	mIBV_EXP_ACCESS_LOCAL_WRITE
 = 
IBV_ACCESS_LOCAL_WRITE
,

539 
	mIBV_EXP_ACCESS_REMOTE_WRITE
 = 
IBV_ACCESS_REMOTE_WRITE
,

540 
	mIBV_EXP_ACCESS_REMOTE_READ
 = 
IBV_ACCESS_REMOTE_READ
,

541 
	mIBV_EXP_ACCESS_REMOTE_ATOMIC
 = 
IBV_ACCESS_REMOTE_ATOMIC
,

542 
	mIBV_EXP_ACCESS_MW_BIND
 = 
IBV_ACCESS_MW_BIND
,

544 
	mIBV_EXP_ACCESS_ALLOCATE_MR
 = (
IBV_EXP_START_FLAG
 << 5),

545 
	mIBV_EXP_ACCESS_SHARED_MR_USER_READ
 = (
IBV_EXP_START_FLAG
 << 6),

546 
	mIBV_EXP_ACCESS_SHARED_MR_USER_WRITE
 = (
IBV_EXP_START_FLAG
 << 7),

547 
	mIBV_EXP_ACCESS_SHARED_MR_GROUP_READ
 = (
IBV_EXP_START_FLAG
 << 8),

548 
	mIBV_EXP_ACCESS_SHARED_MR_GROUP_WRITE
 = (
IBV_EXP_START_FLAG
 << 9),

549 
	mIBV_EXP_ACCESS_SHARED_MR_OTHER_READ
 = (
IBV_EXP_START_FLAG
 << 10),

550 
	mIBV_EXP_ACCESS_SHARED_MR_OTHER_WRITE
 = (
IBV_EXP_START_FLAG
 << 11),

551 
	mIBV_EXP_ACCESS_NO_RDMA
 = (
IBV_EXP_START_FLAG
 << 12),

552 
	mIBV_EXP_ACCESS_MW_ZERO_BASED
 = (
IBV_EXP_START_FLAG
 << 13),

553 
	mIBV_EXP_ACCESS_ON_DEMAND
 = (
IBV_EXP_START_FLAG
 << 14),

554 
	mIBV_EXP_ACCESS_RELAXED
 = (
IBV_EXP_START_FLAG
 << 15),

555 
	mIBV_EXP_ACCESS_PHYSICAL_ADDR
 = (
IBV_EXP_START_FLAG
 << 16),

556 
	mIBV_EXP_ACCESS_TUNNELED_ATOMIC
 = (
IBV_EXP_START_FLAG
 << 17),

558 
	mIBV_EXP_ACCESS_RESERVED
 = (
IBV_EXP_START_FLAG
 << 18)

562 
	sibv_exp_mw_böd_öfo
 {

563 
ibv_mr
 *
	mmr
;

564 
uöt64_t
 
	maddr
;

565 
uöt64_t
 
	mÀngth
;

566 
uöt64_t
 
	mexp_mw_ac˚ss_Êags
;

572 
	eibv_exp_böd_mw_comp_mask
 {

573 
	mIBV_EXP_BIND_MW_RESERVED
 = (1 << 0)

577 
	sibv_exp_mw_böd
 {

578 
ibv_qp
 *
	mqp
;

579 
ibv_mw
 *
	mmw
;

580 
uöt64_t
 
	mwr_id
;

581 
uöt64_t
 
	mexp_£nd_Êags
;

582 
ibv_exp_mw_böd_öfo
 
	mböd_öfo
;

583 
uöt32_t
 
	mcomp_mask
;

586 
	eibv_exp_ˇlc_›
 {

587 
	mIBV_EXP_CALC_OP_ADD
 = 0,

588 
	mIBV_EXP_CALC_OP_MAXLOC
,

589 
	mIBV_EXP_CALC_OP_BAND
,

590 
	mIBV_EXP_CALC_OP_BXOR
,

591 
	mIBV_EXP_CALC_OP_BOR
,

592 
	mIBV_EXP_CALC_OP_NUMBER


595 
	eibv_exp_ˇlc_d©a_ty≥
 {

596 
	mIBV_EXP_CALC_DATA_TYPE_INT
 = 0,

597 
	mIBV_EXP_CALC_DATA_TYPE_UINT
,

598 
	mIBV_EXP_CALC_DATA_TYPE_FLOAT
,

599 
	mIBV_EXP_CALC_DATA_TYPE_NUMBER


602 
	eibv_exp_ˇlc_d©a_size
 {

603 
	mIBV_EXP_CALC_DATA_SIZE_64_BIT
 = 0,

604 
	mIBV_EXP_CALC_DATA_SIZE_NUMBER


607 
	eibv_exp_wr_›code
 {

608 
	mIBV_EXP_WR_RDMA_WRITE
 = 
IBV_WR_RDMA_WRITE
,

609 
	mIBV_EXP_WR_RDMA_WRITE_WITH_IMM
 = 
IBV_WR_RDMA_WRITE_WITH_IMM
,

610 
	mIBV_EXP_WR_SEND
 = 
IBV_WR_SEND
,

611 
	mIBV_EXP_WR_SEND_WITH_IMM
 = 
IBV_WR_SEND_WITH_IMM
,

612 
	mIBV_EXP_WR_RDMA_READ
 = 
IBV_WR_RDMA_READ
,

613 
	mIBV_EXP_WR_ATOMIC_CMP_AND_SWP
 = 
IBV_WR_ATOMIC_CMP_AND_SWP
,

614 
	mIBV_EXP_WR_ATOMIC_FETCH_AND_ADD
 = 
IBV_WR_ATOMIC_FETCH_AND_ADD
,

615 
	mIBV_EXP_WR_LOCAL_INV
 = 
IBV_WR_LOCAL_INV
,

616 
	mIBV_EXP_WR_BIND_MW
 = 
IBV_WR_BIND_MW
,

617 
	mIBV_EXP_WR_SEND_WITH_INV
 = 
IBV_WR_SEND_WITH_INV
,

619 
	mIBV_EXP_WR_TSO
 = 15 + 
IBV_EXP_START_ENUM
,

620 
	mIBV_EXP_WR_SEND_ENABLE
 = 0x20 + 
IBV_EXP_START_ENUM
,

621 
	mIBV_EXP_WR_RECV_ENABLE
,

622 
	mIBV_EXP_WR_CQE_WAIT
,

623 
	mIBV_EXP_WR_EXT_MASKED_ATOMIC_CMP_AND_SWP
,

624 
	mIBV_EXP_WR_EXT_MASKED_ATOMIC_FETCH_AND_ADD
,

625 
	mIBV_EXP_WR_NOP
,

626 
	mIBV_EXP_WR_UMR_FILL
,

627 
	mIBV_EXP_WR_UMR_INVALIDATE
,

630 
	eibv_exp_£nd_Êags
 {

631 
	mIBV_EXP_SEND_FENCE
 = 
IBV_SEND_FENCE
,

632 
	mIBV_EXP_SEND_SIGNALED
 = 
IBV_SEND_SIGNALED
,

633 
	mIBV_EXP_SEND_SOLICITED
 = 
IBV_SEND_SOLICITED
,

634 
	mIBV_EXP_SEND_INLINE
 = 
IBV_SEND_INLINE
,

636 
	mIBV_EXP_SEND_IP_CSUM
 = (
IBV_EXP_START_FLAG
 << 0),

637 
	mIBV_EXP_SEND_WITH_CALC
 = (
IBV_EXP_START_FLAG
 << 1),

638 
	mIBV_EXP_SEND_WAIT_EN_LAST
 = (
IBV_EXP_START_FLAG
 << 2),

639 
	mIBV_EXP_SEND_EXT_ATOMIC_INLINE
 = (
IBV_EXP_START_FLAG
 << 3),

642 
	sibv_exp_cmp_sw≠
 {

643 
uöt64_t
 
	mcom∑ª_mask
;

644 
uöt64_t
 
	mcom∑ª_vÆ
;

645 
uöt64_t
 
	msw≠_vÆ
;

646 
uöt64_t
 
	msw≠_mask
;

649 
	sibv_exp_„tch_add
 {

650 
uöt64_t
 
	madd_vÆ
;

651 
uöt64_t
 
	mfõld_bound¨y
;

657 
	eibv_exp_£nd_wr_comp_mask
 {

658 
	mIBV_EXP_SEND_WR_ATTR_RESERVED
 = 1 << 0

661 
	sibv_exp_mem_ªgi⁄
 {

662 
uöt64_t
 
	mba£_addr
;

663 
ibv_mr
 *
	mmr
;

664 
size_t
 
	mÀngth
;

667 
	sibv_exp_mem_ª≥©_block
 {

668 
uöt64_t
 
	mba£_addr
;

669 
ibv_mr
 *
	mmr
;

670 
size_t
 *
	mbyã_cou¡
;

671 
size_t
 *
	m°ride
;

674 
	eibv_exp_umr_wr_ty≥
 {

675 
	mIBV_EXP_UMR_MR_LIST
,

676 
	mIBV_EXP_UMR_REPEAT
,

677 
	mIBV_EXP_UMR_MR_LIST_FIXED_SIZE
,

680 
	sibv_exp_£nd_wr
 {

681 
uöt64_t
 
	mwr_id
;

682 
ibv_exp_£nd_wr
 *
	m√xt
;

683 
ibv_sge
 *
	msg_li°
;

684 
	mnum_sge
;

685 
ibv_exp_wr_›code
 
	mexp_›code
;

686 
	mª£rved
;

688 
uöt32_t
 
	mimm_d©a
;

689 
uöt32_t
 
	mövÆid©e_rkey
;

690 } 
	mex
;

693 
uöt64_t
 
	mªmŸe_addr
;

694 
uöt32_t
 
	mrkey
;

695 } 
	mrdma
;

697 
uöt64_t
 
	mªmŸe_addr
;

698 
uöt64_t
 
	mcom∑ª_add
;

699 
uöt64_t
 
	msw≠
;

700 
uöt32_t
 
	mrkey
;

701 } 
	m©omic
;

703 
ibv_ah
 *
	mah
;

704 
uöt32_t
 
	mªmŸe_q≤
;

705 
uöt32_t
 
	mªmŸe_qkey
;

706 } 
	mud
;

707 } 
	mwr
;

711 
uöt32_t
 
	mªmŸe_§qn
;

712 } 
	mxrc
;

713 } 
	mqp_ty≥
;

715 
uöt32_t
 
	mxrc_ªmŸe_§q_num
;

719 
uöt64_t
 
	mªmŸe_addr
;

720 
uöt32_t
 
	mrkey
;

721 } 
	mrdma
;

723 
uöt64_t
 
	mªmŸe_addr
;

724 
uöt64_t
 
	mcom∑ª_add
;

725 
uöt64_t
 
	msw≠
;

726 
uöt32_t
 
	mrkey
;

727 } 
	m©omic
;

729 
ibv_cq
 *
	mcq
;

730 
öt32_t
 
	mcq_cou¡
;

731 } 
	mcqe_waô
;

733 
ibv_qp
 *
	mqp
;

734 
öt32_t
 
	mwqe_cou¡
;

735 } 
	mwqe_íabÀ
;

736 } 
	mèsk
;

739 
ibv_exp_ˇlc_›
 
	mˇlc_›
;

740 
ibv_exp_ˇlc_d©a_ty≥
 
	md©a_ty≥
;

741 
ibv_exp_ˇlc_d©a_size
 
	md©a_size
;

742 } 
	mˇlc
;

743 } 
	m›
;

745 
ibv_ah
 *
	mah
;

746 
uöt64_t
 
	md˘_ac˚ss_key
;

747 
uöt32_t
 
	md˘_numbî
;

748 } 
	mdc
;

751 
ibv_mw
 *
	mmw
;

752 
uöt32_t
 
	mrkey
;

753 
ibv_exp_mw_böd_öfo
 
	mböd_öfo
;

754 } 
	mböd_mw
;

756 *
	mhdr
;

757 
uöt16_t
 
	mhdr_sz
;

758 
uöt16_t
 
	mmss
;

759 } 
	mtso
;

761 
uöt64_t
 
	mexp_£nd_Êags
;

762 
uöt32_t
 
	mcomp_mask
;

765 
uöt32_t
 
	mumr_ty≥
;

766 
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem‹y_obje˘s
;

767 
uöt64_t
 
	mexp_ac˚ss
;

768 
ibv_mr
 *
	mmodifõd_mr
;

769 
uöt64_t
 
	mba£_addr
;

770 
uöt32_t
 
	mnum_mrs
;

772 
ibv_exp_mem_ªgi⁄
 *
	mmem_ªg_li°
;

774 
ibv_exp_mem_ª≥©_block
 *
	mmem_ª≥©_block_li°
;

775 
size_t
 *
	mª≥©_cou¡
;

776 
uöt32_t
 
	m°ride_dim
;

777 } 
	mrb
;

778 } 
	mmem_li°
;

779 } 
	mumr
;

781 
uöt32_t
 
	mlog_¨g_sz
;

782 
uöt64_t
 
	mªmŸe_addr
;

783 
uöt32_t
 
	mrkey
;

794 
ibv_exp_cmp_sw≠
 
	mcmp_sw≠
;

795 
ibv_exp_„tch_add
 
	m„tch_add
;

796 } 
	m›
;

797 } 
	mölöe_d©a
;

799 } 
	mwr_d©a
;

800 } 
	mmasked_©omics
;

801 } 
	mext_›
;

808 
	eibv_exp_˛ock_öfo_comp_mask
 {

809 
	mIBV_EXP_CLOCK_INFO_RESERVED
 = 1 << 0,

812 
	sibv_exp_˛ock_öfo
 {

813 
uöt64_t
 
	mcy˛es
;

814 
uöt64_t
 
	mn£c
;

815 
uöt64_t
 
	m‰ac
;

816 
uöt64_t
 
	mmask
;

817 
uöt32_t
 
	mshi·
;

818 
uöt32_t
 
	mmu…
;

819 
uöt32_t
 
	mcomp_mask
;

825 
	eibv_exp_vÆues_comp_mask
 {

826 
	mIBV_EXP_VALUES_HW_CLOCK_NS
 = 1 << 0,

827 
	mIBV_EXP_VALUES_HW_CLOCK
 = 1 << 1,

828 
	mIBV_EXP_VALUES_CLOCK_INFO
 = 1 << 2,

829 
	mIBV_EXP_VALUES_RESERVED
 = 1 << 3,

832 
	sibv_exp_vÆues
 {

833 
uöt32_t
 
	mcomp_mask
;

834 
uöt64_t
 
	mhw˛ock_ns
;

835 
uöt64_t
 
	mhw˛ock
;

837 
ibv_exp_˛ock_öfo
 
	m˛ock_öfo
;

843 
	eibv_exp_cq_¸óã_Êags
 {

844 
	mIBV_EXP_CQ_CREATE_CROSS_CHANNEL
 = 1 << 0,

845 
	mIBV_EXP_CQ_TIMESTAMP
 = 1 << 1,

846 
	mIBV_EXP_CQ_TIMESTAMP_TO_SYS_TIME
 = 1 << 2,

847 
	mIBV_EXP_CQ_COMPRESSED_CQE
 = 1 << 3,

848 
	mIBV_EXP_CQ_AS_NOTIFY
 = 1 << 4,

855 
	mIBV_EXP_CQ_CREATE_FLAGS_MASK
 = 
IBV_EXP_CQ_CREATE_CROSS_CHANNEL
 |

856 
IBV_EXP_CQ_TIMESTAMP
 |

857 
IBV_EXP_CQ_TIMESTAMP_TO_SYS_TIME
 |

858 
IBV_EXP_CQ_COMPRESSED_CQE
 |

859 
IBV_EXP_CQ_AS_NOTIFY
,

866 
	eibv_exp_cq_öô_©å_mask
 {

867 
	mIBV_EXP_CQ_INIT_ATTR_FLAGS
 = 1 << 0,

868 
	mIBV_EXP_CQ_INIT_ATTR_RESERVED
 = 1 << 1,

876 
	mIBV_EXP_CQ_INIT_ATTR_RES_DOMAIN
 = 1 << 1,

877 
	mIBV_EXP_CQ_INIT_ATTR_PEER_DIRECT
 = 1 << 2,

878 
	mIBV_EXP_CQ_INIT_ATTR_RESERVED1
 = 1 << 3,

881 
	sibv_exp_ªs_domaö
 {

882 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

885 
	sibv_exp_cq_öô_©å
 {

886 
uöt32_t
 
	mcomp_mask
;

887 
uöt32_t
 
	mÊags
;

888 
ibv_exp_ªs_domaö
 *
	mªs_domaö
;

889 
ibv_exp_≥î_dúe˘_©å
 *
	m≥î_dúe˘_©ås
;

895 
	eibv_exp_ah_©å_©å_comp_mask
 {

896 
	mIBV_EXP_AH_ATTR_LL
 = 1 << 0,

897 
	mIBV_EXP_AH_ATTR_VID
 = 1 << 1,

898 
	mIBV_EXP_AH_ATTR_RESERVED
 = 1 << 2

901 
	eŒ_addªss_ty≥
 {

902 
	mLL_ADDRESS_UNKNOWN
,

903 
	mLL_ADDRESS_IB
,

904 
	mLL_ADDRESS_ETH
,

905 
	mLL_ADDRESS_SIZE


908 
	sibv_exp_ah_©å
 {

909 
ibv_globÆ_rouã
 
	mgrh
;

910 
uöt16_t
 
	mdlid
;

911 
uöt8_t
 
	m¶
;

912 
uöt8_t
 
	m§c_∑th_bôs
;

913 
uöt8_t
 
	m°©ic_øã
;

914 
uöt8_t
 
	mis_globÆ
;

915 
uöt8_t
 
	mp‹t_num
;

916 
uöt32_t
 
	mcomp_mask
;

918 
Œ_addªss_ty≥
 
	mty≥
;

919 
uöt32_t
 
	mÀn
;

920 *
	maddªss
;

921 } 
	mŒ_addªss
;

922 
uöt16_t
 
	mvid
;

928 
	eibv_exp_qp_©å_mask
 {

929 
	mIBV_EXP_QP_STATE
 = 
IBV_QP_STATE
,

930 
	mIBV_EXP_QP_CUR_STATE
 = 
IBV_QP_CUR_STATE
,

931 
	mIBV_EXP_QP_EN_SQD_ASYNC_NOTIFY
 = 
IBV_QP_EN_SQD_ASYNC_NOTIFY
,

932 
	mIBV_EXP_QP_ACCESS_FLAGS
 = 
IBV_QP_ACCESS_FLAGS
,

933 
	mIBV_EXP_QP_PKEY_INDEX
 = 
IBV_QP_PKEY_INDEX
,

934 
	mIBV_EXP_QP_PORT
 = 
IBV_QP_PORT
,

935 
	mIBV_EXP_QP_QKEY
 = 
IBV_QP_QKEY
,

936 
	mIBV_EXP_QP_AV
 = 
IBV_QP_AV
,

937 
	mIBV_EXP_QP_PATH_MTU
 = 
IBV_QP_PATH_MTU
,

938 
	mIBV_EXP_QP_TIMEOUT
 = 
IBV_QP_TIMEOUT
,

939 
	mIBV_EXP_QP_RETRY_CNT
 = 
IBV_QP_RETRY_CNT
,

940 
	mIBV_EXP_QP_RNR_RETRY
 = 
IBV_QP_RNR_RETRY
,

941 
	mIBV_EXP_QP_RQ_PSN
 = 
IBV_QP_RQ_PSN
,

942 
	mIBV_EXP_QP_MAX_QP_RD_ATOMIC
 = 
IBV_QP_MAX_QP_RD_ATOMIC
,

943 
	mIBV_EXP_QP_ALT_PATH
 = 
IBV_QP_ALT_PATH
,

944 
	mIBV_EXP_QP_MIN_RNR_TIMER
 = 
IBV_QP_MIN_RNR_TIMER
,

945 
	mIBV_EXP_QP_SQ_PSN
 = 
IBV_QP_SQ_PSN
,

946 
	mIBV_EXP_QP_MAX_DEST_RD_ATOMIC
 = 
IBV_QP_MAX_DEST_RD_ATOMIC
,

947 
	mIBV_EXP_QP_PATH_MIG_STATE
 = 
IBV_QP_PATH_MIG_STATE
,

948 
	mIBV_EXP_QP_CAP
 = 
IBV_QP_CAP
,

949 
	mIBV_EXP_QP_DEST_QPN
 = 
IBV_QP_DEST_QPN
,

951 
	mIBV_EXP_QP_GROUP_RSS
 = 
IBV_EXP_START_FLAG
 << 21,

952 
	mIBV_EXP_QP_DC_KEY
 = 
IBV_EXP_START_FLAG
 << 22,

953 
	mIBV_EXP_QP_FLOW_ENTROPY
 = 
IBV_EXP_START_FLAG
 << 23,

954 
	mIBV_EXP_QP_OOO_RW_DATA_PLACEMENT
 = 
IBV_EXP_START_FLAG
 << 24,

955 
	mIBV_EXP_QP_RATE_LIMIT
 = 
IBV_EXP_START_FLAG
 << 25,

962 
	eibv_exp_qp_©å_comp_mask
 {

963 
	mIBV_EXP_QP_ATTR_FLOW_ENTROPY
 = 1UL << 0,

964 
	mIBV_EXP_QP_ATTR_BURST_INFO
 = 1UL << 1,

965 
	mIBV_EXP_QP_ATTR_RESERVED
 = 1UL << 2

968 
	sibv_exp_bur°_öfo
 {

969 
uöt32_t
 
	mmax_bur°_sz
;

970 
uöt16_t
 
	mtypiˇl_pkt_sz
;

973 
	sibv_exp_qp_©å
 {

974 
ibv_qp_°©e
 
	mqp_°©e
;

975 
ibv_qp_°©e
 
	mcur_qp_°©e
;

976 
ibv_mtu
 
	m∑th_mtu
;

977 
ibv_mig_°©e
 
	m∑th_mig_°©e
;

978 
uöt32_t
 
	mqkey
;

979 
uöt32_t
 
	mrq_p¢
;

980 
uöt32_t
 
	msq_p¢
;

981 
uöt32_t
 
	mde°_qp_num
;

982 
	mqp_ac˚ss_Êags
;

983 
ibv_qp_ˇp
 
	mˇp
;

984 
ibv_ah_©å
 
	mah_©å
;

985 
ibv_ah_©å
 
	mÆt_ah_©å
;

986 
uöt16_t
 
	mpkey_ödex
;

987 
uöt16_t
 
	mÆt_pkey_ödex
;

988 
uöt8_t
 
	mí_sqd_async_nŸify
;

989 
uöt8_t
 
	msq_døöög
;

990 
uöt8_t
 
	mmax_rd_©omic
;

991 
uöt8_t
 
	mmax_de°_rd_©omic
;

992 
uöt8_t
 
	mmö_∫r_timî
;

993 
uöt8_t
 
	mp‹t_num
;

994 
uöt8_t
 
	mtimeout
;

995 
uöt8_t
 
	mªåy_˙t
;

996 
uöt8_t
 
	m∫r_ªåy
;

997 
uöt8_t
 
	mÆt_p‹t_num
;

998 
uöt8_t
 
	mÆt_timeout
;

999 
uöt64_t
 
	md˘_key
;

1000 
uöt32_t
 
	mcomp_mask
;

1001 
uöt32_t
 
	mÊow_íå›y
;

1002 
uöt32_t
 
	møã_limô
;

1003 
ibv_exp_bur°_öfo
 
	mbur°_öfo
;

1010 
	eibv_exp_qp_öô_©å_comp_mask
 {

1011 
	mIBV_EXP_QP_INIT_ATTR_PD
 = 1 << 0,

1012 
	mIBV_EXP_QP_INIT_ATTR_XRCD
 = 1 << 1,

1013 
	mIBV_EXP_QP_INIT_ATTR_CREATE_FLAGS
 = 1 << 2,

1014 
	mIBV_EXP_QP_INIT_ATTR_INL_RECV
 = 1 << 3,

1015 
	mIBV_EXP_QP_INIT_ATTR_QPG
 = 1 << 4,

1016 
	mIBV_EXP_QP_INIT_ATTR_ATOMICS_ARG
 = 1 << 5,

1017 
	mIBV_EXP_QP_INIT_ATTR_MAX_INL_KLMS
 = 1 << 6,

1018 
	mIBV_EXP_QP_INIT_ATTR_RESERVED
 = 1 << 7,

1026 
	mIBV_EXP_QP_INIT_ATTR_RES_DOMAIN
 = 1 << 7,

1027 
	mIBV_EXP_QP_INIT_ATTR_RX_HASH
 = 1 << 8,

1028 
	mIBV_EXP_QP_INIT_ATTR_PORT
 = 1 << 9,

1029 
	mIBV_EXP_QP_INIT_ATTR_PEER_DIRECT
 = 1 << 10,

1030 
	mIBV_EXP_QP_INIT_ATTR_MAX_TSO_HEADER
 = 1 << 11,

1031 
	mIBV_EXP_QP_INIT_ATTR_ASSOCIATED_QPN
 = 1 << 12,

1032 
	mIBV_EXP_QP_INIT_ATTR_RESERVED1
 = 1 << 13,

1035 
	eibv_exp_qpg_ty≥
 {

1036 
	mIBV_EXP_QPG_NONE
 = 0,

1037 
	mIBV_EXP_QPG_PARENT
 = (1<<0),

1038 
	mIBV_EXP_QPG_CHILD_RX
 = (1<<1),

1039 
	mIBV_EXP_QPG_CHILD_TX
 = (1<<2)

1042 
	sibv_exp_qpg_öô_©åib
 {

1043 
uöt32_t
 
	mtss_chûd_cou¡
;

1044 
uöt32_t
 
	mrss_chûd_cou¡
;

1047 
	sibv_exp_qpg
 {

1048 
uöt32_t
 
	mqpg_ty≥
;

1050 
ibv_qp
 *
	mqpg_∑ª¡
;

1051 
ibv_exp_qpg_öô_©åib
 
	m∑ª¡_©åib
;

1058 
	eibv_exp_rx_hash_fun˘i⁄_Êags
 {

1059 
	mIBV_EXP_RX_HASH_FUNC_TOEPLITZ
 = 1 << 0,

1060 
	mIBV_EXP_RX_HASH_FUNC_XOR
 = 1 << 1

1071 
	eibv_exp_rx_hash_fõlds
 {

1072 
	mIBV_EXP_RX_HASH_SRC_IPV4
 = 1 << 0,

1073 
	mIBV_EXP_RX_HASH_DST_IPV4
 = 1 << 1,

1074 
	mIBV_EXP_RX_HASH_SRC_IPV6
 = 1 << 2,

1075 
	mIBV_EXP_RX_HASH_DST_IPV6
 = 1 << 3,

1076 
	mIBV_EXP_RX_HASH_SRC_PORT_TCP
 = 1 << 4,

1077 
	mIBV_EXP_RX_HASH_DST_PORT_TCP
 = 1 << 5,

1078 
	mIBV_EXP_RX_HASH_SRC_PORT_UDP
 = 1 << 6,

1079 
	mIBV_EXP_RX_HASH_DST_PORT_UDP
 = 1 << 7,

1082 
	#IBV_EXP_RX_HASH_INNER
 (1ULL << 31)

	)

1088 
	sibv_exp_rx_hash_c⁄f
 {

1090 
uöt8_t
 
	mrx_hash_fun˘i⁄
;

1092 
uöt8_t
 
	mrx_hash_key_Àn
;

1093 
uöt8_t
 *
	mrx_hash_key
;

1095 
uöt64_t
 
	mrx_hash_fõlds_mask
;

1096 
ibv_exp_rwq_öd_èbÀ
 *
	mrwq_öd_tbl
;

1102 
	eibv_exp_qp_¸óã_Êags
 {

1103 
	mIBV_EXP_QP_CREATE_CROSS_CHANNEL
 = (1 << 2),

1104 
	mIBV_EXP_QP_CREATE_MANAGED_SEND
 = (1 << 3),

1105 
	mIBV_EXP_QP_CREATE_MANAGED_RECV
 = (1 << 4),

1106 
	mIBV_EXP_QP_CREATE_IGNORE_SQ_OVERFLOW
 = (1 << 6),

1107 
	mIBV_EXP_QP_CREATE_IGNORE_RQ_OVERFLOW
 = (1 << 7),

1108 
	mIBV_EXP_QP_CREATE_ATOMIC_BE_REPLY
 = (1 << 8),

1109 
	mIBV_EXP_QP_CREATE_UMR
 = (1 << 9),

1110 
	mIBV_EXP_QP_CREATE_EC_PARITY_EN
 = (1 << 10),

1111 
	mIBV_EXP_QP_CREATE_RX_END_PADDING
 = (1 << 11),

1112 
	mIBV_EXP_QP_CREATE_SCATTER_FCS
 = (1 << 12),

1113 
	mIBV_EXP_QP_CREATE_TUNNEL_OFFLOADS
 = (1 << 13),

1114 
	mIBV_EXP_QP_CREATE_INTERNAL_USE
 = (1 << 15),

1115 
	mIBV_EXP_QP_CREATE_PACKET_BASED_CREDIT_MODE
 = (1 << 16),

1117 
	mIBV_EXP_QP_CREATE_MASK
 = (0x00013FDC)

1120 
	sibv_exp_qp_öô_©å
 {

1121 *
	mqp_c⁄ãxt
;

1122 
ibv_cq
 *
	m£nd_cq
;

1123 
ibv_cq
 *
	mªcv_cq
;

1124 
ibv_§q
 *
	m§q
;

1125 
ibv_qp_ˇp
 
	mˇp
;

1126 
ibv_qp_ty≥
 
	mqp_ty≥
;

1127 
	msq_sig_Æl
;

1129 
uöt32_t
 
	mcomp_mask
;

1130 
ibv_pd
 *
	mpd
;

1131 
ibv_xrcd
 *
	mxrcd
;

1132 
uöt32_t
 
	mexp_¸óã_Êags
;

1134 
uöt32_t
 
	mmax_öl_ªcv
;

1135 
ibv_exp_qpg
 
	mqpg
;

1136 
uöt32_t
 
	mmax_©omic_¨g
;

1137 
uöt32_t
 
	mmax_öl_£nd_klms
;

1138 
ibv_exp_ªs_domaö
 *
	mªs_domaö
;

1139 
ibv_exp_rx_hash_c⁄f
 *
	mrx_hash_c⁄f
;

1140 
uöt8_t
 
	mp‹t_num
;

1141 
ibv_exp_≥î_dúe˘_©å
 *
	m≥î_dúe˘_©ås
;

1142 
uöt16_t
 
	mmax_tso_hódî
;

1143 
uöt32_t
 
	massocüãd_q≤
;

1149 
	eibv_exp_d˘_öô_©å_comp_mask
 {

1150 
	mIBV_EXP_DCT_INIT_ATTR_RESERVED
 = 1 << 0

1153 
	eibv_exp_d˘_¸óã_Êags
 {

1155 
	mIBV_EXP_DCT_OOO_RW_DATA_PLACEMENT
 = 1 << 0,

1156 
	mIBV_EXP_DCT_CREATE_FLAGS_MASK
 = 
IBV_EXP_DCT_OOO_RW_DATA_PLACEMENT
,

1159 
	sibv_exp_d˘_öô_©å
 {

1160 
ibv_pd
 *
	mpd
;

1161 
ibv_cq
 *
	mcq
;

1162 
ibv_§q
 *
	m§q
;

1163 
uöt64_t
 
	mdc_key
;

1164 
uöt8_t
 
	mp‹t
;

1165 
uöt32_t
 
	mac˚ss_Êags
;

1166 
uöt8_t
 
	mmö_∫r_timî
;

1167 
uöt8_t
 
	mt˛ass
;

1168 
uöt32_t
 
	mÊow_œbñ
;

1169 
ibv_mtu
 
	mmtu
;

1170 
uöt8_t
 
	mpkey_ödex
;

1171 
uöt8_t
 
	mgid_ödex
;

1172 
uöt8_t
 
	mh›_limô
;

1173 
uöt32_t
 
	mölöe_size
;

1174 
uöt32_t
 
	m¸óã_Êags
;

1175 
uöt32_t
 
	mcomp_mask
;

1179 
	mIBV_EXP_DCT_STATE_ACTIVE
 = 0,

1180 
	mIBV_EXP_DCT_STATE_DRAINING
 = 1,

1181 
	mIBV_EXP_DCT_STATE_DRAINED
 = 2

1187 
	eibv_exp_d˘_©å_comp_mask
 {

1188 
	mIBV_EXP_DCT_ATTR_RESERVED
 = 1 << 0

1191 
	sibv_exp_d˘_©å
 {

1192 
uöt64_t
 
	mdc_key
;

1193 
uöt8_t
 
	mp‹t
;

1194 
uöt32_t
 
	mac˚ss_Êags
;

1195 
uöt8_t
 
	mmö_∫r_timî
;

1196 
uöt8_t
 
	mt˛ass
;

1197 
uöt32_t
 
	mÊow_œbñ
;

1198 
ibv_mtu
 
	mmtu
;

1199 
uöt8_t
 
	mpkey_ödex
;

1200 
uöt8_t
 
	mgid_ödex
;

1201 
uöt8_t
 
	mh›_limô
;

1202 
uöt32_t
 
	mkey_viﬁ©i⁄s
;

1203 
uöt8_t
 
	m°©e
;

1204 
ibv_§q
 *
	m§q
;

1205 
ibv_cq
 *
	mcq
;

1206 
ibv_pd
 *
	mpd
;

1207 
uöt32_t
 
	mcomp_mask
;

1211 
	mIBV_EXP_QUERY_PORT_STATE
 = 1 << 0,

1212 
	mIBV_EXP_QUERY_PORT_MAX_MTU
 = 1 << 1,

1213 
	mIBV_EXP_QUERY_PORT_ACTIVE_MTU
 = 1 << 2,

1214 
	mIBV_EXP_QUERY_PORT_GID_TBL_LEN
 = 1 << 3,

1215 
	mIBV_EXP_QUERY_PORT_CAP_FLAGS
 = 1 << 4,

1216 
	mIBV_EXP_QUERY_PORT_MAX_MSG_SZ
 = 1 << 5,

1217 
	mIBV_EXP_QUERY_PORT_BAD_PKEY_CNTR
 = 1 << 6,

1218 
	mIBV_EXP_QUERY_PORT_QKEY_VIOL_CNTR
 = 1 << 7,

1219 
	mIBV_EXP_QUERY_PORT_PKEY_TBL_LEN
 = 1 << 8,

1220 
	mIBV_EXP_QUERY_PORT_LID
 = 1 << 9,

1221 
	mIBV_EXP_QUERY_PORT_SM_LID
 = 1 << 10,

1222 
	mIBV_EXP_QUERY_PORT_LMC
 = 1 << 11,

1223 
	mIBV_EXP_QUERY_PORT_MAX_VL_NUM
 = 1 << 12,

1224 
	mIBV_EXP_QUERY_PORT_SM_SL
 = 1 << 13,

1225 
	mIBV_EXP_QUERY_PORT_SUBNET_TIMEOUT
 = 1 << 14,

1226 
	mIBV_EXP_QUERY_PORT_INIT_TYPE_REPLY
 = 1 << 15,

1227 
	mIBV_EXP_QUERY_PORT_ACTIVE_WIDTH
 = 1 << 16,

1228 
	mIBV_EXP_QUERY_PORT_ACTIVE_SPEED
 = 1 << 17,

1229 
	mIBV_EXP_QUERY_PORT_PHYS_STATE
 = 1 << 18,

1230 
	mIBV_EXP_QUERY_PORT_LINK_LAYER
 = 1 << 19,

1232 
	mIBV_EXP_QUERY_PORT_STD_MASK
 = (1 << 20) - 1,

1234 
	mIBV_EXP_QUERY_PORT_MASK
 = 
IBV_EXP_QUERY_PORT_STD_MASK
,

1241 
	eibv_exp_quîy_p‹t_©å_comp_mask
 {

1242 
	mIBV_EXP_QUERY_PORT_ATTR_MASK1
 = 1 << 0,

1243 
	mIBV_EXP_QUERY_PORT_ATTR_RESERVED
 = 1 << 1,

1245 
	mIBV_EXP_QUERY_PORT_ATTR_MASKS
 = 
IBV_EXP_QUERY_PORT_ATTR_RESERVED
 - 1

1248 
	sibv_exp_p‹t_©å
 {

1251 
ibv_p‹t_°©e
 
	m°©e
;

1252 
ibv_mtu
 
	mmax_mtu
;

1253 
ibv_mtu
 
	ma˘ive_mtu
;

1254 
	mgid_tbl_Àn
;

1255 
uöt32_t
 
	mp‹t_ˇp_Êags
;

1256 
uöt32_t
 
	mmax_msg_sz
;

1257 
uöt32_t
 
	mbad_pkey_˙å
;

1258 
uöt32_t
 
	mqkey_viﬁ_˙å
;

1259 
uöt16_t
 
	mpkey_tbl_Àn
;

1260 
uöt16_t
 
	mlid
;

1261 
uöt16_t
 
	msm_lid
;

1262 
uöt8_t
 
	mlmc
;

1263 
uöt8_t
 
	mmax_vl_num
;

1264 
uöt8_t
 
	msm_¶
;

1265 
uöt8_t
 
	msub√t_timeout
;

1266 
uöt8_t
 
	möô_ty≥_ª∂y
;

1267 
uöt8_t
 
	ma˘ive_width
;

1268 
uöt8_t
 
	ma˘ive_•ìd
;

1269 
uöt8_t
 
	mphys_°©e
;

1270 
uöt8_t
 
	mlök_œyî
;

1271 
uöt8_t
 
	mª£rved
;

1273 
ibv_p‹t_©å
 
	mp‹t_©å
;

1275 
uöt32_t
 
	mcomp_mask
;

1276 
uöt32_t
 
	mmask1
;

1279 
	eibv_exp_cq_©å_mask
 {

1280 
	mIBV_EXP_CQ_MODERATION
 = 1 << 0,

1281 
	mIBV_EXP_CQ_CAP_FLAGS
 = 1 << 1

1284 
	eibv_exp_cq_ˇp_Êags
 {

1285 
	mIBV_EXP_CQ_IGNORE_OVERRUN
 = (1 << 0),

1287 
	mIBV_EXP_CQ_CAP_MASK
 = (0x00000001)

1294 
	eibv_exp_cq_©å_comp_mask
 {

1295 
	mIBV_EXP_CQ_ATTR_MODERATION
 = (1 << 0),

1296 
	mIBV_EXP_CQ_ATTR_CQ_CAP_FLAGS
 = (1 << 1),

1298 
	mIBV_EXP_CQ_ATTR_RESERVED
 = (1 << 2)

1301 
	sibv_exp_cq_©å
 {

1302 
uöt32_t
 
	mcomp_mask
;

1304 
uöt16_t
 
	mcq_cou¡
;

1305 
uöt16_t
 
	mcq_≥riod
;

1306 } 
	mmodî©i⁄
;

1307 
uöt32_t
 
	mcq_ˇp_Êags
;

1313 
	eibv_exp_ªg_sh¨ed_mr_comp_mask
 {

1314 
	mIBV_EXP_REG_SHARED_MR_RESERVED
 = (1 << 0)

1317 
	sibv_exp_ªg_sh¨ed_mr_ö
 {

1318 
uöt32_t
 
	mmr_h™dÀ
;

1319 
ibv_pd
 *
	mpd
;

1320 *
	maddr
;

1321 
uöt64_t
 
	mexp_ac˚ss
;

1322 
uöt32_t
 
	mcomp_mask
;

1325 
	eibv_exp_Êow_Êags
 {

1326 
	mIBV_EXP_FLOW_ATTR_FLAGS_ALLOW_LOOP_BACK
 = 1,

1329 
	eibv_exp_Êow_©å_ty≥
 {

1331 
	mIBV_EXP_FLOW_ATTR_NORMAL
 = 0x0,

1335 
	mIBV_EXP_FLOW_ATTR_ALL_DEFAULT
 = 0x1,

1339 
	mIBV_EXP_FLOW_ATTR_MC_DEFAULT
 = 0x2,

1341 
	mIBV_EXP_FLOW_ATTR_SNIFFER
 = 0x3,

1344 
	eibv_exp_Êow_•ec_ty≥
 {

1345 
	mIBV_EXP_FLOW_SPEC_ETH
 = 0x20,

1346 
	mIBV_EXP_FLOW_SPEC_IB
 = 0x21,

1347 
	mIBV_EXP_FLOW_SPEC_IPV4
 = 0x30,

1348 
	mIBV_EXP_FLOW_SPEC_IPV6
 = 0x31,

1349 
	mIBV_EXP_FLOW_SPEC_IPV4_EXT
 = 0x32,

1350 
	mIBV_EXP_FLOW_SPEC_IPV6_EXT
 = 0x33,

1351 
	mIBV_EXP_FLOW_SPEC_TCP
 = 0x40,

1352 
	mIBV_EXP_FLOW_SPEC_UDP
 = 0x41,

1353 
	mIBV_EXP_FLOW_SPEC_VXLAN_TUNNEL
 = 0x50,

1354 
	mIBV_EXP_FLOW_SPEC_INNER
 = 0x100,

1355 
	mIBV_EXP_FLOW_SPEC_ACTION_TAG
 = 0x1000,

1356 
	mIBV_EXP_FLOW_SPEC_ACTION_DROP
 = 0x1001,

1359 
	sibv_exp_Êow_ëh_fûãr
 {

1360 
uöt8_t
 
	md°_mac
[6];

1361 
uöt8_t
 
	m§c_mac
[6];

1362 
uöt16_t
 
	mëhî_ty≥
;

1366 
uöt16_t
 
	mvœn_èg
;

1369 
	sibv_exp_Êow_•ec_ëh
 {

1370 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1371 
uöt16_t
 
	msize
;

1372 
ibv_exp_Êow_ëh_fûãr
 
	mvÆ
;

1373 
ibv_exp_Êow_ëh_fûãr
 
	mmask
;

1376 
	sibv_exp_Êow_ib_fûãr
 {

1377 
uöt32_t
 
	mq≤
;

1378 
uöt8_t
 
	md°_gid
[16];

1381 
	sibv_exp_Êow_•ec_ib
 {

1382 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1383 
uöt16_t
 
	msize
;

1384 
ibv_exp_Êow_ib_fûãr
 
	mvÆ
;

1385 
ibv_exp_Êow_ib_fûãr
 
	mmask
;

1388 
	sibv_exp_Êow_ùv4_fûãr
 {

1389 
uöt32_t
 
	m§c_ù
;

1390 
uöt32_t
 
	md°_ù
;

1393 
	sibv_exp_Êow_•ec_ùv4
 {

1394 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1395 
uöt16_t
 
	msize
;

1396 
ibv_exp_Êow_ùv4_fûãr
 
	mvÆ
;

1397 
ibv_exp_Êow_ùv4_fûãr
 
	mmask
;

1400 
	sibv_exp_Êow_ùv6_fûãr
 {

1401 
uöt8_t
 
	m§c_ù
[16];

1402 
uöt8_t
 
	md°_ù
[16];

1405 
	sibv_exp_Êow_•ec_ùv6
 {

1406 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1407 
uöt16_t
 
	msize
;

1408 
ibv_exp_Êow_ùv6_fûãr
 
	mvÆ
;

1409 
ibv_exp_Êow_ùv6_fûãr
 
	mmask
;

1412 
	sibv_exp_Êow_•ec_a˘i⁄_èg
 {

1413 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1414 
uöt16_t
 
	msize
;

1415 
uöt32_t
 
	mèg_id
;

1418 
	sibv_exp_Êow_•ec_a˘i⁄_dr›
 {

1419 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1420 
uöt16_t
 
	msize
;

1423 
	sibv_exp_Êow_ùv6_ext_fûãr
 {

1424 
uöt8_t
 
	m§c_ù
[16];

1425 
uöt8_t
 
	md°_ù
[16];

1426 
uöt32_t
 
	mÊow_œbñ
;

1427 
uöt8_t
 
	m√xt_hdr
;

1428 
uöt8_t
 
	måaffic_˛ass
;

1429 
uöt8_t
 
	mh›_limô
;

1432 
	sibv_exp_Êow_•ec_ùv6_ext
 {

1433 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1434 
uöt16_t
 
	msize
;

1435 
ibv_exp_Êow_ùv6_ext_fûãr
 
	mvÆ
;

1436 
ibv_exp_Êow_ùv6_ext_fûãr
 
	mmask
;

1439 
	sibv_exp_Êow_ùv4_ext_fûãr
 {

1440 
uöt32_t
 
	m§c_ù
;

1441 
uöt32_t
 
	md°_ù
;

1442 
uöt8_t
 
	m¥Ÿo
;

1443 
uöt8_t
 
	mtos
;

1444 
uöt8_t
 
	mâl
;

1445 
uöt8_t
 
	mÊags
;

1448 
	sibv_exp_Êow_•ec_ùv4_ext
 {

1449 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1450 
uöt16_t
 
	msize
;

1451 
ibv_exp_Êow_ùv4_ext_fûãr
 
	mvÆ
;

1452 
ibv_exp_Êow_ùv4_ext_fûãr
 
	mmask
;

1455 
	sibv_exp_Êow_t˝_udp_fûãr
 {

1456 
uöt16_t
 
	md°_p‹t
;

1457 
uöt16_t
 
	m§c_p‹t
;

1460 
	sibv_exp_Êow_•ec_t˝_udp
 {

1461 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1462 
uöt16_t
 
	msize
;

1463 
ibv_exp_Êow_t˝_udp_fûãr
 
	mvÆ
;

1464 
ibv_exp_Êow_t˝_udp_fûãr
 
	mmask
;

1467 
	sibv_exp_Êow_tu¬ñ_fûãr
 {

1468 
uöt32_t
 
	mtu¬ñ_id
;

1471 
	sibv_exp_Êow_•ec_tu¬ñ
 {

1472 
ibv_exp_Êow_•ec_ty≥
 
	mty≥
;

1473 
uöt16_t
 
	msize
;

1474 
ibv_exp_Êow_tu¬ñ_fûãr
 
	mvÆ
;

1475 
ibv_exp_Êow_tu¬ñ_fûãr
 
	mmask
;

1478 
	sibv_exp_Êow_•ec
 {

1481 
uöt32_t
 
	mty≥
;

1482 
uöt16_t
 
	msize
;

1483 } 
	mhdr
;

1484 
ibv_exp_Êow_•ec_ib
 
	mib
;

1485 
ibv_exp_Êow_•ec_ëh
 
	mëh
;

1486 
ibv_exp_Êow_•ec_ùv4
 
	mùv4
;

1487 
ibv_exp_Êow_•ec_ùv4_ext
 
	mùv4_ext
;

1488 
ibv_exp_Êow_•ec_t˝_udp
 
	mt˝_udp
;

1489 
ibv_exp_Êow_•ec_ùv6
 
	mùv6
;

1490 
ibv_exp_Êow_•ec_ùv6_ext
 
	mùv6_ext
;

1491 
ibv_exp_Êow_•ec_tu¬ñ
 
	mtu¬ñ
;

1492 
ibv_exp_Êow_•ec_a˘i⁄_èg
 
	mÊow_èg
;

1493 
ibv_exp_Êow_•ec_a˘i⁄_dr›
 
	mdr›
;

1497 
	sibv_exp_Êow_©å
 {

1498 
ibv_exp_Êow_©å_ty≥
 
	mty≥
;

1499 
uöt16_t
 
	msize
;

1500 
uöt16_t
 
	m¥i‹ôy
;

1501 
uöt8_t
 
	mnum_of_•ecs
;

1502 
uöt8_t
 
	mp‹t
;

1503 
uöt32_t
 
	mÊags
;

1508 
uöt64_t
 
	mª£rved
;

1511 
	sibv_exp_Êow
 {

1512 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1513 
uöt32_t
 
	mh™dÀ
;

1516 
	sibv_exp_d˘
 {

1517 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1518 
uöt32_t
 
	mh™dÀ
;

1519 
uöt32_t
 
	md˘_num
;

1520 
ibv_pd
 *
	mpd
;

1521 
ibv_§q
 *
	m§q
;

1522 
ibv_cq
 *
	mcq
;

1523 
±hªad_muãx_t
 
	mmuãx
;

1524 
±hªad_c⁄d_t
 
	mc⁄d
;

1525 
uöt32_t
 
	mevíts_com∂ëed
;

1528 
	eibv_exp_wc_›code
 {

1529 
	mIBV_EXP_WC_SEND
,

1530 
	mIBV_EXP_WC_RDMA_WRITE
,

1531 
	mIBV_EXP_WC_RDMA_READ
,

1532 
	mIBV_EXP_WC_COMP_SWAP
,

1533 
	mIBV_EXP_WC_FETCH_ADD
,

1534 
	mIBV_EXP_WC_BIND_MW
,

1535 
	mIBV_EXP_WC_LOCAL_INV
,

1536 
	mIBV_EXP_WC_MASKED_COMP_SWAP
 = 9,

1537 
	mIBV_EXP_WC_MASKED_FETCH_ADD
 = 10,

1538 
	mIBV_EXP_WC_TSO
,

1539 
	mIBV_EXP_WC_UMR
 = 0x100,

1544 
	mIBV_EXP_WC_RECV
 = 1 << 7,

1545 
	mIBV_EXP_WC_RECV_RDMA_WITH_IMM
,

1547 
	mIBV_EXP_WC_TM_ADD
 = 
IBV_EXP_WC_RECV
 + 
IBV_EXP_START_ENUM
,

1548 
	mIBV_EXP_WC_TM_DEL
,

1549 
	mIBV_EXP_WC_TM_SYNC
,

1550 
	mIBV_EXP_WC_TM_RECV
,

1551 
	mIBV_EXP_WC_TM_NO_TAG
,

1553 
	mIBV_EXP_WC_RECV_NOP


1556 
	eibv_exp_wc_Êags
 {

1557 
	mIBV_EXP_WC_GRH
 = 
IBV_WC_GRH
,

1558 
	mIBV_EXP_WC_WITH_IMM
 = 
IBV_WC_WITH_IMM
,

1559 
	mIBV_EXP_WC_WITH_INV
 = 
IBV_WC_WITH_INV
,

1561 
	mIBV_EXP_WC_WITH_SL
 = 
IBV_EXP_START_FLAG
 << 4,

1562 
	mIBV_EXP_WC_WITH_SLID
 = 
IBV_EXP_START_FLAG
 << 5,

1563 
	mIBV_EXP_WC_WITH_TIMESTAMP
 = 
IBV_EXP_START_FLAG
 << 6,

1564 
	mIBV_EXP_WC_QP
 = 
IBV_EXP_START_FLAG
 << 7,

1565 
	mIBV_EXP_WC_SRQ
 = 
IBV_EXP_START_FLAG
 << 8,

1566 
	mIBV_EXP_WC_DCT
 = 
IBV_EXP_START_FLAG
 << 9,

1567 
	mIBV_EXP_WC_RX_IP_CSUM_OK
 = 
IBV_EXP_START_FLAG
 << 10,

1568 
	mIBV_EXP_WC_RX_TCP_UDP_CSUM_OK
 = 
IBV_EXP_START_FLAG
 << 11,

1569 
	mIBV_EXP_WC_RX_IPV4_PACKET
 = 
IBV_EXP_START_FLAG
 << 12,

1570 
	mIBV_EXP_WC_RX_IPV6_PACKET
 = 
IBV_EXP_START_FLAG
 << 13,

1571 
	mIBV_EXP_WC_RX_TUNNEL_PACKET
 = 
IBV_EXP_START_FLAG
 << 14,

1572 
	mIBV_EXP_WC_RX_OUTER_IP_CSUM_OK
 = 
IBV_EXP_START_FLAG
 << 15,

1573 
	mIBV_EXP_WC_RX_OUTER_TCP_UDP_CSUM_OK
 = 
IBV_EXP_START_FLAG
 << 16,

1574 
	mIBV_EXP_WC_RX_OUTER_IPV4_PACKET
 = 
IBV_EXP_START_FLAG
 << 17,

1575 
	mIBV_EXP_WC_RX_OUTER_IPV6_PACKET
 = 
IBV_EXP_START_FLAG
 << 18,

1576 
	mIBV_EXP_WC_TM_SYNC_REQ
 = 
IBV_EXP_START_FLAG
 << 19,

1577 
	mIBV_EXP_WC_TM_DEL_FAILED
 = 
IBV_EXP_START_FLAG
 << 20,

1578 
	mIBV_EXP_WC_TM_MATCH
 = 
IBV_EXP_START_FLAG
 << 21,

1579 
	mIBV_EXP_WC_TM_DATA_VALID
 = 
IBV_EXP_START_FLAG
 << 22,

1580 
	mIBV_EXP_WC_TM_RNDV_INCOMPLETE
 = 
IBV_EXP_START_FLAG
 << 23,

1581 
	mIBV_EXP_WC_MP_WR_MORE_IN_MSG
 = 
IBV_EXP_START_FLAG
 << 24,

1582 
	mIBV_EXP_WC_MP_WR_CONSUMED
 = 
IBV_EXP_START_FLAG
 << 25

1585 
	sibv_exp_wc
 {

1586 
uöt64_t
 
	mwr_id
;

1587 
ibv_wc_°©us
 
	m°©us
;

1588 
ibv_exp_wc_›code
 
	mexp_›code
;

1589 
uöt32_t
 
	mvíd‹_îr
;

1591 
uöt32_t
 
	mbyã_Àn
;

1594 
uöt16_t
 
	m°rides_off£t
;

1596 
uöt16_t
 
	mbyã_Àn
;

1597 } 
	mmp_wr
;

1599 
uöt32_t
 
	mimm_d©a
;

1600 
uöt32_t
 
	mqp_num
;

1601 
uöt32_t
 
	m§c_qp
;

1602 
	mª£rved
;

1603 
uöt16_t
 
	mpkey_ödex
;

1604 
uöt16_t
 
	m¶id
;

1605 
uöt8_t
 
	m¶
;

1606 
uöt8_t
 
	mdlid_∑th_bôs
;

1607 
uöt64_t
 
	mtime°amp
;

1608 
ibv_qp
 *
	mqp
;

1609 
ibv_§q
 *
	m§q
;

1610 
ibv_exp_d˘
 *
	md˘
;

1611 
uöt64_t
 
	mexp_wc_Êags
;

1614 
uöt64_t
 
	mèg
;

1615 
uöt32_t
 
	m¥iv
;

1616 } 
	mtm_öfo
;

1622 
	eibv_exp_¥e„tch_©å_comp_mask
 {

1623 
	mIBV_EXP_PREFETCH_MR_RESERVED
 = (1 << 0),

1629 
	eibv_exp_¥e„tch_©å_Êags
 {

1631 
	mIBV_EXP_PREFETCH_WRITE_ACCESS
 = (1 << 0),

1634 
	sibv_exp_¥e„tch_©å
 {

1636 
uöt32_t
 
	mÊags
;

1638 *
	maddr
;

1640 
size_t
 
	mÀngth
;

1641 
uöt32_t
 
	mcomp_mask
;

1647 
	eibv_exp_ªg_mr_ö_comp_mask
 {

1649 
	mIBV_EXP_REG_MR_CREATE_FLAGS
 = (1 << 0),

1650 
	mIBV_EXP_REG_MR_DM
 = (1 << 1),

1651 
	mIBV_EXP_REG_MR_RESERVED
 = (1 << 2)

1654 
	eibv_exp_ªg_mr_¸óã_Êags
 {

1655 
	mIBV_EXP_REG_MR_CREATE_CONTIG
 = (1 << 0)

1658 
	sibv_exp_ªg_mr_ö
 {

1659 
ibv_pd
 *
	mpd
;

1660 *
	maddr
;

1661 
size_t
 
	mÀngth
;

1662 
uöt64_t
 
	mexp_ac˚ss
;

1663 
uöt32_t
 
	mcomp_mask
;

1664 
uöt32_t
 
	m¸óã_Êags
;

1665 
ibv_exp_dm
 *
	mdm
;

1669 
	eibv_exp_èsk_ty≥
 {

1670 
	mIBV_EXP_TASK_SEND
 = 0,

1671 
	mIBV_EXP_TASK_RECV
 = 1

1677 
	eibv_exp_èsk_comp_mask
 {

1678 
	mIBV_EXP_TASK_RESERVED
 = (1 << 0)

1681 
	sibv_exp_èsk
 {

1682 
ibv_exp_èsk_ty≥
 
	mèsk_ty≥
;

1684 
ibv_qp
 *
	mqp
;

1686 
ibv_exp_£nd_wr
 *
	m£nd_wr
;

1687 
ibv_ªcv_wr
 *
	mªcv_wr
;

1689 } 
	môem
;

1690 
ibv_exp_èsk
 *
	m√xt
;

1691 
uöt32_t
 
	mcomp_mask
;

1697 
	eibv_exp_¨m_©å_comp_mask
 {

1698 
	mIBV_EXP_ARM_ATTR_RESERVED
 = (1 << 0)

1700 
	sibv_exp_¨m_©å
 {

1701 
uöt32_t
 
	mcomp_mask
;

1704 
	eibv_exp_mr_¸óã_Êags
 {

1705 
	mIBV_EXP_MR_SIGNATURE_EN
 = (1 << 0),

1706 
	mIBV_EXP_MR_INDIRECT_KLMS
 = (1 << 1),

1707 
	mIBV_EXP_MR_FIXED_BUFFER_SIZE
 = (1 << 2)

1710 
	sibv_exp_mr_öô_©å
 {

1711 
uöt32_t
 
	mmax_klm_li°_size
;

1712 
uöt32_t
 
	m¸óã_Êags
;

1713 
uöt64_t
 
	mexp_ac˚ss_Êags
;

1719 
	eibv_exp_¸óã_mr_ö_comp_mask
 {

1720 
	mIBV_EXP_CREATE_MR_IN_RESERVED
 = (1 << 0)

1723 
	sibv_exp_¸óã_mr_ö
 {

1724 
ibv_pd
 *
	mpd
;

1725 
ibv_exp_mr_öô_©å
 
	m©å
;

1726 
uöt32_t
 
	mcomp_mask
;

1732 
	eibv_exp_mkey_©å_comp_mask
 {

1733 
	mIBV_EXP_MKEY_ATTR_RESERVED
 = (1 << 0)

1736 
	sibv_exp_mkey_©å
 {

1737 
uöt32_t
 
	mmax_klm_li°_size
;

1738 
uöt32_t
 
	mcomp_mask
;

1741 
	sibv_exp_mkey_li°_c⁄èöî
 {

1742 
uöt32_t
 
	mmax_klm_li°_size
;

1743 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1746 
	eibv_exp_mkey_li°_ty≥
 {

1747 
	mIBV_EXP_MKEY_LIST_TYPE_INDIRECT_MR


1753 
	eibv_exp_Æloc_mkey_li°_comp_mask
 {

1754 
	mIBV_EXP_MKEY_LIST_CONTAINER_RESERVED
 = (1 << 0)

1757 
	sibv_exp_mkey_li°_c⁄èöî_©å
 {

1758 
ibv_pd
 *
	mpd
;

1759 
uöt32_t
 
	mmkey_li°_ty≥
;

1760 
uöt32_t
 
	mmax_klm_li°_size
;

1761 
uöt32_t
 
	mcomp_mask
;

1767 
	eibv_exp_dîeg_mr_comp_mask
 {

1768 
	mIBV_EXP_DEREG_MR_RESERVED
 = (1 << 0)

1771 
	sibv_exp_dîeg_out
 {

1772 
	m√ed_dof‹k
;

1773 
uöt32_t
 
	mcomp_mask
;

1776 
	svîbs_ív_ôem
 {

1777 *
	m«me
;

1778 *
	mvÆue
;

1779 
vîbs_ív_ôem
 *
	m√xt
;

1782 
	svîbs_ívú⁄mít
 {

1783 
vîbs_ív_ôem
 *
	mhód
;

1784 
±hªad_muãx_t
 
	mmtx
;

1789 
	eibv_exp_wq_ty≥
 {

1790 
	mIBV_EXP_WQT_RQ
,

1791 
	mIBV_EXP_WQT_SRQ


1794 
	eibv_exp_wq_°©e
 {

1795 
	mIBV_EXP_WQS_RESET
,

1796 
	mIBV_EXP_WQS_RDY
,

1797 
	mIBV_EXP_WQS_ERR
,

1798 
	mIBV_EXP_WQS_UNKNOWN


1802 
	eibv_exp_vœn_ofÊﬂds
 {

1804 
	mIBV_EXP_RECEIVE_WQ_CVLAN_STRIP
 = (1 << 0),

1806 
	mIBV_EXP_RECEIVE_WQ_CVLAN_INSERTION
 = (1 << 1),

1807 
	mIBV_EXP_RECEIVE_WQ_VLAN_OFFLOADS_RESERVED
 = (1 << 2),

1822 
	sibv_exp_wq
 {

1823 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1824 *
	mwq_c⁄ãxt
;

1825 
uöt32_t
 
	mh™dÀ
;

1827 
ibv_pd
 *
	mpd
;

1829 
ibv_cq
 *
	mcq
;

1831 
ibv_§q
 *
	m§q
;

1832 
uöt32_t
 
	mwq_num
;

1833 
ibv_exp_wq_°©e
 
	m°©e
;

1834 
ibv_exp_wq_ty≥
 
	mwq_ty≥
;

1835 
uöt32_t
 
	mcomp_mask
;

1838 
	eibv_exp_wq_öô_©å_mask
 {

1839 
	mIBV_EXP_CREATE_WQ_RES_DOMAIN
 = (1 << 0),

1840 
	mIBV_EXP_CREATE_WQ_MP_RQ
 = (1 << 1),

1841 
	mIBV_EXP_CREATE_WQ_VLAN_OFFLOADS
 = (1 << 2),

1842 
	mIBV_EXP_CREATE_WQ_FLAGS
 = (1 << 3),

1843 
	mIBV_EXP_CREATE_WQ_RESERVED
 = (1 << 4)

1846 
	sibv_exp_wq_mp_rq
 {

1847 
ibv_exp_mp_rq_shi·s
 
	mu£_shi·
;

1848 
uöt8_t
 
	msögÀ_wqe_log_num_of_°rides
;

1849 
uöt8_t
 
	msögÀ_°ride_log_num_of_byãs
;

1852 
	eibv_exp_wq_öô_©å_Êags
 {

1853 
	mIBV_EXP_CREATE_WQ_FLAG_RX_END_PADDING
 = (1ULL << 0),

1854 
	mIBV_EXP_CREATE_WQ_FLAG_SCATTER_FCS
 = (1ULL << 1),

1855 
	mIBV_EXP_CREATE_WQ_FLAG_DELAY_DROP
 = (1ULL << 2),

1856 
	mIBV_EXP_CREATE_WQ_FLAG_RESERVED
 = (1ULL << 3)

1859 
	sibv_exp_wq_öô_©å
 {

1861 *
	mwq_c⁄ãxt
;

1862 
ibv_exp_wq_ty≥
 
	mwq_ty≥
;

1864 
uöt32_t
 
	mmax_ªcv_wr
;

1866 
uöt32_t
 
	mmax_ªcv_sge
;

1868 
ibv_pd
 *
	mpd
;

1870 
ibv_cq
 *
	mcq
;

1872 
ibv_§q
 *
	m§q
;

1874 
uöt32_t
 
	mcomp_mask
;

1875 
ibv_exp_ªs_domaö
 *
	mªs_domaö
;

1876 
ibv_exp_wq_mp_rq
 
	mmp_rq
;

1877 
uöt16_t
 
	mvœn_ofÊﬂds
;

1878 
uöt64_t
 
	mÊags
;

1881 
	eibv_exp_wq_©å_mask
 {

1882 
	mIBV_EXP_WQ_ATTR_STATE
 = 1 << 0,

1883 
	mIBV_EXP_WQ_ATTR_CURR_STATE
 = 1 << 1,

1884 
	mIBV_EXP_WQ_ATTR_VLAN_OFFLOADS
 = 1 << 2,

1885 
	mIBV_EXP_WQ_ATTR_RESERVED
 = 1 << 3

1888 
	sibv_exp_wq_©å
 {

1890 
uöt32_t
 
	m©å_mask
;

1892 
ibv_exp_wq_°©e
 
	mwq_°©e
;

1894 
ibv_exp_wq_°©e
 
	mcuº_wq_°©e
;

1895 
uöt16_t
 
	mvœn_ofÊﬂds
;

1905 
	sibv_exp_rwq_öd_èbÀ
 {

1906 
ibv_c⁄ãxt
 *
	mc⁄ãxt
;

1907 
ibv_pd
 *
	mpd
;

1908 
	möd_tbl_h™dÀ
;

1909 
	möd_tbl_num
;

1910 
uöt32_t
 
	mcomp_mask
;

1913 
	eibv_exp_öd_èbÀ_öô_©å_mask
 {

1914 
	mIBV_EXP_CREATE_IND_TABLE_RESERVED
 = (1 << 0)

1920 
	sibv_exp_rwq_öd_èbÀ_öô_©å
 {

1921 
ibv_pd
 *
	mpd
;

1923 
uöt32_t
 
	mlog_öd_tbl_size
;

1925 
ibv_exp_wq
 **
	möd_tbl
;

1926 
uöt32_t
 
	mcomp_mask
;

1930 
	eibv_exp_thªad_modñ
 {

1931 
	mIBV_EXP_THREAD_SAFE
,

1932 
	mIBV_EXP_THREAD_UNSAFE
,

1933 
	mIBV_EXP_THREAD_SINGLE


1936 
	eibv_exp_msg_modñ
 {

1937 
	mIBV_EXP_MSG_DEFAULT
,

1938 
	mIBV_EXP_MSG_LOW_LATENCY
,

1939 
	mIBV_EXP_MSG_HIGH_BW
,

1940 
	mIBV_EXP_MSG_FORCE_LOW_LATENCY
,

1946 
	eibv_exp_ªs_domaö_öô_©å_comp_mask
 {

1947 
	mIBV_EXP_RES_DOMAIN_THREAD_MODEL
 = (1 << 0),

1948 
	mIBV_EXP_RES_DOMAIN_MSG_MODEL
 = (1 << 1),

1949 
	mIBV_EXP_RES_DOMAIN_RESERVED
 = (1 << 2),

1952 
	sibv_exp_ªs_domaö_öô_©å
 {

1953 
uöt32_t
 
	mcomp_mask
;

1954 
ibv_exp_thªad_modñ
 
	mthªad_modñ
;

1955 
ibv_exp_msg_modñ
 
	mmsg_modñ
;

1958 
	eibv_exp_de°roy_ªs_domaö_comp_mask
 {

1959 
	mIBV_EXP_DESTROY_RES_DOMAIN_RESERVED
 = (1 << 0),

1962 
	sibv_exp_de°roy_ªs_domaö_©å
 {

1963 
uöt32_t
 
	mcomp_mask
;

1970 
	eibv_exp_quîy_ötf_Êags
 {

1972 
	mIBV_EXP_QUERY_INTF_FLAG_ENABLE_CHECKS
 = (1 << 0),

1975 
	eibv_exp_ötf_Ámûy
 {

1976 
	mIBV_EXP_INTF_QP_BURST
,

1977 
	mIBV_EXP_INTF_CQ
,

1978 
	mIBV_EXP_INTF_WQ
,

1979 
	mIBV_EXP_INTF_RESERVED
,

1982 
	eibv_exp_ex≥rimíèl_ötf_Ámûy
 {

1983 
	mIBV_EXP_EXPERIMENTAL_INTF_RESERVED
,

1986 
	eibv_exp_ötf_sc›e
 {

1987 
	mIBV_EXP_INTF_GLOBAL
,

1990 
	mIBV_EXP_INTF_EXPERIMENTAL
,

1995 
	mIBV_EXP_INTF_VENDOR
,

1998 
	mIBV_EXP_INTF_VENDOR_EXPERIMENTAL
,

2005 
	eibv_exp_quîy_ötf_°©us
 {

2006 
	mIBV_EXP_INTF_STAT_OK
,

2007 
	mIBV_EXP_INTF_STAT_VENDOR_NOT_SUPPORTED
,

2008 
	mIBV_EXP_INTF_STAT_INTF_NOT_SUPPORTED
,

2009 
	mIBV_EXP_INTF_STAT_VERSION_NOT_SUPPORTED
,

2010 
	mIBV_EXP_INTF_STAT_INVAL_PARARM
,

2011 
	mIBV_EXP_INTF_STAT_INVAL_OBJ_STATE
,

2012 
	mIBV_EXP_INTF_STAT_INVAL_OBJ
,

2013 
	mIBV_EXP_INTF_STAT_FLAGS_NOT_SUPPORTED
,

2014 
	mIBV_EXP_INTF_STAT_FAMILY_FLAGS_NOT_SUPPORTED
,

2017 
	eibv_exp_quîy_ötf_comp_mask
 {

2018 
	mIBV_EXP_QUERY_INTF_RESERVED
 = (1 << 0),

2021 
	sibv_exp_quîy_ötf_∑øms
 {

2022 
uöt32_t
 
	mÊags
;

2023 
ibv_exp_ötf_sc›e
 
	mötf_sc›e
;

2024 
uöt64_t
 
	mvíd‹_guid
;

2025 
uöt32_t
 
	mötf
;

2026 
uöt32_t
 
	mötf_vîsi⁄
;

2027 *
	mobj
;

2028 *
	mÁmûy_∑øms
;

2029 
uöt32_t
 
	mÁmûy_Êags
;

2030 
uöt32_t
 
	mcomp_mask
;

2033 
	eibv_exp_ªÀa£_ötf_comp_mask
 {

2034 
	mIBV_EXP_RELEASE_INTF_RESERVED
 = (1 << 0),

2037 
	sibv_exp_ªÀa£_ötf_∑øms
 {

2038 
uöt32_t
 
	mcomp_mask
;

2048 
	eibv_exp_qp_bur°_Ámûy_¸óã_Êags
 {

2050 
	mIBV_EXP_QP_BURST_CREATE_DISABLE_ETH_LOOPBACK
 = (1 << 0),

2052 
	mIBV_EXP_QP_BURST_CREATE_ENABLE_MULTI_PACKET_SEND_WR
 = (1 << 1),

2056 
	eibv_exp_qp_bur°_Ámûy_Êags
 {

2057 
	mIBV_EXP_QP_BURST_SIGNALED
 = 1 << 0,

2058 
	mIBV_EXP_QP_BURST_SOLICITED
 = 1 << 1,

2059 
	mIBV_EXP_QP_BURST_IP_CSUM
 = 1 << 2,

2060 
	mIBV_EXP_QP_BURST_TUNNEL
 = 1 << 3,

2061 
	mIBV_EXP_QP_BURST_FENCE
 = 1 << 4,

2065 
	sibv_exp_qp_bur°_Ámûy
 {

2066 (*
	m£nd_≥ndög
)(
ibv_qp
 *
	mqp
, 
uöt64_t
 
	maddr
, 
uöt32_t
 
	mÀngth
, uöt32_à
	mlkey
, uöt32_à
	mÊags
);

2067 (*
	m£nd_≥ndög_ölöe
)(
ibv_qp
 *
	mqp
, *
	maddr
, 
uöt32_t
 
	mÀngth
, uöt32_à
	mÊags
);

2068 (*
	m£nd_≥ndög_sg_li°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	msg_li°
, 
uöt32_t
 
	mnum
, uöt32_à
	mÊags
);

2069 (*
	m£nd_Êush
)(
ibv_qp
 *
	mqp
);

2070 (*
	m£nd_bur°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
, uöt32_à
	mÊags
);

2071 (*
	mªcv_bur°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
);

2074 
	sibv_exp_qp_bur°_Ámûy_v1
 {

2083 (*
	m£nd_≥ndög
)(
ibv_qp
 *
	mqp
, 
uöt64_t
 
	maddr
, 
uöt32_t
 
	mÀngth
, uöt32_à
	mlkey
, uöt32_à
	mÊags
);

2094 (*
	m£nd_≥ndög_ölöe
)(
ibv_qp
 *
	mqp
, *
	maddr
, 
uöt32_t
 
	mÀngth
, uöt32_à
	mÊags
);

2105 (*
	m£nd_≥ndög_sg_li°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	msg_li°
, 
uöt32_t
 
	mnum
, uöt32_à
	mÊags
);

2111 (*
	m£nd_Êush
)(
ibv_qp
 *
	mqp
);

2115 (*
	m£nd_bur°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
, uöt32_à
	mÊags
);

2121 (*
	mªcv_bur°
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
);

2131 (*
	m£nd_≥ndög_vœn
)(
ibv_qp
 *
	mqp
, 
uöt64_t
 
	maddr
, 
uöt32_t
 
	mÀngth
,

2132 
uöt32_t
 
	mlkey
, uöt32_à
	mÊags
, 
uöt16_t
 *
	mvœn_tci
);

2142 (*
	m£nd_≥ndög_ölöe_vœn
)(
ibv_qp
 *
	mqp
, *
	maddr
, 
uöt32_t
 
	mÀngth
,

2143 
uöt32_t
 
	mÊags
, 
uöt16_t
 *
	mvœn_tci
);

2153 (*
	m£nd_≥ndög_sg_li°_vœn
)(
ibv_qp
 *
	mqp
, 
ibv_sge
 *
	msg_li°
, 
uöt32_t
 
	mnum
,

2154 
uöt32_t
 
	mÊags
, 
uöt16_t
 *
	mvœn_tci
);

2158 
	sibv_exp_wq_Ámûy
 {

2167 (*
	mªcv_sg_li°
)(
ibv_exp_wq
 *
	mwq
, 
ibv_sge
 *
	msg_li°
, 
uöt32_t
 
	mnum_sg
);

2173 (*
	mªcv_bur°
)(
ibv_exp_wq
 *
	mwq
, 
ibv_sge
 *
	mmsg_li°
, 
uöt32_t
 
	mnum
);

2177 
	eibv_exp_cq_Ámûy_Êags
 {

2182 
	mIBV_EXP_CQ_RX_IP_CSUM_OK
 = 1 << 0,

2183 
	mIBV_EXP_CQ_RX_TCP_UDP_CSUM_OK
 = 1 << 1,

2184 
	mIBV_EXP_CQ_RX_IPV4_PACKET
 = 1 << 2,

2185 
	mIBV_EXP_CQ_RX_IPV6_PACKET
 = 1 << 3,

2186 
	mIBV_EXP_CQ_RX_TUNNEL_PACKET
 = 1 << 4,

2187 
	mIBV_EXP_CQ_RX_OUTER_IP_CSUM_OK
 = 1 << 5,

2188 
	mIBV_EXP_CQ_RX_OUTER_TCP_UDP_CSUM_OK
 = 1 << 6,

2189 
	mIBV_EXP_CQ_RX_OUTER_IPV4_PACKET
 = 1 << 7,

2190 
	mIBV_EXP_CQ_RX_OUTER_IPV6_PACKET
 = 1 << 8,

2194 
	mIBV_EXP_CQ_RX_MULTI_PACKET_LAST_V1
 = 1 << 9,

2196 
	mIBV_EXP_CQ_RX_CVLAN_STRIPPED_V1
 = 1 << 10,

2206 
	mIBV_EXP_CQ_RX_TCP_PACKET
 = 1 << 11,

2207 
	mIBV_EXP_CQ_RX_UDP_PACKET
 = 1 << 12,

2208 
	mIBV_EXP_CQ_RX_WITH_TIMESTAMP
 = 1 << 13,

2212 
	sibv_exp_cq_Ámûy
 {

2213 
öt32_t
 (*
pﬁl_˙t
)(
ibv_cq
 *
	mcq
, 
uöt32_t
 
	mmax
);

2214 
öt32_t
 (*
pﬁl_Àngth
)(
ibv_cq
 *
	mcq
, *
	mbuf
, 
uöt32_t
 *
	möl
);

2215 
öt32_t
 (*
pﬁl_Àngth_Êags
)(
ibv_cq
 *
	mcq
, *
	mbuf
, 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
);

2218 
	sibv_exp_cq_Ámûy_v1
 {

2237 
öt32_t
 (*
pﬁl_˙t
)(
ibv_cq
 *
	mcq
, 
uöt32_t
 
	mmax
);

2261 
öt32_t
 (*
pﬁl_Àngth
)(
ibv_cq
 *
	mcq
, *
	mbuf
, 
uöt32_t
 *
	möl
);

2269 
öt32_t
 (*
pﬁl_Àngth_Êags
)(
ibv_cq
 *
	mcq
, *
	mbuf
, 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
);

2279 
öt32_t
 (*
pﬁl_Àngth_Êags_mp_rq
)(
ibv_cq
 *
	mcq
, 
uöt32_t
 *
	moff£t
, uöt32_à*
	mÊags
);

2291 
öt32_t
 (*
pﬁl_Àngth_Êags_cvœn
)(
ibv_cq
 *
	mcq
, *
	mbuf
,

2292 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
,

2293 
uöt16_t
 *
	mvœn_tci
);

2306 
öt32_t
 (*
pﬁl_Àngth_Êags_mp_rq_cvœn
)(
ibv_cq
 *
	mcq
,

2307 
uöt32_t
 *
	moff£t
,

2308 
uöt32_t
 *
	mÊags
,

2309 
uöt16_t
 *
	mvœn_tci
);

2320 
öt32_t
 (*
pﬁl_Àngth_Êags_ts
)(
ibv_cq
 *
	mcq
, *
	mbuf
,

2321 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
,

2322 
uöt64_t
 *
	mtime°amp
);

2335 
öt32_t
 (*
pﬁl_Àngth_Êags_mp_rq_ts
)(
ibv_cq
 *
	mcq
,

2336 
uöt32_t
 *
	moff£t
,

2337 
uöt32_t
 *
	mÊags
,

2338 
uöt64_t
 *
	mtime°amp
);

2349 
öt32_t
 (*
pﬁl_Àngth_Êags_cvœn_ts
)(
ibv_cq
 *
	mcq
, *
	mbuf
,

2350 
uöt32_t
 *
	möl
, uöt32_à*
	mÊags
,

2351 
uöt16_t
 *
	mvœn_tci
,

2352 
uöt64_t
 *
	mtime°amp
);

2365 
öt32_t
 (*
pﬁl_Àngth_Êags_mp_rq_cvœn_ts
)(
ibv_cq
 *
	mcq
,

2366 
uöt32_t
 *
	moff£t
,

2367 
uöt32_t
 *
	mÊags
,

2368 
uöt16_t
 *
	mvœn_tci
,

2369 
uöt64_t
 *
	mtime°amp
);

2373 
	mIBV_EXP_NUM_DC_INFO_LIDS
 = 30

2376 
	sibv_exp_dc_öfo_ít
 {

2377 
uöt16_t
 
	mlid
[
IBV_EXP_NUM_DC_INFO_LIDS
];

2378 
uöt32_t
 
	m£qnum
;

2381 
	eibv_exp_ro˚_gid_ty≥
 {

2382 
	mIBV_EXP_IB_ROCE_V1_GID_TYPE
,

2383 
	mIBV_EXP_ROCE_V2_GID_TYPE
,

2384 
	mIBV_EXP_ROCE_V1_5_GID_TYPE
,

2387 
	eibv_exp_quîy_gid_©å
 {

2388 
	mIBV_EXP_QUERY_GID_ATTR_TYPE
 = (1 << 0),

2389 
	mIBV_EXP_QUERY_GID_ATTR_GID
 = (1 << 1),

2390 
	mIBV_EXP_QUERY_GID_ATTR_RESERVED
 = (1 << 2),

2393 
	sibv_exp_gid_©å
 {

2394 
uöt32_t
 
	mcomp_mask
;

2395 
ibv_exp_ro˚_gid_ty≥
 
	mty≥
;

2396 
ibv_gid
 
	mgid
;

2403 
	eibv_exp_ec_ˇlc_©å_comp_mask
 {

2404 
	mIBV_EXP_EC_CALC_ATTR_MAX_INFLIGHT
 = (1 << 0),

2405 
	mIBV_EXP_EC_CALC_ATTR_K
 = (1 << 1),

2406 
	mIBV_EXP_EC_CALC_ATTR_M
 = (1 << 2),

2407 
	mIBV_EXP_EC_CALC_ATTR_W
 = (1 << 3),

2408 
	mIBV_EXP_EC_CALC_ATTR_MAX_DATA_SGE
 = (1 << 4),

2409 
	mIBV_EXP_EC_CALC_ATTR_MAX_CODE_SGE
 = (1 << 5),

2410 
	mIBV_EXP_EC_CALC_ATTR_ENCODE_MAT
 = (1 << 6),

2411 
	mIBV_EXP_EC_CALC_ATTR_AFFINITY
 = (1 << 7),

2412 
	mIBV_EXP_EC_CALC_ATTR_POLLING
 = (1 << 8),

2413 
	mIBV_EXP_EC_CALC_INIT_ATTR_RESERVED
 = (1 << 9),

2433 
	sibv_exp_ec_ˇlc_öô_©å
 {

2434 
uöt32_t
 
	mcomp_mask
;

2435 
uöt32_t
 
	mmax_öÊight_ˇlcs
;

2436 
	mk
;

2437 
	mm
;

2438 
	mw
;

2439 
	mmax_d©a_sge
;

2440 
	mmax_code_sge
;

2441 
uöt8_t
 *
	mícode_m©rix
;

2442 
	mafföôy_höt
;

2443 
	mpﬁlög
;

2452 
	eibv_exp_ec_°©us
 {

2453 
	mIBV_EXP_EC_CALC_SUCCESS
,

2454 
	mIBV_EXP_EC_CALC_FAIL
,

2466 
	sibv_exp_ec_comp
 {

2467 (*
	md⁄e
)(
ibv_exp_ec_comp
 *
	mcomp
);

2468 
ibv_exp_ec_°©us
 
	m°©us
;

2476 
	sibv_exp_ec_ˇlc
 {

2477 
ibv_pd
 *
	mpd
;

2489 
	sibv_exp_ec_mem
 {

2490 
ibv_sge
 *
	md©a_blocks
;

2491 
	mnum_d©a_sge
;

2492 
ibv_sge
 *
	mcode_blocks
;

2493 
	mnum_code_sge
;

2494 
	mblock_size
;

2503 
	sibv_exp_ec_°rùe
 {

2504 
ibv_qp
 *
	mqp
;

2505 
ibv_£nd_wr
 *
	mwr
;

2508 
	gibv_exp_≥î_commô
;

2509 
	gibv_exp_rﬁlback_˘x
;

2512 
	gibv_exp_≥î_≥ek
;

2513 
	gibv_exp_≥î_ab‹t_≥ek
;

2515 
	eibv_exp_§q_ty≥
 {

2516 
	mIBV_EXP_SRQT_BASIC
 = 
IBV_SRQT_BASIC
,

2517 
	mIBV_EXP_SRQT_XRC
 = 
IBV_SRQT_XRC
,

2518 
	mIBV_EXP_SRQT_TAG_MATCHING
 = 32

2521 
	eibv_exp_¸óã_§q_comp_mask
 {

2522 
	mIBV_EXP_CREATE_SRQ_CQ
 = (1 << 0),

2523 
	mIBV_EXP_CREATE_SRQ_XRCD
 = (1 << 1),

2524 
	mIBV_EXP_CREATE_SRQ_TM
 = (1 << 2),

2525 
	mIBV_EXP_CREATE_SRQ_DC_OFFLOAD_PARAMS
 = (1 << 3),

2526 
	mIBV_EXP_CREATE_SRQ_MP_WR
 = (1 << 4),

2527 
	mIBV_EXP_CREATE_SRQ_RESERVED
 = (1 << 5)

2530 
	sibv_exp_tm_ˇp
 {

2531 
uöt32_t
 
	mmax_num_ègs
;

2532 
uöt32_t
 
	mmax_›s
;

2535 
	sibv_exp_§q_dc_ofÊﬂd_∑øms
 {

2536 
uöt16_t
 
	mpkey_ödex
;

2537 
ibv_mtu
 
	m∑th_mtu
;

2538 
uöt8_t
 
	m¶
;

2539 
uöt8_t
 
	mmax_rd_©omic
;

2540 
uöt8_t
 
	mmö_∫r_timî
;

2541 
uöt8_t
 
	mtimeout
;

2542 
uöt8_t
 
	mªåy_˙t
;

2543 
uöt8_t
 
	m∫r_ªåy
;

2544 
uöt64_t
 
	md˘_key
;

2545 
uöt32_t
 
	mooo_ˇps
;

2546 
uöt32_t
 
	mcomp_mask
;

2549 
	sibv_exp_mp_wr
 {

2550 
uöt8_t
 
	mlog_num_of_°rides
;

2551 
uöt8_t
 
	mlog_°ride_size
;

2554 
	sibv_exp_¸óã_§q_©å
 {

2555 
ibv_§q_öô_©å
 
	mba£
;

2556 
ibv_exp_§q_ty≥
 
	m§q_ty≥
;

2557 
ibv_pd
 *
	mpd
;

2558 
uöt32_t
 
	mcomp_mask
;

2559 
ibv_cq
 *
	mcq
;

2560 
ibv_xrcd
 *
	mxrcd
;

2561 
ibv_exp_tm_ˇp
 
	mtm_ˇp
;

2562 
ibv_exp_§q_dc_ofÊﬂd_∑øms
 *
	mdc_ofÊﬂd_∑øms
;

2563 
ibv_exp_mp_wr
 
	mmp_wr
;

2566 
	eibv_exp_›s_wr_›code
 {

2567 
	mIBV_EXP_WR_TAG_ADD
,

2568 
	mIBV_EXP_WR_TAG_DEL
,

2569 
	mIBV_EXP_WR_TAG_SYNC


2572 
	eibv_exp_›s_Êags
 {

2573 
	mIBV_EXP_OPS_SIGNALED
 = 1 << 0,

2574 
	mIBV_EXP_OPS_TM_SYNC
 = 1 << 1

2577 
	sibv_exp_›s_wr
 {

2578 
uöt64_t
 
	mwr_id
;

2579 
ibv_exp_›s_wr
 *
	m√xt
;

2580 
ibv_exp_›s_wr_›code
 
	m›code
;

2581 
	mÊags
;

2583 
uöt32_t
 
	mu√x≥˘ed_˙t
;

2584 
uöt32_t
 
	mh™dÀ
;

2586 
uöt64_t
 
	mªcv_wr_id
;

2587 
ibv_sge
 *
	msg_li°
;

2588 
	mnum_sge
;

2589 
uöt64_t
 
	mèg
;

2590 
uöt64_t
 
	mmask
;

2591 } 
	madd
;

2592 } 
	mtm
;

2595 
	svîbs_c⁄ãxt_exp
 {

2597 
	mibv_exp_dm
 *(*
	mexp_Æloc_dm
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2598 
ibv_exp_Æloc_dm_©å
 *
	m©å
);

2599 (*
	mexp_‰ì_dm
)(
ibv_exp_dm
 *
	mdm
);

2600 (*
	mexp_mem˝y_dm
)(
ibv_exp_dm
 *
	mdm
,

2601 
ibv_exp_mem˝y_dm_©å
 *
	m©å
);

2602 (*
	mexp_po°_§q_›s
)(
ibv_§q
 *
	m§q
,

2603 
ibv_exp_›s_wr
 *
	m›
,

2604 
ibv_exp_›s_wr
 **
	mbad_›
);

2605 
	mibv_§q
 *(*
	mexp_¸óã_§q
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2606 
ibv_exp_¸óã_§q_©å
 *
	m©å
);

2607 (*
	mdrv_exp_£t_c⁄ãxt_©å
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2608 
ibv_exp_›í_devi˚_©å
 *
	m©å
);

2609 
	mibv_ah
 * (*
	mdrv_exp_ibv_¸óã_kah
)(
ibv_pd
 *
	mpd
,

2610 
ibv_exp_ah_©å
 *
	m©å_exp
);

2611 (*
	mexp_≥î_≥ek_cq
)(
ibv_cq
 *
	mibcq
,

2612 
ibv_exp_≥î_≥ek
 *
	m≥ek_˘x
);

2613 (*
	mexp_≥î_ab‹t_≥ek_cq
)(
ibv_cq
 *
	mibcq
,

2614 
ibv_exp_≥î_ab‹t_≥ek
 *
	mack_˘x
);

2615 (*
	mexp_≥î_commô_qp
)(
ibv_qp
 *
	mqp
,

2616 
ibv_exp_≥î_commô
 *
	m≥î
);

2617 (*
	mexp_rﬁlback_£nd
)(
ibv_qp
 *
	mqp
,

2618 
ibv_exp_rﬁlback_˘x
 *
	mrﬁlback
);

2619 (*
	mec_upd©e_sync
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2620 
ibv_exp_ec_mem
 *
	mec_mem
,

2621 
uöt8_t
 *
	md©a_upd©es
,

2622 
uöt8_t
 *
	mcode_upd©es
);

2623 (*
	mec_upd©e_async
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2624 
ibv_exp_ec_mem
 *
	mec_mem
,

2625 
uöt8_t
 *
	md©a_upd©es
,

2626 
uöt8_t
 *
	mcode_upd©es
,

2627 
ibv_exp_ec_comp
 *
	mec_comp
);

2628 
	mibv_exp_ec_ˇlc
 *(*
	mÆloc_ec_ˇlc
)(
ibv_pd
 *
	mpd
,

2629 
ibv_exp_ec_ˇlc_öô_©å
 *
	m©å
);

2630 (*
	mdóŒoc_ec_ˇlc
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
);

2631 (*
	mec_ícode_async
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2632 
ibv_exp_ec_mem
 *
	mec_mem
,

2633 
ibv_exp_ec_comp
 *
	mec_comp
);

2634 (*
	mec_ícode_sync
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2635 
ibv_exp_ec_mem
 *
	mec_mem
);

2636 (*
	mec_decode_async
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2637 
ibv_exp_ec_mem
 *
	mec_mem
,

2638 
uöt8_t
 *
	mîasuªs
,

2639 
uöt8_t
 *
	mdecode_m©rix
,

2640 
ibv_exp_ec_comp
 *
	mec_comp
);

2641 (*
	mec_decode_sync
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2642 
ibv_exp_ec_mem
 *
	mec_mem
,

2643 
uöt8_t
 *
	mîasuªs
,

2644 
uöt8_t
 *
	mdecode_m©rix
);

2645 (*
	mec_pﬁl
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
, 
	mn
);

2646 (*
	mec_ícode_£nd
)(
ibv_exp_ec_ˇlc
 *
	mˇlc
,

2647 
ibv_exp_ec_mem
 *
	mec_mem
,

2648 
ibv_exp_ec_°rùe
 *
	md©a_°rùes
,

2649 
ibv_exp_ec_°rùe
 *
	mcode_°rùes
);

2650 (*
	mexp_quîy_gid_©å
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

2651 
	mödex
,

2652 
ibv_exp_gid_©å
 *
	m©å
);

2653 (*
	mexp_de°roy_rwq_öd_èbÀ
)(
ibv_exp_rwq_öd_èbÀ
 *
	mrwq_öd_èbÀ
);

2654 
	mibv_exp_rwq_öd_èbÀ
 *(*
	mexp_¸óã_rwq_öd_èbÀ
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2655 
ibv_exp_rwq_öd_èbÀ_öô_©å
 *
	möô_©å
);

2656 (*
	mexp_de°roy_wq
)(
ibv_exp_wq
 *
	mwq
);

2657 (*
	mexp_modify_wq
)(
ibv_exp_wq
 *
	mwq
,

2658 
ibv_exp_wq_©å
 *
	mwq_©å
);

2659 
	mibv_exp_wq
 * (*
	mexp_¸óã_wq
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2660 
ibv_exp_wq_öô_©å
 *
	mwq_öô_©å
);

2661 (*
	mdrv_exp_pﬁl_dc_öfo
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2662 
ibv_exp_dc_öfo_ít
 *
	míts
,

2663 
	m√¡
, 
	mp‹t
);

2664 *(*
	mexp_quîy_ötf
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
ibv_exp_quîy_ötf_∑øms
 *
	m∑øms
,

2665 
ibv_exp_quîy_ötf_°©us
 *
	m°©us
);

2666 (*
	mexp_ªÀa£_ötf
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, *
	mötf
,

2667 
ibv_exp_ªÀa£_ötf_∑øms
 *
	m∑øms
);

2668 
	mibv_exp_ªs_domaö
 *(*
	mexp_¸óã_ªs_domaö
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2669 
ibv_exp_ªs_domaö_öô_©å
 *
	m©å
);

2670 (*
	mexp_de°roy_ªs_domaö
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2671 
ibv_exp_ªs_domaö
 *
	mªs_dom
,

2672 
ibv_exp_de°roy_ªs_domaö_©å
 *
	m©å
);

2673 (*
	mlib_exp_u£_¥iv_ív
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
);

2674 (*
	mlib_exp_£ãnv
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, c⁄° *
	m«me
,

2675 c⁄° *
	mvÆue
, 
	movîwrôe
);

2676 
vîbs_ívú⁄mít
 *
	mvív
;

2677 (*
	mdrv_exp_dîeg_mr
)(
ibv_mr
 *
	mmr
, 
ibv_exp_dîeg_out
 *
	mout
);

2678 (*
	mABI_∂a˚hﬁdî2
)();

2679 (*
	mABI_∂a˚hﬁdî1
)();

2680 (*
	mdrv_exp_¥e„tch_mr
)(
ibv_mr
 *
	mmr
,

2681 
ibv_exp_¥e„tch_©å
 *
	m©å
);

2682 (*
	mlib_exp_¥e„tch_mr
)(
ibv_mr
 *
	mmr
,

2683 
ibv_exp_¥e„tch_©å
 *
	m©å
);

2684 
	mibv_exp_mkey_li°_c⁄èöî
 * (*
	mdrv_exp_Æloc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
	m©å
);

2685 
	mibv_exp_mkey_li°_c⁄èöî
 * (*
	mlib_exp_Æloc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
	m©å
);

2686 (*
	mdrv_exp_dóŒoc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem
);

2687 (*
	mlib_exp_dóŒoc_mkey_li°_mem‹y
)(
ibv_exp_mkey_li°_c⁄èöî
 *
	mmem
);

2688 (*
	mdrv_exp_quîy_mkey
)(
ibv_mr
 *
	mmr
, 
ibv_exp_mkey_©å
 *
	mmkey_©å
);

2689 (*
	mlib_exp_quîy_mkey
)(
ibv_mr
 *
	mmr
, 
ibv_exp_mkey_©å
 *
	mmkey_©å
);

2690 
	mibv_mr
 * (*
	mdrv_exp_¸óã_mr
)(
ibv_exp_¸óã_mr_ö
 *
	mö
);

2691 
	mibv_mr
 * (*
	mlib_exp_¸óã_mr
)(
ibv_exp_¸óã_mr_ö
 *
	mö
);

2692 (*
	mdrv_exp_¨m_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_¨m_©å
 *
	m©å
);

2693 (*
	mlib_exp_¨m_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_¨m_©å
 *
	m©å
);

2694 (*
	mdrv_exp_böd_mw
)(
ibv_exp_mw_böd
 *
	mmw_böd
);

2695 (*
	mlib_exp_böd_mw
)(
ibv_exp_mw_böd
 *
	mmw_böd
);

2696 (*
	mdrv_exp_po°_£nd
)(
ibv_qp
 *
	mqp
,

2697 
ibv_exp_£nd_wr
 *
	mwr
,

2698 
ibv_exp_£nd_wr
 **
	mbad_wr
);

2699 
	mibv_mr
 * (*
	mdrv_exp_ªg_mr
)(
ibv_exp_ªg_mr_ö
 *
	mö
);

2700 
	mibv_mr
 * (*
	mlib_exp_ªg_mr
)(
ibv_exp_ªg_mr_ö
 *
	mö
);

2701 
	mibv_ah
 * (*
	mdrv_exp_ibv_¸óã_ah
)(
ibv_pd
 *
	mpd
,

2702 
ibv_exp_ah_©å
 *
	m©å_exp
);

2703 (*
	mdrv_exp_quîy_vÆues
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
	mq_vÆues
,

2704 
ibv_exp_vÆues
 *
	mvÆues
);

2705 
	mibv_cq
 * (*
	mexp_¸óã_cq
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
	mcqe
,

2706 
ibv_comp_ch™√l
 *
	mch™√l
,

2707 
	mcomp_ve˘‹
, 
ibv_exp_cq_öô_©å
 *
	m©å
);

2708 (*
	mdrv_exp_ibv_pﬁl_cq
)(
ibv_cq
 *
	mibcq
, 
	mnum_íåõs
,

2709 
ibv_exp_wc
 *
	mwc
, 
uöt32_t
 
	mwc_size
);

2710 * (*
	mdrv_exp_gë_Àgacy_xrc
Ë(
ibv_§q
 *
	mibv_§q
);

2711 (*
	mdrv_exp_£t_Àgacy_xrc
Ë(
ibv_§q
 *
	mibv_§q
, *
	mÀgacy_xrc
);

2712 
	mibv_mr
 * (*
	mdrv_exp_ibv_ªg_sh¨ed_mr
)(
ibv_exp_ªg_sh¨ed_mr_ö
 *
	mö
);

2713 
	mibv_mr
 * (*
	mlib_exp_ibv_ªg_sh¨ed_mr
)(
ibv_exp_ªg_sh¨ed_mr_ö
 *
	mö
);

2714 (*
	mdrv_exp_modify_qp
)(
ibv_qp
 *
	mqp
, 
ibv_exp_qp_©å
 *
	m©å
,

2715 
uöt64_t
 
	mexp_©å_mask
);

2716 (*
	mlib_exp_modify_qp
)(
ibv_qp
 *
	mqp
, 
ibv_exp_qp_©å
 *
	m©å
,

2717 
uöt64_t
 
	mexp_©å_mask
);

2718 (*
	mdrv_exp_po°_èsk
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2719 
ibv_exp_èsk
 *
	mèsk
,

2720 
ibv_exp_èsk
 **
	mbad_èsk
);

2721 (*
	mlib_exp_po°_èsk
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2722 
ibv_exp_èsk
 *
	mèsk
,

2723 
ibv_exp_èsk
 **
	mbad_èsk
);

2724 (*
	mdrv_exp_modify_cq
)(
ibv_cq
 *
	mcq
,

2725 
ibv_exp_cq_©å
 *
	m©å
, 
	m©å_mask
);

2726 (*
	mlib_exp_modify_cq
)(
ibv_cq
 *
	mcq
,

2727 
ibv_exp_cq_©å
 *
	m©å
, 
	m©å_mask
);

2728 (*
	mdrv_exp_ibv_de°roy_Êow
Ë(
ibv_exp_Êow
 *
	mÊow
);

2729 (*
	mlib_exp_ibv_de°roy_Êow
Ë(
ibv_exp_Êow
 *
	mÊow
);

2730 
	mibv_exp_Êow
 * (*
	mdrv_exp_ibv_¸óã_Êow
Ë(
ibv_qp
 *
	mqp
,

2731 
ibv_exp_Êow_©å


2732 *
	mÊow_©å
);

2733 
	mibv_exp_Êow
 * (*
	mlib_exp_ibv_¸óã_Êow
Ë(
ibv_qp
 *
	mqp
,

2734 
ibv_exp_Êow_©å


2735 *
	mÊow_©å
);

2737 (*
	mdrv_exp_quîy_p‹t
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

2738 
ibv_exp_p‹t_©å
 *
	mp‹t_©å
);

2739 (*
	mlib_exp_quîy_p‹t
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
, 
uöt8_t
 
	mp‹t_num
,

2740 
ibv_exp_p‹t_©å
 *
	mp‹t_©å
);

2741 
	mibv_exp_d˘
 *(*
	m¸óã_d˘
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2742 
ibv_exp_d˘_öô_©å
 *
	m©å
);

2743 (*
	mde°roy_d˘
)(
ibv_exp_d˘
 *
	md˘
);

2744 (*
	mquîy_d˘
)(
ibv_exp_d˘
 *
	md˘
, 
ibv_exp_d˘_©å
 *
	m©å
);

2745 (*
	mdrv_exp_quîy_devi˚
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2746 
ibv_exp_devi˚_©å
 *
	m©å
);

2747 (*
	mlib_exp_quîy_devi˚
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2748 
ibv_exp_devi˚_©å
 *
	m©å
);

2749 
	mibv_qp
 *(*
	mdrv_exp_¸óã_qp
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2750 
ibv_exp_qp_öô_©å
 *
	möô_©å
);

2751 
	mibv_qp
 *(*
	mlib_exp_¸óã_qp
)(
ibv_c⁄ãxt
 *
	mc⁄ãxt
,

2752 
ibv_exp_qp_öô_©å
 *
	möô_©å
);

2753 
size_t
 
	msz
;

2757 
	#ETHERNET_LL_SIZE
 6

	)

2759 
ölöe
 
vîbs_c⁄ãxt_exp
 *
	$vîbs_gë_exp_˘x
(
ibv_c⁄ãxt
 *
˘x
)

2761 
vîbs_c⁄ãxt
 *
≠p_ex_˘x
 = 
	`vîbs_gë_˘x
(
˘x
);

2762 *
a˘uÆ_ex_˘x
;

2764 i‡(!
≠p_ex_˘x
 || !◊µ_ex_˘x->
has_comp_mask
 & 
VERBS_CONTEXT_EXP
))

2765  
NULL
;

2767 
a˘uÆ_ex_˘x
 = ((*)
˘x
Ë- (
≠p_ex_˘x
->
sz
 - (
ibv_c⁄ãxt
));

2769  (
vîbs_c⁄ãxt_exp
 *)(
a˘uÆ_ex_˘x
 - (verbs_context_exp));

2770 
	}
}

2772 
	#vîbs_gë_exp_˘x_›
(
˘x
, 
›
) ({ \

2773 
vîbs_c⁄ãxt_exp
 *
_v˘x
 = 
	`vîbs_gë_exp_˘x
(
˘x
); \

2774 (!
_v˘x
 || (_v˘x->
sz
 < (*_v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt_exp
, 
›
)) || \

2775 !
_v˘x
->
›
Ë? 
NULL
 : _v˘x; })

	)

2777 
	#vîbs_£t_exp_˘x_›
(
_v˘x
, 
›
, 
±r
) ({ \

2778 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
_v˘x
; \

2779 i‡(
v˘x
 && (v˘x->
sz
 >(*v˘xË- 
	`off£tof
(
vîbs_c⁄ãxt_exp
, 
›
))) \

2780 
v˘x
->
›
 = 
±r
; })

	)

2790 
ibv_devi˚
 **
ibv_exp_gë_devi˚_li°
(*
num_devi˚s
);

2800 
ölöe
 
ibv_exp_ec_ˇlc
 *

2801 
	$ibv_exp_Æloc_ec_ˇlc
(
ibv_pd
 *
pd
,

2802 
ibv_exp_ec_ˇlc_öô_©å
 *
©å
)

2804 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2806 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
pd
->
c⁄ãxt
, 
Æloc_ec_ˇlc
);

2807 i‡(!
v˘x
) {

2808 
î∫o
 = 
ENOSYS
;

2809  
NULL
;

2811 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

2812 
IBV_EXP_EC_CALC_INIT_ATTR_RESERVED
 - 1);

2814  
v˘x
->
	`Æloc_ec_ˇlc
(
pd
, 
©å
);

2815 
	}
}

2822 
ölöe
 
	$ibv_exp_dóŒoc_ec_ˇlc
(
ibv_exp_ec_ˇlc
 *
ˇlc
)

2824 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2826 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
dóŒoc_ec_ˇlc
);

2827 i‡(!
v˘x
) {

2828 
î∫o
 = 
ENOSYS
;

2832 
v˘x
->
	`dóŒoc_ec_ˇlc
(
ˇlc
);

2833 
	}
}

2858 
ölöe
 

2859 
	$ibv_exp_ec_ícode_async
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

2860 
ibv_exp_ec_mem
 *
ec_mem
,

2861 
ibv_exp_ec_comp
 *
ec_comp
)

2863 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2865 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_ícode_async
);

2866 i‡(!
v˘x
)

2867  
ENOSYS
;

2869  
v˘x
->
	`ec_ícode_async
(
ˇlc
, 
ec_mem
, 
ec_comp
);

2870 
	}
}

2892 
ölöe
 

2893 
	$ibv_exp_ec_ícode_sync
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

2894 
ibv_exp_ec_mem
 *
ec_mem
)

2896 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2898 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_ícode_sync
);

2899 i‡(!
v˘x
)

2900  
ENOSYS
;

2902  
v˘x
->
	`ec_ícode_sync
(
ˇlc
, 
ec_mem
);

2903 
	}
}

2937 
ölöe
 

2938 
	$ibv_exp_ec_decode_async
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

2939 
ibv_exp_ec_mem
 *
ec_mem
,

2940 
uöt8_t
 *
îasuªs
,

2941 
uöt8_t
 *
decode_m©rix
,

2942 
ibv_exp_ec_comp
 *
ec_comp
)

2944 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2946 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_decode_async
);

2947 i‡(!
v˘x
)

2948  
ENOSYS
;

2950  
v˘x
->
	`ec_decode_async
(
ˇlc
, 
ec_mem
, 
îasuªs
,

2951 
decode_m©rix
, 
ec_comp
);

2952 
	}
}

2980 
ölöe
 

2981 
	$ibv_exp_ec_decode_sync
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

2982 
ibv_exp_ec_mem
 *
ec_mem
,

2983 
uöt8_t
 *
îasuªs
,

2984 
uöt8_t
 *
decode_m©rix
)

2986 
vîbs_c⁄ãxt_exp
 *
v˘x
;

2988 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_decode_sync
);

2989 i‡(!
v˘x
)

2990  
ENOSYS
;

2992  
v˘x
->
	`ec_decode_sync
(
ˇlc
, 
ec_mem
, 
îasuªs
, 
decode_m©rix
);

2993 
	}
}

3033 
ölöe
 

3034 
	$ibv_exp_ec_upd©e_async
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

3035 
ibv_exp_ec_mem
 *
ec_mem
,

3036 
uöt8_t
 *
d©a_upd©es
,

3037 
uöt8_t
 *
code_upd©es
,

3038 
ibv_exp_ec_comp
 *
ec_comp
)

3040 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3042 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_upd©e_async
);

3043 i‡(!
v˘x
)

3044  -
ENOSYS
;

3046  
v˘x
->
	`ec_upd©e_async
(
ˇlc
, 
ec_mem
, 
d©a_upd©es
,

3047 
code_upd©es
, 
ec_comp
);

3048 
	}
}

3087 
ölöe
 

3088 
	$ibv_exp_ec_upd©e_sync
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

3089 
ibv_exp_ec_mem
 *
ec_mem
,

3090 
uöt8_t
 *
d©a_upd©es
,

3091 
uöt8_t
 *
code_upd©es
)

3093 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3095 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_upd©e_sync
);

3096 i‡(!
v˘x
)

3097  -
ENOSYS
;

3099  
v˘x
->
	`ec_upd©e_sync
(
ˇlc
, 
ec_mem
, 
d©a_upd©es
, 
code_upd©es
);

3100 
	}
}

3111 
ölöe
 

3112 
	$ibv_exp_ec_pﬁl
(
ibv_exp_ec_ˇlc
 *
ˇlc
, 
n
)

3114 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3116 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_pﬁl
);

3117 i‡(!
v˘x
)

3118  
ENOSYS
;

3120  
v˘x
->
	`ec_pﬁl
(
ˇlc
, 
n
);

3121 
	}
}

3145 
ölöe
 

3146 
	$ibv_exp_ec_ícode_£nd
(
ibv_exp_ec_ˇlc
 *
ˇlc
,

3147 
ibv_exp_ec_mem
 *
ec_mem
,

3148 
ibv_exp_ec_°rùe
 *
d©a_°rùes
,

3149 
ibv_exp_ec_°rùe
 *
code_°rùes
)

3151 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3153 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ˇlc
->
pd
->
c⁄ãxt
, 
ec_ícode_£nd
);

3154 i‡(!
v˘x
)

3155  -
ENOSYS
;

3157  
v˘x
->
	`ec_ícode_£nd
(
ˇlc
, 
ec_mem
, 
d©a_°rùes
, 
code_°rùes
);

3158 
	}
}

3160 
ölöe
 
ibv_qp
 *

3161 
	$ibv_exp_¸óã_qp
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
ibv_exp_qp_öô_©å
 *
qp_öô_©å
)

3163 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3164 
uöt32_t
 
mask
 = 
qp_öô_©å
->
comp_mask
;

3166 i‡(
mask
 =
IBV_EXP_QP_INIT_ATTR_PD
)

3167  
	`ibv_¸óã_qp
(
qp_öô_©å
->
pd
,

3168 (
ibv_qp_öô_©å
 *Ë
qp_öô_©å
);

3170 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_¸óã_qp
);

3171 i‡(!
v˘x
) {

3172 
î∫o
 = 
ENOSYS
;

3173  
NULL
;

3175 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
qp_öô_©å
->
comp_mask
,

3176 
IBV_EXP_QP_INIT_ATTR_RESERVED1
 - 1);

3178  
v˘x
->
	`lib_exp_¸óã_qp
(
c⁄ãxt
, 
qp_öô_©å
);

3179 
	}
}

3186 
ölöe
 
	$ibv_exp_u£_¥iv_ív
(
ibv_c⁄ãxt
 *
c⁄ãxt
)

3188 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3190 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_u£_¥iv_ív
);

3191 i‡(!
v˘x
) {

3192 
î∫o
 = 
ENOSYS
;

3196  
v˘x
->
	`lib_exp_u£_¥iv_ív
(
c⁄ãxt
);

3197 
	}
}

3208 
ölöe
 
	$ibv_exp_pﬁl_dc_öfo
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3209 
ibv_exp_dc_öfo_ít
 *
íts
,

3210 
√¡
, 
p‹t
)

3212 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3214 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_pﬁl_dc_öfo
);

3215 i‡(!
v˘x
) {

3216 
î∫o
 = 
ENOSYS
;

3220  
v˘x
->
	`drv_exp_pﬁl_dc_öfo
(
c⁄ãxt
, 
íts
, 
√¡
, 
p‹t
);

3221 
	}
}

3228 
ölöe
 
	$ibv_exp_£ãnv
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3229 c⁄° *
«me
,

3230 c⁄° *
vÆue
,

3231 
ovîwrôe
)

3233 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3235 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_£ãnv
);

3236 i‡(!
v˘x
)

3237  
	`£ãnv
(
«me
, 
vÆue
, 
ovîwrôe
);

3239  
v˘x
->
	`lib_exp_£ãnv
(
c⁄ãxt
, 
«me
, 
vÆue
, 
ovîwrôe
);

3240 
	}
}

3242 
ölöe
 
	$ibv_exp_quîy_devi˚
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3243 
ibv_exp_devi˚_©å
 *
©å
)

3245 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

3246 
lib_exp_quîy_devi˚
);

3247 i‡(!
v˘x
)

3248  
ENOSYS
;

3250 i‡(
©å
->
comp_mask
 & 
IBV_EXP_DEVICE_ATTR_COMP_MASK_2
)

3251 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask_2
,

3252 
IBV_EXP_DEVICE_ATTR_RESERVED_2
 - 1);

3254  
v˘x
->
	`lib_exp_quîy_devi˚
(
c⁄ãxt
, 
©å
);

3255 
	}
}

3257 
ölöe
 
ibv_exp_d˘
 *

3258 
	$ibv_exp_¸óã_d˘
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3259 
ibv_exp_d˘_öô_©å
 *
©å
)

3261 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3262 
ibv_exp_d˘
 *
d˘
;

3264 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
¸óã_d˘
);

3265 i‡(!
v˘x
) {

3266 
î∫o
 = 
ENOSYS
;

3267  
NULL
;

3270 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3271 
IBV_EXP_DCT_INIT_ATTR_RESERVED
 - 1);

3272 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3273 
d˘
 = 
v˘x
->
	`¸óã_d˘
(
c⁄ãxt
, 
©å
);

3274 i‡(
d˘
)

3275 
d˘
->
c⁄ãxt
 = context;

3277 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3279  
d˘
;

3280 
	}
}

3282 
ölöe
 
	$ibv_exp_de°roy_d˘
(
ibv_exp_d˘
 *
d˘
)

3284 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3285 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

3286 
îr
;

3288 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
de°roy_d˘
);

3289 i‡(!
v˘x
) {

3290 
î∫o
 = 
ENOSYS
;

3291  
î∫o
;

3294 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3295 
îr
 = 
v˘x
->
	`de°roy_d˘
(
d˘
);

3296 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3298  
îr
;

3299 
	}
}

3301 
ölöe
 
	$ibv_exp_quîy_d˘
(
ibv_exp_d˘
 *
d˘
,

3302 
ibv_exp_d˘_©å
 *
©å
)

3304 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3305 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

3306 
îr
;

3308 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
quîy_d˘
);

3309 i‡(!
v˘x
) {

3310 
î∫o
 = 
ENOSYS
;

3311  
î∫o
;

3314 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3315 
IBV_EXP_DCT_ATTR_RESERVED
 - 1);

3316 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3317 
îr
 = 
v˘x
->
	`quîy_d˘
(
d˘
, 
©å
);

3318 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3320  
îr
;

3321 
	}
}

3323 
ölöe
 
	$ibv_exp_¨m_d˘
(
ibv_exp_d˘
 *
d˘
,

3324 
ibv_exp_¨m_©å
 *
©å
)

3326 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3327 
ibv_c⁄ãxt
 *
c⁄ãxt
 = 
d˘
->context;

3328 
îr
;

3330 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_¨m_d˘
);

3331 i‡(!
v˘x
) {

3332 
î∫o
 = 
ENOSYS
;

3333  
î∫o
;

3336 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3337 
IBV_EXP_ARM_ATTR_RESERVED
 - 1);

3338 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3339 
îr
 = 
v˘x
->
	`lib_exp_¨m_d˘
(
d˘
, 
©å
);

3340 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3342  
îr
;

3343 
	}
}

3345 
ölöe
 
	$ibv_exp_quîy_p‹t
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3346 
uöt8_t
 
p‹t_num
,

3347 
ibv_exp_p‹t_©å
 *
p‹t_©å
)

3349 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3351 i‡(0 =
p‹t_©å
->
comp_mask
)

3352  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
,

3353 &
p‹t_©å
->port_attr);

3356 i‡(!(
p‹t_©å
->
comp_mask
 & 
IBV_EXP_QUERY_PORT_ATTR_MASK1
) ||

3357 (
p‹t_©å
->
comp_mask
 & ~
IBV_EXP_QUERY_PORT_ATTR_MASKS
) ||

3358 (
p‹t_©å
->
mask1
 & ~
IBV_EXP_QUERY_PORT_MASK
)) {

3359 
î∫o
 = 
EINVAL
;

3360  -
î∫o
;

3363 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
lib_exp_quîy_p‹t
);

3365 i‡(!
v˘x
) {

3367 i‡(
p‹t_©å
->
comp_mask
 =
IBV_EXP_QUERY_PORT_ATTR_MASK1
 &&

3368 !(
p‹t_©å
->
mask1
 & ~
IBV_EXP_QUERY_PORT_STD_MASK
))

3369  
	`ibv_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
,

3370 &
p‹t_©å
->port_attr);

3373 
î∫o
 = 
ENOSYS
;

3374  -
î∫o
;

3376 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
p‹t_©å
->
comp_mask
,

3377 
IBV_EXP_QUERY_PORT_ATTR_RESERVED
 - 1);

3379  
v˘x
->
	`lib_exp_quîy_p‹t
(
c⁄ãxt
, 
p‹t_num
, 
p‹t_©å
);

3380 
	}
}

3385 
ölöe
 
	$ibv_exp_po°_èsk
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3386 
ibv_exp_èsk
 *
èsk
,

3387 
ibv_exp_èsk
 **
bad_èsk
)

3389 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

3390 
lib_exp_po°_èsk
);

3391 i‡(!
v˘x
)

3392  
ENOSYS
;

3394 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
èsk
->
comp_mask
,

3395 
IBV_EXP_TASK_RESERVED
 - 1);

3397  
v˘x
->
	`lib_exp_po°_èsk
(
c⁄ãxt
, 
èsk
, 
bad_èsk
);

3398 
	}
}

3400 
ölöe
 
	$ibv_exp_quîy_vÆues
(
ibv_c⁄ãxt
 *
c⁄ãxt
, 
q_vÆues
,

3401 
ibv_exp_vÆues
 *
vÆues
)

3403 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
,

3404 
drv_exp_quîy_vÆues
);

3405 i‡(!
v˘x
) {

3406 
î∫o
 = 
ENOSYS
;

3407  -
î∫o
;

3409 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
vÆues
->
comp_mask
,

3410 
IBV_EXP_VALUES_RESERVED
 - 1);

3412  
v˘x
->
	`drv_exp_quîy_vÆues
(
c⁄ãxt
, 
q_vÆues
, 
vÆues
);

3413 
	}
}

3415 
ölöe
 
uöt64_t
 
	$ibv_exp_cqe_ts_to_ns
(
ibv_exp_˛ock_öfo
 *
˛ock_öfo
,

3416 
uöt64_t
 
ts
)

3418 
uöt64_t
 
dñè
, 
n£c
;

3420 
	`IBV_EXP_RET_ZERO_ON_INVALID_COMP_MASK
(
˛ock_öfo
->
comp_mask
,

3421 
IBV_EXP_CLOCK_INFO_RESERVED
 - 1);

3423 
dñè
 = (
ts
 - 
˛ock_öfo
->
cy˛es
Ë& clock_öfo->
mask
;

3424 
n£c
 = 
˛ock_öfo
->nsec;

3430 i‡(
dñè
 > 
˛ock_öfo
->
mask
 / 2) {

3431 
dñè
 = (
˛ock_öfo
->
cy˛es
 - 
ts
Ë& clock_öfo->
mask
;

3432 
n£c
 -((
dñè
 * 
˛ock_öfo
->
mu…
Ë- clock_öfo->
‰ac
Ë>> clock_öfo->
shi·
;

3434 
n£c
 +((
dñè
 * 
˛ock_öfo
->
mu…
Ë+ clock_öfo->
‰ac
Ë>> clock_öfo->
shi·
;

3437  
n£c
;

3438 
	}
}

3440 
ölöe
 
ibv_exp_Êow
 *
	$ibv_exp_¸óã_Êow
(
ibv_qp
 *
qp
,

3441 
ibv_exp_Êow_©å
 *
Êow
)

3443 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
,

3444 
lib_exp_ibv_¸óã_Êow
);

3445 i‡(!
v˘x
 || !v˘x->
lib_exp_ibv_¸óã_Êow
)

3446  
NULL
;

3448 i‡(
Êow
->
ª£rved
 != 0L) {

3449 
	`Ârötf
(
°dîr
, "%s:%d: flow->ª£rved mu° bê0\n", 
__FUNCTION__
, 
__LINE__
);

3450 
Êow
->
ª£rved
 = 0L;

3453  
v˘x
->
	`lib_exp_ibv_¸óã_Êow
(
qp
, 
Êow
);

3454 
	}
}

3456 
ölöe
 
	$ibv_exp_de°roy_Êow
(
ibv_exp_Êow
 *
Êow_id
)

3458 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
Êow_id
->
c⁄ãxt
,

3459 
lib_exp_ibv_de°roy_Êow
);

3460 i‡(!
v˘x
 || !v˘x->
lib_exp_ibv_de°roy_Êow
)

3461  -
ENOSYS
;

3463  
v˘x
->
	`lib_exp_ibv_de°roy_Êow
(
Êow_id
);

3464 
	}
}

3466 
ölöe
 
	$ibv_exp_pﬁl_cq
(
ibv_cq
 *
ibcq
, 
num_íåõs
,

3467 
ibv_exp_wc
 *
wc
, 
uöt32_t
 
wc_size
)

3469 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ibcq
->
c⁄ãxt
,

3470 
drv_exp_ibv_pﬁl_cq
);

3471 i‡(!
v˘x
)

3472  -
ENOSYS
;

3474  
v˘x
->
	`drv_exp_ibv_pﬁl_cq
(
ibcq
, 
num_íåõs
, 
wc
, 
wc_size
);

3475 
	}
}

3480 
ölöe
 
	$ibv_exp_po°_£nd
(
ibv_qp
 *
qp
,

3481 
ibv_exp_£nd_wr
 *
wr
,

3482 
ibv_exp_£nd_wr
 **
bad_wr
)

3484 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
,

3485 
drv_exp_po°_£nd
);

3486 i‡(!
v˘x
)

3487  -
ENOSYS
;

3489  
v˘x
->
	`drv_exp_po°_£nd
(
qp
, 
wr
, 
bad_wr
);

3490 
	}
}

3496 
ibv_mr
 *
	$ibv_exp_ªg_sh¨ed_mr
(
ibv_exp_ªg_sh¨ed_mr_ö
 *
mr_ö
Ë
DEPRECATED
;

3497 
ölöe
 
ibv_mr
 *
	$ibv_exp_ªg_sh¨ed_mr
(
ibv_exp_ªg_sh¨ed_mr_ö
 *
mr_ö
)

3499 
î∫o
 = 
ENOSYS
;

3500  
NULL
;

3501 
	}
}

3510 
ölöe
 
	$ibv_exp_modify_cq
(
ibv_cq
 *
cq
,

3511 
ibv_exp_cq_©å
 *
cq_©å
,

3512 
cq_©å_mask
)

3514 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
cq
->
c⁄ãxt
,

3515 
lib_exp_modify_cq
);

3516 i‡(!
v˘x
)

3517  
ENOSYS
;

3519 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
cq_©å
->
comp_mask
,

3520 
IBV_EXP_CQ_ATTR_RESERVED
 - 1);

3522  
v˘x
->
	`lib_exp_modify_cq
(
cq
, 
cq_©å
, 
cq_©å_mask
);

3523 
	}
}

3525 
ölöe
 
ibv_cq
 *
	$ibv_exp_¸óã_cq
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3526 
cqe
,

3527 *
cq_c⁄ãxt
,

3528 
ibv_comp_ch™√l
 *
ch™√l
,

3529 
comp_ve˘‹
,

3530 
ibv_exp_cq_öô_©å
 *
©å
)

3532 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3533 
ibv_cq
 *
cq
;

3535 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_cq
);

3536 i‡(!
v˘x
) {

3537 
î∫o
 = 
ENOSYS
;

3538  
NULL
;

3541 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3542 
IBV_EXP_CQ_INIT_ATTR_RESERVED1
 - 1);

3543 
	`±hªad_muãx_lock
(&
c⁄ãxt
->
muãx
);

3544 
cq
 = 
v˘x
->
	`exp_¸óã_cq
(
c⁄ãxt
, 
cqe
, 
ch™√l
, 
comp_ve˘‹
, 
©å
);

3545 i‡(
cq
) {

3546 
cq
->
c⁄ãxt
 = context;

3547 
cq
->
ch™√l
 = channel;

3548 i‡(
ch™√l
)

3549 ++
ch™√l
->
ªf˙t
;

3550 
cq
->
cq_c⁄ãxt
 = cq_context;

3551 
cq
->
comp_evíts_com∂ëed
 = 0;

3552 
cq
->
async_evíts_com∂ëed
 = 0;

3553 
	`±hªad_muãx_öô
(&
cq
->
muãx
, 
NULL
);

3554 
	`±hªad_c⁄d_öô
(&
cq
->
c⁄d
, 
NULL
);

3557 
	`±hªad_muãx_u∆ock
(&
c⁄ãxt
->
muãx
);

3559  
cq
;

3560 
	}
}

3567 
ölöe
 

3568 
	$ibv_exp_modify_qp
(
ibv_qp
 *
qp
, 
ibv_exp_qp_©å
 *
©å
, 
uöt64_t
 
exp_©å_mask
)

3570 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3572 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
qp
->
c⁄ãxt
, 
lib_exp_modify_qp
);

3573 i‡(!
v˘x
) {

3574 
î∫o
 = 
ENOSYS
;

3575  
î∫o
;

3577 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3578 
IBV_EXP_QP_ATTR_RESERVED
 - 1);

3580  
v˘x
->
	`lib_exp_modify_qp
(
qp
, 
©å
, 
exp_©å_mask
);

3581 
	}
}

3586 
ölöe
 
ibv_mr
 *
	$ibv_exp_ªg_mr
(
ibv_exp_ªg_mr_ö
 *
ö
)

3588 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3590 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ö
->
pd
->
c⁄ãxt
, 
lib_exp_ªg_mr
);

3591 i‡(!
v˘x
) {

3592 
î∫o
 = 
ENOSYS
;

3593  
NULL
;

3595 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
ö
->
comp_mask
,

3596 
IBV_EXP_REG_MR_RESERVED
 - 1);

3598  
v˘x
->
	`lib_exp_ªg_mr
(
ö
);

3599 
	}
}

3605 
ölöe
 
	$ibv_exp_böd_mw
(
ibv_exp_mw_böd
 *
mw_böd
)

3607 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3609 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mw_böd
->
mw
->
c⁄ãxt
, 
lib_exp_böd_mw
);

3610 i‡(!
v˘x
) {

3611 
î∫o
 = 
ENOSYS
;

3612  
î∫o
;

3614 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
mw_böd
->
comp_mask
,

3615 
IBV_EXP_BIND_MW_RESERVED
 - 1);

3617  
v˘x
->
	`lib_exp_böd_mw
(
mw_böd
);

3618 
	}
}

3631 
ölöe
 
	$ibv_exp_¥e„tch_mr
(

3632 
ibv_mr
 *
mr
,

3633 
ibv_exp_¥e„tch_©å
 *
©å
)

3635 
vîbs_c⁄ãxt_exp
 *
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr
->
c⁄ãxt
,

3636 
lib_exp_¥e„tch_mr
);

3638 i‡(!
v˘x
) {

3639 
î∫o
 = 
ENOSYS
;

3640  
î∫o
;

3642 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3643 
IBV_EXP_PREFETCH_MR_RESERVED
 - 1);

3645  
v˘x
->
	`lib_exp_¥e„tch_mr
(
mr
, 
©å
);

3646 
	}
}

3648 (*
	tdrv_exp_po°_£nd_func
)(
	tibv_qp
 *
	tqp
,

3649 
	tibv_exp_£nd_wr
 *
	twr
,

3650 
	tibv_exp_£nd_wr
 **
	tbad_wr
);

3651 (*
	tdrv_po°_£nd_func
)(
	tibv_qp
 *
	tqp
, 
	tibv_£nd_wr
 *
	twr
,

3652 
	tibv_£nd_wr
 **
	tbad_wr
);

3653 (*
	tdrv_exp_pﬁl_cq_func
)(
	tibv_cq
 *
	tibcq
, 
	tnum_íåõs
,

3654 
	tibv_exp_wc
 *
	twc
, 
	tuöt32_t
 
	twc_size
);

3655 (*
	tdrv_pﬁl_cq_func
)(
	tibv_cq
 *
	tcq
, 
	tnum_íåõs
, 
	tibv_wc
 *
	twc
);

3656 (*
	tdrv_po°_ªcv_func
)(
	tibv_qp
 *
	tqp
, 
	tibv_ªcv_wr
 *
	twr
,

3657 
	tibv_ªcv_wr
 **
	tbad_wr
);

3659 
ölöe
 *
	$ibv_exp_gë_¥ovidî_func
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3660 
ibv_exp_func_«me
 
«me
)

3662 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3664 
«me
) {

3665 
IBV_EXP_POST_SEND_FUNC
:

3666 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_po°_£nd
);

3667 i‡(!
v˘x
)

3668 
îr‹
;

3670  (*)
v˘x
->
drv_exp_po°_£nd
;

3672 
IBV_EXP_POLL_CQ_FUNC
:

3673 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_ibv_pﬁl_cq
);

3674 i‡(!
v˘x
)

3675 
îr‹
;

3677  (*)
v˘x
->
drv_exp_ibv_pﬁl_cq
;

3679 
IBV_POST_SEND_FUNC
:

3680 i‡(!
c⁄ãxt
->
›s
.
po°_£nd
)

3681 
îr‹
;

3683  (*)
c⁄ãxt
->
›s
.
po°_£nd
;

3685 
IBV_POLL_CQ_FUNC
:

3686 i‡(!
c⁄ãxt
->
›s
.
pﬁl_cq
)

3687 
îr‹
;

3689  (*)
c⁄ãxt
->
›s
.
pﬁl_cq
;

3691 
IBV_POST_RECV_FUNC
:

3692 i‡(!
c⁄ãxt
->
›s
.
po°_ªcv
)

3693 
îr‹
;

3695  (*)
c⁄ãxt
->
›s
.
po°_ªcv
;

3701 
îr‹
:

3702 
î∫o
 = 
ENOSYS
;

3703  
NULL
;

3704 
	}
}

3706 
ölöe
 
ibv_mr
 *
	$ibv_exp_¸óã_mr
(
ibv_exp_¸óã_mr_ö
 *
ö
)

3708 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3709 
ibv_mr
 *
mr
;

3711 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
ö
->
pd
->
c⁄ãxt
, 
lib_exp_¸óã_mr
);

3712 i‡(!
v˘x
) {

3713 
î∫o
 = 
ENOSYS
;

3714  
NULL
;

3717 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
ö
->
comp_mask
,

3718 
IBV_EXP_CREATE_MR_IN_RESERVED
 - 1);

3719 
mr
 = 
v˘x
->
	`lib_exp_¸óã_mr
(
ö
);

3720 i‡(
mr
)

3721 
mr
->
pd
 = 
ö
->pd;

3723  
mr
;

3724 
	}
}

3726 
ölöe
 
	$ibv_exp_quîy_mkey
(
ibv_mr
 *
mr
,

3727 
ibv_exp_mkey_©å
 *
©å
)

3729 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3731 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mr
->
c⁄ãxt
, 
lib_exp_quîy_mkey
);

3732 i‡(!
v˘x
) {

3733 
î∫o
 = 
ENOSYS
;

3734  
î∫o
;

3737 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3738 
IBV_EXP_MKEY_ATTR_RESERVED
 - 1);

3740  
v˘x
->
	`lib_exp_quîy_mkey
(
mr
, 
©å
);

3741 
	}
}

3743 
ölöe
 
	$ibv_exp_dóŒoc_mkey_li°_mem‹y
(
ibv_exp_mkey_li°_c⁄èöî
 *
mem
)

3745 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3747 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
mem
->
c⁄ãxt
,

3748 
lib_exp_dóŒoc_mkey_li°_mem‹y
);

3749 i‡(!
v˘x
) {

3750 
î∫o
 = 
ENOSYS
;

3751  
î∫o
;

3754  
v˘x
->
	`lib_exp_dóŒoc_mkey_li°_mem‹y
(
mem
);

3755 
	}
}

3757 
ölöe
 
ibv_exp_mkey_li°_c⁄èöî
 *

3758 
	$ibv_exp_Æloc_mkey_li°_mem‹y
(
ibv_exp_mkey_li°_c⁄èöî_©å
 *
©å
)

3760 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3762 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
©å
->
pd
->
c⁄ãxt
,

3763 
lib_exp_Æloc_mkey_li°_mem‹y
);

3764 i‡(!
v˘x
) {

3765 
î∫o
 = 
ENOSYS
;

3766  
NULL
;

3769 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3770 
IBV_EXP_MKEY_LIST_CONTAINER_RESERVED
 - 1);

3772  
v˘x
->
	`lib_exp_Æloc_mkey_li°_mem‹y
(
©å
);

3773 
	}
}

3775 
ölöe
 
ibv_§q
 *

3776 
	$ibv_exp_¸óã_§q
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3777 
ibv_exp_¸óã_§q_©å
 *
©å
)

3779 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3781 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_§q
);

3782 i‡(!
v˘x
) {

3783 
î∫o
 = 
ENOSYS
;

3784  
NULL
;

3787 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3788 
IBV_EXP_CREATE_SRQ_RESERVED
 - 1);

3790  
v˘x
->
	`exp_¸óã_§q
(
c⁄ãxt
, 
©å
);

3791 
	}
}

3796 
ölöe
 
ibv_exp_ªs_domaö
 *
	$ibv_exp_¸óã_ªs_domaö
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3797 
ibv_exp_ªs_domaö_öô_©å
 *
©å
)

3799 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3801 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_ªs_domaö
);

3802 i‡(!
v˘x
) {

3803 
î∫o
 = 
ENOSYS
;

3804  
NULL
;

3807 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3808 
IBV_EXP_RES_DOMAIN_RESERVED
 - 1);

3810  
v˘x
->
	`exp_¸óã_ªs_domaö
(
c⁄ãxt
, 
©å
);

3811 
	}
}

3816 
ölöe
 
	$ibv_exp_de°roy_ªs_domaö
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3817 
ibv_exp_ªs_domaö
 *
ªs_dom
,

3818 
ibv_exp_de°roy_ªs_domaö_©å
 *
©å
)

3820 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3822 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_de°roy_ªs_domaö
);

3823 i‡(!
v˘x
)

3824  
î∫o
 = 
ENOSYS
;

3826 i‡(
©å
)

3827 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3828 
IBV_EXP_DESTROY_RES_DOMAIN_RESERVED
 - 1);

3830  
v˘x
->
	`exp_de°roy_ªs_domaö
(
c⁄ãxt
, 
ªs_dom
, 
©å
);

3831 
	}
}

3844 
ölöe
 *
	$ibv_exp_quîy_ötf
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3845 
ibv_exp_quîy_ötf_∑øms
 *
∑øms
,

3846 
ibv_exp_quîy_ötf_°©us
 *
°©us
)

3848 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3850 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_quîy_ötf
);

3851 i‡(!
v˘x
) {

3852 
î∫o
 = 
ENOSYS
;

3853  
NULL
;

3856 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
∑øms
->
comp_mask
,

3857 
IBV_EXP_QUERY_INTF_RESERVED
 - 1);

3859  
v˘x
->
	`exp_quîy_ötf
(
c⁄ãxt
, 
∑øms
, 
°©us
);

3860 
	}
}

3865 
ölöe
 
	$ibv_exp_ªÀa£_ötf
(
ibv_c⁄ãxt
 *
c⁄ãxt
, *
ötf
,

3866 
ibv_exp_ªÀa£_ötf_∑øms
 *
∑øms
)

3868 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3870 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_ªÀa£_ötf
);

3871 i‡(!
v˘x
)

3872  
î∫o
 = 
ENOSYS
;

3874 i‡(
∑øms
)

3875 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
∑øms
->
comp_mask
,

3876 
IBV_EXP_RELEASE_INTF_RESERVED
 - 1);

3878  
v˘x
->
	`exp_ªÀa£_ötf
(
c⁄ãxt
, 
ötf
, 
∑øms
);

3879 
	}
}

3881 
ölöe
 
ibv_exp_wq
 *
	$ibv_exp_¸óã_wq
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3882 
ibv_exp_wq_öô_©å
 *
wq_öô_©å
)

3884 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3886 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_wq
);

3887 i‡(!
v˘x
) {

3888 
î∫o
 = 
ENOSYS
;

3889  
NULL
;

3892 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
wq_öô_©å
->
comp_mask
,

3893 
IBV_EXP_CREATE_WQ_RESERVED
 - 1);

3895  
v˘x
->
	`exp_¸óã_wq
(
c⁄ãxt
, 
wq_öô_©å
);

3896 
	}
}

3898 
ölöe
 
	$ibv_exp_modify_wq
(
ibv_exp_wq
 *
wq
, 
ibv_exp_wq_©å
 *
wq_©å
)

3900 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3902 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
wq
->
c⁄ãxt
, 
exp_modify_wq
);

3903 i‡(!
v˘x
)

3904  
ENOSYS
;

3906 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
wq_©å
->
©å_mask
,

3907 
IBV_EXP_WQ_ATTR_RESERVED
 - 1);

3908  
v˘x
->
	`exp_modify_wq
(
wq
, 
wq_©å
);

3909 
	}
}

3911 
ölöe
 
	$ibv_exp_de°roy_wq
(
ibv_exp_wq
 *
wq
)

3913 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3915 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
wq
->
c⁄ãxt
, 
exp_de°roy_wq
);

3916 i‡(!
v˘x
)

3917  
ENOSYS
;

3919  
v˘x
->
	`exp_de°roy_wq
(
wq
);

3920 
	}
}

3932 
ölöe
 
ibv_exp_rwq_öd_èbÀ
 *
	$ibv_exp_¸óã_rwq_öd_èbÀ
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3933 
ibv_exp_rwq_öd_èbÀ_öô_©å
 *
öô_©å
)

3935 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3937 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_¸óã_rwq_öd_èbÀ
);

3938 i‡(!
v˘x
) {

3939 
î∫o
 = 
ENOSYS
;

3940  
NULL
;

3943 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
öô_©å
->
comp_mask
,

3944 
IBV_EXP_CREATE_IND_TABLE_RESERVED
 - 1);

3945  
v˘x
->
	`exp_¸óã_rwq_öd_èbÀ
(
c⁄ãxt
, 
öô_©å
);

3946 
	}
}

3955 
ölöe
 
	$ibv_exp_de°roy_rwq_öd_èbÀ
(
ibv_exp_rwq_öd_èbÀ
 *
rwq_öd_èbÀ
)

3957 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3959 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
rwq_öd_èbÀ
->
c⁄ãxt
, 
exp_de°roy_rwq_öd_èbÀ
);

3960 i‡(!
v˘x
)

3961  
ENOSYS
;

3963  
v˘x
->
	`exp_de°roy_rwq_öd_èbÀ
(
rwq_öd_èbÀ
);

3964 
	}
}

3975 
ölöe
 
	$ibv_exp_quîy_gid_©å
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

3976 
uöt8_t
 
p‹t_num
,

3977 
ödex
,

3978 
ibv_exp_gid_©å
 *
©å
)

3980 
vîbs_c⁄ãxt_exp
 *
v˘x
;

3982 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_quîy_gid_©å
);

3983 i‡(!
v˘x
)

3984  
ENOSYS
;

3986 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

3987 
IBV_EXP_QUERY_GID_ATTR_RESERVED
 - 1);

3988  
v˘x
->
	`exp_quîy_gid_©å
(
c⁄ãxt
, 
p‹t_num
, 
ödex
, 
©å
);

3989 
	}
}

3998 
ölöe
 
ibv_c⁄ãxt
 *
	$ibv_exp_›í_devi˚
(
ibv_devi˚
 *
devi˚
,

3999 
ibv_exp_›í_devi˚_©å
 *
©å
)

4001 
ibv_c⁄ãxt
 *
c⁄ãxt
;

4002 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4003 
ªt
;

4005 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

4006 
IBV_EXP_SET_CONTEXT_ATTR_RESERVED
 - 1);

4008 i‡(!
©å
->
comp_mask
) {

4009 
î∫o
 = 
EINVAL
;

4010 
out
;

4013 
c⁄ãxt
 = 
	`ibv_›í_devi˚
(
devi˚
);

4014 i‡(!
c⁄ãxt
)

4015 
out
;

4017 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
drv_exp_£t_c⁄ãxt_©å
);

4018 i‡(!
v˘x
) {

4019 
î∫o
 = 
ENOSYS
;

4020 
˛o£
;

4023 
ªt
 = 
v˘x
->
	`drv_exp_£t_c⁄ãxt_©å
(
c⁄ãxt
, 
©å
);

4024 i‡(
ªt
)

4025 
˛o£
;

4027  
c⁄ãxt
;

4029 
˛o£
:

4030 
	`ibv_˛o£_devi˚
(
c⁄ãxt
);

4031 
out
:

4032  
NULL
;

4033 
	}
}

4039 
ölöe
 
	$ibv_exp_po°_§q_›s
(
ibv_§q
 *
§q
,

4040 
ibv_exp_›s_wr
 *
›
,

4041 
ibv_exp_›s_wr
 **
bad_›
)

4043 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4045 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
§q
->
c⁄ãxt
, 
exp_po°_§q_›s
);

4046 i‡(!
v˘x
) {

4047 *
bad_›
 = 
›
;

4048  
ENOSYS
;

4050  
v˘x
->
	`exp_po°_§q_›s
(
§q
, 
›
, 
bad_›
);

4052 
	}
}

4057 
ölöe
 
ibv_exp_dm
 *
	$ibv_exp_Æloc_dm
(
ibv_c⁄ãxt
 *
c⁄ãxt
,

4058 
ibv_exp_Æloc_dm_©å
 *
©å
)

4060 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4062 
	`IBV_EXP_RET_NULL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

4063 
IBV_EXP_ALLOC_DM_ATTR_RESERVED
 - 1);

4065 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
c⁄ãxt
, 
exp_Æloc_dm
);

4066 i‡(!
v˘x
)

4067  
NULL
;

4069  
v˘x
->
	`exp_Æloc_dm
(
c⁄ãxt
, 
©å
);

4070 
	}
}

4074 
ölöe
 
	$ibv_exp_‰ì_dm
(
ibv_exp_dm
 *
dm
)

4076 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4078 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
dm
->
c⁄ãxt
, 
exp_‰ì_dm
);

4079 i‡(!
v˘x
)

4080  
ENOSYS
;

4082  
v˘x
->
	`exp_‰ì_dm
(
dm
);

4083 
	}
}

4088 
ölöe
 
	$ibv_exp_mem˝y_dm
(
ibv_exp_dm
 *
dm
,

4089 
ibv_exp_mem˝y_dm_©å
 *
©å
)

4091 
vîbs_c⁄ãxt_exp
 *
v˘x
;

4093 
	`IBV_EXP_RET_EINVAL_ON_INVALID_COMP_MASK
(
©å
->
comp_mask
,

4094 
IBV_EXP_DM_CPY_COMP_MASK_RESERVED
 - 1);

4096 
v˘x
 = 
	`vîbs_gë_exp_˘x_›
(
dm
->
c⁄ãxt
, 
exp_mem˝y_dm
);

4097 i‡(!
v˘x
)

4098  
ENOSYS
;

4100  
v˘x
->
	`exp_mem˝y_dm
(
dm
, 
©å
);

4101 
	}
}

4103 
	eibv_exp_tmh_›
 {

4104 
	mIBV_EXP_TMH_NO_TAG
 = 0,

4105 
	mIBV_EXP_TMH_RNDV
 = 1,

4106 
	mIBV_EXP_TMH_FIN
 = 2,

4107 
	mIBV_EXP_TMH_EAGER
 = 3

4110 
	sibv_exp_tmh
 {

4111 
uöt8_t
 
	m›code
;

4112 
uöt8_t
 
	mª£rved
[3];

4113 
uöt32_t
 
	m≠p_˘x
;

4114 
uöt64_t
 
	mèg
;

4117 
	sibv_exp_tmh_rvh
 {

4118 
uöt64_t
 
	mva
;

4119 
uöt32_t
 
	mrkey
;

4120 
uöt32_t
 
	mÀn
;

4123 
	sibv_exp_tmh_øvh
 {

4124 
uöt32_t
 
	m¶_d˘
;

4125 
uöt32_t
 
	mª£rved
;

4126 
uöt64_t
 
	mdc_ac˚ss_key
;

4129 
	gEND_C_DECLS


4131 
	#VERBS_MAX_ENV_VAL
 4096

	)

4133 #unde‡
__©åibuã_c⁄°


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__PRI64_PREFIX
 "l"

	)

46 
	#__PRIPTR_PREFIX
 "l"

	)

48 
	#__PRI64_PREFIX
 "Œ"

	)

49 
	#__PRIPTR_PREFIX


	)

55 
	#PRId8
 "d"

	)

56 
	#PRId16
 "d"

	)

57 
	#PRId32
 "d"

	)

58 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

60 
	#PRIdLEAST8
 "d"

	)

61 
	#PRIdLEAST16
 "d"

	)

62 
	#PRIdLEAST32
 "d"

	)

63 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdFAST8
 "d"

	)

66 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

68 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

71 
	#PRIi8
 "i"

	)

72 
	#PRIi16
 "i"

	)

73 
	#PRIi32
 "i"

	)

74 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

76 
	#PRIiLEAST8
 "i"

	)

77 
	#PRIiLEAST16
 "i"

	)

78 
	#PRIiLEAST32
 "i"

	)

79 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiFAST8
 "i"

	)

82 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

84 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

87 
	#PRIo8
 "o"

	)

88 
	#PRIo16
 "o"

	)

89 
	#PRIo32
 "o"

	)

90 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

92 
	#PRIoLEAST8
 "o"

	)

93 
	#PRIoLEAST16
 "o"

	)

94 
	#PRIoLEAST32
 "o"

	)

95 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoFAST8
 "o"

	)

98 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

100 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

103 
	#PRIu8
 "u"

	)

104 
	#PRIu16
 "u"

	)

105 
	#PRIu32
 "u"

	)

106 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

108 
	#PRIuLEAST8
 "u"

	)

109 
	#PRIuLEAST16
 "u"

	)

110 
	#PRIuLEAST32
 "u"

	)

111 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuFAST8
 "u"

	)

114 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

116 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

119 
	#PRIx8
 "x"

	)

120 
	#PRIx16
 "x"

	)

121 
	#PRIx32
 "x"

	)

122 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

124 
	#PRIxLEAST8
 "x"

	)

125 
	#PRIxLEAST16
 "x"

	)

126 
	#PRIxLEAST32
 "x"

	)

127 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxFAST8
 "x"

	)

130 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

132 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

135 
	#PRIX8
 "X"

	)

136 
	#PRIX16
 "X"

	)

137 
	#PRIX32
 "X"

	)

138 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

140 
	#PRIXLEAST8
 "X"

	)

141 
	#PRIXLEAST16
 "X"

	)

142 
	#PRIXLEAST32
 "X"

	)

143 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXFAST8
 "X"

	)

146 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

148 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

152 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

153 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

154 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

155 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

156 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

157 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

161 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

162 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

163 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

164 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

165 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

166 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

172 
	#SCNd8
 "hhd"

	)

173 
	#SCNd16
 "hd"

	)

174 
	#SCNd32
 "d"

	)

175 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

177 
	#SCNdLEAST8
 "hhd"

	)

178 
	#SCNdLEAST16
 "hd"

	)

179 
	#SCNdLEAST32
 "d"

	)

180 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdFAST8
 "hhd"

	)

183 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

185 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

188 
	#SCNi8
 "hhi"

	)

189 
	#SCNi16
 "hi"

	)

190 
	#SCNi32
 "i"

	)

191 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

193 
	#SCNiLEAST8
 "hhi"

	)

194 
	#SCNiLEAST16
 "hi"

	)

195 
	#SCNiLEAST32
 "i"

	)

196 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiFAST8
 "hhi"

	)

199 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

201 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

204 
	#SCNu8
 "hhu"

	)

205 
	#SCNu16
 "hu"

	)

206 
	#SCNu32
 "u"

	)

207 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

209 
	#SCNuLEAST8
 "hhu"

	)

210 
	#SCNuLEAST16
 "hu"

	)

211 
	#SCNuLEAST32
 "u"

	)

212 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuFAST8
 "hhu"

	)

215 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

217 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

220 
	#SCNo8
 "hho"

	)

221 
	#SCNo16
 "ho"

	)

222 
	#SCNo32
 "o"

	)

223 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

225 
	#SCNoLEAST8
 "hho"

	)

226 
	#SCNoLEAST16
 "ho"

	)

227 
	#SCNoLEAST32
 "o"

	)

228 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoFAST8
 "hho"

	)

231 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

233 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

236 
	#SCNx8
 "hhx"

	)

237 
	#SCNx16
 "hx"

	)

238 
	#SCNx32
 "x"

	)

239 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

241 
	#SCNxLEAST8
 "hhx"

	)

242 
	#SCNxLEAST16
 "hx"

	)

243 
	#SCNxLEAST32
 "x"

	)

244 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxFAST8
 "hhx"

	)

247 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

249 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

253 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

254 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

255 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

256 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

257 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

260 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

261 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

262 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

263 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

264 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

267 
	g__BEGIN_DECLS


269 #i‡
__WORDSIZE
 == 64

274 
	mquŸ
;

275 
	mªm
;

276 } 
	timaxdiv_t
;

283 
	mquŸ
;

284 
	mªm
;

285 } 
	timaxdiv_t
;

291 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

294 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

295 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

299 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

302 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

303 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

306 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

307 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

308 
__THROW
;

311 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

312 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

313 
__THROW
;

315 #ifde‡
__USE_EXTERN_INLINES


317 #i‡
__WORDSIZE
 == 64

319 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

320 **
__ª°ri˘
 
__íd±r
,

321 
__ba£
, 
__group
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

324 
__exã∫_ölöe
 
ötmax_t


325 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

326 
ba£
))

328  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

329 
	}
}

331 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 ** 
__ª°ri˘
 
__íd±r
,

333 
__ba£
, 
__group
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

336 
__exã∫_ölöe
 
uötmax_t


337 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

338 
ba£
))

340  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

341 
	}
}

343 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

344 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

345 
__ba£
, 
__group
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

348 
__exã∫_ölöe
 
ötmax_t


349 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

350 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

352  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

353 
	}
}

355 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

356 
__ª°ri˘
 
__≈å
,

357 
__gwch¨_t
 **

358 
__ª°ri˘
 
__íd±r
,

359 
__ba£
, 
__group
)

360 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
__exã∫_ölöe
 
uötmax_t


363 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

364 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

366  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

367 
	}
}

371 
__exãnsi⁄__


372 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

373 **
__ª°ri˘
 
__íd±r
,

374 
__ba£
, 
__group
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

377 
__exã∫_ölöe
 
ötmax_t


378 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

379 
ba£
))

381  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

382 
	}
}

384 
__exãnsi⁄__


385 
	$__°πouŒ_öã∫Æ
 (const *

386 
__ª°ri˘
 
__≈å
,

388 
__ª°ri˘
 
__íd±r
,

389 
__ba£
,

390 
__group
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

393 
__exã∫_ölöe
 
uötmax_t


394 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

395 
ba£
))

397  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

398 
	}
}

400 
__exãnsi⁄__


401 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

402 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

403 
__ba£
, 
__group
)

404 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

406 
__exã∫_ölöe
 
ötmax_t


407 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

408 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

410  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

411 
	}
}

414 
__exãnsi⁄__


415 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

416 
__ª°ri˘
 
__≈å
,

417 
__gwch¨_t
 **

418 
__ª°ri˘
 
__íd±r
,

419 
__ba£
,

420 
__group
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

423 
__exã∫_ölöe
 
uötmax_t


424 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

425 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

427  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

428 
	}
}

433 
	g__END_DECLS


	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<asm/byã‹dî.h
>

22 
	#IPTOS_TOS_MASK
 0x1E

	)

23 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

24 
	#IPTOS_LOWDELAY
 0x10

	)

25 
	#IPTOS_THROUGHPUT
 0x08

	)

26 
	#IPTOS_RELIABILITY
 0x04

	)

27 
	#IPTOS_MINCOST
 0x02

	)

29 
	#IPTOS_PREC_MASK
 0xE0

	)

30 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

31 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

32 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

33 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

34 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

35 
	#IPTOS_PREC_FLASH
 0x60

	)

36 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

37 
	#IPTOS_PREC_PRIORITY
 0x20

	)

38 
	#IPTOS_PREC_ROUTINE
 0x00

	)

42 
	#IPOPT_COPY
 0x80

	)

43 
	#IPOPT_CLASS_MASK
 0x60

	)

44 
	#IPOPT_NUMBER_MASK
 0x1f

	)

46 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

47 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

48 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

50 
	#IPOPT_CONTROL
 0x00

	)

51 
	#IPOPT_RESERVED1
 0x20

	)

52 
	#IPOPT_MEASUREMENT
 0x40

	)

53 
	#IPOPT_RESERVED2
 0x60

	)

55 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

56 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

57 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

59 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

60 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

62 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPVERSION
 4

	)

67 
	#MAXTTL
 255

	)

68 
	#IPDEFTTL
 64

	)

70 
	#IPOPT_OPTVAL
 0

	)

71 
	#IPOPT_OLEN
 1

	)

72 
	#IPOPT_OFFSET
 2

	)

73 
	#IPOPT_MINOFF
 4

	)

74 
	#MAX_IPOPTLEN
 40

	)

75 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

76 
	#IPOPT_EOL
 
IPOPT_END


	)

77 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

79 
	#IPOPT_TS_TSONLY
 0

	)

80 
	#IPOPT_TS_TSANDADDR
 1

	)

81 
	#IPOPT_TS_PRESPEC
 3

	)

83 
	#IPV4_BEET_PHMAXLEN
 8

	)

85 
	sùhdr
 {

86 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

87 
__u8
 
	mihl
:4,

88 
	mvîsi⁄
:4;

89 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

90 
__u8
 
	mvîsi⁄
:4,

91 
	mihl
:4;

95 
__u8
 
	mtos
;

96 
__be16
 
	mtŸ_Àn
;

97 
__be16
 
	mid
;

98 
__be16
 
	m‰ag_off
;

99 
__u8
 
	mâl
;

100 
__u8
 
	m¥Ÿocﬁ
;

101 
__sum16
 
	mcheck
;

102 
__be32
 
	mßddr
;

103 
__be32
 
	mdaddr
;

108 
	sù_auth_hdr
 {

109 
__u8
 
	m√xthdr
;

110 
__u8
 
	mhdæí
;

111 
__be16
 
	mª£rved
;

112 
__be32
 
	m•i
;

113 
__be32
 
	m£q_no
;

114 
__u8
 
	mauth_d©a
[0];

117 
	sù_e•_hdr
 {

118 
__be32
 
	m•i
;

119 
__be32
 
	m£q_no
;

120 
__u8
 
	míc_d©a
[0];

123 
	sù_comp_hdr
 {

124 
__u8
 
	m√xthdr
;

125 
__u8
 
	mÊags
;

126 
__be16
 
	m˝i
;

129 
	sù_bìt_phdr
 {

130 
__u8
 
	m√xthdr
;

131 
__u8
 
	mhdæí
;

132 
__u8
 
	m∑dÀn
;

133 
__u8
 
	mª£rved
;

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/kî√l.h
>

5 
	~<löux/sockë.h
>

6 
	~<löux/ty≥s.h
>

8 
	#NETLINK_ROUTE
 0

	)

9 
	#NETLINK_UNUSED
 1

	)

10 
	#NETLINK_USERSOCK
 2

	)

11 
	#NETLINK_FIREWALL
 3

	)

12 
	#NETLINK_SOCK_DIAG
 4

	)

13 
	#NETLINK_NFLOG
 5

	)

14 
	#NETLINK_XFRM
 6

	)

15 
	#NETLINK_SELINUX
 7

	)

16 
	#NETLINK_ISCSI
 8

	)

17 
	#NETLINK_AUDIT
 9

	)

18 
	#NETLINK_FIB_LOOKUP
 10

	)

19 
	#NETLINK_CONNECTOR
 11

	)

20 
	#NETLINK_NETFILTER
 12

	)

21 
	#NETLINK_IP6_FW
 13

	)

22 
	#NETLINK_DNRTMSG
 14

	)

23 
	#NETLINK_KOBJECT_UEVENT
 15

	)

24 
	#NETLINK_GENERIC
 16

	)

26 
	#NETLINK_SCSITRANSPORT
 18

	)

27 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#NETLINK_RDMA
 20

	)

29 
	#NETLINK_CRYPTO
 21

	)

31 
	#NETLINK_INET_DIAG
 
NETLINK_SOCK_DIAG


	)

33 
	#MAX_LINKS
 32

	)

35 
	ssockaddr_∆
 {

36 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

37 
	m∆_∑d
;

38 
__u32
 
	m∆_pid
;

39 
__u32
 
	m∆_groups
;

42 
	s∆msghdr
 {

43 
__u32
 
	m∆msg_Àn
;

44 
__u16
 
	m∆msg_ty≥
;

45 
__u16
 
	m∆msg_Êags
;

46 
__u32
 
	m∆msg_£q
;

47 
__u32
 
	m∆msg_pid
;

52 
	#NLM_F_REQUEST
 1

	)

53 
	#NLM_F_MULTI
 2

	)

54 
	#NLM_F_ACK
 4

	)

55 
	#NLM_F_ECHO
 8

	)

56 
	#NLM_F_DUMP_INTR
 16

	)

59 
	#NLM_F_ROOT
 0x100

	)

60 
	#NLM_F_MATCH
 0x200

	)

61 
	#NLM_F_ATOMIC
 0x400

	)

62 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

65 
	#NLM_F_REPLACE
 0x100

	)

66 
	#NLM_F_EXCL
 0x200

	)

67 
	#NLM_F_CREATE
 0x400

	)

68 
	#NLM_F_APPEND
 0x800

	)

79 
	#NLMSG_ALIGNTO
 4U

	)

80 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

81 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

82 
	#NLMSG_LENGTH
(
Àn
Ë(÷íË+ 
NLMSG_HDRLEN
)

	)

83 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

84 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

85 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

86 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

87 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

88 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

89 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

90 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

92 
	#NLMSG_NOOP
 0x1

	)

93 
	#NLMSG_ERROR
 0x2

	)

94 
	#NLMSG_DONE
 0x3

	)

95 
	#NLMSG_OVERRUN
 0x4

	)

97 
	#NLMSG_MIN_TYPE
 0x10

	)

99 
	s∆msgîr
 {

100 
	mîr‹
;

101 
∆msghdr
 
	mmsg
;

104 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

105 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

106 
	#NETLINK_PKTINFO
 3

	)

107 
	#NETLINK_BROADCAST_ERROR
 4

	)

108 
	#NETLINK_NO_ENOBUFS
 5

	)

109 
	#NETLINK_RX_RING
 6

	)

110 
	#NETLINK_TX_RING
 7

	)

111 
	#NETLINK_LISTEN_ALL_NSID
 8

	)

113 
	s∆_pktöfo
 {

114 
__u32
 
	mgroup
;

117 
	s∆_mm≠_ªq
 {

118 
	mnm_block_size
;

119 
	mnm_block_ƒ
;

120 
	mnm_‰ame_size
;

121 
	mnm_‰ame_ƒ
;

124 
	s∆_mm≠_hdr
 {

125 
	mnm_°©us
;

126 
	mnm_Àn
;

127 
__u32
 
	mnm_group
;

129 
__u32
 
	mnm_pid
;

130 
__u32
 
	mnm_uid
;

131 
__u32
 
	mnm_gid
;

134 
	e∆_mm≠_°©us
 {

135 
	mNL_MMAP_STATUS_UNUSED
,

136 
	mNL_MMAP_STATUS_RESERVED
,

137 
	mNL_MMAP_STATUS_VALID
,

138 
	mNL_MMAP_STATUS_COPY
,

139 
	mNL_MMAP_STATUS_SKIP
,

142 
	#NL_MMAP_MSG_ALIGNMENT
 
NLMSG_ALIGNTO


	)

143 
	#NL_MMAP_MSG_ALIGN
(
sz
Ë
	`__ALIGN_KERNEL
(sz, 
NL_MMAP_MSG_ALIGNMENT
)

	)

144 
	#NL_MMAP_HDRLEN
 
	`NL_MMAP_MSG_ALIGN
((
∆_mm≠_hdr
))

	)

146 
	#NET_MAJOR
 36

	)

149 
	mNETLINK_UNCONNECTED
 = 0,

150 
	mNETLINK_CONNECTED
,

162 
	s∆©å
 {

163 
__u16
 
	m∆a_Àn
;

164 
__u16
 
	m∆a_ty≥
;

177 
	#NLA_F_NESTED
 (1 << 15)

	)

178 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

179 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

181 
	#NLA_ALIGNTO
 4

	)

182 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

183 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

198 
	s∆a_bôfõld32
 {

199 
__u32
 
	mvÆue
;

200 
__u32
 
	m£À˘‹
;

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	mRTM_NEWNETCONF
 = 80,

124 
	#RTM_NEWNETCONF
 
RTM_NEWNETCONF


	)

125 
	mRTM_GETNETCONF
 = 82,

126 
	#RTM_GETNETCONF
 
RTM_GETNETCONF


	)

128 
	mRTM_NEWMDB
 = 84,

129 
	#RTM_NEWMDB
 
RTM_NEWMDB


	)

130 
	mRTM_DELMDB
 = 85,

131 
	#RTM_DELMDB
 
RTM_DELMDB


	)

132 
	mRTM_GETMDB
 = 86,

133 
	#RTM_GETMDB
 
RTM_GETMDB


	)

135 
	mRTM_NEWNSID
 = 88,

136 
	#RTM_NEWNSID
 
RTM_NEWNSID


	)

137 
	mRTM_DELNSID
 = 89,

138 
	#RTM_DELNSID
 
RTM_DELNSID


	)

139 
	mRTM_GETNSID
 = 90,

140 
	#RTM_GETNSID
 
RTM_GETNSID


	)

142 
	mRTM_NEWSTATS
 = 92,

143 
	#RTM_NEWSTATS
 
RTM_NEWSTATS


	)

144 
	mRTM_GETSTATS
 = 94,

145 
	#RTM_GETSTATS
 
RTM_GETSTATS


	)

147 
	m__RTM_MAX
,

148 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

151 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

152 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

153 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

161 
	sπ©å
 {

162 
	mπa_Àn
;

163 
	mπa_ty≥
;

168 
	#RTA_ALIGNTO
 4

	)

169 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

170 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

171 (
πa
)->
πa_Àn
 >(
π©å
) && \

172 (
πa
)->
πa_Àn
 <(
Àn
))

	)

173 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

174 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

175 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

176 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

177 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

178 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

187 
	sπmsg
 {

188 
	mπm_Ámûy
;

189 
	mπm_d°_Àn
;

190 
	mπm_§c_Àn
;

191 
	mπm_tos
;

193 
	mπm_èbÀ
;

194 
	mπm_¥Ÿocﬁ
;

195 
	mπm_sc›e
;

196 
	mπm_ty≥
;

198 
	mπm_Êags
;

204 
	mRTN_UNSPEC
,

205 
	mRTN_UNICAST
,

206 
	mRTN_LOCAL
,

207 
	mRTN_BROADCAST
,

209 
	mRTN_ANYCAST
,

211 
	mRTN_MULTICAST
,

212 
	mRTN_BLACKHOLE
,

213 
	mRTN_UNREACHABLE
,

214 
	mRTN_PROHIBIT
,

215 
	mRTN_THROW
,

216 
	mRTN_NAT
,

217 
	mRTN_XRESOLVE
,

218 
	m__RTN_MAX


221 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

226 
	#RTPROT_UNSPEC
 0

	)

227 
	#RTPROT_REDIRECT
 1

	)

229 
	#RTPROT_KERNEL
 2

	)

230 
	#RTPROT_BOOT
 3

	)

231 
	#RTPROT_STATIC
 4

	)

240 
	#RTPROT_GATED
 8

	)

241 
	#RTPROT_RA
 9

	)

242 
	#RTPROT_MRT
 10

	)

243 
	#RTPROT_ZEBRA
 11

	)

244 
	#RTPROT_BIRD
 12

	)

245 
	#RTPROT_DNROUTED
 13

	)

246 
	#RTPROT_XORP
 14

	)

247 
	#RTPROT_NTK
 15

	)

248 
	#RTPROT_DHCP
 16

	)

249 
	#RTPROT_MROUTED
 17

	)

262 
	eπ_sc›e_t
 {

263 
	mRT_SCOPE_UNIVERSE
=0,

265 
	mRT_SCOPE_SITE
=200,

266 
	mRT_SCOPE_LINK
=253,

267 
	mRT_SCOPE_HOST
=254,

268 
	mRT_SCOPE_NOWHERE
=255

273 
	#RTM_F_NOTIFY
 0x100

	)

274 
	#RTM_F_CLONED
 0x200

	)

275 
	#RTM_F_EQUALIZE
 0x400

	)

276 
	#RTM_F_PREFIX
 0x800

	)

280 
	eπ_˛ass_t
 {

281 
	mRT_TABLE_UNSPEC
=0,

283 
	mRT_TABLE_COMPAT
=252,

284 
	mRT_TABLE_DEFAULT
=253,

285 
	mRT_TABLE_MAIN
=254,

286 
	mRT_TABLE_LOCAL
=255,

287 
	mRT_TABLE_MAX
=0xFFFFFFFF

293 
	eπ©å_ty≥_t
 {

294 
	mRTA_UNSPEC
,

295 
	mRTA_DST
,

296 
	mRTA_SRC
,

297 
	mRTA_IIF
,

298 
	mRTA_OIF
,

299 
	mRTA_GATEWAY
,

300 
	mRTA_PRIORITY
,

301 
	mRTA_PREFSRC
,

302 
	mRTA_METRICS
,

303 
	mRTA_MULTIPATH
,

304 
	mRTA_PROTOINFO
,

305 
	mRTA_FLOW
,

306 
	mRTA_CACHEINFO
,

307 
	mRTA_SESSION
,

308 
	mRTA_MP_ALGO
,

309 
	mRTA_TABLE
,

310 
	mRTA_MARK
,

311 
	mRTA_MFC_STATS
,

312 
	m__RH_RESERVED_RTA_VIA
,

313 
	m__RH_RESERVED_RTA_NEWDST
,

314 
	mRTA_PREF
,

315 
	mRTA_ENCAP_TYPE
,

316 
	mRTA_ENCAP
,

317 
	mRTA_EXPIRES
,

318 
	mRTA_PAD
,

319 
	m__RTA_MAX


322 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

324 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

325 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

336 
	sπ√xth›
 {

337 
	mπnh_Àn
;

338 
	mπnh_Êags
;

339 
	mπnh_h›s
;

340 
	mπnh_ifödex
;

345 
	#RTNH_F_DEAD
 1

	)

346 
	#RTNH_F_PERVASIVE
 2

	)

347 
	#RTNH_F_ONLINK
 4

	)

348 
	#RTNH_F_OFFLOAD
 8

	)

352 
	#RTNH_ALIGNTO
 4

	)

353 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

354 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

355 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

356 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

357 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

358 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

359 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

363 
	sπa_ˇcheöfo
 {

364 
__u32
 
	mπa_˛¡ªf
;

365 
__u32
 
	mπa_œ°u£
;

366 
__s32
 
	mπa_expúes
;

367 
__u32
 
	mπa_îr‹
;

368 
__u32
 
	mπa_u£d
;

370 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

371 
__u32
 
	mπa_id
;

372 
__u32
 
	mπa_ts
;

373 
__u32
 
	mπa_tßge
;

379 
	mRTAX_UNSPEC
,

380 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

381 
	mRTAX_LOCK
,

382 
	#RTAX_LOCK
 
RTAX_LOCK


	)

383 
	mRTAX_MTU
,

384 
	#RTAX_MTU
 
RTAX_MTU


	)

385 
	mRTAX_WINDOW
,

386 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

387 
	mRTAX_RTT
,

388 
	#RTAX_RTT
 
RTAX_RTT


	)

389 
	mRTAX_RTTVAR
,

390 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

391 
	mRTAX_SSTHRESH
,

392 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

393 
	mRTAX_CWND
,

394 
	#RTAX_CWND
 
RTAX_CWND


	)

395 
	mRTAX_ADVMSS
,

396 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

397 
	mRTAX_REORDERING
,

398 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

399 
	mRTAX_HOPLIMIT
,

400 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

401 
	mRTAX_INITCWND
,

402 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

403 
	mRTAX_FEATURES
,

404 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

405 
	mRTAX_RTO_MIN
,

406 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

407 
	mRTAX_INITRWND
,

408 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

409 
	mRTAX_QUICKACK
,

410 
	#RTAX_QUICKACK
 
RTAX_QUICKACK


	)

411 
	mRTAX_CC_ALGO
,

412 
	#RTAX_CC_ALGO
 
RTAX_CC_ALGO


	)

413 
	mRTAX_RESERVED2
,

414 
	mRTAX_RESERVED3
,

415 
	mRTAX_RESERVED4
,

416 
	mRTAX_RESERVED5
,

417 
	mRTAX_RESERVED6
,

418 
	mRTAX_RESERVED7
,

419 
	mRTAX_RESERVED8
,

420 
	m__RTAX_MAX


423 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

425 
	#RTAX_FEATURE_ECN
 (1 << 0)

	)

426 
	#RTAX_FEATURE_SACK
 (1 << 1)

	)

427 
	#RTAX_FEATURE_TIMESTAMP
 (1 << 2)

	)

428 
	#RTAX_FEATURE_ALLFRAG
 (1 << 3)

	)

430 
	#RTAX_FEATURE_MASK
 (
RTAX_FEATURE_ECN
 | 
RTAX_FEATURE_SACK
 | \

431 
RTAX_FEATURE_TIMESTAMP
 | 
RTAX_FEATURE_ALLFRAG
)

	)

433 
	sπa_£ssi⁄
 {

434 
__u8
 
	m¥Ÿo
;

435 
__u8
 
	m∑d1
;

436 
__u16
 
	m∑d2
;

440 
__u16
 
	m•‹t
;

441 
__u16
 
	mdp‹t
;

442 } 
	mp‹ts
;

445 
__u8
 
	mty≥
;

446 
__u8
 
	mcode
;

447 
__u16
 
	midít
;

448 } 
	micm±
;

450 
__u32
 
	m•i
;

451 } 
	mu
;

454 
	sπa_mfc_°©s
 {

455 
__u64
 
	mmfcs_∑ckës
;

456 
__u64
 
	mmfcs_byãs
;

457 
__u64
 
	mmfcs_wr⁄g_if
;

464 
	sπgímsg
 {

465 
	mπgí_Ámûy
;

477 
	siföfomsg
 {

478 
	mifi_Ámûy
;

479 
	m__ifi_∑d
;

480 
	mifi_ty≥
;

481 
	mifi_ödex
;

482 
	mifi_Êags
;

483 
	mifi_ch™ge
;

490 
	s¥efixmsg
 {

491 
	m¥efix_Ámûy
;

492 
	m¥efix_∑d1
;

493 
	m¥efix_∑d2
;

494 
	m¥efix_ifödex
;

495 
	m¥efix_ty≥
;

496 
	m¥efix_Àn
;

497 
	m¥efix_Êags
;

498 
	m¥efix_∑d3
;

503 
	mPREFIX_UNSPEC
,

504 
	mPREFIX_ADDRESS
,

505 
	mPREFIX_CACHEINFO
,

506 
	m__PREFIX_MAX


509 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

511 
	s¥efix_ˇcheöfo
 {

512 
__u32
 
	m¥e„ºed_time
;

513 
__u32
 
	mvÆid_time
;

521 
	stcmsg
 {

522 
	mtcm_Ámûy
;

523 
	mtcm__∑d1
;

524 
	mtcm__∑d2
;

525 
	mtcm_ifödex
;

526 
__u32
 
	mtcm_h™dÀ
;

527 
__u32
 
	mtcm_∑ª¡
;

531 
	#tcm_block_ödex
 
tcm_∑ª¡


	)

532 
__u32
 
	mtcm_öfo
;

539 
	#TCM_IFINDEX_MAGIC_BLOCK
 (0xFFFFFFFFU)

	)

542 
	mTCA_UNSPEC
,

543 
	mTCA_KIND
,

544 
	mTCA_OPTIONS
,

545 
	mTCA_STATS
,

546 
	mTCA_XSTATS
,

547 
	mTCA_RATE
,

548 
	mTCA_FCNT
,

549 
	mTCA_STATS2
,

550 
	mTCA_STAB
,

551 
	mTCA_PAD
,

552 
	mTCA_DUMP_INVISIBLE
,

553 
	mTCA_CHAIN
,

554 
	mTCA_HW_OFFLOAD
,

555 
	mTCA_INGRESS_BLOCK
,

556 
	mTCA_EGRESS_BLOCK
,

557 
	m__TCA_MAX


560 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

562 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

563 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

569 
	sndu£r›tmsg
 {

570 
	mndu£r›t_Ámûy
;

571 
	mndu£r›t_∑d1
;

572 
	mndu£r›t_›ts_Àn
;

573 
	mndu£r›t_ifödex
;

574 
__u8
 
	mndu£r›t_icmp_ty≥
;

575 
__u8
 
	mndu£r›t_icmp_code
;

576 
	mndu£r›t_∑d2
;

577 
	mndu£r›t_∑d3
;

582 
	mNDUSEROPT_UNSPEC
,

583 
	mNDUSEROPT_SRCADDR
,

584 
	m__NDUSEROPT_MAX


587 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

590 
	#RTMGRP_LINK
 1

	)

591 
	#RTMGRP_NOTIFY
 2

	)

592 
	#RTMGRP_NEIGH
 4

	)

593 
	#RTMGRP_TC
 8

	)

595 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

596 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

597 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

598 
	#RTMGRP_IPV4_RULE
 0x80

	)

600 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

601 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

602 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

603 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

605 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

606 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

608 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

611 
	eπ√éök_groups
 {

612 
	mRTNLGRP_NONE
,

613 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

614 
	mRTNLGRP_LINK
,

615 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

616 
	mRTNLGRP_NOTIFY
,

617 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

618 
	mRTNLGRP_NEIGH
,

619 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

620 
	mRTNLGRP_TC
,

621 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

622 
	mRTNLGRP_IPV4_IFADDR
,

623 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

624 
	mRTNLGRP_IPV4_MROUTE
,

625 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

626 
	mRTNLGRP_IPV4_ROUTE
,

627 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

628 
	mRTNLGRP_IPV4_RULE
,

629 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

630 
	mRTNLGRP_IPV6_IFADDR
,

631 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

632 
	mRTNLGRP_IPV6_MROUTE
,

633 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

634 
	mRTNLGRP_IPV6_ROUTE
,

635 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

636 
	mRTNLGRP_IPV6_IFINFO
,

637 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

638 
	mRTNLGRP_DEC√t_IFADDR
,

639 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

640 
	mRTNLGRP_NOP2
,

641 
	mRTNLGRP_DEC√t_ROUTE
,

642 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

643 
	mRTNLGRP_DEC√t_RULE
,

644 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

645 
	mRTNLGRP_NOP4
,

646 
	mRTNLGRP_IPV6_PREFIX
,

647 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

648 
	mRTNLGRP_IPV6_RULE
,

649 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

650 
	mRTNLGRP_ND_USEROPT
,

651 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

652 
	mRTNLGRP_PHONET_IFADDR
,

653 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

654 
	mRTNLGRP_PHONET_ROUTE
,

655 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

656 
	mRTNLGRP_DCB
,

657 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

658 
	mRTNLGRP_IPV4_NETCONF
,

659 
	#RTNLGRP_IPV4_NETCONF
 
RTNLGRP_IPV4_NETCONF


	)

660 
	mRTNLGRP_IPV6_NETCONF
,

661 
	#RTNLGRP_IPV6_NETCONF
 
RTNLGRP_IPV6_NETCONF


	)

662 
	mRTNLGRP_MDB
,

663 
	#RTNLGRP_MDB
 
RTNLGRP_MDB


	)

664 
	m__RH_RESERVED_RTNLGRP_MPLS_ROUTE
,

665 
	mRTNLGRP_NSID
,

666 
	#RTNLGRP_NSID
 
RTNLGRP_NSID


	)

667 
	m__RTNLGRP_MAX


669 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

672 
	stˇmsg
 {

673 
	mtˇ_Ámûy
;

674 
	mtˇ__∑d1
;

675 
	mtˇ__∑d2
;

679 
	mTCA_ROOT_UNSPEC
,

680 
	mTCA_ROOT_TAB
,

681 
	#TCA_ACT_TAB
 
TCA_ROOT_TAB


	)

682 
	#TCAA_MAX
 
TCA_ROOT_TAB


	)

683 
	mTCA_ROOT_FLAGS
,

684 
	mTCA_ROOT_COUNT
,

685 
	mTCA_ROOT_TIME_DELTA
,

686 
	m__TCA_ROOT_MAX
,

687 
	#TCA_ROOT_MAX
 (
__TCA_ROOT_MAX
 - 1)

	)

690 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

691 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

699 
	#TCA_FLAG_LARGE_DUMP_ON
 (1 << 0)

	)

702 
	#RTEXT_FILTER_VF
 (1 << 0)

	)

703 
	#RTEXT_FILTER_BRVLAN
 (1 << 1)

	)

704 
	#RTEXT_FILTER_BRVLAN_COMPRESSED
 (1 << 2)

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/malloc.h

20 #i‚de‡
_MALLOC_H


21 
	#_MALLOC_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°ddef.h
>

25 
	~<°dio.h
>

26 
	#__mÆloc_±r_t
 *

	)

29 
	#__mÆloc_size_t
 
size_t


	)

30 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

32 #ifde‡
__GNUC__


34 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

37 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

39 #ifde‡
_LIBC


40 
	#__MALLOC_HOOK_VOLATILE


	)

41 
	#__MALLOC_DEPRECATED


	)

43 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

44 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

49 
	#__MALLOC_P
(
¨gs
Ë
	)
args

50 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

51 
	#__MALLOC_HOOK_VOLATILE


	)

52 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

57 
__BEGIN_DECLS


60 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

64 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

72 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

75 
	$‰ì
 (*
__±r
Ë
__THROW
;

78 
	$c‰ì
 (*
__±r
Ë
__THROW
;

81 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

82 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

85 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

89 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

93 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

96 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

97 
__THROW
 
__©åibuã_mÆloc__
;

101 
	smÆlöfo


103 
¨ía
;

104 
‹dblks
;

105 
smblks
;

106 
hblks
;

107 
hblkhd
;

108 
usmblks
;

109 
fsmblks
;

110 
u‹dblks
;

111 
f‹dblks
;

112 
kìpco°
;

116 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

119 #i‚de‡
M_MXFAST


120 
	#M_MXFAST
 1

	)

122 #i‚de‡
M_NLBLKS


123 
	#M_NLBLKS
 2

	)

125 #i‚de‡
M_GRAIN


126 
	#M_GRAIN
 3

	)

128 #i‚de‡
M_KEEP


129 
	#M_KEEP
 4

	)

133 
	#M_TRIM_THRESHOLD
 -1

	)

134 
	#M_TOP_PAD
 -2

	)

135 
	#M_MMAP_THRESHOLD
 -3

	)

136 
	#M_MMAP_MAX
 -4

	)

137 
	#M_CHECK_ACTION
 -5

	)

138 
	#M_PERTURB
 -6

	)

139 
	#M_ARENA_TEST
 -7

	)

140 
	#M_ARENA_MAX
 -8

	)

143 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

147 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

151 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

154 
	$mÆloc_°©s
 (Ë
__THROW
;

157 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

160 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

164 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

169 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

170 
__MALLOC_DEPRECATED
;

172 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

173 c⁄° 
__mÆloc_±r_t
)

174 
__MALLOC_DEPRECATED
;

175 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

176 c⁄° 
__mÆloc_±r_t
)

177 
__MALLOC_DEPRECATED
;

178 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

179 
size_t
 
__size
,

180 c⁄° 
__mÆloc_±r_t
)

181 
__MALLOC_DEPRECATED
;

182 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

183 
size_t
 
__size
,

184 c⁄° 
__mÆloc_±r_t
)

185 
__MALLOC_DEPRECATED
;

186 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

189 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

192 
__END_DECLS


	@/usr/include/math.h

24 #i‚def 
_MATH_H


25 
	#_MATH_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/huge_vÆ.h
>

34 #ifde‡
__USE_ISOC99


35 
	~<bôs/huge_vÆf.h
>

36 
	~<bôs/huge_vÆl.h
>

39 
	~<bôs/öf.h
>

42 
	~<bôs/«n.h
>

46 
	~<bôs/m©hdef.h
>

53 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

54 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

55 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

56 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

57 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

58 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

59 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

60 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

61 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

62 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

63 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

64 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

66 
	#_MdoubÀ_
 

	)

67 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

68 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

69 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

70 
	~<bôs/m©hˇŒs.h
>

71 #unde‡
_MdoubÀ_


72 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


73 #unde‡
_MdoubÀ_END_NAMESPACE


74 #unde‡
__MATH_PRECNAME


76 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


82 #i‚de‡
_MÊﬂt_


83 
	#_MÊﬂt_
 

	)

85 
	#_MdoubÀ_
 
_MÊﬂt_


	)

86 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

87 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

88 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

89 
	~<bôs/m©hˇŒs.h
>

90 #unde‡
_MdoubÀ_


91 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


92 #unde‡
_MdoubÀ_END_NAMESPACE


93 #unde‡
__MATH_PRECNAME


95 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

96 || 
deföed
 
__LDBL_COMPAT


97 #ifde‡
__LDBL_COMPAT


99 #ifde‡
__USE_ISOC99


100 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

101 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

102 #ifde‡
__REDIRECT_NTH


103 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

104 
__∆dbl_√xâow¨df
)

105 
	`__©åibuã__
 ((
__c⁄°__
));

106 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

107 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

108 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

109 (
__x
, 
__y
),

110 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

114 #unde‡
__MATHDECL_1


115 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

116 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

117 
¨gs
, 
Æüs
)

	)

118 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

119 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

125 #i‚de‡
_Ml⁄g_doubÀ_


126 
	#_Ml⁄g_doubÀ_
 

	)

128 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

129 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

130 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

131 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

132 
	#__MATH_DECLARE_LDOUBLE
 1

	)

133 
	~<bôs/m©hˇŒs.h
>

134 #unde‡
_MdoubÀ_


135 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


136 #unde‡
_MdoubÀ_END_NAMESPACE


137 #unde‡
__MATH_PRECNAME


142 #unde‡
__MATHDECL_1


143 #unde‡
__MATHDECL


144 #unde‡
__MATHCALL


147 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


149 
signgam
;

154 #ifde‡
__USE_ISOC99


192 
FP_NAN
 =

193 
	#FP_NAN
 0

	)

194 
FP_NAN
,

195 
FP_INFINITE
 =

196 
	#FP_INFINITE
 1

	)

197 
FP_INFINITE
,

198 
FP_ZERO
 =

199 
	#FP_ZERO
 2

	)

200 
FP_ZERO
,

201 
FP_SUBNORMAL
 =

202 
	#FP_SUBNORMAL
 3

	)

203 
FP_SUBNORMAL
,

204 
FP_NORMAL
 =

205 
	#FP_NORMAL
 4

	)

206 
FP_NORMAL


210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#Â˛assify
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

214 
	#Â˛assify
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__Â˛assifyf
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

222 #ifde‡
__NO_LONG_DOUBLE_MATH


223 
	#signbô
(
x
) \

224 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

226 
	#signbô
(
x
) \

227 ( (
x
) ==  () \

228 ? 
	`__signbôf
 (
x
) \

229 :  (
x
) ==  () \

230 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

234 #ifde‡
__NO_LONG_DOUBLE_MATH


235 
	#isföôe
(
x
) \

236 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

238 
	#isföôe
(
x
) \

239 ( (
x
) ==  () \

240 ? 
	`__föôef
 (
x
) \

241 :  (
x
) ==  () \

242 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

246 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

250 #ifde‡
__NO_LONG_DOUBLE_MATH


251 
	#i¢™
(
x
) \

252 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

254 
	#i¢™
(
x
) \

255 ( (
x
) ==  () \

256 ? 
	`__i¢™f
 (
x
) \

257 :  (
x
) ==  () \

258 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

262 #ifde‡
__NO_LONG_DOUBLE_MATH


263 
	#isöf
(
x
) \

264 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

266 
	#isöf
(
x
) \

267 ( (
x
) ==  () \

268 ? 
	`__isöff
 (
x
) \

269 :  (
x
) ==  () \

270 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

274 
	#MATH_ERRNO
 1

	)

275 
	#MATH_ERREXCEPT
 2

	)

280 #i‚de‡
__FAST_MATH__


281 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

286 #ifdef 
__USE_MISC


290 
_IEEE_
 = -1,

291 
_SVID_
,

292 
_XOPEN_
,

293 
_POSIX_
,

294 
_ISOC_


295 } 
	t_LIB_VERSION_TYPE
;

300 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

304 #ifde‡
__USE_SVID


310 #ifde‡
__˝lu•lus


311 
__ex˚±i⁄


313 
ex˚±i⁄


316 
ty≥
;

317 *
«me
;

318 
¨g1
;

319 
¨g2
;

320 
ªtvÆ
;

321 
	}
};

323 #ifde‡
__˝lu•lus


324 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

326 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

329 
	#X_TLOSS
 1.41484755040568800000e+16

	)

332 
	#DOMAIN
 1

	)

333 
	#SING
 2

	)

334 
	#OVERFLOW
 3

	)

335 
	#UNDERFLOW
 4

	)

336 
	#TLOSS
 5

	)

337 
	#PLOSS
 6

	)

340 
	#HUGE
 3.40282347e+38F

	)

344 #ifde‡
__USE_XOPEN


346 
	#MAXFLOAT
 3.40282347e+38F

	)

353 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


354 
	#M_E
 2.7182818284590452354

	)

355 
	#M_LOG2E
 1.4426950408889634074

	)

356 
	#M_LOG10E
 0.43429448190325182765

	)

357 
	#M_LN2
 0.69314718055994530942

	)

358 
	#M_LN10
 2.30258509299404568402

	)

359 
	#M_PI
 3.14159265358979323846

	)

360 
	#M_PI_2
 1.57079632679489661923

	)

361 
	#M_PI_4
 0.78539816339744830962

	)

362 
	#M_1_PI
 0.31830988618379067154

	)

363 
	#M_2_PI
 0.63661977236758134308

	)

364 
	#M_2_SQRTPI
 1.12837916709551257390

	)

365 
	#M_SQRT2
 1.41421356237309504880

	)

366 
	#M_SQRT1_2
 0.70710678118654752440

	)

372 #ifde‡
__USE_GNU


373 
	#M_El
 2.718281828459045235360287471352662498L

	)

374 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

375 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

376 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

377 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

378 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

379 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

380 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

381 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

382 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

383 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

384 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

385 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

392 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


393 
	#__NO_MATH_INLINES
 1

	)

396 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

403 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

404 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

405 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

406 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

407 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

408 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

412 #ifde‡
__USE_EXTERN_INLINES


413 
	~<bôs/m©hölöe.h
>

418 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

419 
	~<bôs/m©h-föôe.h
>

422 #ifde‡
__USE_ISOC99


426 #i‚de‡
isgª©î


427 
	#isgª©î
(
x
, 
y
) \

428 (
__exãnsi⁄__
 \

429 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

430 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

434 #i‚de‡
isgª©îequÆ


435 
	#isgª©îequÆ
(
x
, 
y
) \

436 (
__exãnsi⁄__
 \

437 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

438 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

442 #i‚de‡
i¶ess


443 
	#i¶ess
(
x
, 
y
) \

444 (
__exãnsi⁄__
 \

445 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

446 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

450 #i‚de‡
i¶es£quÆ


451 
	#i¶es£quÆ
(
x
, 
y
) \

452 (
__exãnsi⁄__
 \

453 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

454 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

458 #i‚de‡
i¶essgª©î


459 
	#i¶essgª©î
(
x
, 
y
) \

460 (
__exãnsi⁄__
 \

461 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

462 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

466 #i‚de‡
isun‹dîed


467 
	#isun‹dîed
(
u
, 
v
) \

468 (
__exãnsi⁄__
 \

469 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

470 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

475 
	g__END_DECLS


	@/usr/include/net/if.h

19 #i‚de‡
_NET_IF_H


20 
	#_NET_IF_H
 1

	)

22 
	~<„©uªs.h
>

24 #ifde‡
__USE_MISC


25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

31 
	#IF_NAMESIZE
 16

	)

33 
	sif_«meödex


35 
	mif_ödex
;

36 *
	mif_«me
;

40 #ifde‡
__USE_MISC


44 
	mIFF_UP
 = 0x1,

45 
	#IFF_UP
 
IFF_UP


	)

46 
	mIFF_BROADCAST
 = 0x2,

47 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

48 
	mIFF_DEBUG
 = 0x4,

49 
	#IFF_DEBUG
 
IFF_DEBUG


	)

50 
	mIFF_LOOPBACK
 = 0x8,

51 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

52 
	mIFF_POINTOPOINT
 = 0x10,

53 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

54 
	mIFF_NOTRAILERS
 = 0x20,

55 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

56 
	mIFF_RUNNING
 = 0x40,

57 
	#IFF_RUNNING
 
IFF_RUNNING


	)

58 
	mIFF_NOARP
 = 0x80,

59 
	#IFF_NOARP
 
IFF_NOARP


	)

60 
	mIFF_PROMISC
 = 0x100,

61 
	#IFF_PROMISC
 
IFF_PROMISC


	)

64 
	mIFF_ALLMULTI
 = 0x200,

65 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

67 
	mIFF_MASTER
 = 0x400,

68 
	#IFF_MASTER
 
IFF_MASTER


	)

69 
	mIFF_SLAVE
 = 0x800,

70 
	#IFF_SLAVE
 
IFF_SLAVE


	)

72 
	mIFF_MULTICAST
 = 0x1000,

73 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

75 
	mIFF_PORTSEL
 = 0x2000,

76 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

77 
	mIFF_AUTOMEDIA
 = 0x4000,

78 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

79 
	mIFF_DYNAMIC
 = 0x8000

80 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

88 
	siÁddr


90 
sockaddr
 
	miÁ_addr
;

93 
sockaddr
 
	mifu_brﬂdaddr
;

94 
sockaddr
 
	mifu_d°addr
;

95 } 
	miÁ_ifu
;

96 
iÁ˚
 *
	miÁ_iÂ
;

97 
iÁddr
 *
	miÁ_√xt
;

100 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

101 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

111 
	sifm≠


113 
	mmem_°¨t
;

114 
	mmem_íd
;

115 
	mba£_addr
;

116 
	múq
;

117 
	mdma
;

118 
	mp‹t
;

126 
	si‰eq


128 
	#IFHWADDRLEN
 6

	)

129 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

132 
	mi‰n_«me
[
IFNAMSIZ
];

133 } 
	mi‰_i‰n
;

137 
sockaddr
 
	mi‰u_addr
;

138 
sockaddr
 
	mi‰u_d°addr
;

139 
sockaddr
 
	mi‰u_brﬂdaddr
;

140 
sockaddr
 
	mi‰u_√tmask
;

141 
sockaddr
 
	mi‰u_hwaddr
;

142 
	mi‰u_Êags
;

143 
	mi‰u_ivÆue
;

144 
	mi‰u_mtu
;

145 
ifm≠
 
	mi‰u_m≠
;

146 
	mi‰u_¶ave
[
IFNAMSIZ
];

147 
	mi‰u_√w«me
[
IFNAMSIZ
];

148 
__ˇddr_t
 
	mi‰u_d©a
;

149 } 
	mi‰_i‰u
;

151 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

152 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

153 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

154 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

155 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

156 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

157 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

158 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

159 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

160 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

161 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

162 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

163 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

164 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

167 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

168 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

169 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

176 
	sifc⁄f


178 
	mifc_Àn
;

181 
__ˇddr_t
 
	mifcu_buf
;

182 
i‰eq
 *
	mifcu_ªq
;

183 } 
	mifc_ifcu
;

185 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

186 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

187 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

190 
__BEGIN_DECLS


193 
	$if_«mëoödex
 (c⁄° *
__i‚ame
Ë
__THROW
;

194 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

197 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

200 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

202 
__END_DECLS


	@/usr/include/net/if_packet.h

19 #i‚de‡
__IF_PACKET_H


20 
	#__IF_PACKET_H


	)

22 
	~<„©uªs.h
>

23 
	~<bôs/sockaddr.h
>

29 
	ssockaddr_pkt


31 
__SOCKADDR_COMMON
 (
•kt_
);

32 
	m•kt_devi˚
[14];

33 
	m•kt_¥Ÿocﬁ
;

	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__unu£d
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


31 
uöt32_t
 
	tö_addr_t
;

32 
	sö_addr


34 
ö_addr_t
 
	ms_addr
;

38 
	~<bôs/ö.h
>

43 
	mIPPROTO_IP
 = 0,

44 
	#IPPROTO_IP
 
IPPROTO_IP


	)

45 
	mIPPROTO_ICMP
 = 1,

46 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

47 
	mIPPROTO_IGMP
 = 2,

48 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

49 
	mIPPROTO_IPIP
 = 4,

50 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

51 
	mIPPROTO_TCP
 = 6,

52 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

53 
	mIPPROTO_EGP
 = 8,

54 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

55 
	mIPPROTO_PUP
 = 12,

56 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

57 
	mIPPROTO_UDP
 = 17,

58 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

59 
	mIPPROTO_IDP
 = 22,

60 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

61 
	mIPPROTO_TP
 = 29,

62 
	#IPPROTO_TP
 
IPPROTO_TP


	)

63 
	mIPPROTO_DCCP
 = 33,

64 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

65 
	mIPPROTO_IPV6
 = 41,

66 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

67 
	mIPPROTO_RSVP
 = 46,

68 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

69 
	mIPPROTO_GRE
 = 47,

70 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

71 
	mIPPROTO_ESP
 = 50,

72 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

73 
	mIPPROTO_AH
 = 51,

74 
	#IPPROTO_AH
 
IPPROTO_AH


	)

75 
	mIPPROTO_MTP
 = 92,

76 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

77 
	mIPPROTO_BEETPH
 = 94,

78 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

79 
	mIPPROTO_ENCAP
 = 98,

80 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

81 
	mIPPROTO_PIM
 = 103,

82 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

83 
	mIPPROTO_COMP
 = 108,

84 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

85 
	mIPPROTO_SCTP
 = 132,

86 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

87 
	mIPPROTO_UDPLITE
 = 136,

88 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

89 
	mIPPROTO_RAW
 = 255,

90 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

91 
	mIPPROTO_MAX


97 #i‡!
__USE_KERNEL_IPV6_DEFS


100 
	mIPPROTO_HOPOPTS
 = 0,

101 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

102 
	mIPPROTO_ROUTING
 = 43,

103 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

104 
	mIPPROTO_FRAGMENT
 = 44,

105 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

106 
	mIPPROTO_ICMPV6
 = 58,

107 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

108 
	mIPPROTO_NONE
 = 59,

109 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

110 
	mIPPROTO_DSTOPTS
 = 60,

111 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

112 
	mIPPROTO_MH
 = 135

113 
	#IPPROTO_MH
 
IPPROTO_MH


	)

118 
uöt16_t
 
	tö_p‹t_t
;

123 
	mIPPORT_ECHO
 = 7,

124 
	mIPPORT_DISCARD
 = 9,

125 
	mIPPORT_SYSTAT
 = 11,

126 
	mIPPORT_DAYTIME
 = 13,

127 
	mIPPORT_NETSTAT
 = 15,

128 
	mIPPORT_FTP
 = 21,

129 
	mIPPORT_TELNET
 = 23,

130 
	mIPPORT_SMTP
 = 25,

131 
	mIPPORT_TIMESERVER
 = 37,

132 
	mIPPORT_NAMESERVER
 = 42,

133 
	mIPPORT_WHOIS
 = 43,

134 
	mIPPORT_MTP
 = 57,

136 
	mIPPORT_TFTP
 = 69,

137 
	mIPPORT_RJE
 = 77,

138 
	mIPPORT_FINGER
 = 79,

139 
	mIPPORT_TTYLINK
 = 87,

140 
	mIPPORT_SUPDUP
 = 95,

143 
	mIPPORT_EXECSERVER
 = 512,

144 
	mIPPORT_LOGINSERVER
 = 513,

145 
	mIPPORT_CMDSERVER
 = 514,

146 
	mIPPORT_EFSSERVER
 = 520,

149 
	mIPPORT_BIFFUDP
 = 512,

150 
	mIPPORT_WHOSERVER
 = 513,

151 
	mIPPORT_ROUTESERVER
 = 520,

154 
	mIPPORT_RESERVED
 = 1024,

157 
	mIPPORT_USERRESERVED
 = 5000

165 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

166 
	#IN_CLASSA_NET
 0xff000000

	)

167 
	#IN_CLASSA_NSHIFT
 24

	)

168 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

169 
	#IN_CLASSA_MAX
 128

	)

171 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

172 
	#IN_CLASSB_NET
 0xffff0000

	)

173 
	#IN_CLASSB_NSHIFT
 16

	)

174 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

175 
	#IN_CLASSB_MAX
 65536

	)

177 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

178 
	#IN_CLASSC_NET
 0xffffff00

	)

179 
	#IN_CLASSC_NSHIFT
 8

	)

180 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

182 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

183 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

185 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

186 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

189 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

191 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

193 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

196 
	#IN_LOOPBACKNET
 127

	)

198 #i‚de‡
INADDR_LOOPBACK


199 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

203 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

204 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

205 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

206 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

208 #i‡!
__USE_KERNEL_IPV6_DEFS


210 
	sö6_addr


214 
uöt8_t
 
	m__u6_addr8
[16];

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


216 
uöt16_t
 
	m__u6_addr16
[8];

217 
uöt32_t
 
	m__u6_addr32
[4];

219 } 
	m__ö6_u
;

220 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

221 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


222 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

223 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

228 c⁄° 
ö6_addr
 
ö6addr_™y
;

229 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

230 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

231 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

233 
	#INET_ADDRSTRLEN
 16

	)

234 
	#INET6_ADDRSTRLEN
 46

	)

238 
	ssockaddr_ö


240 
__SOCKADDR_COMMON
 (
sö_
);

241 
ö_p‹t_t
 
	msö_p‹t
;

242 
ö_addr
 
	msö_addr
;

245 
	msö_zîo
[ (
sockaddr
) -

246 
__SOCKADDR_COMMON_SIZE
 -

247  (
ö_p‹t_t
) -

248  (
ö_addr
)];

251 #i‡!
__USE_KERNEL_IPV6_DEFS


253 
	ssockaddr_ö6


255 
__SOCKADDR_COMMON
 (
sö6_
);

256 
ö_p‹t_t
 
	msö6_p‹t
;

257 
uöt32_t
 
	msö6_Êowöfo
;

258 
ö6_addr
 
	msö6_addr
;

259 
uöt32_t
 
	msö6_sc›e_id
;

263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


265 
	sù_mªq


268 
ö_addr
 
	mimr_mu…üddr
;

271 
ö_addr
 
	mimr_öãrÁ˚
;

274 
	sù_mªq_sour˚


277 
ö_addr
 
	mimr_mu…üddr
;

280 
ö_addr
 
	mimr_öãrÁ˚
;

283 
ö_addr
 
	mimr_sour˚addr
;

287 #i‡!
__USE_KERNEL_IPV6_DEFS


289 
	sùv6_mªq


292 
ö6_addr
 
	mùv6mr_mu…üddr
;

295 
	mùv6mr_öãrÁ˚
;

299 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


301 
	sgroup_ªq


304 
uöt32_t
 
	mgr_öãrÁ˚
;

307 
sockaddr_°‹age
 
	mgr_group
;

310 
	sgroup_sour˚_ªq


313 
uöt32_t
 
	mg§_öãrÁ˚
;

316 
sockaddr_°‹age
 
	mg§_group
;

319 
sockaddr_°‹age
 
	mg§_sour˚
;

324 
	sù_msfûãr


327 
ö_addr
 
	mimsf_mu…üddr
;

330 
ö_addr
 
	mimsf_öãrÁ˚
;

333 
uöt32_t
 
	mimsf_fmode
;

336 
uöt32_t
 
	mimsf_num§c
;

338 
ö_addr
 
	mimsf_¶i°
[1];

341 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

342 -  (
ö_addr
) \

343 + (
num§c
Ë*  (
ö_addr
))

	)

345 
	sgroup_fûãr


348 
uöt32_t
 
	mgf_öãrÁ˚
;

351 
sockaddr_°‹age
 
	mgf_group
;

354 
uöt32_t
 
	mgf_fmode
;

357 
uöt32_t
 
	mgf_num§c
;

359 
sockaddr_°‹age
 
	mgf_¶i°
[1];

362 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

363 -  (
sockaddr_°‹age
) \

364 + ((
num§c
) \

365 *  (
sockaddr_°‹age
)))

	)

375 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

376 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

377 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

378 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

379 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

380 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

381 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

383 
	~<ídün.h
>

386 
	~<bôs/byãsw≠.h
>

388 #ifde‡
__OPTIMIZE__


392 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


395 
	#¡ohl
(
x
Ë(x)

	)

396 
	#¡ohs
(
x
Ë(x)

	)

397 
	#ht⁄l
(
x
Ë(x)

	)

398 
	#ht⁄s
(
x
Ë(x)

	)

400 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


401 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

402 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

403 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

404 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

409 #ifde‡
__GNUC__


410 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

411 (
__exãnsi⁄__
 \

412 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

413 
__a
->
s6_addr32
[0] == 0 \

414 && 
__a
->
s6_addr32
[1] == 0 \

415 && 
__a
->
s6_addr32
[2] == 0 \

416 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

418 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

419 (
__exãnsi⁄__
 \

420 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

421 
__a
->
s6_addr32
[0] == 0 \

422 && 
__a
->
s6_addr32
[1] == 0 \

423 && 
__a
->
s6_addr32
[2] == 0 \

424 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

426 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

429 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

431 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

432 (
__exãnsi⁄__
 \

433 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

434 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

436 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

437 (
__exãnsi⁄__
 \

438 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

439 
__a
->
s6_addr32
[0] == 0 \

440 && 
__a
->
s6_addr32
[1] == 0 \

441 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

443 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

444 (
__exãnsi⁄__
 \

445 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

446 
__a
->
s6_addr32
[0] == 0 \

447 && 
__a
->
s6_addr32
[1] == 0 \

448 && 
__a
->
s6_addr32
[2] == 0 \

449 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

451 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

452 (
__exãnsi⁄__
 \

453 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

454 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

455 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

456 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

457 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

458 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

460 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

461 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

462 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

466 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

467 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

468 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

472 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

473 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

474 =
	`ht⁄l
 (0x„800000))

	)

476 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

477 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

478 =
	`ht⁄l
 (0x„c00000))

	)

480 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

481 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

485 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

486 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

487 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

489 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

491 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

492 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

493 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

498 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

500 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


502 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

505 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

506 
__THROW
;

510 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

511 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

512 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

514 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

515 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

516 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

518 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

519 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

520 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

522 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

523 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

524 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

526 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

527 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

528 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

531 #ifde‡
__USE_GNU


532 
cmsghdr
;

534 #i‡!
__USE_KERNEL_IPV6_DEFS


536 
	sö6_pktöfo


538 
ö6_addr
 
ùi6_addr
;

539 
ùi6_ifödex
;

543 
	sù6_mtuöfo


545 
sockaddr_ö6
 
ù6m_addr
;

546 
uöt32_t
 
ù6m_mtu
;

551 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

552 
__THROW
 
__©åibuã_dïªˇãd__
;

553 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

554 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

555 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

556 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

557 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

558 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

559 
__mu…x
, 
__∂usy
)

560 
__THROW
 
__©åibuã_dïªˇãd__
;

561 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

562 
uöt8_t
 **
__çåp
)

563 
__THROW
 
__©åibuã_dïªˇãd__
;

564 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

565 
uöt8_t
 **
__çåp
, 
__ty≥
)

566 
__THROW
 
__©åibuã_dïªˇãd__
;

570 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

571 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

572 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

573 **
__d©abuÂ
Ë
__THROW
;

574 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

575 
__THROW
;

576 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

577 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

578 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

579 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

580 **
__d©abuÂ
Ë
__THROW
;

581 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

582 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

583 **
__d©abuÂ
Ë
__THROW
;

584 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

585 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

589 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

590 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

591 
__£gmíts
Ë
__THROW
;

592 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

593 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

594 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

595 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

596 
__THROW
;

602 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

603 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

604 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

605 
__THROW
;

608 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

609 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

610 
uöt32_t
 
__num§c
,

611 c⁄° 
ö_addr
 *
__¶i°
)

612 
__THROW
;

616 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

617 c⁄° 
sockaddr
 *
__group
,

618 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

619 
uöt32_t
 *
__num§c
,

620 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

623 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

624 c⁄° 
sockaddr
 *
__group
,

625 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

626 
uöt32_t
 
__num§c
,

627 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

630 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

95 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

96 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

115 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


118 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

121 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


127 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


128 #i‡
__WORDSIZE
 == 64

129 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

134 
	#PTHREAD_RWLOCK_INITIALIZER
 \

135 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

136 #ifde‡
__USE_GNU


137 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


138 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

142 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


143 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

144 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

145 0, 0, 0, 0 } }

	)

147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

148 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

149 0 } }

	)

159 
	mPTHREAD_INHERIT_SCHED
,

160 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

161 
	mPTHREAD_EXPLICIT_SCHED


162 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

169 
	mPTHREAD_SCOPE_SYSTEM
,

170 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

171 
	mPTHREAD_SCOPE_PROCESS


172 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

179 
	mPTHREAD_PROCESS_PRIVATE
,

180 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

181 
	mPTHREAD_PROCESS_SHARED


182 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

188 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

192 
	s_±hªad_˛ónup_buf„r


194 (*
	m__routöe
) (*);

195 *
	m__¨g
;

196 
	m__ˇn˚…y≥
;

197 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

203 
	mPTHREAD_CANCEL_ENABLE
,

204 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

205 
	mPTHREAD_CANCEL_DISABLE


206 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

210 
	mPTHREAD_CANCEL_DEFERRED
,

211 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

212 
	mPTHREAD_CANCEL_ASYNCHRONOUS


213 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

215 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

219 
	#PTHREAD_ONCE_INIT
 0

	)

222 #ifde‡
__USE_XOPEN2K


226 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

230 
__BEGIN_DECLS


235 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

236 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

237 *(*
__°¨t_routöe
) (*),

238 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

244 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

252 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

254 #ifde‡
__USE_GNU


257 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

265 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

266 c⁄° 
time•ec
 *
__ab°ime
);

273 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

277 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

280 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

281 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

297 *
__dëach°©e
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

302 
__dëach°©e
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

308 
size_t
 *
__gu¨dsize
)

309 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

312 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

313 
size_t
 
__gu¨dsize
)

314 
__THROW
 
	`__n⁄nuŒ
 ((1));

318 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

319 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

324 c⁄° 
sched_∑øm
 *
__ª°ri˘


325 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

328 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


329 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

337 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__öhîô
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

343 
__öhîô
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

348 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

349 *
__ª°ri˘
 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


358 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

365 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

366 *
__°ackaddr
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

370 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


371 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

378 
size_t
 
__°acksize
)

379 
__THROW
 
	`__n⁄nuŒ
 ((1));

381 #ifde‡
__USE_XOPEN2K


383 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

384 **
__ª°ri˘
 
__°ackaddr
,

385 
size_t
 *
__ª°ri˘
 
__°acksize
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

391 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

392 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

395 #ifde‡
__USE_GNU


398 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

399 
size_t
 
__˝u£tsize
,

400 c⁄° 
˝u_£t_t
 *
__˝u£t
)

401 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

405 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

406 
size_t
 
__˝u£tsize
,

407 
˝u_£t_t
 *
__˝u£t
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((2));

423 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

424 c⁄° 
sched_∑øm
 *
__∑øm
)

425 
__THROW
 
	`__n⁄nuŒ
 ((3));

428 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

429 *
__ª°ri˘
 
__pﬁicy
,

430 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

434 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

435 
__THROW
;

438 #ifde‡
__USE_GNU


440 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

441 
size_t
 
__buÊí
)

442 
__THROW
 
	`__n⁄nuŒ
 ((2));

445 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

446 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 #ifde‡
__USE_UNIX98


452 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

455 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

458 #ifde‡
__USE_GNU


463 
	$±hªad_yõld
 (Ë
__THROW
;

468 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

469 c⁄° 
˝u_£t_t
 *
__˝u£t
)

470 
__THROW
 
	`__n⁄nuŒ
 ((3));

473 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

474 
˝u_£t_t
 *
__˝u£t
)

475 
__THROW
 
	`__n⁄nuŒ
 ((3));

488 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

489 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

500 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

504 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

507 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

512 
	`±hªad_ã°ˇn˚l
 ();

521 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

522 
__mask_was_ßved
;

523 } 
__ˇn˚l_jmp_buf
[1];

524 *
__∑d
[4];

525 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

528 #i‚de‡
__˛ónup_f˘_©åibuã


529 
	#__˛ónup_f˘_©åibuã


	)

534 
	s__±hªad_˛ónup_‰ame


536 (*
__ˇn˚l_routöe
) (*);

537 *
__ˇn˚l_¨g
;

538 
__do_ô
;

539 
__ˇn˚l_ty≥
;

542 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


543 #ifde‡
__˝lu•lus


545 ˛as†
	c__±hªad_˛ónup_˛ass


547 (*
__ˇn˚l_routöe
) (*);

548 *
__ˇn˚l_¨g
;

549 
__do_ô
;

550 
__ˇn˚l_ty≥
;

552 
public
:

553 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

554 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

555 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

556 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

557 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

558 &
__ˇn˚l_ty≥
); 
	}
}

559 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

569 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

571 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

575 
	#±hªad_˛ónup_p›
(
execuã
) \

576 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

577 } 0)

	)

579 #ifde‡
__USE_GNU


583 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

585 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

586 
__˛‰ame
.
	`__de„r
 ()

	)

591 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

592 
__˛‰ame
.
	`__ª°‹e
 (); \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

601 
__exã∫_ölöe
 

602 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

604 i‡(
__‰ame
->
__do_ô
)

605 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

606 
	}
}

615 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

617 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

618 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

619 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

620 .
__do_ô
 = 1 };

	)

624 
	#±hªad_˛ónup_p›
(
execuã
) \

625 
__˛‰ame
.
__do_ô
 = (
execuã
); \

626 } 0)

	)

628 #ifde‡
__USE_GNU


632 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 }; \

638 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

639 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

644 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

645 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

646 
__˛‰ame
.
__do_ô
 = (
execuã
); \

647 } 0)

	)

658 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

660 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

661 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

662 *
__ˇn˚l_¨g
 = (
¨g
); \

663 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

664 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

665 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

667 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

668 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

672 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 dÿ{

	)

674 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

675 
__˛ónup_f˘_©åibuã
;

679 
	#±hªad_˛ónup_p›
(
execuã
) \

682 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

683 i‡(
execuã
) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 } 0)

	)

686 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

687 
__˛ónup_f˘_©åibuã
;

689 #ifde‡
__USE_GNU


693 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

695 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

696 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

697 *
__ˇn˚l_¨g
 = (
¨g
); \

698 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

699 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

700 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

702 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

703 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

707 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

708 dÿ{

	)

709 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
;

715 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

718 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

719 i‡(
execuã
) \

720 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

721 
	}
} 0)

	)

722 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

723 
__˛ónup_f˘_©åibuã
;

727 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

728 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

729 #i‚de‡
SHARED


730 
	`__©åibuã__
 ((
__wók__
))

736 
__jmp_buf_èg
;

737 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

743 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

744 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

745 
__THROW
 
	`__n⁄nuŒ
 ((1));

748 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

749 
__THROW
 
	`__n⁄nuŒ
 ((1));

752 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

753 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

756 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

757 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

759 #ifde‡
__USE_XOPEN2K


761 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

762 c⁄° 
time•ec
 *
__ª°ri˘


763 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

767 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

768 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

772 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

773 
__ª°ri˘
 
__muãx
,

774 *
__ª°ri˘
 
__¥io˚ûög
)

775 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

779 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

780 
__¥io˚ûög
,

781 *
__ª°ri˘
 
__ﬁd_˚ûög
)

782 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

785 #ifde‡
__USE_XOPEN2K8


787 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1));

789 #ifde‡
__USE_GNU


790 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1));

804 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

809 
__ª°ri˘
 
__©å
,

810 *
__ª°ri˘
 
__psh¨ed
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

814 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

815 
__psh¨ed
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1));

818 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


820 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


821 
__©å
, *
__ª°ri˘
 
__köd
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

827 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1));

832 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

833 
__ª°ri˘
 
__©å
,

834 *
__ª°ri˘
 
__¥Ÿocﬁ
)

835 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

839 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

840 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

845 
__ª°ri˘
 
__©å
,

846 *
__ª°ri˘
 
__¥io˚ûög
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

850 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

851 
__¥io˚ûög
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1));

854 #ifde‡
__USE_XOPEN2K


856 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

857 *
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

861 *
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

866 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

867 
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifde‡
__USE_GNU


870 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

871 
__robu°√ss
)

872 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


884 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

887 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

888 
__THROW
 
	`__n⁄nuŒ
 ((1));

891 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

892 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

895 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

896 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

898 #ifde‡
__USE_XOPEN2K


900 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

901 c⁄° 
time•ec
 *
__ª°ri˘


902 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

906 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

907 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

911 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2K


915 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

916 c⁄° 
time•ec
 *
__ª°ri˘


917 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

921 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

922 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

928 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1));

932 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

933 
__THROW
 
	`__n⁄nuŒ
 ((1));

936 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

937 
__ª°ri˘
 
__©å
,

938 *
__ª°ri˘
 
__psh¨ed
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

942 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

943 
__psh¨ed
)

944 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

948 
__ª°ri˘
 
__©å
,

949 *
__ª°ri˘
 
__¥ef
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

953 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

954 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

962 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

963 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

964 
__THROW
 
	`__n⁄nuŒ
 ((1));

967 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

968 
__THROW
 
	`__n⁄nuŒ
 ((1));

971 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

972 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

975 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

976 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

984 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

985 
	`__n⁄nuŒ
 ((1, 2));

994 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

995 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

996 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

997 
	`__n⁄nuŒ
 ((1, 2, 3));

1002 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1));

1006 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1007 
__THROW
 
	`__n⁄nuŒ
 ((1));

1010 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1011 
__ª°ri˘
 
__©å
,

1012 *
__ª°ri˘
 
__psh¨ed
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1016 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1017 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1019 #ifde‡
__USE_XOPEN2K


1021 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1022 
__ª°ri˘
 
__©å
,

1023 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1027 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1028 
__˛ockid_t
 
__˛ock_id
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1033 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1));

1042 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1043 
__THROW
 
	`__n⁄nuŒ
 ((1));

1046 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1047 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1051 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1055 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1063 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1064 
__©å
, 
__cou¡
)

1065 
__THROW
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1069 
__THROW
 
	`__n⁄nuŒ
 ((1));

1072 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1073 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1077 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1));

1081 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1086 
__ª°ri˘
 
__©å
,

1087 *
__ª°ri˘
 
__psh¨ed
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1091 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1092 
__psh¨ed
)

1093 
__THROW
 
	`__n⁄nuŒ
 ((1));

1105 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1106 (*
__de°r_fun˘i⁄
) (*))

1107 
__THROW
 
	`__n⁄nuŒ
 ((1));

1110 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1113 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1116 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1117 c⁄° *
__poöãr
Ë
__THROW
 ;

1120 #ifde‡
__USE_XOPEN2K


1122 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1123 
__˛ockid_t
 *
__˛ock_id
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((2));

1139 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1140 (*
__∑ª¡
) (),

1141 (*
__chûd
Ë()Ë
__THROW
;

1144 #ifde‡
__USE_EXTERN_INLINES


1146 
__exã∫_ölöe
 

1147 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1149  
__thªad1
 =
__thªad2
;

1150 
	}
}

1153 
	g__END_DECLS


	@/usr/include/search.h

19 #i‚de‡
_SEARCH_H


20 
	#_SEARCH_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


29 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


33 #ifde‡
__USE_GNU


34 
	sqñem


36 
qñem
 *
	mq_f‹w
;

37 
qñem
 *
	mq_back
;

38 
	mq_d©a
[1];

44 
	$ösque
 (*
__ñem
, *
__¥ev
Ë
__THROW
;

47 
	$ªmque
 (*
__ñem
Ë
__THROW
;

52 #i‚de‡
__COMPAR_FN_T


53 
	#__COMPAR_FN_T


	)

54 (*
	t__com∑r_‚_t
) (const *, const *);

56 #ifdef 
__USE_GNU


57 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

64 
FIND
,

65 
ENTER


67 
	tACTION
;

69 
	síåy


71 *
key
;

72 *
d©a
;

74 
	tENTRY
;

77 
_ENTRY
;

87 
ENTRY
 *
	$h£¨ch
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
Ë
__THROW
;

90 
	$h¸óã
 (
size_t
 
__√l
Ë
__THROW
;

93 
	$hde°roy
 (Ë
__THROW
;

95 #ifde‡
__USE_GNU


97 
	sh£¨ch_d©a


99 
_ENTRY
 *
èbÀ
;

100 
size
;

101 
fûÀd
;

106 
	$h£¨ch_r
 (
ENTRY
 
__ôem
, 
ACTION
 
__a˘i⁄
, ENTRY **
__ªtvÆ
,

107 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

108 
	$h¸óã_r
 (
size_t
 
__√l
, 
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

109 
	$hde°roy_r
 (
h£¨ch_d©a
 *
__hèb
Ë
__THROW
;

120 
¥e‹dî
,

121 
po°‹dî
,

122 
íd‹dî
,

123 
Àaf


125 
	tVISIT
;

129 *
	`t£¨ch
 (c⁄° *
__key
, **
__roŸp
,

130 
__com∑r_‚_t
 
__com∑r
);

134 *
	`tföd
 (c⁄° *
__key
, *c⁄° *
__roŸp
,

135 
__com∑r_‚_t
 
__com∑r
);

138 *
	`tdñëe
 (c⁄° *
__ª°ri˘
 
__key
,

139 **
__ª°ri˘
 
__roŸp
,

140 
__com∑r_‚_t
 
__com∑r
);

142 #i‚de‡
__ACTION_FN_T


143 
	#__ACTION_FN_T


	)

144 (*
	t__a˘i⁄_‚_t
Ë(c⁄° *
	t__nodï
, 
	tVISIT
 
	t__vÆue
,

145 
	t__Àvñ
);

150 
	`twÆk
 (c⁄° *
__roŸ
, 
__a˘i⁄_‚_t
 
__a˘i⁄
);

152 #ifde‡
__USE_GNU


155 (*
	t__‰ì_‚_t
Ë(*
	t__nodï
);

158 
	`tde°roy
 (*
__roŸ
, 
__‰ì_‚_t
 
__‰ìf˘
);

164 *
	`lföd
 (c⁄° *
__key
, c⁄° *
__ba£
,

165 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

169 *
	`l£¨ch
 (c⁄° *
__key
, *
__ba£
,

170 
size_t
 *
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
);

172 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

169 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

171 #ifde‡
__FAVOR_BSD


174 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 #ifde‡
__USE_XOPEN


177 #ifde‡
__GNUC__


178 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

181 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

187 #ifde‡
__USE_BSD


194 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

197 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

200 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

203 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

207 #ifde‡
__USE_MISC


208 
	#NSIG
 
_NSIG


	)

211 #ifde‡
__USE_GNU


212 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

216 #ifde‡
__USE_BSD


217 
__sigh™dÀr_t
 
	tsig_t
;

220 #ifde‡
__USE_POSIX


223 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

229 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

232 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__USE_GNU


240 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

243 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

244 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

247 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

248 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

253 
	~<bôs/siga˘i⁄.h
>

256 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

257 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

264 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

267 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

268 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

271 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

278 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

279 
	`__n⁄nuŒ
 ((1, 2));

281 #ifde‡
__USE_POSIX199309


286 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

294 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

295 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

296 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

297 
	`__n⁄nuŒ
 ((1));

301 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

302 
__THROW
;

307 #ifde‡
__USE_BSD


311 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

312 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

315 
	ssigvec


317 
__sigh™dÀr_t
 
sv_h™dÀr
;

318 
sv_mask
;

320 
sv_Êags
;

321 
	#sv_⁄°ack
 
sv_Êags


	)

325 
	#SV_ONSTACK
 (1 << 0)

	)

326 
	#SV_INTERRUPT
 (1 << 1)

	)

327 
	#SV_RESETHAND
 (1 << 2)

	)

335 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

336 
sigvec
 *
__ovec
Ë
__THROW
;

340 
	~<bôs/sigc⁄ãxt.h
>

343 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


349 
	#__√ed_size_t


	)

350 
	~<°ddef.h
>

355 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

357 
	~<bôs/sig°ack.h
>

358 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


360 
	~<sys/uc⁄ãxt.h
>

366 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

367 
__THROW
 
__©åibuã_dïªˇãd__
;

371 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

372 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

376 #ifde‡
__USE_XOPEN_EXTENDED


380 
	$sighﬁd
 (
__sig
Ë
__THROW
;

383 
	$sigªl£
 (
__sig
Ë
__THROW
;

386 
	$sigign‹e
 (
__sig
Ë
__THROW
;

389 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

392 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


395 
	~<bôs/±hªadty≥s.h
>

396 
	~<bôs/sigthªad.h
>

403 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

405 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

409 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

283 
	#INT8_C
(
c
Ë
	)
c

284 
	#INT16_C
(
c
Ë
	)
c

285 
	#INT32_C
(
c
Ë
	)
c

286 #i‡
__WORDSIZE
 == 64

287 
	#INT64_C
(
c
Ë¯## 
L


	)

289 
	#INT64_C
(
c
Ë¯## 
LL


	)

293 
	#UINT8_C
(
c
Ë
	)
c

294 
	#UINT16_C
(
c
Ë
	)
c

295 
	#UINT32_C
(
c
Ë¯## 
U


	)

296 #i‡
__WORDSIZE
 == 64

297 
	#UINT64_C
(
c
Ë¯## 
UL


	)

299 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#INTMAX_C
(
c
Ë¯## 
L


	)

305 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

307 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

308 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__a
;

422 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

423 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

424 
	$î™d48_r
 (
__xsubi
[3],

425 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

426 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

429 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

430 *
__ª°ri˘
 
__ªsu…
)

431 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

432 
	$ƒ™d48_r
 (
__xsubi
[3],

433 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

434 *
__ª°ri˘
 
__ªsu…
)

435 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

439 *
__ª°ri˘
 
__ªsu…
)

440 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

441 
	$jønd48_r
 (
__xsubi
[3],

442 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

443 *
__ª°ri˘
 
__ªsu…
)

444 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

450 
	$£ed48_r
 (
__£ed16v
[3],

451 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$lc⁄g48_r
 (
__∑øm
[7],

454 
dønd48_d©a
 *
__buf„r
)

455 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

461 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


462 
	#__mÆloc_™d_ˇŒoc_deföed


	)

463 
__BEGIN_NAMESPACE_STD


465 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

467 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

468 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

469 
__END_NAMESPACE_STD


472 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


473 
__BEGIN_NAMESPACE_STD


479 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

480 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

482 
	$‰ì
 (*
__±r
Ë
__THROW
;

483 
__END_NAMESPACE_STD


485 #ifdef 
__USE_MISC


487 
	$c‰ì
 (*
__±r
Ë
__THROW
;

490 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


491 
	~<Æloˇ.h
>

494 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

495 || 
deföed
 
__USE_BSD


497 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

500 #ifde‡
__USE_XOPEN2K


502 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

503 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

506 #ifde‡
__USE_ISOC11


508 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
__wur
 
	`__©åibuã__
 ((
__mÆloc__
, 
	`__Æloc_size__
 (2)));

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


522 #ifde‡
__˝lu•lus


523 "C++" 
	`©_quick_exô
 ((*
__func
) ())

524 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

526 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

529 
__END_NAMESPACE_STD


531 #ifdef 
__USE_MISC


534 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

535 
__THROW
 
	`__n⁄nuŒ
 ((1));

538 
__BEGIN_NAMESPACE_STD


542 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

544 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


548 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

550 
__END_NAMESPACE_STD


552 #ifde‡
__USE_ISOC99


553 
__BEGIN_NAMESPACE_C99


556 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

557 
__END_NAMESPACE_C99


561 
__BEGIN_NAMESPACE_STD


563 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

564 
__END_NAMESPACE_STD


566 #ifde‡
__USE_GNU


569 *
	$£cuª_gëív
 (c⁄° *
__«me
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

573 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


577 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

580 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


583 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

584 
__THROW
 
	`__n⁄nuŒ
 ((2));

587 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

590 #ifdef 
__USE_MISC


594 
	$˛óªnv
 (Ë
__THROW
;

598 #i‡
deföed
 
__USE_MISC
 \

599 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

605 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

609 || 
deföed
 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

760 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

761 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

762 #ifde‡
__USE_GNU


763 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

764 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

765 
	`__n⁄nuŒ
 ((1, 4));

770 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

771 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
__END_NAMESPACE_STD


774 #ifde‡
__USE_ISOC99


775 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

776 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

780 
__BEGIN_NAMESPACE_STD


784 
div_t
 
	$div
 (
__numî
, 
__díom
)

785 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

786 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

787 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

788 
__END_NAMESPACE_STD


790 #ifde‡
__USE_ISOC99


791 
__BEGIN_NAMESPACE_C99


792 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

793 
__díom
)

794 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

795 
__END_NAMESPACE_C99


799 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

800 || 
deföed
 
__USE_SVID


807 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

808 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

813 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

814 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

819 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

820 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

823 #ifde‡
__USE_MISC


825 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

826 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

828 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

829 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

830 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

831 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

837 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

838 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

839 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

840 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

841 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

842 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

845 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

846 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

847 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

856 
__BEGIN_NAMESPACE_STD


859 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

862 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

863 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

866 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

870 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

871 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

874 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

875 
__THROW
;

876 
__END_NAMESPACE_STD


879 #ifde‡
__USE_SVID


884 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

888 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


895 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

896 *c⁄° *
__ª°ri˘
 
__tokís
,

897 **
__ª°ri˘
 
__vÆuï
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

902 #ifde‡
__USE_XOPEN


904 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

910 #ifde‡
__USE_XOPEN2KXSI


912 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

915 #ifde‡
__USE_XOPEN


920 
	$gø¡±
 (
__fd
Ë
__THROW
;

924 
	$u∆ock±
 (
__fd
Ë
__THROW
;

929 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

932 #ifde‡
__USE_GNU


936 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

937 
__THROW
 
	`__n⁄nuŒ
 ((2));

940 
	`gë±
 ();

943 #ifde‡
__USE_BSD


947 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

951 
	~<bôs/°dlib-Êﬂt.h
>

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifde‡
__GNUC__


526 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

527 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

532 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

533 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

536 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 #ifdef 
__USE_GNU


543 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

544 
__loˇÀ_t
 
__loc
)

545 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

547 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

548 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

552 #ifdef 
__USE_BSD


555 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

556 c⁄° *
__ª°ri˘
 
__dñim
)

557 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 #ifdef 
__USE_XOPEN2K8


562 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

565 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

567 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

576 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #ifdef 
__USE_GNU


582 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

583 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

586 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‚de‡
ba£«me


596 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


597 "C++" *
	$ba£«me
 (*
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

602 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

608 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

609 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

610 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


630 
	~<bôs/°rög.h
>

633 
	~<bôs/°rög2.h
>

636 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


638 
	~<bôs/°rög3.h
>

642 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 c⁄° 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

30 #ifde‡
__USE_GNU


32 
	~<bôs/sig£t.h
>

39 
	~<bôs/sockë.h
>

41 #ifde‡
__USE_BSD


44 
	sosockaddr


46 
	mß_Ámûy
;

47 
	mß_d©a
[14];

55 
	mSHUT_RD
 = 0,

56 
	#SHUT_RD
 
SHUT_RD


	)

57 
	mSHUT_WR
,

58 
	#SHUT_WR
 
SHUT_WR


	)

59 
	mSHUT_RDWR


60 
	#SHUT_RDWR
 
SHUT_RDWR


	)

69 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


70 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

71 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

75 
	#__SOCKADDR_ALLTYPES
 \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


94 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

95 uni⁄ { 
	m__SOCKADDR_ALLTYPES


96 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

97 #unde‡
__SOCKADDR_ONETYPE


100 #ifde‡
__USE_GNU


102 
	smmsghdr


104 
msghdr
 
	mmsg_hdr
;

105 
	mmsg_Àn
;

114 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

120 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

121 
__fds
[2]Ë
__THROW
;

124 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

125 
__THROW
;

128 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

138 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

142 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

143 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

150 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

157 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

164 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

165 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

166 
sockÀn_t
 
__addr_Àn
);

175 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

176 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

177 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

185 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

186 
__Êags
);

188 #ifde‡
__USE_GNU


194 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

195 
__vÀn
, 
__Êags
);

203 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

205 #ifde‡
__USE_GNU


211 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

212 
__vÀn
, 
__Êags
,

213 c⁄° 
time•ec
 *
__tmo
);

220 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

221 *
__ª°ri˘
 
__›tvÆ
,

222 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

227 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

228 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

234 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

244 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

245 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

247 #ifde‡
__USE_GNU


252 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

253 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

262 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

265 #ifde‡
__USE_XOPEN2K


267 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

271 #ifde‡
__USE_MISC


275 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

280 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


281 
	~<bôs/sockë2.h
>

284 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

31 || 
deföed
 
	g__USE_ATFILE


32 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


33 
	#__√ed_time_t


	)

35 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


36 
	#__√ed_time•ec


	)

38 
	~<time.h
>

41 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


44 #i‚de‡
__dev_t_deföed


45 
__dev_t
 
	tdev_t
;

46 
	#__dev_t_deföed


	)

49 #i‚de‡
__gid_t_deföed


50 
__gid_t
 
	tgid_t
;

51 
	#__gid_t_deföed


	)

54 #i‚de‡
__öo_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__öo_t
 
	töo_t
;

58 
__öo64_t
 
	töo_t
;

60 
	#__öo_t_deföed


	)

63 #i‚de‡
__mode_t_deföed


64 
__mode_t
 
	tmode_t
;

65 
	#__mode_t_deföed


	)

68 #i‚de‡
__∆ök_t_deföed


69 
__∆ök_t
 
	t∆ök_t
;

70 
	#__∆ök_t_deföed


	)

73 #i‚de‡
__off_t_deföed


74 #i‚de‡
__USE_FILE_OFFSET64


75 
__off_t
 
	toff_t
;

77 
__off64_t
 
	toff_t
;

79 
	#__off_t_deföed


	)

82 #i‚de‡
__uid_t_deföed


83 
__uid_t
 
	tuid_t
;

84 
	#__uid_t_deföed


	)

88 #ifde‡
__USE_UNIX98


89 #i‚de‡
__blk˙t_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__blk˙t_t
 
	tblk˙t_t
;

93 
__blk˙t64_t
 
	tblk˙t_t
;

95 
	#__blk˙t_t_deföed


	)

98 #i‚de‡
__blksize_t_deföed


99 
__blksize_t
 
	tblksize_t
;

100 
	#__blksize_t_deföed


	)

104 
	g__BEGIN_DECLS


106 
	~<bôs/°©.h
>

108 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


109 
	#S_IFMT
 
__S_IFMT


	)

110 
	#S_IFDIR
 
__S_IFDIR


	)

111 
	#S_IFCHR
 
__S_IFCHR


	)

112 
	#S_IFBLK
 
__S_IFBLK


	)

113 
	#S_IFREG
 
__S_IFREG


	)

114 #ifde‡
__S_IFIFO


115 
	#S_IFIFO
 
__S_IFIFO


	)

117 #ifde‡
__S_IFLNK


118 
	#S_IFLNK
 
__S_IFLNK


	)

120 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

121 && 
deföed
 
	g__S_IFSOCK


122 
	#S_IFSOCK
 
__S_IFSOCK


	)

128 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

130 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

131 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

132 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

133 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

134 #ifde‡
__S_IFIFO


135 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

137 #ifde‡
__S_IFLNK


138 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

141 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


142 
	#S_ISLNK
(
mode
Ë0

	)

145 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

146 && 
deföed
 
	g__S_IFSOCK


147 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

148 #ñi‡
deföed
 
__USE_XOPEN2K


149 
	#S_ISSOCK
(
mode
Ë0

	)

156 #ifdef 
__USE_POSIX199309


157 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

158 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

159 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

165 
	#S_ISUID
 
__S_ISUID


	)

166 
	#S_ISGID
 
__S_ISGID


	)

168 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


170 
	#S_ISVTX
 
__S_ISVTX


	)

173 
	#S_IRUSR
 
__S_IREAD


	)

174 
	#S_IWUSR
 
__S_IWRITE


	)

175 
	#S_IXUSR
 
__S_IEXEC


	)

177 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

179 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


180 
	#S_IREAD
 
S_IRUSR


	)

181 
	#S_IWRITE
 
S_IWUSR


	)

182 
	#S_IEXEC
 
S_IXUSR


	)

185 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

186 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

187 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

189 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

191 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

192 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

193 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

195 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

198 #ifdef 
__USE_BSD


200 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

201 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

202 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

204 
	#S_BLKSIZE
 512

	)

208 #i‚de‡
__USE_FILE_OFFSET64


210 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

211 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

215 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

217 #ifde‡
__REDIRECT_NTH


218 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

219 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

220 
	`__n⁄nuŒ
 ((1, 2));

221 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

222 
	`__n⁄nuŒ
 ((2));

224 
	#°©
 
°©64


	)

225 
	#f°©
 
f°©64


	)

228 #ifde‡
__USE_LARGEFILE64


229 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

230 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

231 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

234 #ifde‡
__USE_ATFILE


238 #i‚de‡
__USE_FILE_OFFSET64


239 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

240 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

243 #ifde‡
__REDIRECT_NTH


244 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

245 
°©
 *
__ª°ri˘
 
__buf
,

246 
__Êag
),

247 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

249 
	#f°©©
 
f°©©64


	)

253 #ifde‡
__USE_LARGEFILE64


254 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

255 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

256 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

260 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


261 #i‚de‡
__USE_FILE_OFFSET64


264 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

265 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

267 #ifde‡
__REDIRECT_NTH


268 
	`__REDIRECT_NTH
 (
l°©
,

269 (c⁄° *
__ª°ri˘
 
__fûe
,

270 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

271 
	`__n⁄nuŒ
 ((1, 2));

273 
	#l°©
 
l°©64


	)

276 #ifde‡
__USE_LARGEFILE64


277 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

278 
°©64
 *
__ª°ri˘
 
__buf
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

285 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

286 
__THROW
 
	`__n⁄nuŒ
 ((1));

288 #ifde‡
__USE_BSD


292 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


298 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

301 #ifde‡
__USE_ATFILE


304 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

305 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

315 #ifdef 
__USE_GNU


318 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

322 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

325 #ifde‡
__USE_ATFILE


329 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

330 
__THROW
 
	`__n⁄nuŒ
 ((2));

336 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


337 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

338 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 #ifde‡
__USE_ATFILE


344 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

345 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

351 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

354 #ifde‡
__USE_ATFILE


358 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2));

362 #ifde‡
__USE_ATFILE


365 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

366 c⁄° 
time•ec
 
__times
[2],

367 
__Êags
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2));

371 #ifde‡
__USE_XOPEN2K8


373 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

391 #i‚de‡
_STAT_VER


392 
	#_STAT_VER
 0

	)

394 #i‚de‡
_MKNOD_VER


395 
	#_MKNOD_VER
 0

	)

399 #i‚de‡
__USE_FILE_OFFSET64


400 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

401 
__THROW
 
	`__n⁄nuŒ
 ((3));

402 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

406 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

407 
°©
 *
__°©_buf
, 
__Êag
)

408 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

410 #ifde‡
__REDIRECT_NTH


411 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

412 
°©
 *
__°©_buf
), 
__fx°©64
)

413 
	`__n⁄nuŒ
 ((3));

414 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

415 
°©
 *
__°©_buf
), 
__x°©64
)

416 
	`__n⁄nuŒ
 ((2, 3));

417 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

418 
°©
 *
__°©_buf
), 
__lx°©64
)

419 
	`__n⁄nuŒ
 ((2, 3));

420 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

421 c⁄° *
__fûíame
,

422 
°©
 *
__°©_buf
, 
__Êag
),

423 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

426 
	#__fx°©
 
__fx°©64


	)

427 
	#__x°©
 
__x°©64


	)

428 
	#__lx°©
 
__lx°©64


	)

432 #ifde‡
__USE_LARGEFILE64


433 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

434 
__THROW
 
	`__n⁄nuŒ
 ((3));

435 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

439 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

440 
°©64
 *
__°©_buf
, 
__Êag
)

441 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

443 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

444 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

447 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

448 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

450 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


453 
__exã∫_ölöe
 

454 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

456  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

457 
	}
}

459 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


460 
__exã∫_ölöe
 

461 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

463  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

464 
	}
}

467 
__exã∫_ölöe
 

468 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

470  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

471 
	}
}

473 #ifde‡
__USE_ATFILE


474 
__exã∫_ölöe
 

475 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

476 
__Êag
))

478  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

479 
	}
}

482 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


483 
__exã∫_ölöe
 

484 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

486  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

487 
	}
}

490 #ifde‡
__USE_ATFILE


491 
__exã∫_ölöe
 

492 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

493 
__dev_t
 
__dev
))

495  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

496 
	}
}

499 #i‡
deföed
 
__USE_LARGEFILE64
 \

500 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

501 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

502 
__exã∫_ölöe
 

503 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

505  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

506 
	}
}

508 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


509 
__exã∫_ölöe
 

510 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

512  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

513 
	}
}

516 
__exã∫_ölöe
 

517 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

519  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

520 
	}
}

522 #ifde‡
__USE_ATFILE


523 
__exã∫_ölöe
 

524 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

525 
__Êag
))

527  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

528 
	}
}

535 
	g__END_DECLS


	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20 
	#_SYS_TIME_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_time_t


	)

26 
	~<time.h
>

27 
	#__√ed_timevÆ


	)

28 
	~<bôs/time.h
>

30 
	~<sys/£À˘.h
>

32 #i‚de‡
__su£c⁄ds_t_deföed


33 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

34 
	#__su£c⁄ds_t_deföed


	)

38 
	g__BEGIN_DECLS


40 #ifde‡
__USE_GNU


42 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 }

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

47 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

48 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

49 }

	)

53 #ifde‡
__USE_BSD


56 
	stimez⁄e


58 
	mtz_möuãswe°
;

59 
	mtz_d°time
;

62 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

64 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

72 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

73 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

75 #ifde‡
__USE_BSD


78 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

79 c⁄° 
timez⁄e
 *
__tz
)

80 
__THROW
;

86 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

87 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

92 
	e__ôimî_which


95 
ITIMER_REAL
 = 0,

96 
	#ITIMER_REAL
 
ITIMER_REAL


	)

98 
ITIMER_VIRTUAL
 = 1,

99 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

102 
ITIMER_PROF
 = 2

103 
	#ITIMER_PROF
 
ITIMER_PROF


	)

108 
	sôimîvÆ


111 
timevÆ
 
ô_öãrvÆ
;

113 
timevÆ
 
ô_vÆue
;

116 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


119 
__ôimî_which
 
	t__ôimî_which_t
;

121 
	t__ôimî_which_t
;

126 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

127 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

132 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

133 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

134 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

139 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

140 
__THROW
 
	`__n⁄nuŒ
 ((1));

142 #ifde‡
__USE_BSD


144 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

145 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

151 #ifde‡
__USE_GNU


155 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

156 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

160 #ifde‡
__USE_BSD


163 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

164 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

165 
	#timîcmp
(
a
, 
b
, 
CMP
) \

166 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

167 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

168 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

169 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

171 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

172 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

173 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

175 ++(
ªsu…
)->
tv_£c
; \

176 (
ªsu…
)->
tv_u£c
 -= 1000000; \

178 
	}
} 0)

	)

179 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

181 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

182 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

183 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

184 --(
ªsu…
)->
tv_£c
; \

185 (
ªsu…
)->
tv_u£c
 += 1000000; \

187 } 0)

	)

190 
	g__END_DECLS


	@/usr/include/sys/timerfd.h

18 #i‚def 
_SYS_TIMERFD_H


19 
	#_SYS_TIMERFD_H
 1

	)

21 
	~<time.h
>

24 
	~<bôs/timîfd.h
>

30 
	mTFD_TIMER_ABSTIME
 = 1 << 0

31 
	#TFD_TIMER_ABSTIME
 
TFD_TIMER_ABSTIME


	)

35 
__BEGIN_DECLS


38 
	$timîfd_¸óã
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
Ë
__THROW
;

43 
	$timîfd_£âime
 (
__ufd
, 
__Êags
,

44 c⁄° 
ôimî•ec
 *
__utmr
,

45 
ôimî•ec
 *
__Ÿmr
Ë
__THROW
;

48 
	$timîfd_gëtime
 (
__ufd
, 
ôimî•ec
 *
__Ÿmr
Ë
__THROW
;

50 
__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

167 #ñi‡
__GLIBC_HAVE_LONG_LONG


168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

178 #ñi‡
__GLIBC_HAVE_LONG_LONG


179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

137 #ñi‡
__GLIBC_HAVE_LONG_LONG


138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

20 #i‚de‡
_UNISTD_H


27 
	m_PC_LINK_MAX
,

28 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

29 
	m_PC_MAX_CANON
,

30 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

31 
	m_PC_MAX_INPUT
,

32 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

33 
	m_PC_NAME_MAX
,

34 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

35 
	m_PC_PATH_MAX
,

36 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

37 
	m_PC_PIPE_BUF
,

38 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

39 
	m_PC_CHOWN_RESTRICTED
,

40 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

41 
	m_PC_NO_TRUNC
,

42 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

43 
	m_PC_VDISABLE
,

44 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

45 
	m_PC_SYNC_IO
,

46 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

47 
	m_PC_ASYNC_IO
,

48 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

49 
	m_PC_PRIO_IO
,

50 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

51 
	m_PC_SOCK_MAXBUF
,

52 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

53 
	m_PC_FILESIZEBITS
,

54 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

55 
	m_PC_REC_INCR_XFER_SIZE
,

56 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

57 
	m_PC_REC_MAX_XFER_SIZE
,

58 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

59 
	m_PC_REC_MIN_XFER_SIZE
,

60 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

61 
	m_PC_REC_XFER_ALIGN
,

62 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

63 
	m_PC_ALLOC_SIZE_MIN
,

64 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

65 
	m_PC_SYMLINK_MAX
,

66 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

67 
	m_PC_2_SYMLINKS


68 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

74 
	m_SC_ARG_MAX
,

75 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

76 
	m_SC_CHILD_MAX
,

77 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

78 
	m_SC_CLK_TCK
,

79 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

80 
	m_SC_NGROUPS_MAX
,

81 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

82 
	m_SC_OPEN_MAX
,

83 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

84 
	m_SC_STREAM_MAX
,

85 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

86 
	m_SC_TZNAME_MAX
,

87 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

88 
	m_SC_JOB_CONTROL
,

89 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

90 
	m_SC_SAVED_IDS
,

91 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

92 
	m_SC_REALTIME_SIGNALS
,

93 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

94 
	m_SC_PRIORITY_SCHEDULING
,

95 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

96 
	m_SC_TIMERS
,

97 
	#_SC_TIMERS
 
_SC_TIMERS


	)

98 
	m_SC_ASYNCHRONOUS_IO
,

99 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

100 
	m_SC_PRIORITIZED_IO
,

101 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

102 
	m_SC_SYNCHRONIZED_IO
,

103 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

104 
	m_SC_FSYNC
,

105 
	#_SC_FSYNC
 
_SC_FSYNC


	)

106 
	m_SC_MAPPED_FILES
,

107 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

108 
	m_SC_MEMLOCK
,

109 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

110 
	m_SC_MEMLOCK_RANGE
,

111 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

112 
	m_SC_MEMORY_PROTECTION
,

113 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

114 
	m_SC_MESSAGE_PASSING
,

115 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

116 
	m_SC_SEMAPHORES
,

117 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

118 
	m_SC_SHARED_MEMORY_OBJECTS
,

119 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

120 
	m_SC_AIO_LISTIO_MAX
,

121 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

122 
	m_SC_AIO_MAX
,

123 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

124 
	m_SC_AIO_PRIO_DELTA_MAX
,

125 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

126 
	m_SC_DELAYTIMER_MAX
,

127 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

128 
	m_SC_MQ_OPEN_MAX
,

129 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

130 
	m_SC_MQ_PRIO_MAX
,

131 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

132 
	m_SC_VERSION
,

133 
	#_SC_VERSION
 
_SC_VERSION


	)

134 
	m_SC_PAGESIZE
,

135 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

136 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

137 
	m_SC_RTSIG_MAX
,

138 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

139 
	m_SC_SEM_NSEMS_MAX
,

140 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

141 
	m_SC_SEM_VALUE_MAX
,

142 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

143 
	m_SC_SIGQUEUE_MAX
,

144 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

145 
	m_SC_TIMER_MAX
,

146 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

150 
	m_SC_BC_BASE_MAX
,

151 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

152 
	m_SC_BC_DIM_MAX
,

153 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

154 
	m_SC_BC_SCALE_MAX
,

155 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

156 
	m_SC_BC_STRING_MAX
,

157 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

158 
	m_SC_COLL_WEIGHTS_MAX
,

159 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

160 
	m_SC_EQUIV_CLASS_MAX
,

161 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

162 
	m_SC_EXPR_NEST_MAX
,

163 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

164 
	m_SC_LINE_MAX
,

165 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

166 
	m_SC_RE_DUP_MAX
,

167 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

168 
	m_SC_CHARCLASS_NAME_MAX
,

169 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

171 
	m_SC_2_VERSION
,

172 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

173 
	m_SC_2_C_BIND
,

174 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

175 
	m_SC_2_C_DEV
,

176 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

177 
	m_SC_2_FORT_DEV
,

178 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

179 
	m_SC_2_FORT_RUN
,

180 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

181 
	m_SC_2_SW_DEV
,

182 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

183 
	m_SC_2_LOCALEDEF
,

184 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

186 
	m_SC_PII
,

187 
	#_SC_PII
 
_SC_PII


	)

188 
	m_SC_PII_XTI
,

189 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

190 
	m_SC_PII_SOCKET
,

191 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

192 
	m_SC_PII_INTERNET
,

193 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

194 
	m_SC_PII_OSI
,

195 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

196 
	m_SC_POLL
,

197 
	#_SC_POLL
 
_SC_POLL


	)

198 
	m_SC_SELECT
,

199 
	#_SC_SELECT
 
_SC_SELECT


	)

200 
	m_SC_UIO_MAXIOV
,

201 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

202 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

203 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

204 
	m_SC_PII_INTERNET_STREAM
,

205 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

206 
	m_SC_PII_INTERNET_DGRAM
,

207 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

208 
	m_SC_PII_OSI_COTS
,

209 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

210 
	m_SC_PII_OSI_CLTS
,

211 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

212 
	m_SC_PII_OSI_M
,

213 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

214 
	m_SC_T_IOV_MAX
,

215 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

218 
	m_SC_THREADS
,

219 
	#_SC_THREADS
 
_SC_THREADS


	)

220 
	m_SC_THREAD_SAFE_FUNCTIONS
,

221 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

222 
	m_SC_GETGR_R_SIZE_MAX
,

223 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

224 
	m_SC_GETPW_R_SIZE_MAX
,

225 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

226 
	m_SC_LOGIN_NAME_MAX
,

227 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

228 
	m_SC_TTY_NAME_MAX
,

229 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

230 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

231 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

232 
	m_SC_THREAD_KEYS_MAX
,

233 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

234 
	m_SC_THREAD_STACK_MIN
,

235 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

236 
	m_SC_THREAD_THREADS_MAX
,

237 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

238 
	m_SC_THREAD_ATTR_STACKADDR
,

239 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

240 
	m_SC_THREAD_ATTR_STACKSIZE
,

241 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

242 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

243 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

244 
	m_SC_THREAD_PRIO_INHERIT
,

245 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

246 
	m_SC_THREAD_PRIO_PROTECT
,

247 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

248 
	m_SC_THREAD_PROCESS_SHARED
,

249 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

251 
	m_SC_NPROCESSORS_CONF
,

252 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

253 
	m_SC_NPROCESSORS_ONLN
,

254 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

255 
	m_SC_PHYS_PAGES
,

256 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

257 
	m_SC_AVPHYS_PAGES
,

258 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

259 
	m_SC_ATEXIT_MAX
,

260 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

261 
	m_SC_PASS_MAX
,

262 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

264 
	m_SC_XOPEN_VERSION
,

265 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

266 
	m_SC_XOPEN_XCU_VERSION
,

267 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

268 
	m_SC_XOPEN_UNIX
,

269 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

270 
	m_SC_XOPEN_CRYPT
,

271 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

272 
	m_SC_XOPEN_ENH_I18N
,

273 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

274 
	m_SC_XOPEN_SHM
,

275 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

277 
	m_SC_2_CHAR_TERM
,

278 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

279 
	m_SC_2_C_VERSION
,

280 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

281 
	m_SC_2_UPE
,

282 
	#_SC_2_UPE
 
_SC_2_UPE


	)

284 
	m_SC_XOPEN_XPG2
,

285 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

286 
	m_SC_XOPEN_XPG3
,

287 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

288 
	m_SC_XOPEN_XPG4
,

289 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

291 
	m_SC_CHAR_BIT
,

292 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

293 
	m_SC_CHAR_MAX
,

294 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

295 
	m_SC_CHAR_MIN
,

296 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

297 
	m_SC_INT_MAX
,

298 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

299 
	m_SC_INT_MIN
,

300 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

301 
	m_SC_LONG_BIT
,

302 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

303 
	m_SC_WORD_BIT
,

304 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

305 
	m_SC_MB_LEN_MAX
,

306 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

307 
	m_SC_NZERO
,

308 
	#_SC_NZERO
 
_SC_NZERO


	)

309 
	m_SC_SSIZE_MAX
,

310 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

311 
	m_SC_SCHAR_MAX
,

312 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

313 
	m_SC_SCHAR_MIN
,

314 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

315 
	m_SC_SHRT_MAX
,

316 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

317 
	m_SC_SHRT_MIN
,

318 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

319 
	m_SC_UCHAR_MAX
,

320 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

321 
	m_SC_UINT_MAX
,

322 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

323 
	m_SC_ULONG_MAX
,

324 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

325 
	m_SC_USHRT_MAX
,

326 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

328 
	m_SC_NL_ARGMAX
,

329 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

330 
	m_SC_NL_LANGMAX
,

331 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

332 
	m_SC_NL_MSGMAX
,

333 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

334 
	m_SC_NL_NMAX
,

335 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

336 
	m_SC_NL_SETMAX
,

337 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

338 
	m_SC_NL_TEXTMAX
,

339 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

341 
	m_SC_XBS5_ILP32_OFF32
,

342 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

343 
	m_SC_XBS5_ILP32_OFFBIG
,

344 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

345 
	m_SC_XBS5_LP64_OFF64
,

346 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

347 
	m_SC_XBS5_LPBIG_OFFBIG
,

348 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

350 
	m_SC_XOPEN_LEGACY
,

351 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

352 
	m_SC_XOPEN_REALTIME
,

353 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

354 
	m_SC_XOPEN_REALTIME_THREADS
,

355 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

357 
	m_SC_ADVISORY_INFO
,

358 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

359 
	m_SC_BARRIERS
,

360 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

361 
	m_SC_BASE
,

362 
	#_SC_BASE
 
_SC_BASE


	)

363 
	m_SC_C_LANG_SUPPORT
,

364 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

365 
	m_SC_C_LANG_SUPPORT_R
,

366 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

367 
	m_SC_CLOCK_SELECTION
,

368 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

369 
	m_SC_CPUTIME
,

370 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

371 
	m_SC_THREAD_CPUTIME
,

372 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

373 
	m_SC_DEVICE_IO
,

374 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

375 
	m_SC_DEVICE_SPECIFIC
,

376 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

377 
	m_SC_DEVICE_SPECIFIC_R
,

378 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

379 
	m_SC_FD_MGMT
,

380 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

381 
	m_SC_FIFO
,

382 
	#_SC_FIFO
 
_SC_FIFO


	)

383 
	m_SC_PIPE
,

384 
	#_SC_PIPE
 
_SC_PIPE


	)

385 
	m_SC_FILE_ATTRIBUTES
,

386 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

387 
	m_SC_FILE_LOCKING
,

388 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

389 
	m_SC_FILE_SYSTEM
,

390 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

391 
	m_SC_MONOTONIC_CLOCK
,

392 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

393 
	m_SC_MULTI_PROCESS
,

394 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

395 
	m_SC_SINGLE_PROCESS
,

396 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

397 
	m_SC_NETWORKING
,

398 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

399 
	m_SC_READER_WRITER_LOCKS
,

400 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

401 
	m_SC_SPIN_LOCKS
,

402 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

403 
	m_SC_REGEXP
,

404 
	#_SC_REGEXP
 
_SC_REGEXP


	)

405 
	m_SC_REGEX_VERSION
,

406 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

407 
	m_SC_SHELL
,

408 
	#_SC_SHELL
 
_SC_SHELL


	)

409 
	m_SC_SIGNALS
,

410 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

411 
	m_SC_SPAWN
,

412 
	#_SC_SPAWN
 
_SC_SPAWN


	)

413 
	m_SC_SPORADIC_SERVER
,

414 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

415 
	m_SC_THREAD_SPORADIC_SERVER
,

416 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

417 
	m_SC_SYSTEM_DATABASE
,

418 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

419 
	m_SC_SYSTEM_DATABASE_R
,

420 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

421 
	m_SC_TIMEOUTS
,

422 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

423 
	m_SC_TYPED_MEMORY_OBJECTS
,

424 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

425 
	m_SC_USER_GROUPS
,

426 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

427 
	m_SC_USER_GROUPS_R
,

428 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

429 
	m_SC_2_PBS
,

430 
	#_SC_2_PBS
 
_SC_2_PBS


	)

431 
	m_SC_2_PBS_ACCOUNTING
,

432 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

433 
	m_SC_2_PBS_LOCATE
,

434 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

435 
	m_SC_2_PBS_MESSAGE
,

436 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

437 
	m_SC_2_PBS_TRACK
,

438 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

439 
	m_SC_SYMLOOP_MAX
,

440 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

441 
	m_SC_STREAMS
,

442 
	#_SC_STREAMS
 
_SC_STREAMS


	)

443 
	m_SC_2_PBS_CHECKPOINT
,

444 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

446 
	m_SC_V6_ILP32_OFF32
,

447 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

448 
	m_SC_V6_ILP32_OFFBIG
,

449 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

450 
	m_SC_V6_LP64_OFF64
,

451 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

452 
	m_SC_V6_LPBIG_OFFBIG
,

453 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

455 
	m_SC_HOST_NAME_MAX
,

456 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

457 
	m_SC_TRACE
,

458 
	#_SC_TRACE
 
_SC_TRACE


	)

459 
	m_SC_TRACE_EVENT_FILTER
,

460 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

461 
	m_SC_TRACE_INHERIT
,

462 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

463 
	m_SC_TRACE_LOG
,

464 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

466 
	m_SC_LEVEL1_ICACHE_SIZE
,

467 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

468 
	m_SC_LEVEL1_ICACHE_ASSOC
,

469 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

470 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

471 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

472 
	m_SC_LEVEL1_DCACHE_SIZE
,

473 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

474 
	m_SC_LEVEL1_DCACHE_ASSOC
,

475 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

476 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

477 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

478 
	m_SC_LEVEL2_CACHE_SIZE
,

479 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

480 
	m_SC_LEVEL2_CACHE_ASSOC
,

481 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

482 
	m_SC_LEVEL2_CACHE_LINESIZE
,

483 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

484 
	m_SC_LEVEL3_CACHE_SIZE
,

485 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

486 
	m_SC_LEVEL3_CACHE_ASSOC
,

487 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

488 
	m_SC_LEVEL3_CACHE_LINESIZE
,

489 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

490 
	m_SC_LEVEL4_CACHE_SIZE
,

491 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

492 
	m_SC_LEVEL4_CACHE_ASSOC
,

493 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

494 
	m_SC_LEVEL4_CACHE_LINESIZE
,

495 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

498 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

499 
	#_SC_IPV6
 
_SC_IPV6


	)

500 
	m_SC_RAW_SOCKETS
,

501 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

503 
	m_SC_V7_ILP32_OFF32
,

504 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

505 
	m_SC_V7_ILP32_OFFBIG
,

506 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

507 
	m_SC_V7_LP64_OFF64
,

508 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

509 
	m_SC_V7_LPBIG_OFFBIG
,

510 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

512 
	m_SC_SS_REPL_MAX
,

513 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

515 
	m_SC_TRACE_EVENT_NAME_MAX
,

516 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

517 
	m_SC_TRACE_NAME_MAX
,

518 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

519 
	m_SC_TRACE_SYS_MAX
,

520 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

521 
	m_SC_TRACE_USER_EVENT_MAX
,

522 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

524 
	m_SC_XOPEN_STREAMS
,

525 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

527 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

528 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

529 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


530 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

536 
	m_CS_PATH
,

537 
	#_CS_PATH
 
_CS_PATH


	)

539 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

540 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

541 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

543 
	m_CS_GNU_LIBC_VERSION
,

544 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

545 
	m_CS_GNU_LIBPTHREAD_VERSION
,

546 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

548 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

549 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

550 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

552 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

553 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

554 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

556 
	m_CS_LFS_CFLAGS
 = 1000,

557 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

558 
	m_CS_LFS_LDFLAGS
,

559 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

560 
	m_CS_LFS_LIBS
,

561 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

562 
	m_CS_LFS_LINTFLAGS
,

563 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

564 
	m_CS_LFS64_CFLAGS
,

565 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

566 
	m_CS_LFS64_LDFLAGS
,

567 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

568 
	m_CS_LFS64_LIBS
,

569 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

570 
	m_CS_LFS64_LINTFLAGS
,

571 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

573 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

574 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

575 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

576 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

577 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

578 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

579 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

580 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

581 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

582 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

583 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

584 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

585 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

586 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

587 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

588 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

589 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

590 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

591 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

592 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

593 
	m_CS_XBS5_LP64_OFF64_LIBS
,

594 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

595 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

596 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

597 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

598 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

599 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

600 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

601 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

602 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

603 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

604 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

606 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

607 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

608 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

609 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

610 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

611 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

612 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

613 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

614 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

615 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

616 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

617 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

618 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

619 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

620 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

621 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

622 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

623 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

624 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

625 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

626 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

627 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

628 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

629 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

630 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

631 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

632 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

633 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

634 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

635 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

636 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

637 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

639 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

640 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

641 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

642 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

643 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

644 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

645 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

646 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

647 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

648 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

649 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

650 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

651 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

652 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

653 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

654 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

655 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

656 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

657 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

658 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

659 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

660 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

661 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

662 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

663 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

664 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

665 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

666 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

667 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

668 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

669 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

670 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

672 
	m_CS_V6_ENV
,

673 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

674 
	m_CS_V7_ENV


675 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFF32
 1

	)

70 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

71 
	#_POSIX_V6_ILP32_OFF32
 1

	)

72 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

73 
	#_XBS5_ILP32_OFF32
 1

	)

74 
	#_XBS5_ILP32_OFFBIG
 1

	)

91 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

92 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

93 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

94 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

95 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

96 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VAL
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

36 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

40 
	~<ídün.h
>

42 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

44 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


45 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

51 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

52 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

21 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

28 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

29 #ñi‡
__GNUC_PREREQ
(2,96)

30 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

31 #ñi‡
deföed
 
__GNUC__


33 
	#HUGE_VALF
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7f800000UL }).
__d
)

	)

40 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

49 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

50 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

21 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

27 #ñi‡
__GNUC_PREREQ
(2,96)

28 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

31 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

33 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

34 #ifde‡
__GNUC__


35 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

36 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

38 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

39 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


32 #i‡
deföed
 
_UAPI_LINUX_IN6_H
 \

33 || 
deföed
 
	g_UAPI_IPV6_H
 \

34 || 
deföed
 
	g_LINUX_IN6_H
 \

35 || 
deföed
 
	g_IPV6_H


39 
	#__USE_KERNEL_IPV6_DEFS
 1

	)

41 
	#__USE_KERNEL_IPV6_DEFS
 0

	)

47 
	#IP_OPTIONS
 4

	)

48 
	#IP_HDRINCL
 3

	)

49 
	#IP_TOS
 1

	)

50 
	#IP_TTL
 2

	)

51 
	#IP_RECVOPTS
 6

	)

53 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

54 
	#IP_RETOPTS
 7

	)

55 
	#IP_MULTICAST_IF
 32

	)

56 
	#IP_MULTICAST_TTL
 33

	)

57 
	#IP_MULTICAST_LOOP
 34

	)

58 
	#IP_ADD_MEMBERSHIP
 35

	)

59 
	#IP_DROP_MEMBERSHIP
 36

	)

60 
	#IP_UNBLOCK_SOURCE
 37

	)

61 
	#IP_BLOCK_SOURCE
 38

	)

62 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

63 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

64 
	#IP_MSFILTER
 41

	)

65 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


66 
	#MCAST_JOIN_GROUP
 42

	)

67 
	#MCAST_BLOCK_SOURCE
 43

	)

68 
	#MCAST_UNBLOCK_SOURCE
 44

	)

69 
	#MCAST_LEAVE_GROUP
 45

	)

70 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

71 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

72 
	#MCAST_MSFILTER
 48

	)

73 
	#IP_MULTICAST_ALL
 49

	)

74 
	#IP_UNICAST_IF
 50

	)

76 
	#MCAST_EXCLUDE
 0

	)

77 
	#MCAST_INCLUDE
 1

	)

80 
	#IP_ROUTER_ALERT
 5

	)

81 
	#IP_PKTINFO
 8

	)

82 
	#IP_PKTOPTIONS
 9

	)

83 
	#IP_PMTUDISC
 10

	)

84 
	#IP_MTU_DISCOVER
 10

	)

85 
	#IP_RECVERR
 11

	)

86 
	#IP_RECVTTL
 12

	)

87 
	#IP_RECVTOS
 13

	)

88 
	#IP_MTU
 14

	)

89 
	#IP_FREEBIND
 15

	)

90 
	#IP_IPSEC_POLICY
 16

	)

91 
	#IP_XFRM_POLICY
 17

	)

92 
	#IP_PASSSEC
 18

	)

93 
	#IP_TRANSPARENT
 19

	)

94 
	#IP_MULTICAST_ALL
 49

	)

97 
	#IP_ORIGDSTADDR
 20

	)

98 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

100 
	#IP_MINTTL
 21

	)

101 
	#IP_NODEFRAG
 22

	)

104 
	#IP_PMTUDISC_DONT
 0

	)

105 
	#IP_PMTUDISC_WANT
 1

	)

106 
	#IP_PMTUDISC_DO
 2

	)

107 
	#IP_PMTUDISC_PROBE
 3

	)

111 
	#IP_PMTUDISC_INTERFACE
 4

	)

113 
	#IP_PMTUDISC_OMIT
 5

	)

115 
	#IP_MULTICAST_IF
 32

	)

116 
	#IP_MULTICAST_TTL
 33

	)

117 
	#IP_MULTICAST_LOOP
 34

	)

118 
	#IP_ADD_MEMBERSHIP
 35

	)

119 
	#IP_DROP_MEMBERSHIP
 36

	)

120 
	#IP_UNBLOCK_SOURCE
 37

	)

121 
	#IP_BLOCK_SOURCE
 38

	)

122 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

123 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

124 
	#IP_MSFILTER
 41

	)

125 
	#MCAST_JOIN_GROUP
 42

	)

126 
	#MCAST_BLOCK_SOURCE
 43

	)

127 
	#MCAST_UNBLOCK_SOURCE
 44

	)

128 
	#MCAST_LEAVE_GROUP
 45

	)

129 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

130 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

131 
	#MCAST_MSFILTER
 48

	)

132 
	#IP_MULTICAST_ALL
 49

	)

133 
	#IP_UNICAST_IF
 50

	)

136 
	#SOL_IP
 0

	)

138 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

139 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

140 
	#IP_MAX_MEMBERSHIPS
 20

	)

142 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


146 
	sù_›ts


148 
ö_addr
 
	mù_d°
;

149 
	mù_›ts
[40];

153 
	sù_mªqn


155 
ö_addr
 
	mimr_mu…üddr
;

156 
ö_addr
 
	mimr_addªss
;

157 
	mimr_ifödex
;

161 
	sö_pktöfo


163 
	mùi_ifödex
;

164 
ö_addr
 
	mùi_•ec_d°
;

165 
ö_addr
 
	mùi_addr
;

172 
	#IPV6_ADDRFORM
 1

	)

173 
	#IPV6_2292PKTINFO
 2

	)

174 
	#IPV6_2292HOPOPTS
 3

	)

175 
	#IPV6_2292DSTOPTS
 4

	)

176 
	#IPV6_2292RTHDR
 5

	)

177 
	#IPV6_2292PKTOPTIONS
 6

	)

178 
	#IPV6_CHECKSUM
 7

	)

179 
	#IPV6_2292HOPLIMIT
 8

	)

181 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

183 
	#IPV6_NEXTHOP
 9

	)

184 
	#IPV6_AUTHHDR
 10

	)

185 
	#IPV6_UNICAST_HOPS
 16

	)

186 
	#IPV6_MULTICAST_IF
 17

	)

187 
	#IPV6_MULTICAST_HOPS
 18

	)

188 
	#IPV6_MULTICAST_LOOP
 19

	)

189 
	#IPV6_JOIN_GROUP
 20

	)

190 
	#IPV6_LEAVE_GROUP
 21

	)

191 
	#IPV6_ROUTER_ALERT
 22

	)

192 
	#IPV6_MTU_DISCOVER
 23

	)

193 
	#IPV6_MTU
 24

	)

194 
	#IPV6_RECVERR
 25

	)

195 
	#IPV6_V6ONLY
 26

	)

196 
	#IPV6_JOIN_ANYCAST
 27

	)

197 
	#IPV6_LEAVE_ANYCAST
 28

	)

198 
	#IPV6_IPSEC_POLICY
 34

	)

199 
	#IPV6_XFRM_POLICY
 35

	)

201 
	#IPV6_RECVPKTINFO
 49

	)

202 
	#IPV6_PKTINFO
 50

	)

203 
	#IPV6_RECVHOPLIMIT
 51

	)

204 
	#IPV6_HOPLIMIT
 52

	)

205 
	#IPV6_RECVHOPOPTS
 53

	)

206 
	#IPV6_HOPOPTS
 54

	)

207 
	#IPV6_RTHDRDSTOPTS
 55

	)

208 
	#IPV6_RECVRTHDR
 56

	)

209 
	#IPV6_RTHDR
 57

	)

210 
	#IPV6_RECVDSTOPTS
 58

	)

211 
	#IPV6_DSTOPTS
 59

	)

213 
	#IPV6_RECVTCLASS
 66

	)

214 
	#IPV6_TCLASS
 67

	)

217 #i‡!
__USE_KERNEL_IPV6_DEFS


218 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

219 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

221 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

222 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

225 
	#IPV6_PMTUDISC_DONT
 0

	)

226 
	#IPV6_PMTUDISC_WANT
 1

	)

227 
	#IPV6_PMTUDISC_DO
 2

	)

228 
	#IPV6_PMTUDISC_PROBE
 3

	)

229 
	#IPV6_PMTUDISC_INTERFACE
 4

	)

230 
	#IPV6_PMTUDISC_OMIT
 5

	)

233 
	#SOL_IPV6
 41

	)

234 
	#SOL_ICMPV6
 58

	)

237 
	#IPV6_RTHDR_LOOSE
 0

	)

238 
	#IPV6_RTHDR_STRICT
 1

	)

240 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

255 && 
deföed
 
	g__exã∫_Æways_ölöe
)

257 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

259 #ifde‡
__USE_ISOC99


260 
__loˇl_signgam
 = 0;

261  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

263  
	`lgamma_r
 (
__d
, &
signgam
);

265 
	}
}

266 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

268 #ifde‡
__USE_ISOC99


269 
__loˇl_signgam
 = 0;

270  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

272  
	`lgammaf_r
 (
__d
, &
signgam
);

274 
	}
}

275 #ifde‡
__MATH_DECLARE_LDOUBLE


276 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

278 #ifde‡
__USE_ISOC99


279 
__loˇl_signgam
 = 0;

280  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

282  
	`lgammÆ_r
 (
__d
, &
signgam
);

284 
	}
}

288 #i‡((
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
) \

289 && 
deföed
 
	g__exã∫_Æways_ölöe
)

291 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

293 #ifde‡
__USE_ISOC99


294 
__loˇl_signgam
 = 0;

295  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

297  
	`lgamma_r
 (
__d
, &
signgam
);

299 
	}
}

300 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

302 #ifde‡
__USE_ISOC99


303 
__loˇl_signgam
 = 0;

304  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

306  
	`lgammaf_r
 (
__d
, &
signgam
);

308 
	}
}

309 #ifde‡
__MATH_DECLARE_LDOUBLE


310 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

312 #ifde‡
__USE_ISOC99


313 
__loˇl_signgam
 = 0;

314  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

316  
	`lgammÆ_r
 (
__d
, &
signgam
);

318 
	}
}

323 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

324 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

325 #ifde‡
__MATH_DECLARE_LDOUBLE


326 #ifde‡
__NO_LONG_DOUBLE_MATH


327 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

329 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

334 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

335 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

336 #ifde‡
__MATH_DECLARE_LDOUBLE


337 #ifde‡
__NO_LONG_DOUBLE_MATH


338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

340 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

344 #ifde‡
__USE_ISOC99


346 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

347 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

348 #ifde‡
__MATH_DECLARE_LDOUBLE


349 #ifde‡
__NO_LONG_DOUBLE_MATH


350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

352 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

358 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

359 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

360 #ifde‡
__MATH_DECLARE_LDOUBLE


361 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

365 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

366 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

367 #ifde‡
__MATH_DECLARE_LDOUBLE


368 #ifde‡
__NO_LONG_DOUBLE_MATH


369 
__REDIRECT_NTH
 (
powl
, (, ),

370 
__pow_föôe
);

372 
__REDIRECT_NTH
 (
powl
, (, ),

373 
__powl_föôe
);

378 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

379 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

380 #ifde‡
__MATH_DECLARE_LDOUBLE


381 #ifde‡
__NO_LONG_DOUBLE_MATH


382 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

383 
__ªmaödî_föôe
);

385 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

386 
__ªmaödîl_föôe
);

390 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


392 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

393 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

394 #ifde‡
__MATH_DECLARE_LDOUBLE


395 #ifde‡
__NO_LONG_DOUBLE_MATH


396 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

397 
__sˇlb_föôe
);

399 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

400 
__sˇlbl_föôe
);

406 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

407 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

408 #ifde‡
__MATH_DECLARE_LDOUBLE


409 #ifde‡
__NO_LONG_DOUBLE_MATH


410 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

412 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

417 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

418 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

419 #ifde‡
__MATH_DECLARE_LDOUBLE


420 #ifde‡
__NO_LONG_DOUBLE_MATH


421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

423 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

427 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


429 
__gamma_r_föôe
 (, *);

430 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

432 
__loˇl_signgam
 = 0;

433 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

434  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

435 
	}
}

436 
__gammaf_r_föôe
 (, *);

437 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

439 
__loˇl_signgam
 = 0;

440 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

441  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

442 
	}
}

443 #ifde‡
__MATH_DECLARE_LDOUBLE


444 
__gammÆ_r_föôe
 (, *);

445 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

447 
__loˇl_signgam
 = 0;

448 #ifde‡
__NO_LONG_DOUBLE_MATH


449 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

451 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

453  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

454 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
))

116 
__©åibuã__
 ((
__n⁄nuŒ__
 (2)));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

342 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


359 
	g__END_NAMESPACE_C99


362 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


364 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__MATH_INLINE
 

202 
__NTH
 (
	$Œrötf
 (
__x
))

204 
__ªs
;

209 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

210  
__ªs
;

211 
	}
}

212 
__MATH_INLINE
 

213 
__NTH
 (
	$Œröt
 (
__x
))

215 
__ªs
;

220 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

221  
__ªs
;

222 
	}
}

225 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

226 && 
deföed
 
__SSE2_MATH__


228 
__MATH_INLINE
 

229 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

231 #ifde‡
__AVX__


232 
__ªs
;

233 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

234  
__ªs
;

236 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

237  
__x
;

239 
	}
}

240 
__MATH_INLINE
 

241 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

243 #ifde‡
__AVX__


244 
__ªs
;

245 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

246  
__ªs
;

248 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

249  
__x
;

251 
	}
}

254 
__MATH_INLINE
 

255 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

257 #ifde‡
__AVX__


258 
__ªs
;

259 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

260  
__ªs
;

262 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

263  
__x
;

265 
	}
}

266 
__MATH_INLINE
 

267 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

269 #ifde‡
__AVX__


270 
__ªs
;

271 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

272  
__ªs
;

274 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

275  
__x
;

277 
	}
}

280 
	g__END_NAMESPACE_C99


283 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


284 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


285 
__BEGIN_NAMESPACE_C99


288 
__MATH_INLINE
 

289 
__NTH
 (
	$röt
 (
__x
))

291 
__ªs
;

296 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

297  
__ªs
;

298 
	}
}

299 
__MATH_INLINE
 

300 
__NTH
 (
	$rötf
 (
__x
))

302 
__ªs
;

307 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

308  
__ªs
;

309 
	}
}

311 #ifde‡
__USE_ISOC99


313 
__MATH_INLINE
 

314 
__NTH
 (
	$√¨byöt
 (
__x
))

316 
__ªs
;

321 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

322  
__ªs
;

323 
	}
}

324 
__MATH_INLINE
 

325 
__NTH
 (
	$√¨byötf
 (
__x
))

327 
__ªs
;

332 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

333  
__ªs
;

334 
	}
}

337 
	g__END_NAMESPACE_C99


340 
__BEGIN_NAMESPACE_STD


342 
__MATH_INLINE
 

343 
__NTH
 (
	$˚û
 (
__x
))

345 
__ªs
;

346 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

347  
__ªs
;

348 
	}
}

349 
__END_NAMESPACE_STD


351 
__BEGIN_NAMESPACE_C99


352 
__MATH_INLINE
 

353 
__NTH
 (
	$˚ûf
 (
__x
))

355 
__ªs
;

356 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

357  
__ªs
;

358 
	}
}

359 
__END_NAMESPACE_C99


361 
__BEGIN_NAMESPACE_STD


363 
__MATH_INLINE
 

364 
__NTH
 (
	$Êo‹
 (
__x
))

366 
__ªs
;

367 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

368  
__ªs
;

369 
	}
}

370 
__END_NAMESPACE_STD


372 
__BEGIN_NAMESPACE_C99


373 
__MATH_INLINE
 

374 
__NTH
 (
	$Êo‹f
 (
__x
))

376 
__ªs
;

377 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

378  
__ªs
;

379 
	}
}

380 
	g__END_NAMESPACE_C99


385 #i‚de‡
__x86_64__


386 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

387 && 
deföed
 
	g__OPTIMIZE__
)

391 #unde‡
m©h_îrh™dlög


400 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


401 
	#__ölöe_m©h›
(
func
, 
›
) \

402 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

403 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

404 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

405 
	#__ölöe_m©h›NP
(
func
, 
›
) \

406 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

407 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›
(
func
, 
›
) \

411 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

412 
	#__ölöe_m©h›NP
(
func
, 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

416 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

417 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

418 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

422 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


423 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

424 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

425 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

426 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

427 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

428 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

429 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

438 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

439 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

440 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

442 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

443 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

445 
Êﬂt_ty≥
 
__ªsu…
; \

446 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

447  
__ªsu…
; \

448 }

	)

451 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


452 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

453 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

454 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

456 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

457 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

460 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

461 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

462 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

464 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

468 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

469 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

470 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

472 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

478 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

479 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

482 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

483 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

486 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

487 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

491 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

492 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

493 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

495 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

496 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

498 
code
; \

499 }

	)

502 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

503 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

504 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

506 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

507 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

509 
code
; \

510 }

	)

512 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

513 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

514 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

516 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

517 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

518 
Êﬂt_ty≥
 
¨g3
)) \

520 
code
; \

521 }

	)

525 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


529 #ifde‡
__FAST_MATH__


530 #ifde‡
__USE_GNU


531 
	#__söcos_code
 \

532 
__co§
; \

533 
__sör
; \

534 
__swtmp
; \

535 
__asm
 
__vﬁ©ûe__
 \

550 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

551 *
__söx
 = 
__sör
; \

552 *
__cosx
 = 
__co§


	)

554 
__MATH_INLINE
 

555 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

557 
__söcos_code
;

558 
	}
}

560 
__MATH_INLINE
 

561 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

563 
__söcos_code
;

564 
	}
}

566 
__MATH_INLINE
 

567 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

569 
__söcos_code
;

570 
	}
}

577 #i‡
__GNUC_PREREQ
 (3, 5)

578 
	#__expm1_code
 \

579 
__ãmp
; \

580 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

581  
__ãmp
 ? __ãm∞: 
__x


	)

583 
	#__expm1_code
 \

584 
__vÆue
; \

585 
__exp⁄ít
; \

586 
__ãmp
; \

587 
__asm
 
__vﬁ©ûe__
 \

596 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

597 
__asm
 
__vﬁ©ûe__
 \

599 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

600 
__ãmp
 -= 1.0; \

601 
__ãmp
 +
__vÆue
; \

602  
__ãmp
 ? __ãm∞: 
__x


	)

604 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

606 #i‡
	`__GNUC_PREREQ
 (3, 4)

607 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

609 
	#__exp_code
 \

610 
__vÆue
; \

611 
__exp⁄ít
; \

612 
__asm
 
__vﬁ©ûe__
 \

620 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

621 
__vÆue
 += 1.0; \

622 
__asm
 
__vﬁ©ûe__
 \

624 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

625  
__vÆue


	)

626 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

627 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

631 #i‡!
	`__GNUC_PREREQ
 (3, 5)

632 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

633 
__vÆue
; \

634 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

635 
__asm
 
__vﬁ©ûe__
 \

637 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

638  
__vÆue
)

643 #i‡
	`__GNUC_PREREQ
 (3, 4)

644 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

645  
	$__buûtö_©™2l
 (
__y
, 
__x
))

647 
	#__©™2_code
 \

648 
__vÆue
; \

649 
__asm
 
__vﬁ©ûe__
 \

651 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

652  
__vÆue


	)

653 #ifde‡
__FAST_MATH__


654 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

656 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

660 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

661 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

662 
__vÆue
; \

663 
__asm
 
__vﬁ©ûe__
 \

668 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

669  
__vÆue
)

673 #ifde‡
__FAST_MATH__


674 #i‡!
	`__GNUC_PREREQ
 (3,3)

675 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

676 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

677 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

679 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

683 #i‡
	`__GNUC_PREREQ
 (2, 8)

684 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

685 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


686 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

687 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

692 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

695 #ifde‡
__FAST_MATH__


696 #i‡!
	`__GNUC_PREREQ
 (3, 4)

698 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

700 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

702 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

705 #i‡!
	`__GNUC_PREREQ
 (3, 5)

706 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

708 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

709 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

712 #i‡!
	`__GNUC_PREREQ
 (3, 4)

713 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

717 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

718 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

719 { 
__xld
: 
__x
 
	}
}; \

720 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

721 
	g__n
.
	g__xi
[1] = 0x80000000; \

722 
	g__n
.
	g__xi
[0] = 0; \

723  
	g__n
.
	g__xld
)

726 #ifde‡
__FAST_MATH__


728 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

729 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

730  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

732 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

733 
__ex
 = 
	`__ex∂
 (
__x
); \

734  0.5 * (
__ex
 + 1.0 / __ex))

736 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

737 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

738  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

741 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

742 
__vÆue
; \

743 
__ign‹e
; \

744 
__cw
; \

745 
__cwtmp
; \

746 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

754 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

755 "=m" (
__cw
) \

756 : "0" (
__x
)); \

757  
__vÆue
)

759 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

760 
__vÆue
; \

761 
__ign‹e
; \

762 
__cw
; \

763 
__cwtmp
; \

764 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

772 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

773 "=m" (
__cw
) \

774 : "0" (
__x
)); \

775  
__vÆue
)

777 #ifde‡
__FAST_MATH__


778 
	#__ldexp_code
 \

779 
__vÆue
; \

780 
__asm
 
__vﬁ©ûe__
 \

782 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

783  
__vÆue


	)

785 
__MATH_INLINE
 

786 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

788 
__ldexp_code
;

789 
	}
}

794 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


796 #ifde‡
__FAST_MATH__


797 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

801 
	#__M_SQRT2
 1.41421356237309504880L

	)

803 #i‡!
	`__GNUC_PREREQ
 (3, 5)

804 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

805 
__vÆue
; \

806 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

807 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

809 
__asm
 
__vﬁ©ûe__
 \

813 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

814  
__vÆue
)

819 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

820 
__y
 = 
	`__Áb¶
 (
__x
); \

821  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

822 * 
	$__sgn1l
 (
__x
)))

824 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

825  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

827 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

828 
__y
 = 
	`__Áb¶
 (
__x
); \

829  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

832 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

833  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

835 #i‡!
	`__GNUC_PREREQ
 (3, 5)

836 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

837 
__vÆue
; \

838 
__junk
; \

839 
__asm
 
__vﬁ©ûe__
 \

841 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

842  
__vÆue
)

848 #ifde‡
__USE_ISOC99


849 #ifde‡
__FAST_MATH__


851 #i‡!
	`__GNUC_PREREQ
 (3, 5)

852 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

855 
__MATH_INLINE
 

856 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

858 
__ldexp_code
;

859 
	}
}

861 
__MATH_INLINE
 

862 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

864 
__ldexp_code
;

865 
	}
}

867 
__ölöe_m©h›NP
 (
röt
, "frndint")

870 
	#__Ãöt_code
 \

871 
__Ãöåes
; \

872 
__asm__
 
__vﬁ©ûe__
 \

874 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

875  
__Ãöåes


	)

876 
__MATH_INLINE
 

877 
__NTH
 (
	$Ãötf
 (
__x
))

879 
__Ãöt_code
;

880 
	}
}

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãöt
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöé
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 #unde‡
__Ãöt_code


893 
	#__Œröt_code
 \

894 
__Œröåes
; \

895 
__asm__
 
__vﬁ©ûe__
 \

897 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

898  
__Œröåes


	)

899 
__MATH_INLINE
 

900 
__NTH
 (
	$Œrötf
 (
__x
))

902 
__Œröt_code
;

903 
	}
}

904 
__MATH_INLINE
 

905 
__NTH
 (
	$Œröt
 (
__x
))

907 
__Œröt_code
;

908 
	}
}

909 
__MATH_INLINE
 

910 
__NTH
 (
	$Œröé
 (
__x
))

912 
__Œröt_code
;

913 
	}
}

914 #unde‡
__Œröt_code


919 #ifde‡
__USE_MISC


921 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

922 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

923 
__vÆue
; \

924 
__˛obbîed
; \

925 
__asm
 
__vﬁ©ûe__
 \

930 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

931  
__vÆue
)

936 
__MATH_INLINE
 

937 
__NTH
 (
	$__föôe
 (
__x
))

939  (
__exãnsi⁄__


940 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

942 
	}
}

947 #unde‡
__©™2_code


948 #ifde‡
__FAST_MATH__


949 #unde‡
__expm1_code


950 #unde‡
__exp_code


951 #unde‡
__söcos_code


958 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


959 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

960 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

961 
__vÆue
;

962 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

963 : "Ò" (
__vÆue
)

964 : "0" (
__x
), "u" (
__y
) : "st(1)");

965  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 
	#MAP_ANONYMOUS
 0x20

	)

53 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

54 
	#MAP_32BIT
 0x40

	)

58 #ifde‡
__USE_MISC


59 
	#MAP_GROWSDOWN
 0x00100

	)

60 
	#MAP_DENYWRITE
 0x00800

	)

61 
	#MAP_EXECUTABLE
 0x01000

	)

62 
	#MAP_LOCKED
 0x02000

	)

63 
	#MAP_NORESERVE
 0x04000

	)

64 
	#MAP_POPULATE
 0x08000

	)

65 
	#MAP_NONBLOCK
 0x10000

	)

66 
	#MAP_STACK
 0x20000

	)

67 
	#MAP_HUGETLB
 0x40000

	)

71 
	#MS_ASYNC
 1

	)

72 
	#MS_SYNC
 4

	)

73 
	#MS_INVALIDATE
 2

	)

76 
	#MCL_CURRENT
 1

	)

77 
	#MCL_FUTURE
 2

	)

81 #ifde‡
__USE_GNU


82 
	#MREMAP_MAYMOVE
 1

	)

83 
	#MREMAP_FIXED
 2

	)

87 #ifde‡
__USE_BSD


88 
	#MADV_NORMAL
 0

	)

89 
	#MADV_RANDOM
 1

	)

90 
	#MADV_SEQUENTIAL
 2

	)

91 
	#MADV_WILLNEED
 3

	)

92 
	#MADV_DONTNEED
 4

	)

93 
	#MADV_REMOVE
 9

	)

94 
	#MADV_DONTFORK
 10

	)

95 
	#MADV_DOFORK
 11

	)

96 
	#MADV_MERGEABLE
 12

	)

97 
	#MADV_UNMERGEABLE
 13

	)

98 
	#MADV_HUGEPAGE
 14

	)

99 
	#MADV_NOHUGEPAGE
 15

	)

100 
	#MADV_DONTDUMP
 16

	)

102 
	#MADV_DODUMP
 17

	)

103 
	#MADV_HWPOISON
 100

	)

107 #ifde‡
__USE_XOPEN2K


108 
	#POSIX_MADV_NORMAL
 0

	)

109 
	#POSIX_MADV_RANDOM
 1

	)

110 
	#POSIX_MADV_SEQUENTIAL
 2

	)

111 
	#POSIX_MADV_WILLNEED
 3

	)

112 
	#POSIX_MADV_DONTNEED
 4

	)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


49 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

50 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 
	m__∑d1
;

188 
	m__∑d2
;

191 
	m__Êags
;

192 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

193 } 
	m__d©a
;

197 
	m__lock
;

198 
	m__ƒ_ªadîs
;

199 
	m__ªadîs_wakeup
;

200 
	m__wrôî_wakeup
;

201 
	m__ƒ_ªadîs_queued
;

202 
	m__ƒ_wrôîs_queued
;

205 
	m__Êags
;

206 
	m__sh¨ed
;

207 
	m__∑d1
;

208 
	m__∑d2
;

209 
	m__wrôî
;

210 } 
	m__d©a
;

212 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

213 
	m__Æign
;

214 } 
	t±hªad_rwlock_t
;

218 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

219 
	m__Æign
;

220 } 
	t±hªad_rwlock©å_t
;

224 #ifde‡
__USE_XOPEN2K


226 vﬁ©ûê
	t±hªad_•ölock_t
;

233 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

234 
	m__Æign
;

235 } 
	t±hªad_b¨rõr_t
;

239 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

240 
	m__Æign
;

241 } 
	t±hªad_b¨rõøâr_t
;

245 #i‚de‡
__x86_64__


247 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 } 
_sigÁu…
;

115 
si_b™d
;

116 
si_fd
;

117 } 
_sigpﬁl
;

122 *
_ˇŒ_addr
;

123 
_sysˇŒ
;

124 
_¨ch
;

125 } 
_sigsys
;

126 } 
_sifõlds
;

127 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

131 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

132 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

133 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

134 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

135 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

136 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

137 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

138 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

139 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

140 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

141 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

142 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

143 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

144 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

145 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

146 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

153 
SI_ASYNCNL
 = -60,

154 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

155 
SI_TKILL
 = -6,

156 
	#SI_TKILL
 
SI_TKILL


	)

157 
SI_SIGIO
,

158 
	#SI_SIGIO
 
SI_SIGIO


	)

159 
SI_ASYNCIO
,

160 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

161 
SI_MESGQ
,

162 
	#SI_MESGQ
 
SI_MESGQ


	)

163 
SI_TIMER
,

164 
	#SI_TIMER
 
SI_TIMER


	)

165 
SI_QUEUE
,

166 
	#SI_QUEUE
 
SI_QUEUE


	)

167 
SI_USER
,

168 
	#SI_USER
 
SI_USER


	)

169 
SI_KERNEL
 = 0x80

170 
	#SI_KERNEL
 
SI_KERNEL


	)

177 
ILL_ILLOPC
 = 1,

178 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

179 
ILL_ILLOPN
,

180 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

181 
ILL_ILLADR
,

182 
	#ILL_ILLADR
 
ILL_ILLADR


	)

183 
ILL_ILLTRP
,

184 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

185 
ILL_PRVOPC
,

186 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

187 
ILL_PRVREG
,

188 
	#ILL_PRVREG
 
ILL_PRVREG


	)

189 
ILL_COPROC
,

190 
	#ILL_COPROC
 
ILL_COPROC


	)

191 
ILL_BADSTK


192 
	#ILL_BADSTK
 
ILL_BADSTK


	)

198 
FPE_INTDIV
 = 1,

199 
	#FPE_INTDIV
 
FPE_INTDIV


	)

200 
FPE_INTOVF
,

201 
	#FPE_INTOVF
 
FPE_INTOVF


	)

202 
FPE_FLTDIV
,

203 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

204 
FPE_FLTOVF
,

205 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

206 
FPE_FLTUND
,

207 
	#FPE_FLTUND
 
FPE_FLTUND


	)

208 
FPE_FLTRES
,

209 
	#FPE_FLTRES
 
FPE_FLTRES


	)

210 
FPE_FLTINV
,

211 
	#FPE_FLTINV
 
FPE_FLTINV


	)

212 
FPE_FLTSUB


213 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

219 
SEGV_MAPERR
 = 1,

220 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

221 
SEGV_ACCERR


222 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

228 
BUS_ADRALN
 = 1,

229 
	#BUS_ADRALN
 
BUS_ADRALN


	)

230 
BUS_ADRERR
,

231 
	#BUS_ADRERR
 
BUS_ADRERR


	)

232 
BUS_OBJERR


233 
	#BUS_OBJERR
 
BUS_OBJERR


	)

239 
TRAP_BRKPT
 = 1,

240 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

241 
TRAP_TRACE


242 
	#TRAP_TRACE
 
TRAP_TRACE


	)

248 
CLD_EXITED
 = 1,

249 
	#CLD_EXITED
 
CLD_EXITED


	)

250 
CLD_KILLED
,

251 
	#CLD_KILLED
 
CLD_KILLED


	)

252 
CLD_DUMPED
,

253 
	#CLD_DUMPED
 
CLD_DUMPED


	)

254 
CLD_TRAPPED
,

255 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

256 
CLD_STOPPED
,

257 
	#CLD_STOPPED
 
CLD_STOPPED


	)

258 
CLD_CONTINUED


259 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

265 
POLL_IN
 = 1,

266 
	#POLL_IN
 
POLL_IN


	)

267 
POLL_OUT
,

268 
	#POLL_OUT
 
POLL_OUT


	)

269 
POLL_MSG
,

270 
	#POLL_MSG
 
POLL_MSG


	)

271 
POLL_ERR
,

272 
	#POLL_ERR
 
POLL_ERR


	)

273 
POLL_PRI
,

274 
	#POLL_PRI
 
POLL_PRI


	)

275 
POLL_HUP


276 
	#POLL_HUP
 
POLL_HUP


	)

279 #unde‡
__√ed_sigöfo_t


283 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

284 && !
deföed
 
__have_sigevít_t


285 
	#__have_sigevít_t
 1

	)

288 
	#__SIGEV_MAX_SIZE
 64

	)

289 #i‡
__WORDSIZE
 == 64

290 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

292 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

296 #i‚de‡
__have_±hªad_©å_t


297 
±hªad_©å_t
 
	t±hªad_©å_t
;

298 
	#__have_±hªad_©å_t
 1

	)

301 
	ssigevít


303 
sigvÆ_t
 
sigev_vÆue
;

304 
sigev_signo
;

305 
sigev_nŸify
;

309 
_∑d
[
__SIGEV_PAD_SIZE
];

313 
__pid_t
 
_tid
;

317 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

318 
±hªad_©å_t
 *
_©åibuã
;

319 } 
_sigev_thªad
;

320 } 
_sigev_un
;

321 } 
	tsigevít_t
;

324 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

325 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

330 
SIGEV_SIGNAL
 = 0,

331 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

332 
SIGEV_NONE
,

333 
	#SIGEV_NONE
 
SIGEV_NONE


	)

334 
SIGEV_THREAD
,

335 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

337 
SIGEV_THREAD_ID
 = 4

338 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

40 
	#_SS_SIZE
 128

	)

	@/usr/include/bits/socket.h

20 #i‚de‡
__BITS_SOCKET_H


21 
	#__BITS_SOCKET_H


	)

23 #i‚de‡
_SYS_SOCKET_H


27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	~<sys/ty≥s.h
>

33 #i‚de‡
__sockÀn_t_deföed


34 
__sockÀn_t
 
	tsockÀn_t
;

35 
	#__sockÀn_t_deföed


	)

39 
	~<bôs/sockë_ty≥.h
>

42 
	#PF_UNSPEC
 0

	)

43 
	#PF_LOCAL
 1

	)

44 
	#PF_UNIX
 
PF_LOCAL


	)

45 
	#PF_FILE
 
PF_LOCAL


	)

46 
	#PF_INET
 2

	)

47 
	#PF_AX25
 3

	)

48 
	#PF_IPX
 4

	)

49 
	#PF_APPLETALK
 5

	)

50 
	#PF_NETROM
 6

	)

51 
	#PF_BRIDGE
 7

	)

52 
	#PF_ATMPVC
 8

	)

53 
	#PF_X25
 9

	)

54 
	#PF_INET6
 10

	)

55 
	#PF_ROSE
 11

	)

56 
	#PF_DEC√t
 12

	)

57 
	#PF_NETBEUI
 13

	)

58 
	#PF_SECURITY
 14

	)

59 
	#PF_KEY
 15

	)

60 
	#PF_NETLINK
 16

	)

61 
	#PF_ROUTE
 
PF_NETLINK


	)

62 
	#PF_PACKET
 17

	)

63 
	#PF_ASH
 18

	)

64 
	#PF_ECONET
 19

	)

65 
	#PF_ATMSVC
 20

	)

66 
	#PF_RDS
 21

	)

67 
	#PF_SNA
 22

	)

68 
	#PF_IRDA
 23

	)

69 
	#PF_PPPOX
 24

	)

70 
	#PF_WANPIPE
 25

	)

71 
	#PF_LLC
 26

	)

72 
	#PF_CAN
 29

	)

73 
	#PF_TIPC
 30

	)

74 
	#PF_BLUETOOTH
 31

	)

75 
	#PF_IUCV
 32

	)

76 
	#PF_RXRPC
 33

	)

77 
	#PF_ISDN
 34

	)

78 
	#PF_PHONET
 35

	)

79 
	#PF_IEEE802154
 36

	)

80 
	#PF_CAIF
 37

	)

81 
	#PF_ALG
 38

	)

82 
	#PF_NFC
 39

	)

83 
	#PF_VSOCK
 40

	)

84 
	#PF_MAX
 41

	)

87 
	#AF_UNSPEC
 
PF_UNSPEC


	)

88 
	#AF_LOCAL
 
PF_LOCAL


	)

89 
	#AF_UNIX
 
PF_UNIX


	)

90 
	#AF_FILE
 
PF_FILE


	)

91 
	#AF_INET
 
PF_INET


	)

92 
	#AF_AX25
 
PF_AX25


	)

93 
	#AF_IPX
 
PF_IPX


	)

94 
	#AF_APPLETALK
 
PF_APPLETALK


	)

95 
	#AF_NETROM
 
PF_NETROM


	)

96 
	#AF_BRIDGE
 
PF_BRIDGE


	)

97 
	#AF_ATMPVC
 
PF_ATMPVC


	)

98 
	#AF_X25
 
PF_X25


	)

99 
	#AF_INET6
 
PF_INET6


	)

100 
	#AF_ROSE
 
PF_ROSE


	)

101 
	#AF_DEC√t
 
PF_DEC√t


	)

102 
	#AF_NETBEUI
 
PF_NETBEUI


	)

103 
	#AF_SECURITY
 
PF_SECURITY


	)

104 
	#AF_KEY
 
PF_KEY


	)

105 
	#AF_NETLINK
 
PF_NETLINK


	)

106 
	#AF_ROUTE
 
PF_ROUTE


	)

107 
	#AF_PACKET
 
PF_PACKET


	)

108 
	#AF_ASH
 
PF_ASH


	)

109 
	#AF_ECONET
 
PF_ECONET


	)

110 
	#AF_ATMSVC
 
PF_ATMSVC


	)

111 
	#AF_RDS
 
PF_RDS


	)

112 
	#AF_SNA
 
PF_SNA


	)

113 
	#AF_IRDA
 
PF_IRDA


	)

114 
	#AF_PPPOX
 
PF_PPPOX


	)

115 
	#AF_WANPIPE
 
PF_WANPIPE


	)

116 
	#AF_LLC
 
PF_LLC


	)

117 
	#AF_CAN
 
PF_CAN


	)

118 
	#AF_TIPC
 
PF_TIPC


	)

119 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

120 
	#AF_IUCV
 
PF_IUCV


	)

121 
	#AF_RXRPC
 
PF_RXRPC


	)

122 
	#AF_ISDN
 
PF_ISDN


	)

123 
	#AF_PHONET
 
PF_PHONET


	)

124 
	#AF_IEEE802154
 
PF_IEEE802154


	)

125 
	#AF_CAIF
 
PF_CAIF


	)

126 
	#AF_ALG
 
PF_ALG


	)

127 
	#AF_NFC
 
PF_NFC


	)

128 
	#AF_VSOCK
 
PF_VSOCK


	)

129 
	#AF_MAX
 
PF_MAX


	)

135 
	#SOL_RAW
 255

	)

136 
	#SOL_DECNET
 261

	)

137 
	#SOL_X25
 262

	)

138 
	#SOL_PACKET
 263

	)

139 
	#SOL_ATM
 264

	)

140 
	#SOL_AAL
 265

	)

141 
	#SOL_IRDA
 266

	)

144 
	#SOMAXCONN
 128

	)

147 
	~<bôs/sockaddr.h
>

150 
	ssockaddr


152 
__SOCKADDR_COMMON
 (
ß_
);

153 
	mß_d©a
[14];

159 
	#__ss_Æig¡y≥
 

	)

160 
	#_SS_PADSIZE
 \

161 (
_SS_SIZE
 - 
__SOCKADDR_COMMON_SIZE
 -  (
__ss_Æig¡y≥
))

	)

163 
	ssockaddr_°‹age


165 
__SOCKADDR_COMMON
 (
ss_
);

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

167 
__ss_Æig¡y≥
 
	m__ss_Æign
;

174 
	mMSG_OOB
 = 0x01,

175 
	#MSG_OOB
 
MSG_OOB


	)

176 
	mMSG_PEEK
 = 0x02,

177 
	#MSG_PEEK
 
MSG_PEEK


	)

178 
	mMSG_DONTROUTE
 = 0x04,

179 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

180 #ifde‡
__USE_GNU


182 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

183 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

185 
	mMSG_CTRUNC
 = 0x08,

186 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

187 
	mMSG_PROXY
 = 0x10,

188 
	#MSG_PROXY
 
MSG_PROXY


	)

189 
	mMSG_TRUNC
 = 0x20,

190 
	#MSG_TRUNC
 
MSG_TRUNC


	)

191 
	mMSG_DONTWAIT
 = 0x40,

192 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

193 
	mMSG_EOR
 = 0x80,

194 
	#MSG_EOR
 
MSG_EOR


	)

195 
	mMSG_WAITALL
 = 0x100,

196 
	#MSG_WAITALL
 
MSG_WAITALL


	)

197 
	mMSG_FIN
 = 0x200,

198 
	#MSG_FIN
 
MSG_FIN


	)

199 
	mMSG_SYN
 = 0x400,

200 
	#MSG_SYN
 
MSG_SYN


	)

201 
	mMSG_CONFIRM
 = 0x800,

202 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

203 
	mMSG_RST
 = 0x1000,

204 
	#MSG_RST
 
MSG_RST


	)

205 
	mMSG_ERRQUEUE
 = 0x2000,

206 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

207 
	mMSG_NOSIGNAL
 = 0x4000,

208 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

209 
	mMSG_MORE
 = 0x8000,

210 
	#MSG_MORE
 
MSG_MORE


	)

211 
	mMSG_WAITFORONE
 = 0x10000,

212 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

213 
	mMSG_FASTOPEN
 = 0x20000000,

214 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

216 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

219 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

225 
	smsghdr


227 *
	mmsg_«me
;

228 
sockÀn_t
 
	mmsg_«mñí
;

230 
iovec
 *
	mmsg_iov
;

231 
size_t
 
	mmsg_iovÀn
;

233 *
	mmsg_c⁄åﬁ
;

234 
size_t
 
	mmsg_c⁄åﬁÀn
;

239 
	mmsg_Êags
;

243 
	scmsghdr


245 
size_t
 
	mcmsg_Àn
;

250 
	mcmsg_Àvñ
;

251 
	mcmsg_ty≥
;

252 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

253 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

258 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

259 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

261 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

263 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

264 
	#CMSG_FIRSTHDR
(
mhdr
) \

265 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

266 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

267 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

268 & (
size_t
Ë~( (size_tË- 1))

	)

269 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

270 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

271 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

273 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

274 
cmsghdr
 *
__cmsg
Ë
__THROW
;

275 #ifde‡
__USE_EXTERN_INLINES


276 #i‚de‡
_EXTERN_INLINE


277 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

279 
_EXTERN_INLINE
 
cmsghdr
 *

280 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

282 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

284  (
cmsghdr
 *) 0;

286 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

287 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

288 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


289 + 
__mhdr
->
msg_c⁄åﬁÀn
)

290 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

291 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

293  (
cmsghdr
 *) 0;

294  
__cmsg
;

295 
	}
}

302 
	mSCM_RIGHTS
 = 0x01

303 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

304 #ifde‡
__USE_GNU


305 , 
	mSCM_CREDENTIALS
 = 0x02

306 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

310 #ifde‡
__USE_GNU


312 
	su¸ed


314 
pid_t
 
	mpid
;

315 
uid_t
 
	muid
;

316 
gid_t
 
	mgid
;

321 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


322 #i‚de‡
FIOGETOWN


323 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

325 #i‚de‡
FIOSETOWN


326 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

328 #i‚de‡
SIOCATMARK


329 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

331 #i‚de‡
SIOCGPGRP


332 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

334 #i‚de‡
SIOCGSTAMP


335 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

337 #i‚de‡
SIOCGSTAMPNS


338 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

340 #i‚de‡
SIOCSPGRP


341 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

346 
	~<asm/sockë.h
>

348 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


349 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


350 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


351 #unde‡
FIOGETOWN


353 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


354 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


355 #unde‡
FIOSETOWN


357 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


358 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


359 #unde‡
SIOCATMARK


361 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


362 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


363 #unde‡
SIOCGPGRP


365 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


366 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


367 #unde‡
SIOCGSTAMP


369 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


370 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


371 #unde‡
SIOCGSTAMPNS


373 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


374 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


375 #unde‡
SIOCSPGRP


380 
	slögî


382 
	ml_⁄off
;

383 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


34 #ifde‡
__USE_MISC


35 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

39 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

891 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = \

892 (c⁄° *Ë(c⁄° *Ë(
s1
); \

893 
__ªsu…
 = \

894 
__s1
[0] - ((const *) \

895 (c⁄° *Ë(
s2
))[0]; \

896 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

898 
__ªsu…
 = (
__s1
[1] \

900 (c⁄° *Ë(
s2
))[1]); \

901 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

903 
__ªsu…
 = \

904 (
__s1
[2] - ((const *) \

905 (c⁄° *Ë(
s2
))[2]); \

906 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

907 
__ªsu…
 = \

908 (
__s1
[3] \

910 (c⁄° *Ë(
s2
))[3]); \

913 
__ªsu…
; }))

	)

918 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


919 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

920 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

921 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

922 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

923 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

924 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

925 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

931 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


932 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


933 #i‡
__GNUC_PREREQ
 (3, 2)

934 
	#°rc•n
(
s
, 
ªje˘
) \

935 
__exãnsi⁄__
 \

936 ({ 
__r0
, 
__r1
, 
__r2
; \

937 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

938 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

939 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

940 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

941 ? 
	`°æí
 (
s
) \

942 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

943 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

944 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

945 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

946 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

947 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

948 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

951 
	#°rc•n
(
s
, 
ªje˘
) \

952 
__exãnsi⁄__
 \

953 ({ 
__r0
, 
__r1
, 
__r2
; \

954 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

955 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

956 ? 
	`°æí
 (
s
) \

957 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

958 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

959 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

960 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

961 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

962 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

963 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

968 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

972 
size_t
 
__ªsu…
 = 0;

973 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

974 ++
__ªsu…
;

975  
__ªsu…
;

976 
	}
}

978 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

979 
__ªje˘2
);

980 
__STRING_INLINE
 
size_t


981 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

983 
size_t
 
__ªsu…
 = 0;

984 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


985 && 
__s
[
__ªsu…
] !
__ªje˘2
)

986 ++
__ªsu…
;

987  
__ªsu…
;

988 
	}
}

990 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

991 
__ªje˘2
, 
__ªje˘3
);

992 
__STRING_INLINE
 
size_t


993 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

994 
__ªje˘3
)

996 
size_t
 
__ªsu…
 = 0;

997 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


998 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

999 ++
__ªsu…
;

1000  
__ªsu…
;

1001 
	}
}

1007 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1008 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1009 #i‡
__GNUC_PREREQ
 (3, 2)

1010 
	#°r•n
(
s
, 
ac˚±
) \

1011 
__exãnsi⁄__
 \

1012 ({ 
__a0
, 
__a1
, 
__a2
; \

1013 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1014 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1015 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1016 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1017 ? ((Ë(
s
), (
size_t
) 0) \

1018 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1019 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1020 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1021 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1022 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1023 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1024 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1027 
	#°r•n
(
s
, 
ac˚±
) \

1028 
__exãnsi⁄__
 \

1029 ({ 
__a0
, 
__a1
, 
__a2
; \

1030 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1031 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1032 ? ((Ë(
s
), (
size_t
) 0) \

1033 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1034 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1035 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1036 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1037 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1038 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1039 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1045 
__STRING_INLINE
 
size_t


1046 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1048 
size_t
 
__ªsu…
 = 0;

1050 
__s
[
__ªsu…
] =
__ac˚±
)

1051 ++
__ªsu…
;

1052  
__ªsu…
;

1053 
	}
}

1055 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1056 
__ac˚±2
);

1057 
__STRING_INLINE
 
size_t


1058 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1060 
size_t
 
__ªsu…
 = 0;

1062 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1063 ++
__ªsu…
;

1064  
__ªsu…
;

1065 
	}
}

1067 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1068 
__ac˚±2
, 
__ac˚±3
);

1069 
__STRING_INLINE
 
size_t


1070 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1072 
size_t
 
__ªsu…
 = 0;

1074 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1075 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1076 ++
__ªsu…
;

1077  
__ªsu…
;

1078 
	}
}

1083 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1084 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1085 #i‡
__GNUC_PREREQ
 (3, 2)

1086 
	#°Ωbrk
(
s
, 
ac˚±
) \

1087 
__exãnsi⁄__
 \

1088 ({ 
__a0
, 
__a1
, 
__a2
; \

1089 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1090 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1091 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1092 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1093 ? ((Ë(
s
), (*Ë
NULL
) \

1094 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1095 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1096 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1097 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1098 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1099 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1100 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1103 
	#°Ωbrk
(
s
, 
ac˚±
) \

1104 
__exãnsi⁄__
 \

1105 ({ 
__a0
, 
__a1
, 
__a2
; \

1106 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1107 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1108 ? ((Ë(
s
), (*Ë
NULL
) \

1109 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1110 ? 
	`°rchr
 (
s
, 
__a0
) \

1111 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1112 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1113 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1114 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1115 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1120 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1121 
__ac˚±2
);

1122 
__STRING_INLINE
 *

1123 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1126 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1127 ++
__s
;

1128  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1129 
	}
}

1131 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1132 
__ac˚±2
, 
__ac˚±3
);

1133 
__STRING_INLINE
 *

1134 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1137 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1138 && *
__s
 !
__ac˚±3
)

1139 ++
__s
;

1140  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1141 
	}
}

1147 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1148 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1149 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1150 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1151 ? (*Ë(
size_t
Ë(
hay°ack
) \

1152 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1153 ? 
	`°rchr
 (
hay°ack
, \

1154 ((c⁄° *Ë(
√edÀ
))[0]) \

1155 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1156 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1160 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1161 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1162 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1163 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1164 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1165 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1166 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1167 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1170 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1171 
__STRING_INLINE
 *

1172 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1174 *
__ªsu…
;

1175 i‡(
__s
 =
NULL
)

1176 
__s
 = *
__√xç
;

1177 *
__s
 =
__£p
)

1178 ++
__s
;

1179 
__ªsu…
 = 
NULL
;

1180 i‡(*
__s
 != '\0')

1182 
__ªsu…
 = 
__s
++;

1183 *
__s
 != '\0')

1184 i‡(*
__s
++ =
__£p
)

1186 
__s
[-1] = '\0';

1190 *
__√xç
 = 
__s
;

1191  
__ªsu…
;

1192 
	}
}

1193 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1194 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1199 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1200 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1202 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1203 
	#__°r£p
(
s
, 
ªje˘
) \

1204 
__exãnsi⁄__
 \

1205 ({ 
__r0
, 
__r1
, 
__r2
; \

1206 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1207 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1208 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1209 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1210 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1211 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1212 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1213 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1214 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1215 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1216 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1217 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1220 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1221 
__STRING_INLINE
 *

1222 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1224 *
__ªtvÆ
 = *
__s
;

1225 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1226 *(*
__s
)++ = '\0';

1227  
__ªtvÆ
;

1228 
	}
}

1230 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1231 
__STRING_INLINE
 *

1232 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1234 *
__ªtvÆ
 = *
__s
;

1235 i‡(
__ªtvÆ
 !
NULL
)

1237 *
__˝
 = 
__ªtvÆ
;

1240 i‡(*
__˝
 == '\0')

1242 
__˝
 = 
NULL
;

1245 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1247 *
__˝
++ = '\0';

1250 ++
__˝
;

1252 *
__s
 = 
__˝
;

1254  
__ªtvÆ
;

1255 
	}
}

1257 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1258 
__ªje˘3
);

1259 
__STRING_INLINE
 *

1260 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1262 *
__ªtvÆ
 = *
__s
;

1263 i‡(
__ªtvÆ
 !
NULL
)

1265 *
__˝
 = 
__ªtvÆ
;

1268 i‡(*
__˝
 == '\0')

1270 
__˝
 = 
NULL
;

1273 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1275 *
__˝
++ = '\0';

1278 ++
__˝
;

1280 *
__s
 = 
__˝
;

1282  
__ªtvÆ
;

1283 
	}
}

1284 #ifde‡
__USE_BSD


1285 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1292 #ifde‡
__USE_MISC


1294 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1295 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1296 
	~<°dlib.h
>

1299 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1301 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1302 
	#__°rdup
(
s
) \

1303 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1304 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1305 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1306 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1307 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1308 i‡(
__ªtvÆ
 !
NULL
) \

1309 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1310 
__ªtvÆ
; 
	}
})) \

1311 : 
	`__°rdup
 (
s
)))

	)

1313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1314 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1318 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1320 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1321 
__THROW
 
__©åibuã_mÆloc__
;

1322 
	#__°∫dup
(
s
, 
n
) \

1323 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1324 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1325 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1326 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1327 
size_t
 
__n
 = (
n
); \

1328 *
__ªtvÆ
; \

1329 i‡(
__n
 < 
__Àn
) \

1330 
__Àn
 = 
__n
 + 1; \

1331 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1332 i‡(
__ªtvÆ
 !
NULL
) \

1334 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1335 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1336 
__Àn
 - 1); \

1338 
__ªtvÆ
; 
	}
})) \

1339 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1341 #ifde‡
__USE_GNU


1342 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1348 #i‚de‡
_FORCE_INLINES


1349 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/timerfd.h

18 #i‚def 
_SYS_TIMERFD_H


25 
	mTFD_CLOEXEC
 = 02000000,

26 
	#TFD_CLOEXEC
 
TFD_CLOEXEC


	)

27 
	mTFD_NONBLOCK
 = 00004000

28 
	#TFD_NONBLOCK
 
TFD_NONBLOCK


	)

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

45 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

54 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

60 
	m__vÆ
[2];

61 } 
	t__quad_t
;

64 
__u_l⁄g
 
	m__vÆ
[2];

65 } 
	t__u_quad_t
;

98 
	#__S16_TYPE
 

	)

99 
	#__U16_TYPE
 

	)

100 
	#__S32_TYPE
 

	)

101 
	#__U32_TYPE
 

	)

102 
	#__SLONGWORD_TYPE
 

	)

103 
	#__ULONGWORD_TYPE
 

	)

104 #i‡
__WORDSIZE
 == 32

105 
	#__SQUAD_TYPE
 
__quad_t


	)

106 
	#__UQUAD_TYPE
 
__u_quad_t


	)

107 
	#__SWORD_TYPE
 

	)

108 
	#__UWORD_TYPE
 

	)

109 
	#__SLONG32_TYPE
 

	)

110 
	#__ULONG32_TYPE
 

	)

111 
	#__S64_TYPE
 
__quad_t


	)

112 
	#__U64_TYPE
 
__u_quad_t


	)

115 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

116 #ñi‡
__WORDSIZE
 == 64

117 
	t__SQUAD_TYPE
 

	)

118 
	t__UQUAD_TYPE
 

	)

119 
	t__SWORD_TYPE
 

	)

120 
	t__UWORD_TYPE
 

	)

121 
	t__SLONG32_TYPE
 

	)

122 
	t__ULONG32_TYPE
 

	)

123 
	t__S64_TYPE
 

	)

124 
	t__U64_TYPE
 

	)

126 
	t__STD_TYPE
 

	)

130 
	~<bôs/ty≥sizes.h
>

133 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

134 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

135 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

136 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

137 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

138 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

139 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

140 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

141 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

142 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

143 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

144 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

145 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

146 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

147 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

148 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

149 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

150 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

152 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

153 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

156 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

159 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

162 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

167 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

168 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

171 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

172 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

175 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

176 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

179 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

181 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

186 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

190 
__off64_t
 
	t__loff_t
;

191 
__quad_t
 *
	t__qaddr_t
;

192 *
	t__ˇddr_t
;

195 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

198 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

201 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

22 
	~<bôs/w‹dsize.h
>

24 #i‡
__WORDSIZE
 == 64

25 
	#__WCHAR_MIN
 (-2147483647 - 1)

	)

26 
	#__WCHAR_MAX
 (2147483647)

	)

28 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

29 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/ctype.h

23 #i‚def 
_CTYPE_H


24 
	#_CTYPE_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	g__BEGIN_DECLS


31 #i‚de‡
_ISbô


40 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

44 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

49 
	m_ISuµî
 = 
_ISbô
 (0),

50 
	m_ISlowî
 = 
_ISbô
 (1),

51 
	m_ISÆpha
 = 
_ISbô
 (2),

52 
	m_ISdigô
 = 
_ISbô
 (3),

53 
	m_ISxdigô
 = 
_ISbô
 (4),

54 
	m_IS•a˚
 = 
_ISbô
 (5),

55 
	m_IS¥öt
 = 
_ISbô
 (6),

56 
	m_ISgøph
 = 
_ISbô
 (7),

57 
	m_ISbœnk
 = 
_ISbô
 (8),

58 
	m_IS˙ål
 = 
_ISbô
 (9),

59 
	m_ISpun˘
 = 
_ISbô
 (10),

60 
	m_ISÆnum
 = 
_ISbô
 (11)

80 c⁄° **
	$__˘y≥_b_loc
 ()

81 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

82 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

83 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

84 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

85 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

88 #i‚de‡
__˝lu•lus


89 
	#__is˘y≥
(
c
, 
ty≥
) \

90 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 #ñi‡
deföed
 
__USE_EXTERN_INLINES


92 
	#__is˘y≥_f
(
ty≥
) \

93 
__exã∫_ölöe
 \

94 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

96  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

97 
	}

	)
}

100 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

101 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

103 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

105 
__BEGIN_NAMESPACE_STD


111 
__ex˘y≥
 (
iß um
);

112 
__ex˘y≥
 (
ißÕha
);

113 
__ex˘y≥
 (
is˙ål
);

114 
__ex˘y≥
 (
isdigô
);

115 
__ex˘y≥
 (
i¶owî
);

116 
__ex˘y≥
 (
isgøph
);

117 
__ex˘y≥
 (
i•röt
);

118 
__ex˘y≥
 (
i•un˘
);

119 
__ex˘y≥
 (
is•a˚
);

120 
__ex˘y≥
 (
isuµî
);

121 
__ex˘y≥
 (
isxdigô
);

125 
	$tﬁowî
 (
__c
Ë
__THROW
;

128 
	$touµî
 (
__c
Ë
__THROW
;

130 
__END_NAMESPACE_STD


134 #ifdef 
__USE_ISOC99


135 
__BEGIN_NAMESPACE_C99


137 
	`__ex˘y≥
 (
isbœnk
);

139 
__END_NAMESPACE_C99


142 #ifde‡
__USE_GNU


144 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

147 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	$ißscii
 (
__c
Ë
__THROW
;

155 
	$tﬂscii
 (
__c
Ë
__THROW
;

159 
	`__ex˘y≥
 (
_touµî
);

160 
	`__ex˘y≥
 (
_tﬁowî
);

164 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

165 (
__exãnsi⁄__
 \

166 ({ 
__ªs
; \

167 i‡( (
c
) > 1) \

169 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

171 
__c
 = (
c
); \

172 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

175 
__ªs
 = 
f
 
¨gs
; \

178 
__ªs
 = (
a
)[(Ë(
c
)]; \

179 
__ªs
; 
	}
}))

	)

181 #i‡!
deföed
 
__NO_CTYPE


182 #ifde‡
__is˘y≥_f


183 
	$__is˘y≥_f
 (
Ænum
)

184 
	$__is˘y≥_f
 (
Æpha
)

185 
	$__is˘y≥_f
 (
˙ål
)

186 
	$__is˘y≥_f
 (
digô
)

187 
	$__is˘y≥_f
 (
lowî
)

188 
	$__is˘y≥_f
 (
gøph
)

189 
	$__is˘y≥_f
 (
¥öt
)

190 
	$__is˘y≥_f
 (
pun˘
)

191 
	$__is˘y≥_f
 (
•a˚
)

192 
	$__is˘y≥_f
 (
uµî
)

193 
	$__is˘y≥_f
 (
xdigô
)

194 #ifde‡
__USE_ISOC99


195 
	$__is˘y≥_f
 (
bœnk
)

197 #ñi‡
deföed
 
__is˘y≥


198 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

199 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

200 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

201 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

202 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

203 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

204 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

205 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

206 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

207 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

208 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

209 #ifde‡
__USE_ISOC99


210 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

214 #ifde‡
__USE_EXTERN_INLINES


215 
__exã∫_ölöe
 

216 
	`__NTH
 (
	$tﬁowî
 (
__c
))

218  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

219 
	}
}

221 
__exã∫_ölöe
 

222 
__NTH
 (
	$touµî
 (
__c
))

224  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

225 
	}
}

228 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


229 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

230 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

233 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

235 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

237 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

238 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

244 #ifde‡
__USE_XOPEN2K8


258 
	~<xloˇÀ.h
>

262 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

263 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

265 
	#__ex˘y≥_l
(
«me
) \

266 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

272 
__ex˘y≥_l
 (
iß um_l
);

273 
__ex˘y≥_l
 (
ißÕha_l
);

274 
__ex˘y≥_l
 (
is˙ål_l
);

275 
__ex˘y≥_l
 (
isdigô_l
);

276 
__ex˘y≥_l
 (
i¶owî_l
);

277 
__ex˘y≥_l
 (
isgøph_l
);

278 
__ex˘y≥_l
 (
i•röt_l
);

279 
__ex˘y≥_l
 (
i•un˘_l
);

280 
__ex˘y≥_l
 (
is•a˚_l
);

281 
__ex˘y≥_l
 (
isuµî_l
);

282 
__ex˘y≥_l
 (
isxdigô_l
);

284 
__ex˘y≥_l
 (
isbœnk_l
);

288 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

289 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

295 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


296 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

297 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

298 
	#__touµî_l
(
c
, 
loˇÀ
) \

299 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

300 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

301 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

305 #i‚de‡
__NO_CTYPE


306 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

307 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

308 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

309 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

310 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

311 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

312 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

313 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

314 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

315 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

316 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

318 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

320 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


321 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

322 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

325 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

326 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

327 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

328 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

329 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

330 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

331 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

332 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

333 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

334 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

335 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

337 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

339 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


340 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

341 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

348 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

133 
	#__USE_ANSI
 1

	)

142 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


143 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

144 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

146 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

151 #i‡
deföed
 
_BSD_SOURCE
 && \

152 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

153 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

154 
	#__FAVOR_BSD
 1

	)

158 #ifde‡
_GNU_SOURCE


159 #unde‡
_ISOC95_SOURCE


160 
	#_ISOC95_SOURCE
 1

	)

161 #unde‡
_ISOC99_SOURCE


162 
	#_ISOC99_SOURCE
 1

	)

163 #unde‡
_ISOC11_SOURCE


164 
	#_ISOC11_SOURCE
 1

	)

165 #unde‡
_POSIX_SOURCE


166 
	#_POSIX_SOURCE
 1

	)

167 #unde‡
_POSIX_C_SOURCE


168 
	#_POSIX_C_SOURCE
 200809L

	)

169 #unde‡
_XOPEN_SOURCE


170 
	#_XOPEN_SOURCE
 700

	)

171 #unde‡
_XOPEN_SOURCE_EXTENDED


172 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

173 #unde‡
_LARGEFILE64_SOURCE


174 
	#_LARGEFILE64_SOURCE
 1

	)

175 #unde‡
_BSD_SOURCE


176 
	#_BSD_SOURCE
 1

	)

177 #unde‡
_SVID_SOURCE


178 
	#_SVID_SOURCE
 1

	)

179 #unde‡
_ATFILE_SOURCE


180 
	#_ATFILE_SOURCE
 1

	)

185 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

186 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

187 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

188 
	#_BSD_SOURCE
 1

	)

189 
	#_SVID_SOURCE
 1

	)

193 #i‡(
deföed
 
_ISOC11_SOURCE
 \

194 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

195 
	#__USE_ISOC11
 1

	)

199 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

200 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

201 
	#__USE_ISOC99
 1

	)

205 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

206 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

207 
	#__USE_ISOC95
 1

	)

214 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

215 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

216 
	#__USE_ISOCXX11
 1

	)

221 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

222 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

223 
	#_POSIX_SOURCE
 1

	)

224 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

225 
	#_POSIX_C_SOURCE
 2

	)

226 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

227 
	#_POSIX_C_SOURCE
 199506L

	)

228 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

229 
	#_POSIX_C_SOURCE
 200112L

	)

231 
	#_POSIX_C_SOURCE
 200809L

	)

233 
	#__USE_POSIX_IMPLICITLY
 1

	)

236 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


237 
	#__USE_POSIX
 1

	)

240 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


241 
	#__USE_POSIX2
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

245 
	#__USE_POSIX199309
 1

	)

248 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

249 
	#__USE_POSIX199506
 1

	)

252 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

253 
	#__USE_XOPEN2K
 1

	)

254 #unde‡
__USE_ISOC95


255 
	#__USE_ISOC95
 1

	)

256 #unde‡
__USE_ISOC99


257 
	#__USE_ISOC99
 1

	)

260 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

261 
	#__USE_XOPEN2K8
 1

	)

262 #unde‡
_ATFILE_SOURCE


263 
	#_ATFILE_SOURCE
 1

	)

266 #ifdef 
_XOPEN_SOURCE


267 
	#__USE_XOPEN
 1

	)

268 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

269 
	#__USE_XOPEN_EXTENDED
 1

	)

270 
	#__USE_UNIX98
 1

	)

271 #unde‡
_LARGEFILE_SOURCE


272 
	#_LARGEFILE_SOURCE
 1

	)

273 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

274 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

275 
	#__USE_XOPEN2K8
 1

	)

276 
	#__USE_XOPEN2K8XSI
 1

	)

278 
	#__USE_XOPEN2K
 1

	)

279 
	#__USE_XOPEN2KXSI
 1

	)

280 #unde‡
__USE_ISOC95


281 
	#__USE_ISOC95
 1

	)

282 #unde‡
__USE_ISOC99


283 
	#__USE_ISOC99
 1

	)

286 #ifde‡
_XOPEN_SOURCE_EXTENDED


287 
	#__USE_XOPEN_EXTENDED
 1

	)

292 #ifde‡
_LARGEFILE_SOURCE


293 
	#__USE_LARGEFILE
 1

	)

296 #ifde‡
_LARGEFILE64_SOURCE


297 
	#__USE_LARGEFILE64
 1

	)

300 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

301 
	#__USE_FILE_OFFSET64
 1

	)

304 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


305 
	#__USE_MISC
 1

	)

308 #ifdef 
_BSD_SOURCE


309 
	#__USE_BSD
 1

	)

312 #ifdef 
_SVID_SOURCE


313 
	#__USE_SVID
 1

	)

316 #ifdef 
_ATFILE_SOURCE


317 
	#__USE_ATFILE
 1

	)

320 #ifdef 
_GNU_SOURCE


321 
	#__USE_GNU
 1

	)

324 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


325 
	#__USE_REENTRANT
 1

	)

328 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

329 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

330 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

331 #ñi‡!
__GNUC_PREREQ
 (4, 1)

332 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


333 #ñi‡
_FORTIFY_SOURCE
 > 1

334 
	#__USE_FORTIFY_LEVEL
 2

	)

336 
	#__USE_FORTIFY_LEVEL
 1

	)

339 #i‚de‡
__USE_FORTIFY_LEVEL


340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 17

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‡
deföed
 
__GNUC__
 \

366 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

367 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

368 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

369 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

373 #i‚de‡
__ASSEMBLER__


374 #i‚de‡
_SYS_CDEFS_H


375 
	~<sys/cdefs.h
>

380 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


381 
	#__USE_LARGEFILE
 1

	)

382 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

389 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

390 && 
deföed
 
	g__exã∫_ölöe


391 
	#__USE_EXTERN_INLINES
 1

	)

399 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_Âos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

36 
	#_IO_size_t
 
size_t


	)

37 
	#_IO_ssize_t
 
__ssize_t


	)

38 
	#_IO_off_t
 
__off_t


	)

39 
	#_IO_off64_t
 
__off64_t


	)

40 
	#_IO_pid_t
 
__pid_t


	)

41 
	#_IO_uid_t
 
__uid_t


	)

42 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

43 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

44 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

45 
	#_IO_va_li°
 
_G_va_li°


	)

46 
	#_IO_wöt_t
 
wöt_t


	)

49 
	#__√ed___va_li°


	)

50 
	~<°d¨g.h
>

51 #ifde‡
__GNUC_VA_LIST


52 #unde‡
_IO_va_li°


53 
	#_IO_va_li°
 
__gnuc_va_li°


	)

56 #i‚de‡
__P


57 
	~<sys/cdefs.h
>

60 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

62 #i‚de‡
EOF


63 
	#EOF
 (-1)

	)

65 #i‚de‡
NULL


66 #i‡
deföed
 
__GNUG__
 && \

67 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

68 
	#NULL
 (
__nuŒ
)

	)

70 #i‡!
deföed
(
__˝lu•lus
)

71 
	#NULL
 ((*)0)

	)

73 
	#NULL
 (0)

	)

78 
	#_IOS_INPUT
 1

	)

79 
	#_IOS_OUTPUT
 2

	)

80 
	#_IOS_ATEND
 4

	)

81 
	#_IOS_APPEND
 8

	)

82 
	#_IOS_TRUNC
 16

	)

83 
	#_IOS_NOCREATE
 32

	)

84 
	#_IOS_NOREPLACE
 64

	)

85 
	#_IOS_BIN
 128

	)

93 
	#_IO_MAGIC
 0xFBAD0000

	)

94 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

95 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

96 
	#_IO_USER_BUF
 1

	)

97 
	#_IO_UNBUFFERED
 2

	)

98 
	#_IO_NO_READS
 4

	)

99 
	#_IO_NO_WRITES
 8

	)

100 
	#_IO_EOF_SEEN
 0x10

	)

101 
	#_IO_ERR_SEEN
 0x20

	)

102 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

103 
	#_IO_LINKED
 0x80

	)

104 
	#_IO_IN_BACKUP
 0x100

	)

105 
	#_IO_LINE_BUF
 0x200

	)

106 
	#_IO_TIED_PUT_GET
 0x400

	)

107 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

108 
	#_IO_IS_APPENDING
 0x1000

	)

109 
	#_IO_IS_FILEBUF
 0x2000

	)

110 
	#_IO_BAD_SEEN
 0x4000

	)

111 
	#_IO_USER_LOCK
 0x8000

	)

113 
	#_IO_FLAGS2_MMAP
 1

	)

114 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

115 #ifde‡
_LIBC


116 
	#_IO_FLAGS2_FORTIFY
 4

	)

118 
	#_IO_FLAGS2_USER_WBUF
 8

	)

119 #ifde‡
_LIBC


120 
	#_IO_FLAGS2_SCANF_STD
 16

	)

121 
	#_IO_FLAGS2_NOCLOSE
 32

	)

122 
	#_IO_FLAGS2_CLOEXEC
 64

	)

126 
	#_IO_SKIPWS
 01

	)

127 
	#_IO_LEFT
 02

	)

128 
	#_IO_RIGHT
 04

	)

129 
	#_IO_INTERNAL
 010

	)

130 
	#_IO_DEC
 020

	)

131 
	#_IO_OCT
 040

	)

132 
	#_IO_HEX
 0100

	)

133 
	#_IO_SHOWBASE
 0200

	)

134 
	#_IO_SHOWPOINT
 0400

	)

135 
	#_IO_UPPERCASE
 01000

	)

136 
	#_IO_SHOWPOS
 02000

	)

137 
	#_IO_SCIENTIFIC
 04000

	)

138 
	#_IO_FIXED
 010000

	)

139 
	#_IO_UNITBUF
 020000

	)

140 
	#_IO_STDIO
 040000

	)

141 
	#_IO_DONT_CLOSE
 0100000

	)

142 
	#_IO_BOOLALPHA
 0200000

	)

145 
_IO_jump_t
; 
	g_IO_FILE
;

148 #ifde‡
_IO_MTSAFE_IO


149 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

150 
	~<bôs/°dio-lock.h
>

155 
	t_IO_lock_t
;

161 
	s_IO_m¨kî
 {

162 
_IO_m¨kî
 *
	m_√xt
;

163 
_IO_FILE
 *
	m_sbuf
;

167 
	m_pos
;

169 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

170 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

171 
	mpublic
:

172 
°ªamm¨kî
(
°ªambuf
 *
sb
);

173 ~
°ªamm¨kî
();

174 
ßvög
(Ë{  
	m_•os
 == -2; }

175 
dñè
(
°ªamm¨kî
&);

176 
dñè
();

181 
	e__codecvt_ªsu…


183 
	m__codecvt_ok
,

184 
	m__codecvt_∑πül
,

185 
	m__codecvt_îr‹
,

186 
	m__codecvt_noc⁄v


189 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


192 
	s_IO_codecvt


194 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

195 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

196 
	m__mb°©e_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 *,

199 c⁄° 
	mwch¨_t
 **, *,

201 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

202 
	m__mb°©e_t
 *, *,

204 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

205 
	m__mb°©e_t
 *,

207 c⁄° **, 
	mwch¨_t
 *,

208 
	mwch¨_t
 *, wchar_t **);

209 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

211 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

212 c⁄° *, c⁄° *, 
	m_IO_size_t
);

213 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

215 
_IO_ic⁄v_t
 
	m__cd_ö
;

216 
_IO_ic⁄v_t
 
	m__cd_out
;

220 
	s_IO_wide_d©a


222 
wch¨_t
 *
	m_IO_ªad_±r
;

223 
wch¨_t
 *
	m_IO_ªad_íd
;

224 
wch¨_t
 *
	m_IO_ªad_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_ba£
;

226 
wch¨_t
 *
	m_IO_wrôe_±r
;

227 
wch¨_t
 *
	m_IO_wrôe_íd
;

228 
wch¨_t
 *
	m_IO_buf_ba£
;

229 
wch¨_t
 *
	m_IO_buf_íd
;

231 
wch¨_t
 *
	m_IO_ßve_ba£
;

232 
wch¨_t
 *
	m_IO_backup_ba£
;

234 
wch¨_t
 *
	m_IO_ßve_íd
;

236 
__mb°©e_t
 
	m_IO_°©e
;

237 
__mb°©e_t
 
	m_IO_œ°_°©e
;

238 
_IO_codecvt
 
	m_codecvt
;

240 
wch¨_t
 
	m_sh‹tbuf
[1];

242 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

246 
	s_IO_FILE
 {

247 
	m_Êags
;

248 
	#_IO_fûe_Êags
 
_Êags


	)

252 * 
	m_IO_ªad_±r
;

253 * 
	m_IO_ªad_íd
;

254 * 
	m_IO_ªad_ba£
;

255 * 
	m_IO_wrôe_ba£
;

256 * 
	m_IO_wrôe_±r
;

257 * 
	m_IO_wrôe_íd
;

258 * 
	m_IO_buf_ba£
;

259 * 
	m_IO_buf_íd
;

261 *
	m_IO_ßve_ba£
;

262 *
	m_IO_backup_ba£
;

263 *
	m_IO_ßve_íd
;

265 
_IO_m¨kî
 *
	m_m¨kîs
;

267 
_IO_FILE
 *
	m_chaö
;

269 
	m_fûío
;

271 
	m_blksize
;

273 
	m_Êags2
;

275 
_IO_off_t
 
	m_ﬁd_off£t
;

277 
	#__HAVE_COLUMN


	)

279 
	m_cur_cﬁumn
;

280 sig√d 
	m_vèbÀ_off£t
;

281 
	m_sh‹tbuf
[1];

285 
_IO_lock_t
 *
	m_lock
;

286 #ifde‡
_IO_USE_OLD_IO_FILE


289 
	s_IO_FILE_com∂ëe


291 
_IO_FILE
 
	m_fûe
;

293 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

294 
_IO_off64_t
 
	m_off£t
;

295 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


297 
_IO_codecvt
 *
	m_codecvt
;

298 
_IO_wide_d©a
 *
	m_wide_d©a
;

299 
_IO_FILE
 *
	m_‰ìªs_li°
;

300 *
	m_‰ìªs_buf
;

301 
size_t
 
	m_‰ìªs_size
;

303 *
	m__∑d1
;

304 *
	m__∑d2
;

305 *
	m__∑d3
;

306 *
	m__∑d4
;

307 
size_t
 
	m__∑d5
;

309 
	m_mode
;

311 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

315 #i‚de‡
__˝lu•lus


316 
_IO_FILE
 
	t_IO_FILE
;

319 
	g_IO_FILE_∂us
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

323 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

324 #i‚de‡
_LIBC


325 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

326 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

327 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

329 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

331 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

339 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

347 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

348 
	tsize_t
 
	t__n
);

356 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

359 
	t__io_˛o£_‚
 (*
	t__cookõ
);

362 #ifde‡
_GNU_SOURCE


364 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

365 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

366 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

367 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

372 
__io_ªad_‚
 *
	mªad
;

373 
__io_wrôe_‚
 *
	mwrôe
;

374 
__io_£ek_‚
 *
	m£ek
;

375 
__io_˛o£_‚
 *
	m˛o£
;

376 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

377 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

379 
	g_IO_cookõ_fûe
;

382 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

383 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

387 #ifde‡
__˝lu•lus


391 
__undîÊow
 (
_IO_FILE
 *);

392 
__uÊow
 (
_IO_FILE
 *);

393 
__ovîÊow
 (
_IO_FILE
 *, );

394 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


395 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

397 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

400 #i‡ 
__GNUC__
 >= 3

401 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

403 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

406 
	#_IO_gëc_u∆ocked
(
_Â
) \

407 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

408 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

409 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

410 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

411 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

412 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

413 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

415 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

416 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

418 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


419 
	#_IO_gëwc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

421 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

422 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

423 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

424 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

425 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

426 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

427 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

428 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

429 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

432 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

433 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

435 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

436 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

437 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

438 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

440 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

443 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

444 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

446 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

448 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

450 #ifde‡
_IO_MTSAFE_IO


451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
) \

453 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

454 
	#_IO_fu∆ockfûe
(
_Â
) \

455 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

457 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

458 
	#_IO_Êockfûe
(
_Â
Ë

	)

459 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

460 
	#_IO_·rylockfûe
(
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

462 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

465 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

466 
_IO_va_li°
, *
__ª°ri˘
);

467 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

468 
_IO_va_li°
);

469 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

470 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

472 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

473 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

475 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

477 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


478 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

479 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

480 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

481 #i‡
__GNUC__
 >= 2

484 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


485 
	~<shlib-com∑t.h
>

486 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

487 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

488 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

489 c⁄° 
_IO_°dö_u£d
;

490 
wók_exã∫
 (
_IO_°dö_u£d
);

493 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


494 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

498 
	#_IO_fwide
(
__Â
, 
__mode
) \

499 ({ 
__ªsu…
 = (
__mode
); \

500 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

502 i‡((
__Â
)->
_mode
 == 0) \

504 (
__Â
)->
_mode
 = -1; \

505 
__ªsu…
 = (
__Â
)->
_mode
; \

507 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

508 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

510 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

511 
__ªsu…
; })

	)

514 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

515 
_IO_va_li°
, *
__ª°ri˘
);

516 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

517 
_IO_va_li°
);

518 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

519 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

522 #ifde‡
__LDBL_COMPAT


523 
	~<bôs/libio-ldbl.h
>

526 #ifde‡
__˝lu•lus


	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

26 
	mIFA_UNSPEC
,

27 
	mIFA_ADDRESS
,

28 
	mIFA_LOCAL
,

29 
	mIFA_LABEL
,

30 
	mIFA_BROADCAST
,

31 
	mIFA_ANYCAST
,

32 
	mIFA_CACHEINFO
,

33 
	mIFA_MULTICAST
,

34 
	mIFA_FLAGS
,

35 
	m__IFA_MAX
,

38 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

41 
	#IFA_F_SECONDARY
 0x01

	)

42 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

44 
	#IFA_F_NODAD
 0x02

	)

45 
	#IFA_F_OPTIMISTIC
 0x04

	)

46 
	#IFA_F_DADFAILED
 0x08

	)

47 
	#IFA_F_HOMEADDRESS
 0x10

	)

48 
	#IFA_F_DEPRECATED
 0x20

	)

49 
	#IFA_F_TENTATIVE
 0x40

	)

50 
	#IFA_F_PERMANENT
 0x80

	)

51 
	#IFA_F_MANAGETEMPADDR
 0x100

	)

52 
	#IFA_F_NOPREFIXROUTE
 0x200

	)

53 
	#IFA_F_MCAUTOJOIN
 0x400

	)

54 
	#IFA_F_STABLE_PRIVACY
 0x800

	)

56 
	siÁ_ˇcheöfo
 {

57 
__u32
 
	miÁ_¥e„ªd
;

58 
__u32
 
	miÁ_vÆid
;

59 
__u32
 
	mc°amp
;

60 
__u32
 
	mt°amp
;

64 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

65 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

39 #i‚de‡
__GENKSYMS__


40 
__u32
 
	mrx_noh™dÀr
;

45 
	sπ∆_lök_°©s64
 {

46 
__u64
 
	mrx_∑ckës
;

47 
__u64
 
	mtx_∑ckës
;

48 
__u64
 
	mrx_byãs
;

49 
__u64
 
	mtx_byãs
;

50 
__u64
 
	mrx_îr‹s
;

51 
__u64
 
	mtx_îr‹s
;

52 
__u64
 
	mrx_dr›≥d
;

53 
__u64
 
	mtx_dr›≥d
;

54 
__u64
 
	mmu…iˇ°
;

55 
__u64
 
	mcﬁlisi⁄s
;

58 
__u64
 
	mrx_Àngth_îr‹s
;

59 
__u64
 
	mrx_ovî_îr‹s
;

60 
__u64
 
	mrx_¸c_îr‹s
;

61 
__u64
 
	mrx_‰ame_îr‹s
;

62 
__u64
 
	mrx_fifo_îr‹s
;

63 
__u64
 
	mrx_mis£d_îr‹s
;

66 
__u64
 
	mtx_ab‹ãd_îr‹s
;

67 
__u64
 
	mtx_ˇºõr_îr‹s
;

68 
__u64
 
	mtx_fifo_îr‹s
;

69 
__u64
 
	mtx_hóπbót_îr‹s
;

70 
__u64
 
	mtx_wödow_îr‹s
;

73 
__u64
 
	mrx_com¥es£d
;

74 
__u64
 
	mtx_com¥es£d
;

76 #i‚de‡
__GENKSYMS__


77 
__u64
 
	mrx_noh™dÀr
;

82 
	sπ∆_lök_ifm≠
 {

83 
__u64
 
	mmem_°¨t
;

84 
__u64
 
	mmem_íd
;

85 
__u64
 
	mba£_addr
;

86 
__u16
 
	múq
;

87 
__u8
 
	mdma
;

88 
__u8
 
	mp‹t
;

110 
	mIFLA_UNSPEC
,

111 
	mIFLA_ADDRESS
,

112 
	mIFLA_BROADCAST
,

113 
	mIFLA_IFNAME
,

114 
	mIFLA_MTU
,

115 
	mIFLA_LINK
,

116 
	mIFLA_QDISC
,

117 
	mIFLA_STATS
,

118 
	mIFLA_COST
,

119 
	#IFLA_COST
 
IFLA_COST


	)

120 
	mIFLA_PRIORITY
,

121 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

122 
	mIFLA_MASTER
,

123 
	#IFLA_MASTER
 
IFLA_MASTER


	)

124 
	mIFLA_WIRELESS
,

125 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

126 
	mIFLA_PROTINFO
,

127 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

128 
	mIFLA_TXQLEN
,

129 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

130 
	mIFLA_MAP
,

131 
	#IFLA_MAP
 
IFLA_MAP


	)

132 
	mIFLA_WEIGHT
,

133 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

134 
	mIFLA_OPERSTATE
,

135 
	mIFLA_LINKMODE
,

136 
	mIFLA_LINKINFO
,

137 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

138 
	mIFLA_NET_NS_PID
,

139 
	mIFLA_IFALIAS
,

140 
	mIFLA_NUM_VF
,

141 
	mIFLA_VFINFO_LIST
,

142 
	mIFLA_STATS64
,

143 
	mIFLA_VF_PORTS
,

144 
	mIFLA_PORT_SELF
,

145 
	mIFLA_AF_SPEC
,

146 
	mIFLA_GROUP
,

147 
	mIFLA_NET_NS_FD
,

148 
	mIFLA_EXT_MASK
,

149 
	mIFLA_PROMISCUITY
,

150 
	#IFLA_PROMISCUITY
 
IFLA_PROMISCUITY


	)

151 
	mIFLA_NUM_TX_QUEUES
,

152 
	mIFLA_NUM_RX_QUEUES
,

153 
	mIFLA_CARRIER
,

154 
	mIFLA_PHYS_PORT_ID
,

155 
	mIFLA_CARRIER_CHANGES
,

156 
	mIFLA_PHYS_SWITCH_ID
,

157 
	mIFLA_LINK_NETNSID
,

158 
	mIFLA_PHYS_PORT_NAME
,

159 
	mIFLA_PROTO_DOWN
,

160 
	mIFLA_GSO_MAX_SEGS
,

161 
	mIFLA_GSO_MAX_SIZE
,

162 
	mIFLA_PAD
,

163 
	m__RH_RESERVED_IFLA_XDP
,

164 
	mIFLA_EVENT
,

165 
	mIFLA_NEW_NETNSID
,

166 
	mIFLA_IF_NETNSID
,

167 
	m__RH_RESERVED_IFLA_CARRIER_UP_COUNT
,

168 
	m__RH_RESERVED_IFLA_CARRIER_DOWN_COUNT
,

169 
	mIFLA_NEW_IFINDEX
,

170 
	m__IFLA_MAX


174 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

177 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

178 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

181 
	mIFLA_INET_UNSPEC
,

182 
	mIFLA_INET_CONF
,

183 
	m__IFLA_INET_MAX
,

186 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

219 
	mIFLA_INET6_UNSPEC
,

220 
	mIFLA_INET6_FLAGS
,

221 
	mIFLA_INET6_CONF
,

222 
	mIFLA_INET6_STATS
,

223 
	mIFLA_INET6_MCAST
,

224 
	mIFLA_INET6_CACHEINFO
,

225 
	mIFLA_INET6_ICMP6STATS
,

226 
	mIFLA_INET6_TOKEN
,

227 
	mIFLA_INET6_ADDR_GEN_MODE
,

228 
	m__IFLA_INET6_MAX


231 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

233 
	eö6_addr_gí_mode
 {

234 
	mIN6_ADDR_GEN_MODE_EUI64
,

235 
	mIN6_ADDR_GEN_MODE_NONE
,

236 
	mIN6_ADDR_GEN_MODE_STABLE_PRIVACY
,

237 
	mIN6_ADDR_GEN_MODE_RANDOM
,

243 
	mIFLA_BR_UNSPEC
,

244 
	mIFLA_BR_FORWARD_DELAY
,

245 
	mIFLA_BR_HELLO_TIME
,

246 
	mIFLA_BR_MAX_AGE
,

247 
	mIFLA_BR_AGEING_TIME
,

248 
	mIFLA_BR_STP_STATE
,

249 
	mIFLA_BR_PRIORITY
,

250 
	mIFLA_BR_VLAN_FILTERING
,

251 
	mIFLA_BR_VLAN_PROTOCOL
,

252 
	mIFLA_BR_GROUP_FWD_MASK
,

253 
	mIFLA_BR_ROOT_ID
,

254 
	mIFLA_BR_BRIDGE_ID
,

255 
	mIFLA_BR_ROOT_PORT
,

256 
	mIFLA_BR_ROOT_PATH_COST
,

257 
	mIFLA_BR_TOPOLOGY_CHANGE
,

258 
	mIFLA_BR_TOPOLOGY_CHANGE_DETECTED
,

259 
	mIFLA_BR_HELLO_TIMER
,

260 
	mIFLA_BR_TCN_TIMER
,

261 
	mIFLA_BR_TOPOLOGY_CHANGE_TIMER
,

262 
	mIFLA_BR_GC_TIMER
,

263 
	mIFLA_BR_GROUP_ADDR
,

264 
	mIFLA_BR_FDB_FLUSH
,

265 
	mIFLA_BR_MCAST_ROUTER
,

266 
	mIFLA_BR_MCAST_SNOOPING
,

267 
	mIFLA_BR_MCAST_QUERY_USE_IFADDR
,

268 
	mIFLA_BR_MCAST_QUERIER
,

269 
	mIFLA_BR_MCAST_HASH_ELASTICITY
,

270 
	mIFLA_BR_MCAST_HASH_MAX
,

271 
	mIFLA_BR_MCAST_LAST_MEMBER_CNT
,

272 
	mIFLA_BR_MCAST_STARTUP_QUERY_CNT
,

273 
	mIFLA_BR_MCAST_LAST_MEMBER_INTVL
,

274 
	mIFLA_BR_MCAST_MEMBERSHIP_INTVL
,

275 
	mIFLA_BR_MCAST_QUERIER_INTVL
,

276 
	mIFLA_BR_MCAST_QUERY_INTVL
,

277 
	mIFLA_BR_MCAST_QUERY_RESPONSE_INTVL
,

278 
	mIFLA_BR_MCAST_STARTUP_QUERY_INTVL
,

279 
	mIFLA_BR_NF_CALL_IPTABLES
,

280 
	mIFLA_BR_NF_CALL_IP6TABLES
,

281 
	mIFLA_BR_NF_CALL_ARPTABLES
,

282 
	mIFLA_BR_VLAN_DEFAULT_PVID
,

283 
	mIFLA_BR_PAD
,

284 
	mIFLA_BR_VLAN_STATS_ENABLED
,

285 
	mIFLA_BR_MCAST_STATS_ENABLED
,

286 
	mIFLA_BR_MCAST_IGMP_VERSION
,

287 
	mIFLA_BR_MCAST_MLD_VERSION
,

288 
	m__IFLA_BR_MAX
,

291 
	#IFLA_BR_MAX
 (
__IFLA_BR_MAX
 - 1)

	)

293 
	siÊa_bridge_id
 {

294 
__u8
 
	m¥io
[2];

295 
__u8
 
	maddr
[6];

299 
	mBRIDGE_MODE_UNSPEC
,

300 
	mBRIDGE_MODE_HAIRPIN
,

304 
	mIFLA_BRPORT_UNSPEC
,

305 
	mIFLA_BRPORT_STATE
,

306 
	mIFLA_BRPORT_PRIORITY
,

307 
	mIFLA_BRPORT_COST
,

308 
	mIFLA_BRPORT_MODE
,

309 
	mIFLA_BRPORT_GUARD
,

310 
	mIFLA_BRPORT_PROTECT
,

311 
	mIFLA_BRPORT_FAST_LEAVE
,

312 
	mIFLA_BRPORT_LEARNING
,

313 
	mIFLA_BRPORT_UNICAST_FLOOD
,

314 
	mIFLA_BRPORT_PROXYARP
,

315 
	mIFLA_BRPORT_LEARNING_SYNC
,

316 
	mIFLA_BRPORT_PROXYARP_WIFI
,

317 
	mIFLA_BRPORT_ROOT_ID
,

318 
	mIFLA_BRPORT_BRIDGE_ID
,

319 
	mIFLA_BRPORT_DESIGNATED_PORT
,

320 
	mIFLA_BRPORT_DESIGNATED_COST
,

321 
	mIFLA_BRPORT_ID
,

322 
	mIFLA_BRPORT_NO
,

323 
	mIFLA_BRPORT_TOPOLOGY_CHANGE_ACK
,

324 
	mIFLA_BRPORT_CONFIG_PENDING
,

325 
	mIFLA_BRPORT_MESSAGE_AGE_TIMER
,

326 
	mIFLA_BRPORT_FORWARD_DELAY_TIMER
,

327 
	mIFLA_BRPORT_HOLD_TIMER
,

328 
	mIFLA_BRPORT_FLUSH
,

329 
	mIFLA_BRPORT_MULTICAST_ROUTER
,

330 
	mIFLA_BRPORT_PAD
,

331 
	mIFLA_BRPORT_MCAST_FLOOD
,

332 
	mIFLA_BRPORT_MCAST_TO_UCAST
,

333 
	mIFLA_BRPORT_VLAN_TUNNEL
,

334 
	mIFLA_BRPORT_BCAST_FLOOD
,

335 
	m__IFLA_BRPORT_MAX


337 
	#IFLA_BRPORT_MAX
 (
__IFLA_BRPORT_MAX
 - 1)

	)

339 
	siÊa_ˇcheöfo
 {

340 
__u32
 
	mmax_ªasm_Àn
;

341 
__u32
 
	mt°amp
;

342 
__u32
 
	mªachabÀ_time
;

343 
__u32
 
	mªå™s_time
;

347 
	mIFLA_INFO_UNSPEC
,

348 
	mIFLA_INFO_KIND
,

349 
	mIFLA_INFO_DATA
,

350 
	mIFLA_INFO_XSTATS
,

351 
	mIFLA_INFO_SLAVE_KIND
,

352 
	mIFLA_INFO_SLAVE_DATA
,

353 
	m__IFLA_INFO_MAX
,

356 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

361 
	mIFLA_VLAN_UNSPEC
,

362 
	mIFLA_VLAN_ID
,

363 
	mIFLA_VLAN_FLAGS
,

364 
	mIFLA_VLAN_EGRESS_QOS
,

365 
	mIFLA_VLAN_INGRESS_QOS
,

366 
	mIFLA_VLAN_PROTOCOL
,

367 
	m__IFLA_VLAN_MAX
,

370 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

372 
	siÊa_vœn_Êags
 {

373 
__u32
 
	mÊags
;

374 
__u32
 
	mmask
;

378 
	mIFLA_VLAN_QOS_UNSPEC
,

379 
	mIFLA_VLAN_QOS_MAPPING
,

380 
	m__IFLA_VLAN_QOS_MAX


383 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

385 
	siÊa_vœn_qos_m≠pög
 {

386 
__u32
 
	m‰om
;

387 
__u32
 
	mto
;

392 
	mIFLA_MACVLAN_UNSPEC
,

393 
	mIFLA_MACVLAN_MODE
,

394 
	mIFLA_MACVLAN_FLAGS
,

395 
	m__IFLA_MACVLAN_MAX
,

398 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

400 
	emacvœn_mode
 {

401 
	mMACVLAN_MODE_PRIVATE
 = 1,

402 
	mMACVLAN_MODE_VEPA
 = 2,

403 
	mMACVLAN_MODE_BRIDGE
 = 4,

404 
	mMACVLAN_MODE_PASSTHRU
 = 8,

407 
	#MACVLAN_FLAG_NOPROMISC
 1

	)

411 
	mIFLA_MACSEC_UNSPEC
,

412 
	mIFLA_MACSEC_SCI
,

413 
	mIFLA_MACSEC_PORT
,

414 
	mIFLA_MACSEC_ICV_LEN
,

415 
	mIFLA_MACSEC_CIPHER_SUITE
,

416 
	mIFLA_MACSEC_WINDOW
,

417 
	mIFLA_MACSEC_ENCODING_SA
,

418 
	mIFLA_MACSEC_ENCRYPT
,

419 
	mIFLA_MACSEC_PROTECT
,

420 
	mIFLA_MACSEC_INC_SCI
,

421 
	mIFLA_MACSEC_ES
,

422 
	mIFLA_MACSEC_SCB
,

423 
	mIFLA_MACSEC_REPLAY_PROTECT
,

424 
	mIFLA_MACSEC_VALIDATION
,

425 
	mIFLA_MACSEC_PAD
,

426 
	m__IFLA_MACSEC_MAX
,

429 
	#IFLA_MACSEC_MAX
 (
__IFLA_MACSEC_MAX
 - 1)

	)

431 
	emac£c_vÆid©i⁄_ty≥
 {

432 
	mMACSEC_VALIDATE_DISABLED
 = 0,

433 
	mMACSEC_VALIDATE_CHECK
 = 1,

434 
	mMACSEC_VALIDATE_STRICT
 = 2,

435 
	m__MACSEC_VALIDATE_END
,

436 
	mMACSEC_VALIDATE_MAX
 = 
__MACSEC_VALIDATE_END
 - 1,

441 
	mIFLA_VXLAN_UNSPEC
,

442 
	mIFLA_VXLAN_ID
,

443 
	mIFLA_VXLAN_GROUP
,

444 
	mIFLA_VXLAN_LINK
,

445 
	mIFLA_VXLAN_LOCAL
,

446 
	mIFLA_VXLAN_TTL
,

447 
	mIFLA_VXLAN_TOS
,

448 
	mIFLA_VXLAN_LEARNING
,

449 
	mIFLA_VXLAN_AGEING
,

450 
	mIFLA_VXLAN_LIMIT
,

451 
	mIFLA_VXLAN_PORT_RANGE
,

452 
	mIFLA_VXLAN_PROXY
,

453 
	mIFLA_VXLAN_RSC
,

454 
	mIFLA_VXLAN_L2MISS
,

455 
	mIFLA_VXLAN_L3MISS
,

456 
	mIFLA_VXLAN_PORT
,

457 
	mIFLA_VXLAN_GROUP6
,

458 
	mIFLA_VXLAN_LOCAL6
,

459 
	mIFLA_VXLAN_UDP_CSUM
,

460 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_TX
,

461 
	mIFLA_VXLAN_UDP_ZERO_CSUM6_RX
,

462 
	mIFLA_VXLAN_REMCSUM_TX
,

463 
	mIFLA_VXLAN_REMCSUM_RX
,

464 
	mIFLA_VXLAN_GBP
,

465 
	mIFLA_VXLAN_REMCSUM_NOPARTIAL
,

466 
	mIFLA_VXLAN_COLLECT_METADATA
,

467 
	mIFLA_VXLAN_LABEL
,

468 
	mIFLA_VXLAN_GPE
,

469 
	mIFLA_VXLAN_TTL_INHERIT
,

470 
	m__IFLA_VXLAN_MAX


472 
	#IFLA_VXLAN_MAX
 (
__IFLA_VXLAN_MAX
 - 1)

	)

474 
	siÊa_vxœn_p‹t_ønge
 {

475 
__be16
 
	mlow
;

476 
__be16
 
	mhigh
;

481 
	mIFLA_GENEVE_UNSPEC
,

482 
	mIFLA_GENEVE_ID
,

483 
	mIFLA_GENEVE_REMOTE
,

484 
	mIFLA_GENEVE_TTL
,

485 
	mIFLA_GENEVE_TOS
,

486 
	mIFLA_GENEVE_PORT
,

487 
	mIFLA_GENEVE_COLLECT_METADATA
,

488 
	mIFLA_GENEVE_REMOTE6
,

489 
	mIFLA_GENEVE_UDP_CSUM
,

490 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_TX
,

491 
	mIFLA_GENEVE_UDP_ZERO_CSUM6_RX
,

492 
	mIFLA_GENEVE_LABEL
,

493 
	m__IFLA_GENEVE_MAX


495 
	#IFLA_GENEVE_MAX
 (
__IFLA_GENEVE_MAX
 - 1)

	)

500 
	mIFLA_BOND_UNSPEC
,

501 
	mIFLA_BOND_MODE
,

502 
	mIFLA_BOND_ACTIVE_SLAVE
,

503 
	mIFLA_BOND_MIIMON
,

504 
	mIFLA_BOND_UPDELAY
,

505 
	mIFLA_BOND_DOWNDELAY
,

506 
	mIFLA_BOND_USE_CARRIER
,

507 
	mIFLA_BOND_ARP_INTERVAL
,

508 
	mIFLA_BOND_ARP_IP_TARGET
,

509 
	mIFLA_BOND_ARP_VALIDATE
,

510 
	mIFLA_BOND_ARP_ALL_TARGETS
,

511 
	mIFLA_BOND_PRIMARY
,

512 
	mIFLA_BOND_PRIMARY_RESELECT
,

513 
	mIFLA_BOND_FAIL_OVER_MAC
,

514 
	mIFLA_BOND_XMIT_HASH_POLICY
,

515 
	mIFLA_BOND_RESEND_IGMP
,

516 
	mIFLA_BOND_NUM_PEER_NOTIF
,

517 
	mIFLA_BOND_ALL_SLAVES_ACTIVE
,

518 
	mIFLA_BOND_MIN_LINKS
,

519 
	mIFLA_BOND_LP_INTERVAL
,

520 
	mIFLA_BOND_PACKETS_PER_SLAVE
,

521 
	mIFLA_BOND_AD_LACP_RATE
,

522 
	mIFLA_BOND_AD_SELECT
,

523 
	mIFLA_BOND_AD_INFO
,

524 
	mIFLA_BOND_AD_ACTOR_SYS_PRIO
,

525 
	mIFLA_BOND_AD_USER_PORT_KEY
,

526 
	mIFLA_BOND_AD_ACTOR_SYSTEM
,

527 
	mIFLA_BOND_TLB_DYNAMIC_LB
,

528 
	m__IFLA_BOND_MAX
,

531 
	#IFLA_BOND_MAX
 (
__IFLA_BOND_MAX
 - 1)

	)

534 
	mIFLA_BOND_AD_INFO_UNSPEC
,

535 
	mIFLA_BOND_AD_INFO_AGGREGATOR
,

536 
	mIFLA_BOND_AD_INFO_NUM_PORTS
,

537 
	mIFLA_BOND_AD_INFO_ACTOR_KEY
,

538 
	mIFLA_BOND_AD_INFO_PARTNER_KEY
,

539 
	mIFLA_BOND_AD_INFO_PARTNER_MAC
,

540 
	m__IFLA_BOND_AD_INFO_MAX
,

543 
	#IFLA_BOND_AD_INFO_MAX
 (
__IFLA_BOND_AD_INFO_MAX
 - 1)

	)

546 
	mIFLA_BOND_SLAVE_UNSPEC
,

547 
	mIFLA_BOND_SLAVE_STATE
,

548 
	mIFLA_BOND_SLAVE_MII_STATUS
,

549 
	mIFLA_BOND_SLAVE_LINK_FAILURE_COUNT
,

550 
	mIFLA_BOND_SLAVE_PERM_HWADDR
,

551 
	mIFLA_BOND_SLAVE_QUEUE_ID
,

552 
	mIFLA_BOND_SLAVE_AD_AGGREGATOR_ID
,

553 
	mIFLA_BOND_SLAVE_AD_ACTOR_OPER_PORT_STATE
,

554 
	mIFLA_BOND_SLAVE_AD_PARTNER_OPER_PORT_STATE
,

555 
	m__IFLA_BOND_SLAVE_MAX
,

558 
	#IFLA_BOND_SLAVE_MAX
 (
__IFLA_BOND_SLAVE_MAX
 - 1)

	)

563 
	mIFLA_VF_INFO_UNSPEC
,

564 
	mIFLA_VF_INFO
,

565 
	m__IFLA_VF_INFO_MAX
,

568 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

571 
	mIFLA_VF_UNSPEC
,

572 
	mIFLA_VF_MAC
,

573 
	mIFLA_VF_VLAN
,

574 
	mIFLA_VF_TX_RATE
,

575 
	mIFLA_VF_SPOOFCHK
,

576 
	mIFLA_VF_LINK_STATE
,

577 
	mIFLA_VF_RATE
,

578 
	mIFLA_VF_RSS_QUERY_EN
,

581 
	mIFLA_VF_STATS
,

582 
	mIFLA_VF_TRUST
,

583 
	mIFLA_VF_IB_NODE_GUID
,

584 
	mIFLA_VF_IB_PORT_GUID
,

585 
	mIFLA_VF_VLAN_LIST
,

586 
	m__IFLA_VF_MAX
,

589 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

591 
	siÊa_vf_mac
 {

592 
__u32
 
	mvf
;

593 
__u8
 
	mmac
[32];

596 
	siÊa_vf_vœn
 {

597 
__u32
 
	mvf
;

598 
__u32
 
	mvœn
;

599 
__u32
 
	mqos
;

603 
	mIFLA_VF_VLAN_INFO_UNSPEC
,

604 
	mIFLA_VF_VLAN_INFO
,

605 
	m__IFLA_VF_VLAN_INFO_MAX
,

608 
	#IFLA_VF_VLAN_INFO_MAX
 (
__IFLA_VF_VLAN_INFO_MAX
 - 1)

	)

609 
	#MAX_VLAN_LIST_LEN
 1

	)

611 
	siÊa_vf_vœn_öfo
 {

612 
__u32
 
	mvf
;

613 
__u32
 
	mvœn
;

614 
__u32
 
	mqos
;

615 
__be16
 
	mvœn_¥Ÿo
;

618 
	siÊa_vf_tx_øã
 {

619 
__u32
 
	mvf
;

620 
__u32
 
	møã
;

623 
	siÊa_vf_øã
 {

624 
__u32
 
	mvf
;

625 
__u32
 
	mmö_tx_øã
;

626 
__u32
 
	mmax_tx_øã
;

629 
	siÊa_vf_•oofchk
 {

630 
__u32
 
	mvf
;

631 
__u32
 
	m£âög
;

634 
	siÊa_vf_guid
 {

635 
__u32
 
	mvf
;

636 
__u64
 
	mguid
;

640 
	mIFLA_VF_LINK_STATE_AUTO
,

641 
	mIFLA_VF_LINK_STATE_ENABLE
,

642 
	mIFLA_VF_LINK_STATE_DISABLE
,

643 
	m__IFLA_VF_LINK_STATE_MAX
,

646 
	siÊa_vf_lök_°©e
 {

647 
__u32
 
	mvf
;

648 
__u32
 
	mlök_°©e
;

651 
	siÊa_vf_rss_quîy_í
 {

652 
__u32
 
	mvf
;

653 
__u32
 
	m£âög
;

657 
	mIFLA_VF_STATS_RX_PACKETS
,

658 
	mIFLA_VF_STATS_TX_PACKETS
,

659 
	mIFLA_VF_STATS_RX_BYTES
,

660 
	mIFLA_VF_STATS_TX_BYTES
,

661 
	mIFLA_VF_STATS_BROADCAST
,

662 
	mIFLA_VF_STATS_MULTICAST
,

663 
	mIFLA_VF_STATS_PAD
,

664 
	mIFLA_VF_STATS_RX_DROPPED
,

665 
	mIFLA_VF_STATS_TX_DROPPED
,

666 
	m__IFLA_VF_STATS_MAX
,

669 
	#IFLA_VF_STATS_MAX
 (
__IFLA_VF_STATS_MAX
 - 1)

	)

671 
	siÊa_vf_åu°
 {

672 
__u32
 
	mvf
;

673 
__u32
 
	m£âög
;

692 
	mIFLA_VF_PORT_UNSPEC
,

693 
	mIFLA_VF_PORT
,

694 
	m__IFLA_VF_PORT_MAX
,

697 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

700 
	mIFLA_PORT_UNSPEC
,

701 
	mIFLA_PORT_VF
,

702 
	mIFLA_PORT_PROFILE
,

703 
	mIFLA_PORT_VSI_TYPE
,

704 
	mIFLA_PORT_INSTANCE_UUID
,

705 
	mIFLA_PORT_HOST_UUID
,

706 
	mIFLA_PORT_REQUEST
,

707 
	mIFLA_PORT_RESPONSE
,

708 
	m__IFLA_PORT_MAX
,

711 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

713 
	#PORT_PROFILE_MAX
 40

	)

714 
	#PORT_UUID_MAX
 16

	)

715 
	#PORT_SELF_VF
 -1

	)

718 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

719 
	mPORT_REQUEST_PREASSOCIATE_RR
,

720 
	mPORT_REQUEST_ASSOCIATE
,

721 
	mPORT_REQUEST_DISASSOCIATE
,

725 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

726 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

727 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

728 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

729 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

730 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

731 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

733 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

734 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

735 
	mPORT_PROFILE_RESPONSE_INVALID
,

736 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

737 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

738 
	mPORT_PROFILE_RESPONSE_ERROR
,

741 
	siÊa_p‹t_vsi
 {

742 
__u8
 
	mvsi_mgr_id
;

743 
__u8
 
	mvsi_ty≥_id
[3];

744 
__u8
 
	mvsi_ty≥_vîsi⁄
;

745 
__u8
 
	m∑d
[3];

752 
	mIFLA_IPOIB_UNSPEC
,

753 
	mIFLA_IPOIB_PKEY
,

754 
	mIFLA_IPOIB_MODE
,

755 
	mIFLA_IPOIB_UMCAST
,

756 
	m__IFLA_IPOIB_MAX


760 
	mIPOIB_MODE_DATAGRAM
 = 0,

761 
	mIPOIB_MODE_CONNECTED
 = 1,

764 
	#IFLA_IPOIB_MAX
 (
__IFLA_IPOIB_MAX
 - 1)

	)

768 
	sif_°©s_msg
 {

769 
__u8
 
	mÁmûy
;

770 
__u8
 
	m∑d1
;

771 
__u16
 
	m∑d2
;

772 
__u32
 
	mifödex
;

773 
__u32
 
	mfûãr_mask
;

780 
	mIFLA_STATS_UNSPEC
,

781 
	mIFLA_STATS_LINK_64
,

782 
	mIFLA_STATS_LINK_XSTATS
,

783 
	mIFLA_STATS_LINK_XSTATS_SLAVE
,

784 
	mIFLA_STATS_LINK_OFFLOAD_XSTATS
,

785 
	m__IFLA_STATS_MAX
,

788 
	#IFLA_STATS_MAX
 (
__IFLA_STATS_MAX
 - 1)

	)

790 
	#IFLA_STATS_FILTER_BIT
(
ATTR
Ë(1 << (ATTR - 1))

	)

798 
	mLINK_XSTATS_TYPE_UNSPEC
,

799 
	mLINK_XSTATS_TYPE_BRIDGE
,

800 
	mLINK_XSTATS_TYPE_BOND
,

801 
	m__LINK_XSTATS_TYPE_MAX


803 
	#LINK_XSTATS_TYPE_MAX
 (
__LINK_XSTATS_TYPE_MAX
 - 1)

	)

807 
	mIFLA_OFFLOAD_XSTATS_UNSPEC
,

808 
	mIFLA_OFFLOAD_XSTATS_CPU_HIT
,

809 
	m__IFLA_OFFLOAD_XSTATS_MAX


811 
	#IFLA_OFFLOAD_XSTATS_MAX
 (
__IFLA_OFFLOAD_XSTATS_MAX
 - 1)

	)

814 
	mIFLA_EVENT_NONE
,

815 
	mIFLA_EVENT_REBOOT
,

816 
	mIFLA_EVENT_FEATURES
,

817 
	mIFLA_EVENT_BONDING_FAILOVER
,

818 
	mIFLA_EVENT_NOTIFY_PEERS
,

819 
	mIFLA_EVENT_IGMP_RESEND
,

820 
	mIFLA_EVENT_BONDING_OPTIONS
,

826 
	mIFLA_TUN_UNSPEC
,

827 
	mIFLA_TUN_OWNER
,

828 
	mIFLA_TUN_GROUP
,

829 
	mIFLA_TUN_TYPE
,

830 
	mIFLA_TUN_PI
,

831 
	mIFLA_TUN_VNET_HDR
,

832 
	mIFLA_TUN_PERSIST
,

833 
	mIFLA_TUN_MULTI_QUEUE
,

834 
	mIFLA_TUN_NUM_QUEUES
,

835 
	mIFLA_TUN_NUM_DISABLED_QUEUES
,

836 
	m__IFLA_TUN_MAX
,

839 
	#IFLA_TUN_MAX
 (
__IFLA_TUN_MAX
 - 1)

	)

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	mNDA_VLAN
,

24 
	mNDA_PORT
,

25 
	mNDA_VNI
,

26 
	mNDA_IFINDEX
,

27 
	mNDA_MASTER
,

28 
	mNDA_LINK_NETNSID
,

29 
	mNDA_SRC_VNI
,

30 
	m__NDA_MAX


33 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

39 
	#NTF_USE
 0x01

	)

40 
	#NTF_SELF
 0x02

	)

41 
	#NTF_MASTER
 0x04

	)

42 
	#NTF_PROXY
 0x08

	)

43 
	#NTF_EXT_LEARNED
 0x10

	)

44 
	#NTF_OFFLOADED
 0x20

	)

45 
	#NTF_ROUTER
 0x80

	)

51 
	#NUD_INCOMPLETE
 0x01

	)

52 
	#NUD_REACHABLE
 0x02

	)

53 
	#NUD_STALE
 0x04

	)

54 
	#NUD_DELAY
 0x08

	)

55 
	#NUD_PROBE
 0x10

	)

56 
	#NUD_FAILED
 0x20

	)

59 
	#NUD_NOARP
 0x40

	)

60 
	#NUD_PERMANENT
 0x80

	)

61 
	#NUD_NONE
 0x00

	)

68 
	snda_ˇcheöfo
 {

69 
__u32
 
	mndm_c⁄fúmed
;

70 
__u32
 
	mndm_u£d
;

71 
__u32
 
	mndm_upd©ed
;

72 
__u32
 
	mndm_ªf˙t
;

100 
	sndt_°©s
 {

101 
__u64
 
	mndts_Ælocs
;

102 
__u64
 
	mndts_de°roys
;

103 
__u64
 
	mndts_hash_grows
;

104 
__u64
 
	mndts_ªs_Áûed
;

105 
__u64
 
	mndts_lookups
;

106 
__u64
 
	mndts_hôs
;

107 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

108 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

109 
__u64
 
	mndts_≥riodic_gc_runs
;

110 
__u64
 
	mndts_f‹˚d_gc_runs
;

114 
	mNDTPA_UNSPEC
,

115 
	mNDTPA_IFINDEX
,

116 
	mNDTPA_REFCNT
,

117 
	mNDTPA_REACHABLE_TIME
,

118 
	mNDTPA_BASE_REACHABLE_TIME
,

119 
	mNDTPA_RETRANS_TIME
,

120 
	mNDTPA_GC_STALETIME
,

121 
	mNDTPA_DELAY_PROBE_TIME
,

122 
	mNDTPA_QUEUE_LEN
,

123 
	mNDTPA_APP_PROBES
,

124 
	mNDTPA_UCAST_PROBES
,

125 
	mNDTPA_MCAST_PROBES
,

126 
	mNDTPA_ANYCAST_DELAY
,

127 
	mNDTPA_PROXY_DELAY
,

128 
	mNDTPA_PROXY_QLEN
,

129 
	mNDTPA_LOCKTIME
,

130 
	mNDTPA_QUEUE_LENBYTES
,

131 
	m__RH_RESERVED_NDTPA_MCAST_REPROBES
,

132 
	mNDTPA_PAD
,

133 
	m__NDTPA_MAX


135 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

137 
	sndtmsg
 {

138 
__u8
 
	mndtm_Ámûy
;

139 
__u8
 
	mndtm_∑d1
;

140 
__u16
 
	mndtm_∑d2
;

143 
	sndt_c⁄fig
 {

144 
__u16
 
	mndtc_key_Àn
;

145 
__u16
 
	mndtc_íåy_size
;

146 
__u32
 
	mndtc_íåõs
;

147 
__u32
 
	mndtc_œ°_Êush
;

148 
__u32
 
	mndtc_œ°_ønd
;

149 
__u32
 
	mndtc_hash_∫d
;

150 
__u32
 
	mndtc_hash_mask
;

151 
__u32
 
	mndtc_hash_chaö_gc
;

152 
__u32
 
	mndtc_¥oxy_qÀn
;

156 
	mNDTA_UNSPEC
,

157 
	mNDTA_NAME
,

158 
	mNDTA_THRESH1
,

159 
	mNDTA_THRESH2
,

160 
	mNDTA_THRESH3
,

161 
	mNDTA_CONFIG
,

162 
	mNDTA_PARMS
,

163 
	mNDTA_STATS
,

164 
	mNDTA_GC_INTERVAL
,

165 
	mNDTA_PAD
,

166 
	m__NDTA_MAX


168 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

33 
	~<time.h
>

35 #i‚de‡
__pid_t_deföed


36 
__pid_t
 
	tpid_t
;

37 
	#__pid_t_deföed


	)

42 
	~<bôs/sched.h
>

44 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

47 
__BEGIN_DECLS


50 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

51 
__THROW
;

54 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

57 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

58 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

64 
	$sched_yõld
 (Ë
__THROW
;

67 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

70 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

73 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

76 #ifde‡
__USE_GNU


78 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

79 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

84 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

86 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

89 
˝u£ç
)

	)

90 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

91 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

93 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

94 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

95 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

96 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

98 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

99 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

100 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

101 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

102 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

103 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

105 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

106 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

107 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

108 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

109 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

111 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

112 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

113 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

117 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

118 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

121 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

122 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

125 
__END_DECLS


	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


42 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


43 
	#__LEAF
 , 
__Àaf__


	)

44 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

46 
	#__LEAF


	)

47 
	#__LEAF_ATTR


	)

55 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

56 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

57 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

58 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

60 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

61 
	#__THROW
 
	`throw
 ()

	)

62 
	#__THROWNL
 
	`throw
 ()

	)

63 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

65 
	#__THROW


	)

66 
	#__THROWNL


	)

67 
	#__NTH
(
f˘
Ë
	)
fct

73 
	#__ölöe


	)

75 
	#__THROW


	)

76 
	#__THROWNL


	)

77 
	#__NTH
(
f˘
Ë
	)
fct

83 
	#__P
(
¨gs
Ë
	)
args

84 
	#__PMT
(
¨gs
Ë
	)
args

89 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

90 
	#__STRING
(
x
Ë#x

	)

93 
	#__±r_t
 *

	)

94 
	#__l⁄g_doubÀ_t
 

	)

98 #ifdef 
__˝lu•lus


99 
	#__BEGIN_DECLS
 "C" {

	)

100 
	#__END_DECLS
 }

	)

102 
	#__BEGIN_DECLS


	)

103 
	#__END_DECLS


	)

112 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


113 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

114 
	#__END_NAMESPACE_STD
 }

	)

115 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

116 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

117 
	#__END_NAMESPACE_C99
 }

	)

118 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

123 
	#__BEGIN_NAMESPACE_STD


	)

124 
	#__END_NAMESPACE_STD


	)

125 
	#__USING_NAMESPACE_STD
(
«me
)

	)

126 
	#__BEGIN_NAMESPACE_C99


	)

127 
	#__END_NAMESPACE_C99


	)

128 
	#__USING_NAMESPACE_C99
(
«me
)

	)

133 #i‚de‡
__BOUNDED_POINTERS__


134 
	#__bounded


	)

135 
	#__unbounded


	)

136 
	#__±rvÆue


	)

141 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

142 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

144 #i‡
__GNUC_PREREQ
 (4,3)

145 
	#__w¨nde˛
(
«me
, 
msg
) \

146 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

147 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

148 
	#__îr‹de˛
(
«me
, 
msg
) \

149 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

151 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

152 
	#__w¨«âr
(
msg
)

	)

153 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 #i‡
__GNUC_PREREQ
 (2,97)

159 
	#__Êex¨r
 []

	)

161 #ifde‡
__GNUC__


162 
	#__Êex¨r
 [0]

	)

164 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

165 
	#__Êex¨r
 []

	)

168 
	#__Êex¨r
 [1]

	)

184 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

186 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

187 #ifde‡
__˝lu•lus


188 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

189 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

190 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

191 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

198 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

199 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

212 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

213 
	#__©åibuã__
(
xyz
Ë

	)

219 #i‡
__GNUC_PREREQ
 (2,96)

220 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

222 
	#__©åibuã_mÆloc__


	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 
	~<bôs/w‹dsize.h
>

394 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


395 
	#__LDBL_COMPAT
 1

	)

396 #ifde‡
__REDIRECT


397 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

398 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

399 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

400 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

401 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

402 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

403 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

404 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

405 
	#__LDBL_REDIR_DECL
(
«me
) \

406 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

407 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

409 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

410 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

413 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


414 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

415 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

416 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

417 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

418 
	#__LDBL_REDIR_DECL
(
«me
)

	)

419 #ifde‡
__REDIRECT


420 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

422 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__BEGIN_DECLS


31 
__exãnsi⁄__


32 
	$gnu_dev_maj‹
 (
__dev
)

33 
__THROW
 
__©åibuã_c⁄°__
;

34 
__exãnsi⁄__


35 
	$gnu_dev_mö‹
 (
__dev
)

36 
__THROW
 
__©åibuã_c⁄°__
;

37 
__exãnsi⁄__


38 
	$gnu_dev_makedev
 (
__maj‹
,

39 
__mö‹
)

40 
__THROW
 
__©åibuã_c⁄°__
;

42 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


43 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

44 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

46  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

47 
	}
}

49 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

50 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

52  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

53 
	}
}

55 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

56 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

58  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

59 | (((Ë(
__mö‹
 & ~0xff)) << 12)

60 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

61 
	}
}

63 
	g__END_DECLS


66 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

67 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

68 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_FILE_OFFSET64


132 #ifde‡
__USE_GNU


133 
	#F_OFD_GETLK
 36

	)

134 
	#F_OFD_SETLK
 37

	)

135 
	#F_OFD_SETLKW
 38

	)

139 #ifde‡
__USE_LARGEFILE64


140 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

143 #ifde‡
__USE_XOPEN2K8


144 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

145 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

146 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

149 #ifde‡
__USE_GNU


150 
	#O_DIRECT
 
__O_DIRECT


	)

151 
	#O_NOATIME
 
__O_NOATIME


	)

152 
	#O_PATH
 
__O_PATH


	)

153 
	#O_TMPFILE
 
__O_TMPFILE


	)

159 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


160 
	#O_DSYNC
 
__O_DSYNC


	)

161 #i‡
deföed
 
__O_RSYNC


162 
	#O_RSYNC
 
__O_RSYNC


	)

164 
	#O_RSYNC
 
O_SYNC


	)

169 
	#F_DUPFD
 0

	)

170 
	#F_GETFD
 1

	)

171 
	#F_SETFD
 2

	)

172 
	#F_GETFL
 3

	)

173 
	#F_SETFL
 4

	)

175 #i‚de‡
__F_SETOWN


176 
	#__F_SETOWN
 8

	)

177 
	#__F_GETOWN
 9

	)

180 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


181 
	#F_SETOWN
 
__F_SETOWN


	)

182 
	#F_GETOWN
 
__F_GETOWN


	)

185 #i‚de‡
__F_SETSIG


186 
	#__F_SETSIG
 10

	)

187 
	#__F_GETSIG
 11

	)

189 #i‚de‡
__F_SETOWN_EX


190 
	#__F_SETOWN_EX
 15

	)

191 
	#__F_GETOWN_EX
 16

	)

194 #ifde‡
__USE_GNU


195 
	#F_SETSIG
 
__F_SETSIG


	)

196 
	#F_GETSIG
 
__F_GETSIG


	)

197 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

198 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

201 #ifde‡
__USE_GNU


202 
	#F_SETLEASE
 1024

	)

203 
	#F_GETLEASE
 1025

	)

204 
	#F_NOTIFY
 1026

	)

205 
	#F_SETPIPE_SZ
 1031

	)

206 
	#F_GETPIPE_SZ
 1032

	)

208 #ifde‡
__USE_XOPEN2K8


209 
	#F_DUPFD_CLOEXEC
 1030

	)

214 
	#FD_CLOEXEC
 1

	)

216 #i‚de‡
F_RDLCK


218 
	#F_RDLCK
 0

	)

219 
	#F_WRLCK
 1

	)

220 
	#F_UNLCK
 2

	)

225 #i‚de‡
F_EXLCK


226 
	#F_EXLCK
 4

	)

227 
	#F_SHLCK
 8

	)

230 #ifde‡
__USE_BSD


232 
	#LOCK_SH
 1

	)

233 
	#LOCK_EX
 2

	)

234 
	#LOCK_NB
 4

	)

236 
	#LOCK_UN
 8

	)

239 #ifde‡
__USE_GNU


240 
	#LOCK_MAND
 32

	)

241 
	#LOCK_READ
 64

	)

242 
	#LOCK_WRITE
 128

	)

243 
	#LOCK_RW
 192

	)

246 #ifde‡
__USE_GNU


248 
	#DN_ACCESS
 0x00000001

	)

249 
	#DN_MODIFY
 0x00000002

	)

250 
	#DN_CREATE
 0x00000004

	)

251 
	#DN_DELETE
 0x00000008

	)

252 
	#DN_RENAME
 0x00000010

	)

253 
	#DN_ATTRIB
 0x00000020

	)

254 
	#DN_MULTISHOT
 0x80000000

	)

258 #ifde‡
__USE_GNU


260 
	e__pid_ty≥


262 
	mF_OWNER_TID
 = 0,

263 
	mF_OWNER_PID
,

264 
	mF_OWNER_PGRP
,

265 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


269 
	sf_ow√r_ex


271 
__pid_ty≥
 
	mty≥
;

272 
__pid_t
 
	mpid
;

278 #ifdef 
__USE_BSD


279 
	#FAPPEND
 
O_APPEND


	)

280 
	#FFSYNC
 
O_FSYNC


	)

281 
	#FASYNC
 
O_ASYNC


	)

282 
	#FNONBLOCK
 
O_NONBLOCK


	)

283 
	#FNDELAY
 
O_NDELAY


	)

286 #i‚de‡
__POSIX_FADV_DONTNEED


287 
	#__POSIX_FADV_DONTNEED
 4

	)

288 
	#__POSIX_FADV_NOREUSE
 5

	)

291 #ifde‡
__USE_XOPEN2K


292 
	#POSIX_FADV_NORMAL
 0

	)

293 
	#POSIX_FADV_RANDOM
 1

	)

294 
	#POSIX_FADV_SEQUENTIAL
 2

	)

295 
	#POSIX_FADV_WILLNEED
 3

	)

296 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

297 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

301 #ifde‡
__USE_GNU


303 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

306 
	#SYNC_FILE_RANGE_WRITE
 2

	)

309 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

314 
	#SPLICE_F_MOVE
 1

	)

315 
	#SPLICE_F_NONBLOCK
 2

	)

318 
	#SPLICE_F_MORE
 4

	)

319 
	#SPLICE_F_GIFT
 8

	)

323 
	~<löux/ÁŒoc.h
>

327 
	sfûe_h™dÀ


329 
	mh™dÀ_byãs
;

330 
	mh™dÀ_ty≥
;

332 
	mf_h™dÀ
[0];

336 
	#MAX_HANDLE_SZ
 128

	)

339 
	g__BEGIN_DECLS


341 #ifde‡
__USE_GNU


344 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

345 
__THROW
;

352 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

353 
__Êags
);

360 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

361 
size_t
 
__cou¡
, 
__Êags
);

367 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

368 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

369 
__Êags
);

375 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

376 
__Êags
);

382 #i‚de‡
__USE_FILE_OFFSET64


383 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

387 
__off64_t
 
__Àn
),

388 
ÁŒoˇã64
);

390 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

393 #ifde‡
__USE_LARGEFILE64


394 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

395 
__off64_t
 
__Àn
);

400 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

401 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

402 
__Êags
Ë
__THROW
;

408 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

409 
__Êags
);

413 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

32 #ifde‡
__USE_GNU


33 
	#SCHED_BATCH
 3

	)

34 
	#SCHED_IDLE
 5

	)

36 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

39 #ifde‡
__USE_GNU


41 
	#CSIGNAL
 0x000000f‡

	)

42 
	#CLONE_VM
 0x00000100

	)

43 
	#CLONE_FS
 0x00000200

	)

44 
	#CLONE_FILES
 0x00000400

	)

45 
	#CLONE_SIGHAND
 0x00000800

	)

46 
	#CLONE_PTRACE
 0x00002000

	)

47 
	#CLONE_VFORK
 0x00004000

	)

49 
	#CLONE_PARENT
 0x00008000

	)

51 
	#CLONE_THREAD
 0x00010000

	)

52 
	#CLONE_NEWNS
 0x00020000

	)

53 
	#CLONE_SYSVSEM
 0x00040000

	)

54 
	#CLONE_SETTLS
 0x00080000

	)

55 
	#CLONE_PARENT_SETTID
 0x00100000

	)

57 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

59 
	#CLONE_DETACHED
 0x00400000

	)

60 
	#CLONE_UNTRACED
 0x00800000

	)

62 
	#CLONE_CHILD_SETTID
 0x01000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 < 8 * (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 < 8 * (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 < 8 * (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && 
	tIS_IN
 (
	tlibc
)

48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/stddef.h

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

25 
	#SO_REUSEPORT
 15

	)

26 #i‚de‡
SO_PASSCRED


27 
	#SO_PASSCRED
 16

	)

28 
	#SO_PEERCRED
 17

	)

29 
	#SO_RCVLOWAT
 18

	)

30 
	#SO_SNDLOWAT
 19

	)

31 
	#SO_RCVTIMEO
 20

	)

32 
	#SO_SNDTIMEO
 21

	)

36 
	#SO_SECURITY_AUTHENTICATION
 22

	)

37 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

38 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

40 
	#SO_BINDTODEVICE
 25

	)

43 
	#SO_ATTACH_FILTER
 26

	)

44 
	#SO_DETACH_FILTER
 27

	)

45 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

68 
	#SO_WIFI_STATUS
 41

	)

69 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

70 
	#SO_PEEK_OFF
 42

	)

73 
	#SO_NOFCS
 43

	)

75 
	#SO_LOCK_FILTER
 44

	)

77 
	#SO_SELECT_ERR_QUEUE
 45

	)

79 
	#SO_BUSY_POLL
 46

	)

81 
	#SO_MAX_PACING_RATE
 47

	)

83 
	#SO_BPF_EXTENSIONS
 48

	)

85 
	#SCM_TIMESTAMPING_PKTINFO
 58

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/falloc.h

1 #i‚de‡
_FALLOC_H_


2 
	#_FALLOC_H_


	)

4 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

5 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

6 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

28 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

42 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

59 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

62 
	#FALLOC_FL_NTNX_PREALLOCATE
 0x80000000

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__HAVE_BUILTIN_BSWAP16__


49  
	`__buûtö_bsw≠16
(
vÆ
);

50 #ñi‡
	`deföed
 (
__¨ch_swab16
)

51  
	`__¨ch_swab16
(
vÆ
);

53  
	`___c⁄°™t_swab16
(
vÆ
);

55 
	}
}

57 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

59 #ifde‡
__HAVE_BUILTIN_BSWAP32__


60  
	`__buûtö_bsw≠32
(
vÆ
);

61 #ñi‡
	`deföed
(
__¨ch_swab32
)

62  
	`__¨ch_swab32
(
vÆ
);

64  
	`___c⁄°™t_swab32
(
vÆ
);

66 
	}
}

68 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

70 #ifde‡
__HAVE_BUILTIN_BSWAP64__


71  
	`__buûtö_bsw≠64
(
vÆ
);

72 #ñi‡
	`deföed
 (
__¨ch_swab64
)

73  
	`__¨ch_swab64
(
vÆ
);

74 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

75 
__u32
 
h
 = 
vÆ
 >> 32;

76 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

77  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

79  
	`___c⁄°™t_swab64
(
vÆ
);

81 
	}
}

83 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

85 #ifde‡
__¨ch_swahw32


86  
	`__¨ch_swahw32
(
vÆ
);

88  
	`___c⁄°™t_swahw32
(
vÆ
);

90 
	}
}

92 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

94 #ifde‡
__¨ch_swahb32


95  
	`__¨ch_swahb32
(
vÆ
);

97  
	`___c⁄°™t_swahb32
(
vÆ
);

99 
	}
}

105 
	#__swab16
(
x
) \

106 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

107 
	`___c⁄°™t_swab16
(
x
) : \

108 
	`__fswab16
(
x
))

	)

114 
	#__swab32
(
x
) \

115 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

116 
	`___c⁄°™t_swab32
(
x
) : \

117 
	`__fswab32
(
x
))

	)

123 
	#__swab64
(
x
) \

124 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

125 
	`___c⁄°™t_swab64
(
x
) : \

126 
	`__fswab64
(
x
))

	)

134 
	#__swahw32
(
x
) \

135 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

136 
	`___c⁄°™t_swahw32
(
x
) : \

137 
	`__fswahw32
(
x
))

	)

145 
	#__swahb32
(
x
) \

146 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

147 
	`___c⁄°™t_swahb32
(
x
) : \

148 
	`__fswahb32
(
x
))

	)

154 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

156 #ifde‡
__¨ch_swab16p


157  
	`__¨ch_swab16p
(
p
);

159  
	`__swab16
(*
p
);

161 
	}
}

167 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

169 #ifde‡
__¨ch_swab32p


170  
	`__¨ch_swab32p
(
p
);

172  
	`__swab32
(*
p
);

174 
	}
}

180 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

182 #ifde‡
__¨ch_swab64p


183  
	`__¨ch_swab64p
(
p
);

185  
	`__swab64
(*
p
);

187 
	}
}

195 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

197 #ifde‡
__¨ch_swahw32p


198  
	`__¨ch_swahw32p
(
p
);

200  
	`__swahw32
(*
p
);

202 
	}
}

210 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

212 #ifde‡
__¨ch_swahb32p


213  
	`__¨ch_swahb32p
(
p
);

215  
	`__swahb32
(*
p
);

217 
	}
}

223 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

225 #ifde‡
__¨ch_swab16s


226 
	`__¨ch_swab16s
(
p
);

228 *
p
 = 
	`__swab16p
(p);

230 
	}
}

235 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

237 #ifde‡
__¨ch_swab32s


238 
	`__¨ch_swab32s
(
p
);

240 *
p
 = 
	`__swab32p
(p);

242 
	}
}

248 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

250 #ifde‡
__¨ch_swab64s


251 
	`__¨ch_swab64s
(
p
);

253 *
p
 = 
	`__swab64p
(p);

255 
	}
}

263 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

265 #ifde‡
__¨ch_swahw32s


266 
	`__¨ch_swahw32s
(
p
);

268 *
p
 = 
	`__swahw32p
(p);

270 
	}
}

278 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

280 #ifde‡
__¨ch_swahb32s


281 
	`__¨ch_swahb32s
(
p
);

283 *
p
 = 
	`__swahb32p
(p);

285 
	}
}

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

10  
vÆ
;

11 
	}
}

12 
	#__¨ch_swab32
 
__¨ch_swab32


	)

14 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

16 #ifde‡
__i386__


19 
__u32
 
a
;

20 
__u32
 
b
;

21 } 
s
;

22 
__u64
 
u
;

23 } 
v
;

24 
v
.
u
 = 
vÆ
;

25 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

26 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

27 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

28  
v
.
u
;

30 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

31  
vÆ
;

33 
	}
}

34 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
226
6855
libibverbs-41mlnx1/examples/asyncwatch.c
libibverbs-41mlnx1/examples/cc_pingpong.c
libibverbs-41mlnx1/examples/cc_pingpong.h
libibverbs-41mlnx1/examples/dc.h
libibverbs-41mlnx1/examples/dcini.c
libibverbs-41mlnx1/examples/dctgt.c
libibverbs-41mlnx1/examples/device_list.c
libibverbs-41mlnx1/examples/devinfo.c
libibverbs-41mlnx1/examples/get_clock.c
libibverbs-41mlnx1/examples/get_clock.h
libibverbs-41mlnx1/examples/intf.c
libibverbs-41mlnx1/examples/pingpong.c
libibverbs-41mlnx1/examples/pingpong.h
libibverbs-41mlnx1/examples/polldcinfo.c
libibverbs-41mlnx1/examples/rc_pingpong.c
libibverbs-41mlnx1/examples/srq_pingpong.c
libibverbs-41mlnx1/examples/task_pingpong.c
libibverbs-41mlnx1/examples/uc_pingpong.c
libibverbs-41mlnx1/examples/ud_pingpong.c
libibverbs-41mlnx1/examples/umr_rc.c
libibverbs-41mlnx1/examples/xsrq_pingpong.c
libibverbs-41mlnx1/include/infiniband/arch.h
libibverbs-41mlnx1/include/infiniband/driver.h
libibverbs-41mlnx1/include/infiniband/driver_exp.h
libibverbs-41mlnx1/include/infiniband/kern-abi.h
libibverbs-41mlnx1/include/infiniband/kern-abi_exp.h
libibverbs-41mlnx1/include/infiniband/marshall.h
libibverbs-41mlnx1/include/infiniband/ofa_verbs.h
libibverbs-41mlnx1/include/infiniband/opcode.h
libibverbs-41mlnx1/include/infiniband/peer_ops.h
libibverbs-41mlnx1/include/infiniband/sa-kern-abi.h
libibverbs-41mlnx1/include/infiniband/sa.h
libibverbs-41mlnx1/include/infiniband/verbs.h
libibverbs-41mlnx1/include/infiniband/verbs_exp.h
libibverbs-41mlnx1/src/cmd.c
libibverbs-41mlnx1/src/cmd_exp.c
libibverbs-41mlnx1/src/compat-1_0.c
libibverbs-41mlnx1/src/device.c
libibverbs-41mlnx1/src/enum_strs.c
libibverbs-41mlnx1/src/ibverbs.h
libibverbs-41mlnx1/src/init.c
libibverbs-41mlnx1/src/marshall.c
libibverbs-41mlnx1/src/memory.c
libibverbs-41mlnx1/src/neigh.c
libibverbs-41mlnx1/src/neigh.h
libibverbs-41mlnx1/src/sysfs.c
libibverbs-41mlnx1/src/verbs.c
libibverbs-41mlnx1/util/util.h
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/byteswap.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/glob.h
/usr/include/ifaddrs.h
/usr/include/infiniband/arch.h
/usr/include/infiniband/driver.h
/usr/include/infiniband/driver_exp.h
/usr/include/infiniband/kern-abi.h
/usr/include/infiniband/kern-abi_exp.h
/usr/include/infiniband/marshall.h
/usr/include/infiniband/ofa_verbs.h
/usr/include/infiniband/sa-kern-abi.h
/usr/include/infiniband/sa.h
/usr/include/infiniband/verbs.h
/usr/include/infiniband/verbs_exp.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/ip.h
/usr/include/linux/netlink.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/types.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/net/if.h
/usr/include/net/if_packet.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/pthread.h
/usr/include/search.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/mman.h
/usr/include/sys/resource.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/timerfd.h
/usr/include/sys/types.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/asm/byteorder.h
/usr/include/asm/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/locale.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/timerfd.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/ctype.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_link.h
/usr/include/linux/kernel.h
/usr/include/linux/neighbour.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/socket_type.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/gnu/stubs.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/errno.h
/usr/include/linux/stddef.h
/usr/include/linux/sysinfo.h
/usr/include/stdc-predef.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/socket.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/falloc.h
/usr/include/linux/limits.h
/usr/include/linux/swab.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/sockios.h
/usr/include/asm/swab.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/sockios.h
